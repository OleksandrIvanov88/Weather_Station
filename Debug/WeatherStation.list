
WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001778  08013d10  08013d10  00023d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015488  08015488  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08015488  08015488  00025488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015490  08015490  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015490  08015490  00025490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015494  08015494  00025494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08015498  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006154  20000200  08015698  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006354  08015698  00036354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c6d5  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005436  00000000  00000000  0005c905  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002060  00000000  00000000  00061d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fb8  00000000  00000000  00063da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000295b6  00000000  00000000  00065d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c893  00000000  00000000  0008f30e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e45c0  00000000  00000000  000abba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00190161  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009aa0  00000000  00000000  001901dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013cf4 	.word	0x08013cf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	08013cf4 	.word	0x08013cf4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <blootuoth_int>:
/**
 *  Provides ring buffer initialization fro blootuoth.
 *  @context: should be used only one time before parcin_bt_command().
 */
void blootuoth_int(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000f4e:	af00      	add	r7, sp, #0
	uint8_t rx_buf_bt[BUF_SIZE_BT];
	/* Init RingBuffer_DMA object */
	RingBuffer_DMA_Init(&rx_bt, huart5.hdmarx, rx_buf_bt, sizeof(rx_buf_bt) / sizeof(rx_buf_bt[0]));
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <blootuoth_int+0x30>)
 8000f52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f54:	463a      	mov	r2, r7
 8000f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5a:	4808      	ldr	r0, [pc, #32]	; (8000f7c <blootuoth_int+0x34>)
 8000f5c:	f00a fade 	bl	800b51c <RingBuffer_DMA_Init>
	/* Start UART4 DMA Reception */
	HAL_UART_Receive_DMA(&huart5, rx_buf_bt, sizeof(rx_buf_bt) / sizeof(rx_buf_bt[0]));
 8000f60:	463b      	mov	r3, r7
 8000f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f66:	4619      	mov	r1, r3
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <blootuoth_int+0x30>)
 8000f6a:	f007 fc3d 	bl	80087e8 <HAL_UART_Receive_DMA>
}
 8000f6e:	bf00      	nop
 8000f70:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200061ec 	.word	0x200061ec
 8000f7c:	20001e14 	.word	0x20001e14

08000f80 <parcin_bt_command>:

/**
 *  Provides blootuoth commands parcing
 */
void parcin_bt_command(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	/* Check number of bytes in RingBuffer */
	uint32_t rx_count = RingBuffer_DMA_Count(&rx_bt);
 8000f86:	481a      	ldr	r0, [pc, #104]	; (8000ff0 <parcin_bt_command+0x70>)
 8000f88:	f00a fa6a 	bl	800b460 <RingBuffer_DMA_Count>
 8000f8c:	6078      	str	r0, [r7, #4]
	/* Process each byte individually */
	while (rx_count--) {
 8000f8e:	e026      	b.n	8000fde <parcin_bt_command+0x5e>
		char ch = (char) RingBuffer_DMA_GetByte(&rx_bt);
 8000f90:	4817      	ldr	r0, [pc, #92]	; (8000ff0 <parcin_bt_command+0x70>)
 8000f92:	f00a fa8c 	bl	800b4ae <RingBuffer_DMA_GetByte>
 8000f96:	4603      	mov	r3, r0
 8000f98:	70fb      	strb	r3, [r7, #3]
		switch (ch) {
 8000f9a:	78fb      	ldrb	r3, [r7, #3]
 8000f9c:	2b0a      	cmp	r3, #10
 8000f9e:	d002      	beq.n	8000fa6 <parcin_bt_command+0x26>
 8000fa0:	2b0d      	cmp	r3, #13
 8000fa2:	d10c      	bne.n	8000fbe <parcin_bt_command+0x3e>
		case '\r':
			continue;
 8000fa4:	e01b      	b.n	8000fde <parcin_bt_command+0x5e>
		case '\n':
			cmd_bt[cmd_i] = '\0';
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <parcin_bt_command+0x74>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <parcin_bt_command+0x78>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	54d1      	strb	r1, [r2, r3]
			cmd_i = 0;
 8000fb0:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <parcin_bt_command+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
			comand_handling(cmd_bt);
 8000fb6:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <parcin_bt_command+0x78>)
 8000fb8:	f000 f820 	bl	8000ffc <comand_handling>
			break;
 8000fbc:	e00f      	b.n	8000fde <parcin_bt_command+0x5e>
		default:
			cmd_bt[cmd_i++] = ch;
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <parcin_bt_command+0x74>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	490b      	ldr	r1, [pc, #44]	; (8000ff4 <parcin_bt_command+0x74>)
 8000fc6:	600a      	str	r2, [r1, #0]
 8000fc8:	490b      	ldr	r1, [pc, #44]	; (8000ff8 <parcin_bt_command+0x78>)
 8000fca:	78fa      	ldrb	r2, [r7, #3]
 8000fcc:	54ca      	strb	r2, [r1, r3]
			if (cmd_i >= sizeof(cmd_bt) / sizeof(cmd_bt[0])) {
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <parcin_bt_command+0x74>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8000fd4:	d902      	bls.n	8000fdc <parcin_bt_command+0x5c>
				cmd_i = 0;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <parcin_bt_command+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
			}
			break;
 8000fdc:	bf00      	nop
	while (rx_count--) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	607a      	str	r2, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1d3      	bne.n	8000f90 <parcin_bt_command+0x10>
		}
	}
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20001e14 	.word	0x20001e14
 8000ff4:	20001d38 	.word	0x20001d38
 8000ff8:	20001d3c 	.word	0x20001d3c

08000ffc <comand_handling>:
/**
 *  Provides processing of bluetooth commands
 *  @input: command for processing
 */
void comand_handling(char *input)
{
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 8001002:	af00      	add	r7, sp, #0
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	6018      	str	r0, [r3, #0]
	extern osMutexId_t mutex_sensorsHandle;
	extern osMutexId_t mutex_metarHandle;
	extern osMutexId_t mutex_tafHandle;
	uint8_t tx_buf[BUF_SIZE_BT];
	char cmd_1[CMD_SIZE / 2] = { 0 };
 8001008:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800100c:	4618      	mov	r0, r3
 800100e:	2340      	movs	r3, #64	; 0x40
 8001010:	461a      	mov	r2, r3
 8001012:	2100      	movs	r1, #0
 8001014:	f00d fe3d 	bl	800ec92 <memset>
	char cmd_2[CMD_SIZE / 2] = { 0 };
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4618      	mov	r0, r3
 800101e:	2340      	movs	r3, #64	; 0x40
 8001020:	461a      	mov	r2, r3
 8001022:	2100      	movs	r1, #0
 8001024:	f00d fe35 	bl	800ec92 <memset>
	uint8_t cmd_amount = sscanf(input, "%s %63s", cmd_1, cmd_2);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001030:	1d38      	adds	r0, r7, #4
 8001032:	4959      	ldr	r1, [pc, #356]	; (8001198 <comand_handling+0x19c>)
 8001034:	6800      	ldr	r0, [r0, #0]
 8001036:	f00e fbdf 	bl	800f7f8 <siscanf>
 800103a:	4603      	mov	r3, r0
 800103c:	f887 348f 	strb.w	r3, [r7, #1167]	; 0x48f
	if (cmd_amount == 2) {
 8001040:	f897 348f 	ldrb.w	r3, [r7, #1167]	; 0x48f
 8001044:	2b02      	cmp	r3, #2
 8001046:	d12b      	bne.n	80010a0 <comand_handling+0xa4>
		if (!strcmp(cmd_1, "bmp280")) {
 8001048:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800104c:	4953      	ldr	r1, [pc, #332]	; (800119c <comand_handling+0x1a0>)
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff f8de 	bl	8000210 <strcmp>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d118      	bne.n	800108c <comand_handling+0x90>
			if (osMutexAcquire(mutex_sensorsHandle,osWaitForever) == osOK) {
 800105a:	4b51      	ldr	r3, [pc, #324]	; (80011a0 <comand_handling+0x1a4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f04f 31ff 	mov.w	r1, #4294967295
 8001062:	4618      	mov	r0, r3
 8001064:	f00a fc92 	bl	800b98c <osMutexAcquire>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	f040 8081 	bne.w	8001172 <comand_handling+0x176>
				bt_display_bmp(cmd_2, tx_buf);
 8001070:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f8a6 	bl	80011cc <bt_display_bmp>
				osMutexRelease(mutex_sensorsHandle);
 8001080:	4b47      	ldr	r3, [pc, #284]	; (80011a0 <comand_handling+0x1a4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f00a fcdf 	bl	800ba48 <osMutexRelease>
 800108a:	e072      	b.n	8001172 <comand_handling+0x176>
			}
		} else {
			snprintf((char*) tx_buf, BUF_SIZE_BT, "Unknown command\r\n");
 800108c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001090:	4a44      	ldr	r2, [pc, #272]	; (80011a4 <comand_handling+0x1a8>)
 8001092:	461c      	mov	r4, r3
 8001094:	4615      	mov	r5, r2
 8001096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109a:	682b      	ldr	r3, [r5, #0]
 800109c:	8023      	strh	r3, [r4, #0]
 800109e:	e068      	b.n	8001172 <comand_handling+0x176>
		}
	} else if (!strcmp(cmd_1, "metar") || !strcmp(cmd_1, "Metar") || !strcmp(cmd_1, "METAR")){
 80010a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010a4:	4940      	ldr	r1, [pc, #256]	; (80011a8 <comand_handling+0x1ac>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f8b2 	bl	8000210 <strcmp>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d011      	beq.n	80010d6 <comand_handling+0xda>
 80010b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b6:	493d      	ldr	r1, [pc, #244]	; (80011ac <comand_handling+0x1b0>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f8a9 	bl	8000210 <strcmp>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d008      	beq.n	80010d6 <comand_handling+0xda>
 80010c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010c8:	4939      	ldr	r1, [pc, #228]	; (80011b0 <comand_handling+0x1b4>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff f8a0 	bl	8000210 <strcmp>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d114      	bne.n	8001100 <comand_handling+0x104>

		if(osMutexAcquire( mutex_metarHandle, osWaitForever) == osOK) {
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <comand_handling+0x1b8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f04f 31ff 	mov.w	r1, #4294967295
 80010de:	4618      	mov	r0, r3
 80010e0:	f00a fc54 	bl	800b98c <osMutexAcquire>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d143      	bne.n	8001172 <comand_handling+0x176>
			bt_diplay_metar(tx_buf);
 80010ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f93a 	bl	8001368 <bt_diplay_metar>
			osMutexRelease( mutex_metarHandle);
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <comand_handling+0x1b8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00a fca5 	bl	800ba48 <osMutexRelease>
		if(osMutexAcquire( mutex_metarHandle, osWaitForever) == osOK) {
 80010fe:	e038      	b.n	8001172 <comand_handling+0x176>
		}
	} else if(!strcmp(cmd_1, "taf") || !strcmp(cmd_1, "Taf") || !strcmp(cmd_1, "TAF")){
 8001100:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001104:	492c      	ldr	r1, [pc, #176]	; (80011b8 <comand_handling+0x1bc>)
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f882 	bl	8000210 <strcmp>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d011      	beq.n	8001136 <comand_handling+0x13a>
 8001112:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001116:	4929      	ldr	r1, [pc, #164]	; (80011bc <comand_handling+0x1c0>)
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f879 	bl	8000210 <strcmp>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <comand_handling+0x13a>
 8001124:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001128:	4925      	ldr	r1, [pc, #148]	; (80011c0 <comand_handling+0x1c4>)
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f870 	bl	8000210 <strcmp>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d114      	bne.n	8001160 <comand_handling+0x164>
		if (osMutexAcquire(mutex_tafHandle, osWaitForever) == osOK) {
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <comand_handling+0x1c8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f04f 31ff 	mov.w	r1, #4294967295
 800113e:	4618      	mov	r0, r3
 8001140:	f00a fc24 	bl	800b98c <osMutexAcquire>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d113      	bne.n	8001172 <comand_handling+0x176>
			bt_diplay_taf(tx_buf);
 800114a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f932 	bl	80013b8 <bt_diplay_taf>
			osMutexRelease(mutex_tafHandle);
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <comand_handling+0x1c8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f00a fc75 	bl	800ba48 <osMutexRelease>
		if (osMutexAcquire(mutex_tafHandle, osWaitForever) == osOK) {
 800115e:	e008      	b.n	8001172 <comand_handling+0x176>
		}
	} else {
		snprintf((char*) tx_buf, BUF_SIZE_BT, "Unknown command\r\n");
 8001160:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001164:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <comand_handling+0x1a8>)
 8001166:	461c      	mov	r4, r3
 8001168:	4615      	mov	r5, r2
 800116a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116e:	682b      	ldr	r3, [r5, #0]
 8001170:	8023      	strh	r3, [r4, #0]
	}
	HAL_UART_Transmit(&huart5, tx_buf, strlen((char*) tx_buf), 1000);
 8001172:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f854 	bl	8000224 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001188:	480f      	ldr	r0, [pc, #60]	; (80011c8 <comand_handling+0x1cc>)
 800118a:	f007 fa94 	bl	80086b6 <HAL_UART_Transmit>
}
 800118e:	bf00      	nop
 8001190:	f507 6792 	add.w	r7, r7, #1168	; 0x490
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	08013d10 	.word	0x08013d10
 800119c:	08013d18 	.word	0x08013d18
 80011a0:	20006088 	.word	0x20006088
 80011a4:	08013d20 	.word	0x08013d20
 80011a8:	08013d34 	.word	0x08013d34
 80011ac:	08013d3c 	.word	0x08013d3c
 80011b0:	08013d44 	.word	0x08013d44
 80011b4:	2000608c 	.word	0x2000608c
 80011b8:	08013d4c 	.word	0x08013d4c
 80011bc:	08013d50 	.word	0x08013d50
 80011c0:	08013d54 	.word	0x08013d54
 80011c4:	20006098 	.word	0x20006098
 80011c8:	200061ec 	.word	0x200061ec

080011cc <bt_display_bmp>:
 *  Processing bluetooth command's sensor argument and save sensors data to tx_buf
 *  @cmd_2: sensors' command argument
 *  @tx_buf: buffer for saving sensors data
 */
void bt_display_bmp(char* cmd_2, uint8_t* tx_buf)
{
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af06      	add	r7, sp, #24
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
	if (!strcmp(cmd_2, "temp")) {
 80011d6:	4955      	ldr	r1, [pc, #340]	; (800132c <bt_display_bmp+0x160>)
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff f819 	bl	8000210 <strcmp>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10b      	bne.n	80011fc <bt_display_bmp+0x30>
		snprintf((char*) tx_buf, BUF_SIZE_BT, "Temperature: %+5.2lf C\r\n", sensor_data_bt.temp);
 80011e4:	4b52      	ldr	r3, [pc, #328]	; (8001330 <bt_display_bmp+0x164>)
 80011e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011ea:	e9cd 3400 	strd	r3, r4, [sp]
 80011ee:	4a51      	ldr	r2, [pc, #324]	; (8001334 <bt_display_bmp+0x168>)
 80011f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f4:	6838      	ldr	r0, [r7, #0]
 80011f6:	f00e facb 	bl	800f790 <sniprintf>
					                     sensor_data_bt.temp, sensor_data_bt.press / 1000.0, sensor_data_bt.alt);
		}
	} else {
		snprintf((char*) tx_buf, BUF_SIZE_BT, "Unknown command argument\r\n");
	}
}
 80011fa:	e092      	b.n	8001322 <bt_display_bmp+0x156>
	} else if (!strcmp(cmd_2, "press")) {
 80011fc:	494e      	ldr	r1, [pc, #312]	; (8001338 <bt_display_bmp+0x16c>)
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff f806 	bl	8000210 <strcmp>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d112      	bne.n	8001230 <bt_display_bmp+0x64>
		snprintf((char*) tx_buf, BUF_SIZE_BT, "Pressure: %6.3lf kPa\r\n", sensor_data_bt.press / 1000.0);
 800120a:	4b49      	ldr	r3, [pc, #292]	; (8001330 <bt_display_bmp+0x164>)
 800120c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b49      	ldr	r3, [pc, #292]	; (800133c <bt_display_bmp+0x170>)
 8001216:	f7ff fb49 	bl	80008ac <__aeabi_ddiv>
 800121a:	4603      	mov	r3, r0
 800121c:	460c      	mov	r4, r1
 800121e:	e9cd 3400 	strd	r3, r4, [sp]
 8001222:	4a47      	ldr	r2, [pc, #284]	; (8001340 <bt_display_bmp+0x174>)
 8001224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001228:	6838      	ldr	r0, [r7, #0]
 800122a:	f00e fab1 	bl	800f790 <sniprintf>
}
 800122e:	e078      	b.n	8001322 <bt_display_bmp+0x156>
	} else if (!strcmp(cmd_2, "alt")) {
 8001230:	4944      	ldr	r1, [pc, #272]	; (8001344 <bt_display_bmp+0x178>)
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7fe ffec 	bl	8000210 <strcmp>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d11d      	bne.n	800127a <bt_display_bmp+0xae>
		(QNH_global == QNH_GOT_CHECK) ? (snprintf((char*) tx_buf, BUF_SIZE_BT, "Altitude: waiting QNH\r\n"))
 800123e:	4b42      	ldr	r3, [pc, #264]	; (8001348 <bt_display_bmp+0x17c>)
 8001240:	681b      	ldr	r3, [r3, #0]
				         : snprintf((char*) tx_buf, BUF_SIZE_BT, "Alt  : %+5.1lf m\r\n", sensor_data_bt.alt);
 8001242:	4a42      	ldr	r2, [pc, #264]	; (800134c <bt_display_bmp+0x180>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d10c      	bne.n	8001262 <bt_display_bmp+0x96>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	4a41      	ldr	r2, [pc, #260]	; (8001350 <bt_display_bmp+0x184>)
 800124c:	461d      	mov	r5, r3
 800124e:	4614      	mov	r4, r2
 8001250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001252:	6028      	str	r0, [r5, #0]
 8001254:	6069      	str	r1, [r5, #4]
 8001256:	60aa      	str	r2, [r5, #8]
 8001258:	60eb      	str	r3, [r5, #12]
 800125a:	cc03      	ldmia	r4!, {r0, r1}
 800125c:	6128      	str	r0, [r5, #16]
 800125e:	6169      	str	r1, [r5, #20]
}
 8001260:	e05f      	b.n	8001322 <bt_display_bmp+0x156>
				         : snprintf((char*) tx_buf, BUF_SIZE_BT, "Alt  : %+5.1lf m\r\n", sensor_data_bt.alt);
 8001262:	4b33      	ldr	r3, [pc, #204]	; (8001330 <bt_display_bmp+0x164>)
 8001264:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001268:	e9cd 3400 	strd	r3, r4, [sp]
 800126c:	4a39      	ldr	r2, [pc, #228]	; (8001354 <bt_display_bmp+0x188>)
 800126e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001272:	6838      	ldr	r0, [r7, #0]
 8001274:	f00e fa8c 	bl	800f790 <sniprintf>
}
 8001278:	e053      	b.n	8001322 <bt_display_bmp+0x156>
	} else if (!strcmp(cmd_2, "all")) {
 800127a:	4937      	ldr	r1, [pc, #220]	; (8001358 <bt_display_bmp+0x18c>)
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7fe ffc7 	bl	8000210 <strcmp>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d13b      	bne.n	8001300 <bt_display_bmp+0x134>
		if (QNH_global == QNH_GOT_CHECK) {
 8001288:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <bt_display_bmp+0x17c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a2f      	ldr	r2, [pc, #188]	; (800134c <bt_display_bmp+0x180>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d117      	bne.n	80012c2 <bt_display_bmp+0xf6>
			snprintf((char*) tx_buf, BUF_SIZE_BT, "Temperature : %+5.2lf C\r\nPressure: %6.3lf kPa\r\nAlt : waiting QNH\r\n",
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <bt_display_bmp+0x164>)
 8001294:	e9d3 4500 	ldrd	r4, r5, [r3]
					                                           sensor_data_bt.temp, sensor_data_bt.press / 1000.0);
 8001298:	4b25      	ldr	r3, [pc, #148]	; (8001330 <bt_display_bmp+0x164>)
 800129a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			snprintf((char*) tx_buf, BUF_SIZE_BT, "Temperature : %+5.2lf C\r\nPressure: %6.3lf kPa\r\nAlt : waiting QNH\r\n",
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <bt_display_bmp+0x170>)
 80012a4:	f7ff fb02 	bl	80008ac <__aeabi_ddiv>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012b0:	e9cd 4500 	strd	r4, r5, [sp]
 80012b4:	4a29      	ldr	r2, [pc, #164]	; (800135c <bt_display_bmp+0x190>)
 80012b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ba:	6838      	ldr	r0, [r7, #0]
 80012bc:	f00e fa68 	bl	800f790 <sniprintf>
}
 80012c0:	e02f      	b.n	8001322 <bt_display_bmp+0x156>
			snprintf((char*) tx_buf, BUF_SIZE_BT, "Temperature : %+5.2lf C\r\nPressure: %6.3lf kPa\r\nAltitude : %+5.1lf m\r\n",
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <bt_display_bmp+0x164>)
 80012c4:	e9d3 4500 	ldrd	r4, r5, [r3]
					                     sensor_data_bt.temp, sensor_data_bt.press / 1000.0, sensor_data_bt.alt);
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <bt_display_bmp+0x164>)
 80012ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
			snprintf((char*) tx_buf, BUF_SIZE_BT, "Temperature : %+5.2lf C\r\nPressure: %6.3lf kPa\r\nAltitude : %+5.1lf m\r\n",
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <bt_display_bmp+0x170>)
 80012d4:	f7ff faea 	bl	80008ac <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <bt_display_bmp+0x164>)
 80012e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80012e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012ee:	e9cd 4500 	strd	r4, r5, [sp]
 80012f2:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <bt_display_bmp+0x194>)
 80012f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f8:	6838      	ldr	r0, [r7, #0]
 80012fa:	f00e fa49 	bl	800f790 <sniprintf>
}
 80012fe:	e010      	b.n	8001322 <bt_display_bmp+0x156>
		snprintf((char*) tx_buf, BUF_SIZE_BT, "Unknown command argument\r\n");
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	4a18      	ldr	r2, [pc, #96]	; (8001364 <bt_display_bmp+0x198>)
 8001304:	461d      	mov	r5, r3
 8001306:	4614      	mov	r4, r2
 8001308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130a:	6028      	str	r0, [r5, #0]
 800130c:	6069      	str	r1, [r5, #4]
 800130e:	60aa      	str	r2, [r5, #8]
 8001310:	60eb      	str	r3, [r5, #12]
 8001312:	cc03      	ldmia	r4!, {r0, r1}
 8001314:	6128      	str	r0, [r5, #16]
 8001316:	6169      	str	r1, [r5, #20]
 8001318:	8823      	ldrh	r3, [r4, #0]
 800131a:	78a2      	ldrb	r2, [r4, #2]
 800131c:	832b      	strh	r3, [r5, #24]
 800131e:	4613      	mov	r3, r2
 8001320:	76ab      	strb	r3, [r5, #26]
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bdb0      	pop	{r4, r5, r7, pc}
 800132a:	bf00      	nop
 800132c:	08013d58 	.word	0x08013d58
 8001330:	20001dc0 	.word	0x20001dc0
 8001334:	08013d60 	.word	0x08013d60
 8001338:	08013d7c 	.word	0x08013d7c
 800133c:	408f4000 	.word	0x408f4000
 8001340:	08013d84 	.word	0x08013d84
 8001344:	08013d9c 	.word	0x08013d9c
 8001348:	20001dd8 	.word	0x20001dd8
 800134c:	ffffb1e0 	.word	0xffffb1e0
 8001350:	08013da0 	.word	0x08013da0
 8001354:	08013db8 	.word	0x08013db8
 8001358:	08013dcc 	.word	0x08013dcc
 800135c:	08013dd0 	.word	0x08013dd0
 8001360:	08013e14 	.word	0x08013e14
 8001364:	08013e5c 	.word	0x08013e5c

08001368 <bt_diplay_metar>:
/**
 *  Saves METAR report data to tx_buf
 *  @tx_buf: buffer for saving data
 */
void bt_diplay_metar (uint8_t *tx_buf)
{
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af06      	add	r7, sp, #24
 800136e:	6078      	str	r0, [r7, #4]
	snprintf((char*) tx_buf, BUF_SIZE_BT,"%s\r\nTemperature = %d C\r\nDewpoint = %d C\r\n"
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <bt_diplay_metar+0x44>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <bt_diplay_metar+0x44>)
 8001376:	6892      	ldr	r2, [r2, #8]
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <bt_diplay_metar+0x44>)
 800137a:	6809      	ldr	r1, [r1, #0]
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <bt_diplay_metar+0x44>)
 800137e:	6900      	ldr	r0, [r0, #16]
 8001380:	4c0a      	ldr	r4, [pc, #40]	; (80013ac <bt_diplay_metar+0x44>)
 8001382:	6964      	ldr	r4, [r4, #20]
 8001384:	4d09      	ldr	r5, [pc, #36]	; (80013ac <bt_diplay_metar+0x44>)
 8001386:	68ed      	ldr	r5, [r5, #12]
 8001388:	9505      	str	r5, [sp, #20]
 800138a:	9404      	str	r4, [sp, #16]
 800138c:	9003      	str	r0, [sp, #12]
 800138e:	9102      	str	r1, [sp, #8]
 8001390:	9201      	str	r2, [sp, #4]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <bt_diplay_metar+0x48>)
 8001396:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <bt_diplay_metar+0x4c>)
 8001398:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f00e f9f7 	bl	800f790 <sniprintf>
												,metar_data_bt.dewpoint_m_report
												,metar_data_bt.QNH_m_report
												,metar_data_bt.wind_direction_m_report
												,metar_data_bt.wind_speed_m_report
												,metar_data_bt.visibility_m_report);
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bdb0      	pop	{r4, r5, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20001ddc 	.word	0x20001ddc
 80013b0:	20001df4 	.word	0x20001df4
 80013b4:	08013e78 	.word	0x08013e78

080013b8 <bt_diplay_taf>:
/**
 *  Saves TAF report data to tx_buf
 *  @tx_buf: buffer for saving data
 */
void bt_diplay_taf (uint8_t *tx_buf)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af04      	add	r7, sp, #16
 80013be:	6078      	str	r0, [r7, #4]
	snprintf((char*) tx_buf, BUF_SIZE_BT,"%s\r\nTime issue = %s\r\nWind dir = %d degree\r\nWind speed = %d m/s2\r\n"
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <bt_diplay_taf+0x34>)
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	4a09      	ldr	r2, [pc, #36]	; (80013ec <bt_diplay_taf+0x34>)
 80013c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80013c8:	4908      	ldr	r1, [pc, #32]	; (80013ec <bt_diplay_taf+0x34>)
 80013ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80013cc:	9103      	str	r1, [sp, #12]
 80013ce:	9202      	str	r2, [sp, #8]
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <bt_diplay_taf+0x38>)
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <bt_diplay_taf+0x34>)
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <bt_diplay_taf+0x3c>)
 80013da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f00e f9d6 	bl	800f790 <sniprintf>
									"Visibility = %d m\r\n" ,taf_data_bt.timestamp_t_report
															,taf_data_bt.timeissue_t_report
															,taf_data_bt.wind_direction_t_report
															,taf_data_bt.wind_speed_t_report
															,taf_data_bt.visibility_t_report);
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20001e24 	.word	0x20001e24
 80013f0:	20001e44 	.word	0x20001e44
 80013f4:	08013ef4 	.word	0x08013ef4

080013f8 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <case_insensitive_strcmp+0x16>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800140e:	2301      	movs	r3, #1
 8001410:	e05e      	b.n	80014d0 <case_insensitive_strcmp+0xd8>
    }

    if (string1 == string2)
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d10d      	bne.n	8001436 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800141a:	2300      	movs	r3, #0
 800141c:	e058      	b.n	80014d0 <case_insensitive_strcmp+0xd8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001426:	2300      	movs	r3, #0
 8001428:	e052      	b.n	80014d0 <case_insensitive_strcmp+0xd8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3301      	adds	r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	f00d fbee 	bl	800ec1c <__locale_ctype_ptr>
 8001440:	4602      	mov	r2, r0
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	3301      	adds	r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d103      	bne.n	800145a <case_insensitive_strcmp+0x62>
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	f103 0420 	add.w	r4, r3, #32
 8001458:	e000      	b.n	800145c <case_insensitive_strcmp+0x64>
 800145a:	7bfc      	ldrb	r4, [r7, #15]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	73bb      	strb	r3, [r7, #14]
 8001462:	f00d fbdb 	bl	800ec1c <__locale_ctype_ptr>
 8001466:	4602      	mov	r2, r0
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	3301      	adds	r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d102      	bne.n	800147e <case_insensitive_strcmp+0x86>
 8001478:	7bbb      	ldrb	r3, [r7, #14]
 800147a:	3320      	adds	r3, #32
 800147c:	e000      	b.n	8001480 <case_insensitive_strcmp+0x88>
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	429c      	cmp	r4, r3
 8001482:	d0cc      	beq.n	800141e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	737b      	strb	r3, [r7, #13]
 800148a:	f00d fbc7 	bl	800ec1c <__locale_ctype_ptr>
 800148e:	4602      	mov	r2, r0
 8001490:	7b7b      	ldrb	r3, [r7, #13]
 8001492:	3301      	adds	r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d103      	bne.n	80014a8 <case_insensitive_strcmp+0xb0>
 80014a0:	7b7b      	ldrb	r3, [r7, #13]
 80014a2:	f103 0420 	add.w	r4, r3, #32
 80014a6:	e000      	b.n	80014aa <case_insensitive_strcmp+0xb2>
 80014a8:	7b7c      	ldrb	r4, [r7, #13]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	733b      	strb	r3, [r7, #12]
 80014b0:	f00d fbb4 	bl	800ec1c <__locale_ctype_ptr>
 80014b4:	4602      	mov	r2, r0
 80014b6:	7b3b      	ldrb	r3, [r7, #12]
 80014b8:	3301      	adds	r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d102      	bne.n	80014cc <case_insensitive_strcmp+0xd4>
 80014c6:	7b3b      	ldrb	r3, [r7, #12]
 80014c8:	3320      	adds	r3, #32
 80014ca:	e000      	b.n	80014ce <case_insensitive_strcmp+0xd6>
 80014cc:	7b3b      	ldrb	r3, [r7, #12]
 80014ce:	1ae3      	subs	r3, r4, r3
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}

080014d8 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2028      	movs	r0, #40	; 0x28
 80014e6:	4798      	blx	r3
 80014e8:	60f8      	str	r0, [r7, #12]
    if (node)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d004      	beq.n	80014fa <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80014f0:	2228      	movs	r2, #40	; 0x28
 80014f2:	2100      	movs	r1, #0
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f00d fbcc 	bl	800ec92 <memset>
    }

    return node;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001510:	e037      	b.n	8001582 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d108      	bne.n	8001536 <cJSON_Delete+0x32>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d004      	beq.n	8001536 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ffe7 	bl	8001504 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <cJSON_Delete+0x52>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <cJSON_Delete+0x8c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6912      	ldr	r2, [r2, #16]
 8001552:	4610      	mov	r0, r2
 8001554:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <cJSON_Delete+0x72>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <cJSON_Delete+0x8c>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6a12      	ldr	r2, [r2, #32]
 8001572:	4610      	mov	r0, r2
 8001574:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <cJSON_Delete+0x8c>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	4798      	blx	r3
        item = next;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1c4      	bne.n	8001512 <cJSON_Delete+0xe>
    }
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000000 	.word	0x20000000

08001594 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001598:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	0000      	movs	r0, r0
	...

080015a8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b099      	sub	sp, #100	; 0x64
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
    double number = 0;
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	f04f 0400 	mov.w	r4, #0
 80015ba:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80015c2:	f7ff ffe7 	bl	8001594 <get_decimal_point>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <parse_number+0x36>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <parse_number+0x3a>
    {
        return false;
 80015de:	2300      	movs	r3, #0
 80015e0:	e104      	b.n	80017ec <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015e6:	e09f      	b.n	8001728 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	6899      	ldr	r1, [r3, #8]
 80015f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015f2:	440b      	add	r3, r1
 80015f4:	4413      	add	r3, r2
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	3b2b      	subs	r3, #43	; 0x2b
 80015fa:	2b3a      	cmp	r3, #58	; 0x3a
 80015fc:	f200 80a4 	bhi.w	8001748 <parse_number+0x1a0>
 8001600:	a201      	add	r2, pc, #4	; (adr r2, 8001608 <parse_number+0x60>)
 8001602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001606:	bf00      	nop
 8001608:	080016f5 	.word	0x080016f5
 800160c:	08001749 	.word	0x08001749
 8001610:	080016f5 	.word	0x080016f5
 8001614:	08001713 	.word	0x08001713
 8001618:	08001749 	.word	0x08001749
 800161c:	080016f5 	.word	0x080016f5
 8001620:	080016f5 	.word	0x080016f5
 8001624:	080016f5 	.word	0x080016f5
 8001628:	080016f5 	.word	0x080016f5
 800162c:	080016f5 	.word	0x080016f5
 8001630:	080016f5 	.word	0x080016f5
 8001634:	080016f5 	.word	0x080016f5
 8001638:	080016f5 	.word	0x080016f5
 800163c:	080016f5 	.word	0x080016f5
 8001640:	080016f5 	.word	0x080016f5
 8001644:	08001749 	.word	0x08001749
 8001648:	08001749 	.word	0x08001749
 800164c:	08001749 	.word	0x08001749
 8001650:	08001749 	.word	0x08001749
 8001654:	08001749 	.word	0x08001749
 8001658:	08001749 	.word	0x08001749
 800165c:	08001749 	.word	0x08001749
 8001660:	08001749 	.word	0x08001749
 8001664:	08001749 	.word	0x08001749
 8001668:	08001749 	.word	0x08001749
 800166c:	08001749 	.word	0x08001749
 8001670:	080016f5 	.word	0x080016f5
 8001674:	08001749 	.word	0x08001749
 8001678:	08001749 	.word	0x08001749
 800167c:	08001749 	.word	0x08001749
 8001680:	08001749 	.word	0x08001749
 8001684:	08001749 	.word	0x08001749
 8001688:	08001749 	.word	0x08001749
 800168c:	08001749 	.word	0x08001749
 8001690:	08001749 	.word	0x08001749
 8001694:	08001749 	.word	0x08001749
 8001698:	08001749 	.word	0x08001749
 800169c:	08001749 	.word	0x08001749
 80016a0:	08001749 	.word	0x08001749
 80016a4:	08001749 	.word	0x08001749
 80016a8:	08001749 	.word	0x08001749
 80016ac:	08001749 	.word	0x08001749
 80016b0:	08001749 	.word	0x08001749
 80016b4:	08001749 	.word	0x08001749
 80016b8:	08001749 	.word	0x08001749
 80016bc:	08001749 	.word	0x08001749
 80016c0:	08001749 	.word	0x08001749
 80016c4:	08001749 	.word	0x08001749
 80016c8:	08001749 	.word	0x08001749
 80016cc:	08001749 	.word	0x08001749
 80016d0:	08001749 	.word	0x08001749
 80016d4:	08001749 	.word	0x08001749
 80016d8:	08001749 	.word	0x08001749
 80016dc:	08001749 	.word	0x08001749
 80016e0:	08001749 	.word	0x08001749
 80016e4:	08001749 	.word	0x08001749
 80016e8:	08001749 	.word	0x08001749
 80016ec:	08001749 	.word	0x08001749
 80016f0:	080016f5 	.word	0x080016f5
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	6899      	ldr	r1, [r3, #8]
 80016fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016fe:	440b      	add	r3, r1
 8001700:	4413      	add	r3, r2
 8001702:	7819      	ldrb	r1, [r3, #0]
 8001704:	f107 0208 	add.w	r2, r7, #8
 8001708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800170a:	4413      	add	r3, r2
 800170c:	460a      	mov	r2, r1
 800170e:	701a      	strb	r2, [r3, #0]
                break;
 8001710:	e007      	b.n	8001722 <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 8001712:	f107 0208 	add.w	r2, r7, #8
 8001716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001718:	4413      	add	r3, r2
 800171a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800171e:	701a      	strb	r2, [r3, #0]
                break;
 8001720:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001724:	3301      	adds	r3, #1
 8001726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800172a:	2b3e      	cmp	r3, #62	; 0x3e
 800172c:	d80e      	bhi.n	800174c <parse_number+0x1a4>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00b      	beq.n	800174c <parse_number+0x1a4>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800173a:	441a      	add	r2, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	f4ff af51 	bcc.w	80015e8 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 8001746:	e001      	b.n	800174c <parse_number+0x1a4>
                goto loop_end;
 8001748:	bf00      	nop
 800174a:	e000      	b.n	800174e <parse_number+0x1a6>
loop_end:
 800174c:	bf00      	nop
    number_c_string[i] = '\0';
 800174e:	f107 0208 	add.w	r2, r7, #8
 8001752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001754:	4413      	add	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800175a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f00e fe9f 	bl	80104a8 <strtod>
 800176a:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 800176e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	429a      	cmp	r2, r3
 8001776:	d101      	bne.n	800177c <parse_number+0x1d4>
    {
        return false; /* parse_error */
 8001778:	2300      	movs	r3, #0
 800177a:	e037      	b.n	80017ec <parse_number+0x244>
    }

    item->valuedouble = number;
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001782:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001786:	a31d      	add	r3, pc, #116	; (adr r3, 80017fc <parse_number+0x254>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001790:	f7ff f9e8 	bl	8000b64 <__aeabi_dcmpge>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	e015      	b.n	80017d0 <parse_number+0x228>
    }
    else if (number <= (double)INT_MIN)
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <parse_number+0x250>)
 80017aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80017ae:	f7ff f9cf 	bl	8000b50 <__aeabi_dcmple>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017be:	615a      	str	r2, [r3, #20]
 80017c0:	e006      	b.n	80017d0 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 80017c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80017c6:	f7ff f9f7 	bl	8000bb8 <__aeabi_d2iz>
 80017ca:	4602      	mov	r2, r0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2208      	movs	r2, #8
 80017d4:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017dc:	4611      	mov	r1, r2
 80017de:	f107 0208 	add.w	r2, r7, #8
 80017e2:	1a8a      	subs	r2, r1, r2
 80017e4:	441a      	add	r2, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	609a      	str	r2, [r3, #8]
    return true;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3764      	adds	r7, #100	; 0x64
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	f3af 8000 	nop.w
 80017f8:	c1e00000 	.word	0xc1e00000
 80017fc:	ffc00000 	.word	0xffc00000
 8001800:	41dfffff 	.word	0x41dfffff

08001804 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	e04c      	b.n	80018b4 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b2f      	cmp	r3, #47	; 0x2f
 8001824:	d90f      	bls.n	8001846 <parse_hex4+0x42>
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b39      	cmp	r3, #57	; 0x39
 8001830:	d809      	bhi.n	8001846 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	3b30      	subs	r3, #48	; 0x30
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e02d      	b.n	80018a2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b40      	cmp	r3, #64	; 0x40
 8001850:	d90f      	bls.n	8001872 <parse_hex4+0x6e>
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b46      	cmp	r3, #70	; 0x46
 800185c:	d809      	bhi.n	8001872 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	3b37      	subs	r3, #55	; 0x37
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e017      	b.n	80018a2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4413      	add	r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b60      	cmp	r3, #96	; 0x60
 800187c:	d90f      	bls.n	800189e <parse_hex4+0x9a>
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b66      	cmp	r3, #102	; 0x66
 8001888:	d809      	bhi.n	800189e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	3b57      	subs	r3, #87	; 0x57
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e001      	b.n	80018a2 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	e00c      	b.n	80018bc <parse_hex4+0xb8>
        }

        if (i < 3)
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d802      	bhi.n	80018ae <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d9af      	bls.n	800181a <parse_hex4+0x16>
        }
    }

    return h;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b05      	cmp	r3, #5
 8001900:	f340 80b7 	ble.w	8001a72 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	3302      	adds	r3, #2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff7b 	bl	8001804 <parse_hex4>
 800190e:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001916:	d304      	bcc.n	8001922 <utf16_literal_to_utf8+0x5a>
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800191e:	f0c0 80aa 	bcc.w	8001a76 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001928:	d337      	bcc.n	800199a <utf16_literal_to_utf8+0xd2>
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001930:	d233      	bcs.n	800199a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	3306      	adds	r3, #6
 8001936:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800193c:	230c      	movs	r3, #12
 800193e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b05      	cmp	r3, #5
 800194a:	f340 8096 	ble.w	8001a7a <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b5c      	cmp	r3, #92	; 0x5c
 8001954:	f040 8093 	bne.w	8001a7e <utf16_literal_to_utf8+0x1b6>
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b75      	cmp	r3, #117	; 0x75
 8001960:	f040 808d 	bne.w	8001a7e <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3302      	adds	r3, #2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff4b 	bl	8001804 <parse_hex4>
 800196e:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001976:	f0c0 8082 	bcc.w	8001a7e <utf16_literal_to_utf8+0x1b6>
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001980:	d27d      	bcs.n	8001a7e <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	029a      	lsls	r2, r3, #10
 8001986:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <utf16_literal_to_utf8+0x1c8>)
 8001988:	4013      	ands	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001990:	4313      	orrs	r3, r2
 8001992:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8001998:	e004      	b.n	80019a4 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800199a:	2306      	movs	r3, #6
 800199c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	2b7f      	cmp	r3, #127	; 0x7f
 80019a8:	d803      	bhi.n	80019b2 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019b0:	e01f      	b.n	80019f2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019b8:	d206      	bcs.n	80019c8 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80019ba:	2302      	movs	r3, #2
 80019bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80019c0:	23c0      	movs	r3, #192	; 0xc0
 80019c2:	f887 3020 	strb.w	r3, [r7, #32]
 80019c6:	e014      	b.n	80019f2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ce:	d206      	bcs.n	80019de <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80019d0:	2303      	movs	r3, #3
 80019d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80019d6:	23e0      	movs	r3, #224	; 0xe0
 80019d8:	f887 3020 	strb.w	r3, [r7, #32]
 80019dc:	e009      	b.n	80019f2 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80019e4:	d24d      	bcs.n	8001a82 <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80019e6:	2304      	movs	r3, #4
 80019e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80019ec:	23f0      	movs	r3, #240	; 0xf0
 80019ee:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80019fc:	e015      	b.n	8001a2a <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6819      	ldr	r1, [r3, #0]
 8001a0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a10:	440b      	add	r3, r1
 8001a12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001a20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a24:	3b01      	subs	r3, #1
 8001a26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001a2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1e5      	bne.n	80019fe <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d909      	bls.n	8001a4e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	b2d9      	uxtb	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	e007      	b.n	8001a5e <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a66:	441a      	add	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001a6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a70:	e009      	b.n	8001a86 <utf16_literal_to_utf8+0x1be>
        goto fail;
 8001a72:	bf00      	nop
 8001a74:	e006      	b.n	8001a84 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8001a76:	bf00      	nop
 8001a78:	e004      	b.n	8001a84 <utf16_literal_to_utf8+0x1bc>
            goto fail;
 8001a7a:	bf00      	nop
 8001a7c:	e002      	b.n	8001a84 <utf16_literal_to_utf8+0x1bc>

fail:
 8001a7e:	bf00      	nop
 8001a80:	e000      	b.n	8001a84 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8001a82:	bf00      	nop
    return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	000ffc00 	.word	0x000ffc00

08001a94 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	4413      	add	r3, r2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b22      	cmp	r3, #34	; 0x22
 8001ad0:	f040 816c 	bne.w	8001dac <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001adc:	e018      	b.n	8001b10 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b5c      	cmp	r3, #92	; 0x5c
 8001ae4:	d111      	bne.n	8001b0a <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	461a      	mov	r2, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f080 8159 	bcs.w	8001db0 <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	3301      	adds	r3, #1
 8001b02:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	3301      	adds	r3, #1
 8001b08:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	461a      	mov	r2, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d203      	bcs.n	8001b2a <parse_string+0x96>
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b22      	cmp	r3, #34	; 0x22
 8001b28:	d1d9      	bne.n	8001ade <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	1a9b      	subs	r3, r3, r2
 8001b32:	461a      	mov	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	f080 813b 	bcs.w	8001db4 <parse_string+0x320>
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b22      	cmp	r3, #34	; 0x22
 8001b44:	f040 8136 	bne.w	8001db4 <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	6811      	ldr	r1, [r2, #0]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	6892      	ldr	r2, [r2, #8]
 8001b52:	440a      	add	r2, r1
 8001b54:	1a9b      	subs	r3, r3, r2
 8001b56:	461a      	mov	r2, r3
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	3201      	adds	r2, #1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4798      	blx	r3
 8001b6a:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8122 	beq.w	8001db8 <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001b78:	e0fc      	b.n	8001d74 <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b5c      	cmp	r3, #92	; 0x5c
 8001b80:	d008      	beq.n	8001b94 <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 8001b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b84:	1c53      	adds	r3, r2, #1
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1c59      	adds	r1, r3, #1
 8001b8c:	60f9      	str	r1, [r7, #12]
 8001b8e:	7812      	ldrb	r2, [r2, #0]
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	e0ef      	b.n	8001d74 <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001b94:	2302      	movs	r3, #2
 8001b96:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001b98:	6a3a      	ldr	r2, [r7, #32]
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f340 810c 	ble.w	8001dbc <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	3b22      	subs	r3, #34	; 0x22
 8001bac:	2b53      	cmp	r3, #83	; 0x53
 8001bae:	f200 8107 	bhi.w	8001dc0 <parse_string+0x32c>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <parse_string+0x124>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001d45 	.word	0x08001d45
 8001bbc:	08001dc1 	.word	0x08001dc1
 8001bc0:	08001dc1 	.word	0x08001dc1
 8001bc4:	08001dc1 	.word	0x08001dc1
 8001bc8:	08001dc1 	.word	0x08001dc1
 8001bcc:	08001dc1 	.word	0x08001dc1
 8001bd0:	08001dc1 	.word	0x08001dc1
 8001bd4:	08001dc1 	.word	0x08001dc1
 8001bd8:	08001dc1 	.word	0x08001dc1
 8001bdc:	08001dc1 	.word	0x08001dc1
 8001be0:	08001dc1 	.word	0x08001dc1
 8001be4:	08001dc1 	.word	0x08001dc1
 8001be8:	08001dc1 	.word	0x08001dc1
 8001bec:	08001d45 	.word	0x08001d45
 8001bf0:	08001dc1 	.word	0x08001dc1
 8001bf4:	08001dc1 	.word	0x08001dc1
 8001bf8:	08001dc1 	.word	0x08001dc1
 8001bfc:	08001dc1 	.word	0x08001dc1
 8001c00:	08001dc1 	.word	0x08001dc1
 8001c04:	08001dc1 	.word	0x08001dc1
 8001c08:	08001dc1 	.word	0x08001dc1
 8001c0c:	08001dc1 	.word	0x08001dc1
 8001c10:	08001dc1 	.word	0x08001dc1
 8001c14:	08001dc1 	.word	0x08001dc1
 8001c18:	08001dc1 	.word	0x08001dc1
 8001c1c:	08001dc1 	.word	0x08001dc1
 8001c20:	08001dc1 	.word	0x08001dc1
 8001c24:	08001dc1 	.word	0x08001dc1
 8001c28:	08001dc1 	.word	0x08001dc1
 8001c2c:	08001dc1 	.word	0x08001dc1
 8001c30:	08001dc1 	.word	0x08001dc1
 8001c34:	08001dc1 	.word	0x08001dc1
 8001c38:	08001dc1 	.word	0x08001dc1
 8001c3c:	08001dc1 	.word	0x08001dc1
 8001c40:	08001dc1 	.word	0x08001dc1
 8001c44:	08001dc1 	.word	0x08001dc1
 8001c48:	08001dc1 	.word	0x08001dc1
 8001c4c:	08001dc1 	.word	0x08001dc1
 8001c50:	08001dc1 	.word	0x08001dc1
 8001c54:	08001dc1 	.word	0x08001dc1
 8001c58:	08001dc1 	.word	0x08001dc1
 8001c5c:	08001dc1 	.word	0x08001dc1
 8001c60:	08001dc1 	.word	0x08001dc1
 8001c64:	08001dc1 	.word	0x08001dc1
 8001c68:	08001dc1 	.word	0x08001dc1
 8001c6c:	08001dc1 	.word	0x08001dc1
 8001c70:	08001dc1 	.word	0x08001dc1
 8001c74:	08001dc1 	.word	0x08001dc1
 8001c78:	08001dc1 	.word	0x08001dc1
 8001c7c:	08001dc1 	.word	0x08001dc1
 8001c80:	08001dc1 	.word	0x08001dc1
 8001c84:	08001dc1 	.word	0x08001dc1
 8001c88:	08001dc1 	.word	0x08001dc1
 8001c8c:	08001dc1 	.word	0x08001dc1
 8001c90:	08001dc1 	.word	0x08001dc1
 8001c94:	08001dc1 	.word	0x08001dc1
 8001c98:	08001dc1 	.word	0x08001dc1
 8001c9c:	08001dc1 	.word	0x08001dc1
 8001ca0:	08001d45 	.word	0x08001d45
 8001ca4:	08001dc1 	.word	0x08001dc1
 8001ca8:	08001dc1 	.word	0x08001dc1
 8001cac:	08001dc1 	.word	0x08001dc1
 8001cb0:	08001dc1 	.word	0x08001dc1
 8001cb4:	08001dc1 	.word	0x08001dc1
 8001cb8:	08001d09 	.word	0x08001d09
 8001cbc:	08001dc1 	.word	0x08001dc1
 8001cc0:	08001dc1 	.word	0x08001dc1
 8001cc4:	08001dc1 	.word	0x08001dc1
 8001cc8:	08001d15 	.word	0x08001d15
 8001ccc:	08001dc1 	.word	0x08001dc1
 8001cd0:	08001dc1 	.word	0x08001dc1
 8001cd4:	08001dc1 	.word	0x08001dc1
 8001cd8:	08001dc1 	.word	0x08001dc1
 8001cdc:	08001dc1 	.word	0x08001dc1
 8001ce0:	08001dc1 	.word	0x08001dc1
 8001ce4:	08001dc1 	.word	0x08001dc1
 8001ce8:	08001d21 	.word	0x08001d21
 8001cec:	08001dc1 	.word	0x08001dc1
 8001cf0:	08001dc1 	.word	0x08001dc1
 8001cf4:	08001dc1 	.word	0x08001dc1
 8001cf8:	08001d2d 	.word	0x08001d2d
 8001cfc:	08001dc1 	.word	0x08001dc1
 8001d00:	08001d39 	.word	0x08001d39
 8001d04:	08001d53 	.word	0x08001d53
            {
                case 'b':
                    *output_pointer++ = '\b';
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	60fa      	str	r2, [r7, #12]
 8001d0e:	2208      	movs	r2, #8
 8001d10:	701a      	strb	r2, [r3, #0]
                    break;
 8001d12:	e02b      	b.n	8001d6c <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	60fa      	str	r2, [r7, #12]
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	701a      	strb	r2, [r3, #0]
                    break;
 8001d1e:	e025      	b.n	8001d6c <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	60fa      	str	r2, [r7, #12]
 8001d26:	220a      	movs	r2, #10
 8001d28:	701a      	strb	r2, [r3, #0]
                    break;
 8001d2a:	e01f      	b.n	8001d6c <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	60fa      	str	r2, [r7, #12]
 8001d32:	220d      	movs	r2, #13
 8001d34:	701a      	strb	r2, [r3, #0]
                    break;
 8001d36:	e019      	b.n	8001d6c <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	60fa      	str	r2, [r7, #12]
 8001d3e:	2209      	movs	r2, #9
 8001d40:	701a      	strb	r2, [r3, #0]
                    break;
 8001d42:	e013      	b.n	8001d6c <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	60fa      	str	r2, [r7, #12]
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4c:	7852      	ldrb	r2, [r2, #1]
 8001d4e:	701a      	strb	r2, [r3, #0]
                    break;
 8001d50:	e00c      	b.n	8001d6c <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	461a      	mov	r2, r3
 8001d58:	6a39      	ldr	r1, [r7, #32]
 8001d5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d5c:	f7ff fdb4 	bl	80018c8 <utf16_literal_to_utf8>
 8001d60:	4603      	mov	r3, r0
 8001d62:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d02c      	beq.n	8001dc4 <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 8001d6a:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d70:	4413      	add	r3, r2
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8001d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	f4ff aefe 	bcc.w	8001b7a <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2210      	movs	r2, #16
 8001d88:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	609a      	str	r2, [r3, #8]

    return true;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e01e      	b.n	8001dea <parse_string+0x356>
        goto fail;
 8001dac:	bf00      	nop
 8001dae:	e00a      	b.n	8001dc6 <parse_string+0x332>
                    goto fail;
 8001db0:	bf00      	nop
 8001db2:	e008      	b.n	8001dc6 <parse_string+0x332>

fail:
 8001db4:	bf00      	nop
 8001db6:	e006      	b.n	8001dc6 <parse_string+0x332>
            goto fail; /* allocation failure */
 8001db8:	bf00      	nop
 8001dba:	e004      	b.n	8001dc6 <parse_string+0x332>
                goto fail;
 8001dbc:	bf00      	nop
 8001dbe:	e002      	b.n	8001dc6 <parse_string+0x332>
                    goto fail;
 8001dc0:	bf00      	nop
 8001dc2:	e000      	b.n	8001dc6 <parse_string+0x332>
                        goto fail;
 8001dc4:	bf00      	nop
    if (output != NULL)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <parse_string+0x340>
    {
        input_buffer->hooks.deallocate(output);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	69f8      	ldr	r0, [r7, #28]
 8001dd2:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d006      	beq.n	8001de8 <parse_string+0x354>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	461a      	mov	r2, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3728      	adds	r7, #40	; 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop

08001df4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <buffer_skip_whitespace+0x16>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e02c      	b.n	8001e68 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <buffer_skip_whitespace+0x2c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d306      	bcc.n	8001e2e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	e021      	b.n	8001e68 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00d      	beq.n	8001e50 <buffer_skip_whitespace+0x5c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d207      	bcs.n	8001e50 <buffer_skip_whitespace+0x5c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4413      	add	r3, r2
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d9e9      	bls.n	8001e24 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d104      	bne.n	8001e66 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001e66:	687b      	ldr	r3, [r7, #4]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <skip_utf8_bom+0x1e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <skip_utf8_bom+0x1e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e01c      	b.n	8001ed0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d018      	beq.n	8001ece <skip_utf8_bom+0x5a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	1d1a      	adds	r2, r3, #4
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d211      	bcs.n	8001ece <skip_utf8_bom+0x5a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <skip_utf8_bom+0x64>)
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f00d fcd1 	bl	800f860 <strncmp>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d104      	bne.n	8001ece <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	1cda      	adds	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001ece:	687b      	ldr	r3, [r7, #4]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	08013f80 	.word	0x08013f80

08001edc <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e00c      	b.n	8001f0c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7fe f996 	bl	8000224 <strlen>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	3301      	adds	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	6979      	ldr	r1, [r7, #20]
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 f805 	bl	8001f14 <cJSON_ParseWithLengthOpts>
 8001f0a:	4603      	mov	r3, r0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08e      	sub	sp, #56	; 0x38
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001f22:	f107 0318 	add.w	r3, r7, #24
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
 8001f30:	611a      	str	r2, [r3, #16]
 8001f32:	615a      	str	r2, [r3, #20]
 8001f34:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8001f3a:	4b40      	ldr	r3, [pc, #256]	; (800203c <cJSON_ParseWithLengthOpts+0x128>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001f40:	4b3e      	ldr	r3, [pc, #248]	; (800203c <cJSON_ParseWithLengthOpts+0x128>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d042      	beq.n	8001fd2 <cJSON_ParseWithLengthOpts+0xbe>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d03f      	beq.n	8001fd2 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001f5e:	4a38      	ldr	r2, [pc, #224]	; (8002040 <cJSON_ParseWithLengthOpts+0x12c>)
 8001f60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f64:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f66:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001f6a:	4835      	ldr	r0, [pc, #212]	; (8002040 <cJSON_ParseWithLengthOpts+0x12c>)
 8001f6c:	f7ff fab4 	bl	80014d8 <cJSON_New_Item>
 8001f70:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d02e      	beq.n	8001fd6 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001f78:	f107 0318 	add.w	r3, r7, #24
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff79 	bl	8001e74 <skip_utf8_bom>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff35 	bl	8001df4 <buffer_skip_whitespace>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f90:	f000 f866 	bl	8002060 <parse_value>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01f      	beq.n	8001fda <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00e      	beq.n	8001fbe <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001fa0:	f107 0318 	add.w	r3, r7, #24
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff25 	bl	8001df4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001faa:	6a3a      	ldr	r2, [r7, #32]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d20f      	bcs.n	8001fd2 <cJSON_ParseWithLengthOpts+0xbe>
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <cJSON_ParseWithLengthOpts+0xbe>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	441a      	add	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd0:	e02f      	b.n	8002032 <cJSON_ParseWithLengthOpts+0x11e>

fail:
 8001fd2:	bf00      	nop
 8001fd4:	e002      	b.n	8001fdc <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001fd6:	bf00      	nop
 8001fd8:	e000      	b.n	8001fdc <cJSON_ParseWithLengthOpts+0xc8>
        goto fail;
 8001fda:	bf00      	nop
    if (item != NULL)
 8001fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <cJSON_ParseWithLengthOpts+0xd4>
    {
        cJSON_Delete(item);
 8001fe2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fe4:	f7ff fa8e 	bl	8001504 <cJSON_Delete>
    }

    if (value != NULL)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d020      	beq.n	8002030 <cJSON_ParseWithLengthOpts+0x11c>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001ff6:	6a3a      	ldr	r2, [r7, #32]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d202      	bcs.n	8002004 <cJSON_ParseWithLengthOpts+0xf0>
        {
            local_error.position = buffer.offset;
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e005      	b.n	8002010 <cJSON_ParseWithLengthOpts+0xfc>
        }
        else if (buffer.length > 0)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <cJSON_ParseWithLengthOpts+0xfc>
        {
            local_error.position = buffer.length - 1;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b01      	subs	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d004      	beq.n	8002020 <cJSON_ParseWithLengthOpts+0x10c>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	441a      	add	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <cJSON_ParseWithLengthOpts+0x128>)
 8002022:	461a      	mov	r2, r3
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	e893 0003 	ldmia.w	r3, {r0, r1}
 800202c:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3738      	adds	r7, #56	; 0x38
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000021c 	.word	0x2000021c
 8002040:	20000000 	.word	0x20000000

08002044 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff43 	bl	8001edc <cJSON_ParseWithOpts>
 8002056:	4603      	mov	r3, r0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <parse_value+0x18>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <parse_value+0x1c>
    {
        return false; /* no input */
 8002078:	2300      	movs	r3, #0
 800207a:	e0d2      	b.n	8002222 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01d      	beq.n	80020be <parse_value+0x5e>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	1d1a      	adds	r2, r3, #4
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	d816      	bhi.n	80020be <parse_value+0x5e>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4413      	add	r3, r2
 800209a:	2204      	movs	r2, #4
 800209c:	4963      	ldr	r1, [pc, #396]	; (800222c <parse_value+0x1cc>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f00d fbde 	bl	800f860 <strncmp>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2204      	movs	r2, #4
 80020ae:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	1d1a      	adds	r2, r3, #4
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	609a      	str	r2, [r3, #8]
        return true;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e0b1      	b.n	8002222 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d01d      	beq.n	8002100 <parse_value+0xa0>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	1d5a      	adds	r2, r3, #5
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d816      	bhi.n	8002100 <parse_value+0xa0>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4413      	add	r3, r2
 80020dc:	2205      	movs	r2, #5
 80020de:	4954      	ldr	r1, [pc, #336]	; (8002230 <parse_value+0x1d0>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f00d fbbd 	bl	800f860 <strncmp>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	1d5a      	adds	r2, r3, #5
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	609a      	str	r2, [r3, #8]
        return true;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e090      	b.n	8002222 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d020      	beq.n	8002148 <parse_value+0xe8>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	1d1a      	adds	r2, r3, #4
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	d819      	bhi.n	8002148 <parse_value+0xe8>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4413      	add	r3, r2
 800211e:	2204      	movs	r2, #4
 8002120:	4944      	ldr	r1, [pc, #272]	; (8002234 <parse_value+0x1d4>)
 8002122:	4618      	mov	r0, r3
 8002124:	f00d fb9c 	bl	800f860 <strncmp>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2202      	movs	r2, #2
 8002132:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	1d1a      	adds	r2, r3, #4
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	609a      	str	r2, [r3, #8]
        return true;
 8002144:	2301      	movs	r3, #1
 8002146:	e06c      	b.n	8002222 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d013      	beq.n	8002176 <parse_value+0x116>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	429a      	cmp	r2, r3
 8002158:	d20d      	bcs.n	8002176 <parse_value+0x116>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4413      	add	r3, r2
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b22      	cmp	r3, #34	; 0x22
 8002168:	d105      	bne.n	8002176 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fc91 	bl	8001a94 <parse_string>
 8002172:	4603      	mov	r3, r0
 8002174:	e055      	b.n	8002222 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d023      	beq.n	80021c4 <parse_value+0x164>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	d21d      	bcs.n	80021c4 <parse_value+0x164>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4413      	add	r3, r2
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b2d      	cmp	r3, #45	; 0x2d
 8002196:	d00f      	beq.n	80021b8 <parse_value+0x158>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4413      	add	r3, r2
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b2f      	cmp	r3, #47	; 0x2f
 80021a6:	d90d      	bls.n	80021c4 <parse_value+0x164>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4413      	add	r3, r2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b39      	cmp	r3, #57	; 0x39
 80021b6:	d805      	bhi.n	80021c4 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80021b8:	6839      	ldr	r1, [r7, #0]
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff f9f4 	bl	80015a8 <parse_number>
 80021c0:	4603      	mov	r3, r0
 80021c2:	e02e      	b.n	8002222 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d013      	beq.n	80021f2 <parse_value+0x192>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d20d      	bcs.n	80021f2 <parse_value+0x192>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	4413      	add	r3, r2
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b5b      	cmp	r3, #91	; 0x5b
 80021e4:	d105      	bne.n	80021f2 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80021e6:	6839      	ldr	r1, [r7, #0]
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f825 	bl	8002238 <parse_array>
 80021ee:	4603      	mov	r3, r0
 80021f0:	e017      	b.n	8002222 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <parse_value+0x1c0>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	d20d      	bcs.n	8002220 <parse_value+0x1c0>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4413      	add	r3, r2
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b7b      	cmp	r3, #123	; 0x7b
 8002212:	d105      	bne.n	8002220 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002214:	6839      	ldr	r1, [r7, #0]
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f8d2 	bl	80023c0 <parse_object>
 800221c:	4603      	mov	r3, r0
 800221e:	e000      	b.n	8002222 <parse_value+0x1c2>
    }

    return false;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	08013f58 	.word	0x08013f58
 8002230:	08013f84 	.word	0x08013f84
 8002234:	08013f8c 	.word	0x08013f8c

08002238 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002252:	d301      	bcc.n	8002258 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002254:	2300      	movs	r3, #0
 8002256:	e0af      	b.n	80023b8 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4413      	add	r3, r2
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b5b      	cmp	r3, #91	; 0x5b
 8002270:	f040 8094 	bne.w	800239c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800227e:	6838      	ldr	r0, [r7, #0]
 8002280:	f7ff fdb8 	bl	8001df4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00d      	beq.n	80022a6 <parse_array+0x6e>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	429a      	cmp	r2, r3
 8002294:	d207      	bcs.n	80022a6 <parse_array+0x6e>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4413      	add	r3, r2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b5d      	cmp	r3, #93	; 0x5d
 80022a4:	d061      	beq.n	800236a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <parse_array+0x80>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d305      	bcc.n	80022c4 <parse_array+0x8c>
    {
        input_buffer->offset--;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	609a      	str	r2, [r3, #8]
        goto fail;
 80022c2:	e072      	b.n	80023aa <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	1e5a      	subs	r2, r3, #1
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	3310      	adds	r3, #16
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff f900 	bl	80014d8 <cJSON_New_Item>
 80022d8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05f      	beq.n	80023a0 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d104      	bne.n	80022f0 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	e007      	b.n	8002300 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800230a:	6838      	ldr	r0, [r7, #0]
 800230c:	f7ff fd72 	bl	8001df4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	6938      	ldr	r0, [r7, #16]
 8002314:	f7ff fea4 	bl	8002060 <parse_value>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d042      	beq.n	80023a4 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800231e:	6838      	ldr	r0, [r7, #0]
 8002320:	f7ff fd68 	bl	8001df4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00d      	beq.n	8002346 <parse_array+0x10e>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d207      	bcs.n	8002346 <parse_array+0x10e>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	4413      	add	r3, r2
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b2c      	cmp	r3, #44	; 0x2c
 8002344:	d0c3      	beq.n	80022ce <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02d      	beq.n	80023a8 <parse_array+0x170>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	d227      	bcs.n	80023a8 <parse_array+0x170>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4413      	add	r3, r2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b5d      	cmp	r3, #93	; 0x5d
 8002366:	d11f      	bne.n	80023a8 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002368:	e000      	b.n	800236c <parse_array+0x134>
        goto success;
 800236a:	bf00      	nop
    input_buffer->depth--;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	1e5a      	subs	r2, r3, #1
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <parse_array+0x14a>
        head->prev = current_item;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2220      	movs	r2, #32
 8002386:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	609a      	str	r2, [r3, #8]

    return true;
 8002398:	2301      	movs	r3, #1
 800239a:	e00d      	b.n	80023b8 <parse_array+0x180>
        goto fail;
 800239c:	bf00      	nop
 800239e:	e004      	b.n	80023aa <parse_array+0x172>
            goto fail; /* allocation failure */
 80023a0:	bf00      	nop
 80023a2:	e002      	b.n	80023aa <parse_array+0x172>
            goto fail; /* failed to parse value */
 80023a4:	bf00      	nop
 80023a6:	e000      	b.n	80023aa <parse_array+0x172>

fail:
 80023a8:	bf00      	nop
    if (head != NULL)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80023b0:	6978      	ldr	r0, [r7, #20]
 80023b2:	f7ff f8a7 	bl	8001504 <cJSON_Delete>
    }

    return false;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023da:	d301      	bcc.n	80023e0 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80023dc:	2300      	movs	r3, #0
 80023de:	e0e6      	b.n	80025ae <parse_object+0x1ee>
    }
    input_buffer->depth++;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80d0 	beq.w	8002592 <parse_object+0x1d2>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	f080 80c9 	bcs.w	8002592 <parse_object+0x1d2>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4413      	add	r3, r2
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b7b      	cmp	r3, #123	; 0x7b
 800240e:	f040 80c0 	bne.w	8002592 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800241c:	6838      	ldr	r0, [r7, #0]
 800241e:	f7ff fce9 	bl	8001df4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00e      	beq.n	8002446 <parse_object+0x86>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	d208      	bcs.n	8002446 <parse_object+0x86>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4413      	add	r3, r2
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b7d      	cmp	r3, #125	; 0x7d
 8002442:	f000 808d 	beq.w	8002560 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <parse_object+0x98>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d305      	bcc.n	8002464 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	609a      	str	r2, [r3, #8]
        goto fail;
 8002462:	e09d      	b.n	80025a0 <parse_object+0x1e0>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	3310      	adds	r3, #16
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff f830 	bl	80014d8 <cJSON_New_Item>
 8002478:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 808a 	beq.w	8002596 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d104      	bne.n	8002492 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	e007      	b.n	80024a2 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80024ac:	6838      	ldr	r0, [r7, #0]
 80024ae:	f7ff fca1 	bl	8001df4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 80024b2:	6839      	ldr	r1, [r7, #0]
 80024b4:	6938      	ldr	r0, [r7, #16]
 80024b6:	f7ff faed 	bl	8001a94 <parse_string>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d06c      	beq.n	800259a <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 80024c0:	6838      	ldr	r0, [r7, #0]
 80024c2:	f7ff fc97 	bl	8001df4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d05b      	beq.n	8002592 <parse_object+0x1d2>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d255      	bcs.n	8002592 <parse_object+0x1d2>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4413      	add	r3, r2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b3a      	cmp	r3, #58	; 0x3a
 80024f4:	d14d      	bne.n	8002592 <parse_object+0x1d2>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002500:	6838      	ldr	r0, [r7, #0]
 8002502:	f7ff fc77 	bl	8001df4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002506:	6839      	ldr	r1, [r7, #0]
 8002508:	6938      	ldr	r0, [r7, #16]
 800250a:	f7ff fda9 	bl	8002060 <parse_value>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d044      	beq.n	800259e <parse_object+0x1de>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002514:	6838      	ldr	r0, [r7, #0]
 8002516:	f7ff fc6d 	bl	8001df4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00d      	beq.n	800253c <parse_object+0x17c>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	429a      	cmp	r2, r3
 800252a:	d207      	bcs.n	800253c <parse_object+0x17c>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4413      	add	r3, r2
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b2c      	cmp	r3, #44	; 0x2c
 800253a:	d098      	beq.n	800246e <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d027      	beq.n	8002592 <parse_object+0x1d2>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	429a      	cmp	r2, r3
 800254c:	d221      	bcs.n	8002592 <parse_object+0x1d2>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4413      	add	r3, r2
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b7d      	cmp	r3, #125	; 0x7d
 800255c:	d119      	bne.n	8002592 <parse_object+0x1d2>
    {
        goto fail; /* expected end of object */
    }

success:
 800255e:	e000      	b.n	8002562 <parse_object+0x1a2>
        goto success; /* empty object */
 8002560:	bf00      	nop
    input_buffer->depth--;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	1e5a      	subs	r2, r3, #1
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <parse_object+0x1b8>
        head->prev = current_item;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2240      	movs	r2, #64	; 0x40
 800257c:	60da      	str	r2, [r3, #12]
    item->child = head;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	609a      	str	r2, [r3, #8]
    return true;
 800258e:	2301      	movs	r3, #1
 8002590:	e00d      	b.n	80025ae <parse_object+0x1ee>

fail:
 8002592:	bf00      	nop
 8002594:	e004      	b.n	80025a0 <parse_object+0x1e0>
            goto fail; /* allocation failure */
 8002596:	bf00      	nop
 8002598:	e002      	b.n	80025a0 <parse_object+0x1e0>
            goto fail; /* failed to parse name */
 800259a:	bf00      	nop
 800259c:	e000      	b.n	80025a0 <parse_object+0x1e0>
            goto fail; /* failed to parse value */
 800259e:	bf00      	nop
    if (head != NULL)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <parse_object+0x1ec>
    {
        cJSON_Delete(head);
 80025a6:	6978      	ldr	r0, [r7, #20]
 80025a8:	f7fe ffac 	bl	8001504 <cJSON_Delete>
    }

    return false;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <get_array_item>:

    return (int)size;
}

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <get_array_item+0x18>
    {
        return NULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e010      	b.n	80025f0 <get_array_item+0x3a>
    }

    current_child = array->child;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80025d4:	e005      	b.n	80025e2 <get_array_item+0x2c>
    {
        index--;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	3b01      	subs	r3, #1
 80025da:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <get_array_item+0x38>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f3      	bne.n	80025d6 <get_array_item+0x20>
    }

    return current_child;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
    if (index < 0)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	da01      	bge.n	8002610 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 800260c:	2300      	movs	r3, #0
 800260e:	e005      	b.n	800261c <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ffce 	bl	80025b6 <get_array_item>
 800261a:	4603      	mov	r3, r0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <get_object_item+0x1c>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <get_object_item+0x20>
    {
        return NULL;
 8002640:	2300      	movs	r3, #0
 8002642:	e033      	b.n	80026ac <get_object_item+0x88>
    }

    current_element = object->child;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d017      	beq.n	8002680 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002650:	e002      	b.n	8002658 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d01c      	beq.n	8002698 <get_object_item+0x74>
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d018      	beq.n	8002698 <get_object_item+0x74>
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4619      	mov	r1, r3
 800266c:	68b8      	ldr	r0, [r7, #8]
 800266e:	f7fd fdcf 	bl	8000210 <strcmp>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ec      	bne.n	8002652 <get_object_item+0x2e>
 8002678:	e00e      	b.n	8002698 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <get_object_item+0x74>
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	4619      	mov	r1, r3
 800268c:	68b8      	ldr	r0, [r7, #8]
 800268e:	f7fe feb3 	bl	80013f8 <case_insensitive_strcmp>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f0      	bne.n	800267a <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <get_object_item+0x82>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <get_object_item+0x86>
        return NULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e000      	b.n	80026ac <get_object_item+0x88>
    }

    return current_element;
 80026aa:	697b      	ldr	r3, [r7, #20]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 80026be:	2201      	movs	r2, #1
 80026c0:	6839      	ldr	r1, [r7, #0]
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ffae 	bl	8002624 <get_object_item>
 80026c8:	4603      	mov	r3, r0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <cJSON_IsNumber+0x12>
    {
        return false;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e007      	b.n	80026f4 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	bf0c      	ite	eq
 80026ee:	2301      	moveq	r3, #1
 80026f0:	2300      	movne	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <cJSON_IsString+0x12>
    {
        return false;
 800270e:	2300      	movs	r3, #0
 8002710:	e007      	b.n	8002722 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b10      	cmp	r3, #16
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <cJSON_IsArray+0x12>
    {
        return false;
 800273c:	2300      	movs	r3, #0
 800273e:	e007      	b.n	8002750 <cJSON_IsArray+0x22>
    }

    return (item->type & 0xFF) == cJSON_Array;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	bf0c      	ite	eq
 800274a:	2301      	moveq	r3, #1
 800274c:	2300      	movne	r3, #0
 800274e:	b2db      	uxtb	r3, r3
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <cJSON_IsObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <cJSON_IsObject+0x12>
    {
        return false;
 800276a:	2300      	movs	r3, #0
 800276c:	e007      	b.n	800277e <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <display_sensor_data>:
/**
 *  Displays sensors' data on LCD.
 *  @sensor_data: Data to display.
 */
void display_sensor_data(sensors_t* sensor_data)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	LCD_SetCursor(0, 20);
 8002794:	2114      	movs	r1, #20
 8002796:	2000      	movs	r0, #0
 8002798:	f007 f9dc 	bl	8009b54 <LCD_SetCursor>
	LCD_SetTextColor(WHITE, BLACK);
 800279c:	2100      	movs	r1, #0
 800279e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027a2:	f007 f9e7 	bl	8009b74 <LCD_SetTextColor>
	LCD_Printf("BMP:\r\n");
 80027a6:	4817      	ldr	r0, [pc, #92]	; (8002804 <display_sensor_data+0x78>)
 80027a8:	f007 f944 	bl	8009a34 <LCD_Printf>
	LCD_Printf("Temperature  = %.3lf C\r\n", sensor_data->temp);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027b2:	461a      	mov	r2, r3
 80027b4:	4623      	mov	r3, r4
 80027b6:	4814      	ldr	r0, [pc, #80]	; (8002808 <display_sensor_data+0x7c>)
 80027b8:	f007 f93c 	bl	8009a34 <LCD_Printf>
	LCD_Printf("Pressure     = %.3lf kPa\r\n", sensor_data->press / 1000.0f);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <display_sensor_data+0x80>)
 80027c8:	f7fe f870 	bl	80008ac <__aeabi_ddiv>
 80027cc:	4603      	mov	r3, r0
 80027ce:	460c      	mov	r4, r1
 80027d0:	461a      	mov	r2, r3
 80027d2:	4623      	mov	r3, r4
 80027d4:	480e      	ldr	r0, [pc, #56]	; (8002810 <display_sensor_data+0x84>)
 80027d6:	f007 f92d 	bl	8009a34 <LCD_Printf>
	if(QNH_global == QNH_GOT_CHECK) {
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <display_sensor_data+0x88>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <display_sensor_data+0x8c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d103      	bne.n	80027ec <display_sensor_data+0x60>
		LCD_Printf("Altitude - waiting QNH\r\n");
 80027e4:	480d      	ldr	r0, [pc, #52]	; (800281c <display_sensor_data+0x90>)
 80027e6:	f007 f925 	bl	8009a34 <LCD_Printf>
	}else {
		LCD_Printf("Altitude     = %.2lf m\r\n", sensor_data->alt);
	}
}
 80027ea:	e007      	b.n	80027fc <display_sensor_data+0x70>
		LCD_Printf("Altitude     = %.2lf m\r\n", sensor_data->alt);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80027f2:	461a      	mov	r2, r3
 80027f4:	4623      	mov	r3, r4
 80027f6:	480a      	ldr	r0, [pc, #40]	; (8002820 <display_sensor_data+0x94>)
 80027f8:	f007 f91c 	bl	8009a34 <LCD_Printf>
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}
 8002804:	08013f94 	.word	0x08013f94
 8002808:	08013f9c 	.word	0x08013f9c
 800280c:	408f4000 	.word	0x408f4000
 8002810:	08013fb8 	.word	0x08013fb8
 8002814:	20001dd8 	.word	0x20001dd8
 8002818:	ffffb1e0 	.word	0xffffb1e0
 800281c:	08013fd4 	.word	0x08013fd4
 8002820:	08013ff0 	.word	0x08013ff0

08002824 <display_metar>:
/**
 *  Displays METAR report on LCD.
 *  @metar_data: Data to display.
 */
void display_metar(report_metar_t* metar_data)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	LCD_SetCursor(0, 80);
 800282c:	2150      	movs	r1, #80	; 0x50
 800282e:	2000      	movs	r0, #0
 8002830:	f007 f990 	bl	8009b54 <LCD_SetCursor>
	LCD_Printf("METAR:\r\n");
 8002834:	4833      	ldr	r0, [pc, #204]	; (8002904 <display_metar+0xe0>)
 8002836:	f007 f8fd 	bl	8009a34 <LCD_Printf>
	LCD_Printf("%s\n", metar_data->timestamp_m_report);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3318      	adds	r3, #24
 800283e:	4619      	mov	r1, r3
 8002840:	4831      	ldr	r0, [pc, #196]	; (8002908 <display_metar+0xe4>)
 8002842:	f007 f8f7 	bl	8009a34 <LCD_Printf>
	(metar_data->temp_m_report == ERROR_VALUE) ? (LCD_Printf("Temperature NO DATA\r\n"))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
			                : LCD_Printf("Temperature  = %d C\r\n", metar_data->temp_m_report);
 800284a:	4a30      	ldr	r2, [pc, #192]	; (800290c <display_metar+0xe8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d103      	bne.n	8002858 <display_metar+0x34>
	(metar_data->temp_m_report == ERROR_VALUE) ? (LCD_Printf("Temperature NO DATA\r\n"))
 8002850:	482f      	ldr	r0, [pc, #188]	; (8002910 <display_metar+0xec>)
 8002852:	f007 f8ef 	bl	8009a34 <LCD_Printf>
 8002856:	e005      	b.n	8002864 <display_metar+0x40>
			                : LCD_Printf("Temperature  = %d C\r\n", metar_data->temp_m_report);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4619      	mov	r1, r3
 800285e:	482d      	ldr	r0, [pc, #180]	; (8002914 <display_metar+0xf0>)
 8002860:	f007 f8e8 	bl	8009a34 <LCD_Printf>
	(metar_data->dewpoint_m_report == ERROR_VALUE) ? (LCD_Printf("Dewpoint No Data\r\n"))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
			                : LCD_Printf("Dewpoint     = %d C\r\n", metar_data->dewpoint_m_report);
 8002868:	4a28      	ldr	r2, [pc, #160]	; (800290c <display_metar+0xe8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d103      	bne.n	8002876 <display_metar+0x52>
	(metar_data->dewpoint_m_report == ERROR_VALUE) ? (LCD_Printf("Dewpoint No Data\r\n"))
 800286e:	482a      	ldr	r0, [pc, #168]	; (8002918 <display_metar+0xf4>)
 8002870:	f007 f8e0 	bl	8009a34 <LCD_Printf>
 8002874:	e005      	b.n	8002882 <display_metar+0x5e>
			                : LCD_Printf("Dewpoint     = %d C\r\n", metar_data->dewpoint_m_report);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	4619      	mov	r1, r3
 800287c:	4827      	ldr	r0, [pc, #156]	; (800291c <display_metar+0xf8>)
 800287e:	f007 f8d9 	bl	8009a34 <LCD_Printf>
	(metar_data->QNH_m_report == ERROR_VALUE) ? (LCD_Printf("Pressure NO DATA\r\n"))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
							: LCD_Printf("Pressure     = %d hPa\r\n", metar_data->QNH_m_report);
 8002886:	4a21      	ldr	r2, [pc, #132]	; (800290c <display_metar+0xe8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d103      	bne.n	8002894 <display_metar+0x70>
	(metar_data->QNH_m_report == ERROR_VALUE) ? (LCD_Printf("Pressure NO DATA\r\n"))
 800288c:	4824      	ldr	r0, [pc, #144]	; (8002920 <display_metar+0xfc>)
 800288e:	f007 f8d1 	bl	8009a34 <LCD_Printf>
 8002892:	e005      	b.n	80028a0 <display_metar+0x7c>
							: LCD_Printf("Pressure     = %d hPa\r\n", metar_data->QNH_m_report);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	4822      	ldr	r0, [pc, #136]	; (8002924 <display_metar+0x100>)
 800289c:	f007 f8ca 	bl	8009a34 <LCD_Printf>
	(metar_data->wind_direction_m_report == ERROR_VALUE) ? (LCD_Printf("Wind dir NO DATA\r\n"))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
							: LCD_Printf("Wind dir     = %d degree\r\n", metar_data->wind_direction_m_report);
 80028a4:	4a19      	ldr	r2, [pc, #100]	; (800290c <display_metar+0xe8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d103      	bne.n	80028b2 <display_metar+0x8e>
	(metar_data->wind_direction_m_report == ERROR_VALUE) ? (LCD_Printf("Wind dir NO DATA\r\n"))
 80028aa:	481f      	ldr	r0, [pc, #124]	; (8002928 <display_metar+0x104>)
 80028ac:	f007 f8c2 	bl	8009a34 <LCD_Printf>
 80028b0:	e005      	b.n	80028be <display_metar+0x9a>
							: LCD_Printf("Wind dir     = %d degree\r\n", metar_data->wind_direction_m_report);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	4619      	mov	r1, r3
 80028b8:	481c      	ldr	r0, [pc, #112]	; (800292c <display_metar+0x108>)
 80028ba:	f007 f8bb 	bl	8009a34 <LCD_Printf>
	(metar_data->wind_speed_m_report == ERROR_VALUE) ? (LCD_Printf("Wind speed NO DATA\r\n"))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
							: LCD_Printf("Wind speed   = %d m/s2\r\n", metar_data->wind_speed_m_report);
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <display_metar+0xe8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d103      	bne.n	80028d0 <display_metar+0xac>
	(metar_data->wind_speed_m_report == ERROR_VALUE) ? (LCD_Printf("Wind speed NO DATA\r\n"))
 80028c8:	4819      	ldr	r0, [pc, #100]	; (8002930 <display_metar+0x10c>)
 80028ca:	f007 f8b3 	bl	8009a34 <LCD_Printf>
 80028ce:	e005      	b.n	80028dc <display_metar+0xb8>
							: LCD_Printf("Wind speed   = %d m/s2\r\n", metar_data->wind_speed_m_report);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	4619      	mov	r1, r3
 80028d6:	4817      	ldr	r0, [pc, #92]	; (8002934 <display_metar+0x110>)
 80028d8:	f007 f8ac 	bl	8009a34 <LCD_Printf>
	(metar_data->visibility_m_report == ERROR_VALUE) ? (LCD_Printf("Visibility NO DATA\r\n"))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
							: LCD_Printf("Visibility   = %d m\r\n", metar_data->visibility_m_report);
 80028e0:	4a0a      	ldr	r2, [pc, #40]	; (800290c <display_metar+0xe8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d103      	bne.n	80028ee <display_metar+0xca>
	(metar_data->visibility_m_report == ERROR_VALUE) ? (LCD_Printf("Visibility NO DATA\r\n"))
 80028e6:	4814      	ldr	r0, [pc, #80]	; (8002938 <display_metar+0x114>)
 80028e8:	f007 f8a4 	bl	8009a34 <LCD_Printf>
}
 80028ec:	e005      	b.n	80028fa <display_metar+0xd6>
							: LCD_Printf("Visibility   = %d m\r\n", metar_data->visibility_m_report);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	4619      	mov	r1, r3
 80028f4:	4811      	ldr	r0, [pc, #68]	; (800293c <display_metar+0x118>)
 80028f6:	f007 f89d 	bl	8009a34 <LCD_Printf>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	0801400c 	.word	0x0801400c
 8002908:	08014018 	.word	0x08014018
 800290c:	fff0bdc1 	.word	0xfff0bdc1
 8002910:	0801401c 	.word	0x0801401c
 8002914:	08014034 	.word	0x08014034
 8002918:	0801404c 	.word	0x0801404c
 800291c:	08014060 	.word	0x08014060
 8002920:	08014078 	.word	0x08014078
 8002924:	0801408c 	.word	0x0801408c
 8002928:	080140a4 	.word	0x080140a4
 800292c:	080140b8 	.word	0x080140b8
 8002930:	080140d4 	.word	0x080140d4
 8002934:	080140ec 	.word	0x080140ec
 8002938:	08014108 	.word	0x08014108
 800293c:	08014120 	.word	0x08014120

08002940 <display_taf>:
/**
 *  Displays TAF report on LCD.
 *  @taf_data: Data to display.
 */
void display_taf(report_taf_t* taf_data)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	LCD_SetCursor(0, 190);
 8002948:	21be      	movs	r1, #190	; 0xbe
 800294a:	2000      	movs	r0, #0
 800294c:	f007 f902 	bl	8009b54 <LCD_SetCursor>
	LCD_Printf("TAF:\r\n");
 8002950:	481f      	ldr	r0, [pc, #124]	; (80029d0 <display_taf+0x90>)
 8002952:	f007 f86f 	bl	8009a34 <LCD_Printf>
	LCD_Printf("%s\r\n", taf_data->timestamp_t_report);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4619      	mov	r1, r3
 800295a:	481e      	ldr	r0, [pc, #120]	; (80029d4 <display_taf+0x94>)
 800295c:	f007 f86a 	bl	8009a34 <LCD_Printf>
	LCD_Printf("Time issue = %s\r\n", taf_data->timeissue_t_report);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3320      	adds	r3, #32
 8002964:	4619      	mov	r1, r3
 8002966:	481c      	ldr	r0, [pc, #112]	; (80029d8 <display_taf+0x98>)
 8002968:	f007 f864 	bl	8009a34 <LCD_Printf>
	(taf_data->wind_direction_t_report == ERROR_VALUE) ? (LCD_Printf("Wind dir NO DATA\r\n"))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						   : LCD_Printf("Wind dir   = %d degree\r\n", taf_data->wind_direction_t_report);
 8002970:	4a1a      	ldr	r2, [pc, #104]	; (80029dc <display_taf+0x9c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d103      	bne.n	800297e <display_taf+0x3e>
	(taf_data->wind_direction_t_report == ERROR_VALUE) ? (LCD_Printf("Wind dir NO DATA\r\n"))
 8002976:	481a      	ldr	r0, [pc, #104]	; (80029e0 <display_taf+0xa0>)
 8002978:	f007 f85c 	bl	8009a34 <LCD_Printf>
 800297c:	e005      	b.n	800298a <display_taf+0x4a>
						   : LCD_Printf("Wind dir   = %d degree\r\n", taf_data->wind_direction_t_report);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4619      	mov	r1, r3
 8002984:	4817      	ldr	r0, [pc, #92]	; (80029e4 <display_taf+0xa4>)
 8002986:	f007 f855 	bl	8009a34 <LCD_Printf>
	(taf_data->wind_speed_t_report == ERROR_VALUE) ? (LCD_Printf("Wind speed NO DATA\r\n"))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
						   : LCD_Printf("Wind speed = %d m/s2\r\n", taf_data->wind_speed_t_report);
 800298e:	4a13      	ldr	r2, [pc, #76]	; (80029dc <display_taf+0x9c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d103      	bne.n	800299c <display_taf+0x5c>
	(taf_data->wind_speed_t_report == ERROR_VALUE) ? (LCD_Printf("Wind speed NO DATA\r\n"))
 8002994:	4814      	ldr	r0, [pc, #80]	; (80029e8 <display_taf+0xa8>)
 8002996:	f007 f84d 	bl	8009a34 <LCD_Printf>
 800299a:	e005      	b.n	80029a8 <display_taf+0x68>
						   : LCD_Printf("Wind speed = %d m/s2\r\n", taf_data->wind_speed_t_report);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a0:	4619      	mov	r1, r3
 80029a2:	4812      	ldr	r0, [pc, #72]	; (80029ec <display_taf+0xac>)
 80029a4:	f007 f846 	bl	8009a34 <LCD_Printf>
	(taf_data->visibility_t_report == ERROR_VALUE) ? (LCD_Printf("Visibility NO DATA\r\n"))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
						   : LCD_Printf("Visibility = %d m \r\n", taf_data->visibility_t_report);
 80029ac:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <display_taf+0x9c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d103      	bne.n	80029ba <display_taf+0x7a>
	(taf_data->visibility_t_report == ERROR_VALUE) ? (LCD_Printf("Visibility NO DATA\r\n"))
 80029b2:	480f      	ldr	r0, [pc, #60]	; (80029f0 <display_taf+0xb0>)
 80029b4:	f007 f83e 	bl	8009a34 <LCD_Printf>
}
 80029b8:	e005      	b.n	80029c6 <display_taf+0x86>
						   : LCD_Printf("Visibility = %d m \r\n", taf_data->visibility_t_report);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4619      	mov	r1, r3
 80029c0:	480c      	ldr	r0, [pc, #48]	; (80029f4 <display_taf+0xb4>)
 80029c2:	f007 f837 	bl	8009a34 <LCD_Printf>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	08014138 	.word	0x08014138
 80029d4:	08014140 	.word	0x08014140
 80029d8:	08014148 	.word	0x08014148
 80029dc:	fff0bdc1 	.word	0xfff0bdc1
 80029e0:	080140a4 	.word	0x080140a4
 80029e4:	0801415c 	.word	0x0801415c
 80029e8:	080140d4 	.word	0x080140d4
 80029ec:	08014178 	.word	0x08014178
 80029f0:	08014108 	.word	0x08014108
 80029f4:	08014190 	.word	0x08014190

080029f8 <lcd_int>:

/**
 *  LCD initialization.
 */
void lcd_int(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	LCD_Init();
 80029fc:	f006 fcce 	bl	800939c <LCD_Init>
	LCD_FillScreen(BLACK);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f006 fe29 	bl	8009658 <LCD_FillScreen>
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <console_display>:
 *  @huart: UART handel.
 *  @text: string to display.
 *  @size: length of string.
 */
void console_display(UART_HandleTypeDef *huart, char* text, uint32_t size)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
	extern osMutexId_t  mutex_consoleHandle;
	osMutexAcquire(mutex_consoleHandle, 0);
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <console_display+0x3c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f008 ffb4 	bl	800b98c <osMutexAcquire>
	HAL_UART_Transmit(huart, (uint8_t*) text , size, 1000);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f005 fe41 	bl	80086b6 <HAL_UART_Transmit>
	osMutexRelease(mutex_consoleHandle);
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <console_display+0x3c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f009 f805 	bl	800ba48 <osMutexRelease>
}
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	2000609c 	.word	0x2000609c

08002a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <MX_DMA_Init+0x4c>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <MX_DMA_Init+0x4c>)
 8002a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <MX_DMA_Init+0x4c>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	200b      	movs	r0, #11
 8002a74:	f002 fdf6 	bl	8005664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002a78:	200b      	movs	r0, #11
 8002a7a:	f002 fe0f 	bl	800569c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	200d      	movs	r0, #13
 8002a84:	f002 fdee 	bl	8005664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002a88:	200d      	movs	r0, #13
 8002a8a:	f002 fe07 	bl	800569c <HAL_NVIC_EnableIRQ>

}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800

08002a9c <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	__HAL_DBGMCU_FREEZE_TIM2();
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <configureTimerForRunTimeStats+0x1c>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <configureTimerForRunTimeStats+0x1c>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6093      	str	r3, [r2, #8]
	HAL_TIM_Base_Start(&htim2);
 8002aac:	4803      	ldr	r0, [pc, #12]	; (8002abc <configureTimerForRunTimeStats+0x20>)
 8002aae:	f005 f9bc 	bl	8007e2a <HAL_TIM_Base_Start>
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	e0042000 	.word	0xe0042000
 8002abc:	2000614c 	.word	0x2000614c

08002ac0 <getRunTimeCounterValue>:
__weak unsigned long getRunTimeCounterValue(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 8002ac4:	4b03      	ldr	r3, [pc, #12]	; (8002ad4 <getRunTimeCounterValue+0x14>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	2000614c 	.word	0x2000614c

08002ad8 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
#ifdef CONSOLE_DEBUG_ERROR
	char *error = "*****Error!!!vApplicationStackOverflowHook().*****\r\n";
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <vApplicationStackOverflowHook+0x24>)
 8002ae4:	60fb      	str	r3, [r7, #12]
	console_display(&huart2, error, strlen(error));
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f7fd fb9c 	bl	8000224 <strlen>
 8002aec:	4603      	mov	r3, r0
 8002aee:	461a      	mov	r2, r3
 8002af0:	68f9      	ldr	r1, [r7, #12]
 8002af2:	4803      	ldr	r0, [pc, #12]	; (8002b00 <vApplicationStackOverflowHook+0x28>)
 8002af4:	f7ff ff8a 	bl	8002a0c <console_display>
#endif
	while(1);
 8002af8:	e7fe      	b.n	8002af8 <vApplicationStackOverflowHook+0x20>
 8002afa:	bf00      	nop
 8002afc:	08014250 	.word	0x08014250
 8002b00:	2000626c 	.word	0x2000626c

08002b04 <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
#ifdef CONSOLE_DEBUG_ERROR
	char *error = "*****Error!!!vApplicationMallocFailedHook().*****\r\n";
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <vApplicationMallocFailedHook+0x20>)
 8002b0c:	607b      	str	r3, [r7, #4]
	console_display(&huart2, error, strlen(error));
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fd fb88 	bl	8000224 <strlen>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4803      	ldr	r0, [pc, #12]	; (8002b28 <vApplicationMallocFailedHook+0x24>)
 8002b1c:	f7ff ff76 	bl	8002a0c <console_display>
#endif
	while(1);
 8002b20:	e7fe      	b.n	8002b20 <vApplicationMallocFailedHook+0x1c>
 8002b22:	bf00      	nop
 8002b24:	08014288 	.word	0x08014288
 8002b28:	2000626c 	.word	0x2000626c

08002b2c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of mutex_sensors */
  mutex_sensorsHandle = osMutexNew(&mutex_sensors_attributes);
 8002b30:	4828      	ldr	r0, [pc, #160]	; (8002bd4 <MX_FREERTOS_Init+0xa8>)
 8002b32:	f008 fe91 	bl	800b858 <osMutexNew>
 8002b36:	4602      	mov	r2, r0
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <MX_FREERTOS_Init+0xac>)
 8002b3a:	601a      	str	r2, [r3, #0]

  /* creation of mutex_metar */
  mutex_metarHandle = osMutexNew(&mutex_metar_attributes);
 8002b3c:	4827      	ldr	r0, [pc, #156]	; (8002bdc <MX_FREERTOS_Init+0xb0>)
 8002b3e:	f008 fe8b 	bl	800b858 <osMutexNew>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <MX_FREERTOS_Init+0xb4>)
 8002b46:	601a      	str	r2, [r3, #0]

  /* creation of mutex_taf */
  mutex_tafHandle = osMutexNew(&mutex_taf_attributes);
 8002b48:	4826      	ldr	r0, [pc, #152]	; (8002be4 <MX_FREERTOS_Init+0xb8>)
 8002b4a:	f008 fe85 	bl	800b858 <osMutexNew>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <MX_FREERTOS_Init+0xbc>)
 8002b52:	601a      	str	r2, [r3, #0]

  /* creation of mutex_console */
  mutex_consoleHandle = osMutexNew(&mutex_console_attributes);
 8002b54:	4825      	ldr	r0, [pc, #148]	; (8002bec <MX_FREERTOS_Init+0xc0>)
 8002b56:	f008 fe7f 	bl	800b858 <osMutexNew>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <MX_FREERTOS_Init+0xc4>)
 8002b5e:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queue_sensors */
  queue_sensorsHandle = osMessageQueueNew (16, sizeof(sensors_t), &queue_sensors_attributes);
 8002b60:	4a24      	ldr	r2, [pc, #144]	; (8002bf4 <MX_FREERTOS_Init+0xc8>)
 8002b62:	2118      	movs	r1, #24
 8002b64:	2010      	movs	r0, #16
 8002b66:	f008 ffbf 	bl	800bae8 <osMessageQueueNew>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <MX_FREERTOS_Init+0xcc>)
 8002b6e:	601a      	str	r2, [r3, #0]

  /* creation of queue_reportMetar */
  queue_reportMetarHandle = osMessageQueueNew (16, sizeof(report_metar_t), &queue_reportMetar_attributes);
 8002b70:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <MX_FREERTOS_Init+0xd0>)
 8002b72:	2138      	movs	r1, #56	; 0x38
 8002b74:	2010      	movs	r0, #16
 8002b76:	f008 ffb7 	bl	800bae8 <osMessageQueueNew>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <MX_FREERTOS_Init+0xd4>)
 8002b7e:	601a      	str	r2, [r3, #0]

  /* creation of queue_reportTAF */
  queue_reportTAFHandle = osMessageQueueNew (16, sizeof(report_taf_t), &queue_reportTAF_attributes);
 8002b80:	4a20      	ldr	r2, [pc, #128]	; (8002c04 <MX_FREERTOS_Init+0xd8>)
 8002b82:	214c      	movs	r1, #76	; 0x4c
 8002b84:	2010      	movs	r0, #16
 8002b86:	f008 ffaf 	bl	800bae8 <osMessageQueueNew>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <MX_FREERTOS_Init+0xdc>)
 8002b8e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of thread_sensors */
  thread_sensorsHandle = osThreadNew(thread_sensors_func, NULL, &thread_sensors_attributes);
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <MX_FREERTOS_Init+0xe0>)
 8002b92:	2100      	movs	r1, #0
 8002b94:	481e      	ldr	r0, [pc, #120]	; (8002c10 <MX_FREERTOS_Init+0xe4>)
 8002b96:	f008 fd4b 	bl	800b630 <osThreadNew>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <MX_FREERTOS_Init+0xe8>)
 8002b9e:	601a      	str	r2, [r3, #0]

  /* creation of thread_lcd */
  thread_lcdHandle = osThreadNew(thread_lcd_func, NULL, &thread_lcd_attributes);
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <MX_FREERTOS_Init+0xec>)
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	481d      	ldr	r0, [pc, #116]	; (8002c1c <MX_FREERTOS_Init+0xf0>)
 8002ba6:	f008 fd43 	bl	800b630 <osThreadNew>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <MX_FREERTOS_Init+0xf4>)
 8002bae:	601a      	str	r2, [r3, #0]

  /* creation of thread_btooth */
  thread_btoothHandle = osThreadNew(thread_btooth_func, NULL, &thread_btooth_attributes);
 8002bb0:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <MX_FREERTOS_Init+0xf8>)
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	481c      	ldr	r0, [pc, #112]	; (8002c28 <MX_FREERTOS_Init+0xfc>)
 8002bb6:	f008 fd3b 	bl	800b630 <osThreadNew>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <MX_FREERTOS_Init+0x100>)
 8002bbe:	601a      	str	r2, [r3, #0]

  /* creation of thread_reports */
  thread_reportsHandle = osThreadNew(thread_reports_func, NULL, &thread_reports_attributes);
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <MX_FREERTOS_Init+0x104>)
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	481b      	ldr	r0, [pc, #108]	; (8002c34 <MX_FREERTOS_Init+0x108>)
 8002bc6:	f008 fd33 	bl	800b630 <osThreadNew>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <MX_FREERTOS_Init+0x10c>)
 8002bce:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	08014ac4 	.word	0x08014ac4
 8002bd8:	20006088 	.word	0x20006088
 8002bdc:	08014ad4 	.word	0x08014ad4
 8002be0:	2000608c 	.word	0x2000608c
 8002be4:	08014ae4 	.word	0x08014ae4
 8002be8:	20006098 	.word	0x20006098
 8002bec:	08014af4 	.word	0x08014af4
 8002bf0:	2000609c 	.word	0x2000609c
 8002bf4:	08014a7c 	.word	0x08014a7c
 8002bf8:	200060a8 	.word	0x200060a8
 8002bfc:	08014a94 	.word	0x08014a94
 8002c00:	20006084 	.word	0x20006084
 8002c04:	08014aac 	.word	0x08014aac
 8002c08:	20006094 	.word	0x20006094
 8002c0c:	080149ec 	.word	0x080149ec
 8002c10:	08002c3d 	.word	0x08002c3d
 8002c14:	200060a4 	.word	0x200060a4
 8002c18:	08014a10 	.word	0x08014a10
 8002c1c:	08002cb9 	.word	0x08002cb9
 8002c20:	20006080 	.word	0x20006080
 8002c24:	08014a34 	.word	0x08014a34
 8002c28:	08002ddd 	.word	0x08002ddd
 8002c2c:	20006090 	.word	0x20006090
 8002c30:	08014a58 	.word	0x08014a58
 8002c34:	08002df5 	.word	0x08002df5
 8002c38:	200060a0 	.word	0x200060a0

08002c3c <thread_sensors_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_thread_sensors_func */
void thread_sensors_func(void *argument)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN thread_sensors_func */
	if(!sensors_init()) {
 8002c44:	f001 fa1e 	bl	8004084 <sensors_init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d104      	bne.n	8002c58 <thread_sensors_func+0x1c>
		osThreadTerminate(thread_sensorsHandle);
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <thread_sensors_func+0x6c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f008 fd92 	bl	800b77c <osThreadTerminate>
	}
	sensors_t sensor_data = {0};
 8002c58:	f107 0308 	add.w	r3, r7, #8
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
 8002c68:	615a      	str	r2, [r3, #20]
  /* Infinite loop */
	for (;;) {
		sensor_get_data(&sensor_data);
 8002c6a:	f107 0308 	add.w	r3, r7, #8
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 f9de 	bl	8004030 <sensor_get_data>
		if(osMessageQueuePut(queue_sensorsHandle, &sensor_data, 0, 9) != osOK) {
 8002c74:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <thread_sensors_func+0x70>)
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	f107 0108 	add.w	r1, r7, #8
 8002c7c:	2309      	movs	r3, #9
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f008 ffb8 	bl	800bbf4 <osMessageQueuePut>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <thread_sensors_func+0x64>
			/*Send unsuccessufuly*/
#ifdef CONSOLE_DEBUG_ERROR
			char *error = "*****Error!!!osMessageQueuePut() - sensor.*****\r\n";
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <thread_sensors_func+0x74>)
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
			console_display(&huart2, error, strlen(error));
 8002c8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c90:	f7fd fac8 	bl	8000224 <strlen>
 8002c94:	4603      	mov	r3, r0
 8002c96:	461a      	mov	r2, r3
 8002c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c9a:	4806      	ldr	r0, [pc, #24]	; (8002cb4 <thread_sensors_func+0x78>)
 8002c9c:	f7ff feb6 	bl	8002a0c <console_display>
#endif
		}
		osDelay(100);
 8002ca0:	2064      	movs	r0, #100	; 0x64
 8002ca2:	f008 fdab 	bl	800b7fc <osDelay>
		sensor_get_data(&sensor_data);
 8002ca6:	e7e0      	b.n	8002c6a <thread_sensors_func+0x2e>
 8002ca8:	200060a4 	.word	0x200060a4
 8002cac:	200060a8 	.word	0x200060a8
 8002cb0:	080142bc 	.word	0x080142bc
 8002cb4:	2000626c 	.word	0x2000626c

08002cb8 <thread_lcd_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_thread_lcd_func */
void thread_lcd_func(void *argument)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b0aa      	sub	sp, #168	; 0xa8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN thread_lcd_func */
	lcd_int();
 8002cc0:	f7ff fe9a 	bl	80029f8 <lcd_int>
	sensors_t sensor_data = {0};
 8002cc4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
 8002cd4:	615a      	str	r2, [r3, #20]
	report_metar_t metar_data = {0};
 8002cd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cda:	2238      	movs	r2, #56	; 0x38
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f00b ffd7 	bl	800ec92 <memset>
	report_taf_t taf_data;
  /* Infinite loop */
	for (;;) {
		if (osMessageQueueGet(queue_sensorsHandle, &sensor_data, NULL, 0) == osOK) {
 8002ce4:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <thread_lcd_func+0x10c>)
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002cec:	2300      	movs	r3, #0
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f008 fff4 	bl	800bcdc <osMessageQueueGet>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d118      	bne.n	8002d2c <thread_lcd_func+0x74>
			display_sensor_data(&sensor_data);
 8002cfa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fd44 	bl	800278c <display_sensor_data>
			if (osMutexAcquire(mutex_sensorsHandle, osWaitForever) == osOK) {
 8002d04:	4b30      	ldr	r3, [pc, #192]	; (8002dc8 <thread_lcd_func+0x110>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f04f 31ff 	mov.w	r1, #4294967295
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f008 fe3d 	bl	800b98c <osMutexAcquire>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <thread_lcd_func+0x74>
				write_sensor_data_bt(&sensor_data);
 8002d18:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f001 f9f3 	bl	8004108 <write_sensor_data_bt>
				osMutexRelease(mutex_sensorsHandle);
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <thread_lcd_func+0x110>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f008 fe8e 	bl	800ba48 <osMutexRelease>
			}
		}
		if (osMessageQueueGet(queue_reportMetarHandle, &metar_data, NULL, 0) == osOK) {
 8002d2c:	4b27      	ldr	r3, [pc, #156]	; (8002dcc <thread_lcd_func+0x114>)
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002d34:	2300      	movs	r3, #0
 8002d36:	2200      	movs	r2, #0
 8002d38:	f008 ffd0 	bl	800bcdc <osMessageQueueGet>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <thread_lcd_func+0xbc>
			display_metar(&metar_data);
 8002d42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fd6c 	bl	8002824 <display_metar>
			if (osMutexAcquire( mutex_metarHandle, osWaitForever) == osOK) {
 8002d4c:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <thread_lcd_func+0x118>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f04f 31ff 	mov.w	r1, #4294967295
 8002d54:	4618      	mov	r0, r3
 8002d56:	f008 fe19 	bl	800b98c <osMutexAcquire>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <thread_lcd_func+0xbc>
				write_metar_data_bt(&metar_data);
 8002d60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 f82b 	bl	8003dc0 <write_metar_data_bt>
				osMutexRelease( mutex_metarHandle);
 8002d6a:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <thread_lcd_func+0x118>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f008 fe6a 	bl	800ba48 <osMutexRelease>
			}
		}
		if (osMessageQueueGet(queue_reportTAFHandle, &taf_data, NULL, 0) == osOK) {
 8002d74:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <thread_lcd_func+0x11c>)
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	f107 010c 	add.w	r1, r7, #12
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f008 ffac 	bl	800bcdc <osMessageQueueGet>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d118      	bne.n	8002dbc <thread_lcd_func+0x104>
			display_taf(&taf_data);
 8002d8a:	f107 030c 	add.w	r3, r7, #12
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fdd6 	bl	8002940 <display_taf>
			if (osMutexAcquire(mutex_tafHandle, osWaitForever) == osOK) {
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <thread_lcd_func+0x120>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f008 fdf5 	bl	800b98c <osMutexAcquire>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <thread_lcd_func+0x104>
				write_taf_data_bt(&taf_data);
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 f817 	bl	8003de0 <write_taf_data_bt>
				osMutexRelease(mutex_tafHandle);
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <thread_lcd_func+0x120>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f008 fe46 	bl	800ba48 <osMutexRelease>
			}
		}
		osDelay(1);
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f008 fd1d 	bl	800b7fc <osDelay>
		if (osMessageQueueGet(queue_sensorsHandle, &sensor_data, NULL, 0) == osOK) {
 8002dc2:	e78f      	b.n	8002ce4 <thread_lcd_func+0x2c>
 8002dc4:	200060a8 	.word	0x200060a8
 8002dc8:	20006088 	.word	0x20006088
 8002dcc:	20006084 	.word	0x20006084
 8002dd0:	2000608c 	.word	0x2000608c
 8002dd4:	20006094 	.word	0x20006094
 8002dd8:	20006098 	.word	0x20006098

08002ddc <thread_btooth_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_thread_btooth_func */
void thread_btooth_func(void *argument)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN thread_btooth_func */
	blootuoth_int();
 8002de4:	f7fe f8b0 	bl	8000f48 <blootuoth_int>
  /* Infinite loop */
	for (;;) {
		parcin_bt_command();
 8002de8:	f7fe f8ca 	bl	8000f80 <parcin_bt_command>
		osDelay(50);
 8002dec:	2032      	movs	r0, #50	; 0x32
 8002dee:	f008 fd05 	bl	800b7fc <osDelay>
		parcin_bt_command();
 8002df2:	e7f9      	b.n	8002de8 <thread_btooth_func+0xc>

08002df4 <thread_reports_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_thread_reports_func */
void thread_reports_func(void *argument)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN thread_reports_func */
	wifi_init();
 8002dfc:	f000 f9a6 	bl	800314c <wifi_init>
  /* Infinite loop */
	for (;;) {
		htpp_request_metar();
 8002e00:	f000 fa4a 	bl	8003298 <htpp_request_metar>
		htpp_request_taf();
 8002e04:	f000 fac0 	bl	8003388 <htpp_request_taf>
		osDelay(HTTP_DELAY);
 8002e08:	f64e 2060 	movw	r0, #60000	; 0xea60
 8002e0c:	f008 fcf6 	bl	800b7fc <osDelay>
		htpp_request_metar();
 8002e10:	e7f6      	b.n	8002e00 <thread_reports_func+0xc>
	...

08002e14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	; 0x28
 8002e18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
 8002e28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a33      	ldr	r2, [pc, #204]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a2c      	ldr	r2, [pc, #176]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b2a      	ldr	r3, [pc, #168]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	4b1f      	ldr	r3, [pc, #124]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002e88:	f043 0308 	orr.w	r3, r3, #8
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a17      	ldr	r2, [pc, #92]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <MX_GPIO_Init+0xec>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2120      	movs	r1, #32
 8002eba:	4812      	ldr	r0, [pc, #72]	; (8002f04 <MX_GPIO_Init+0xf0>)
 8002ebc:	f003 f8fc 	bl	80060b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <MX_GPIO_Init+0xf4>)
 8002ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ece:	f107 0314 	add.w	r3, r7, #20
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	480d      	ldr	r0, [pc, #52]	; (8002f0c <MX_GPIO_Init+0xf8>)
 8002ed6:	f002 ff5d 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002eda:	2320      	movs	r3, #32
 8002edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4804      	ldr	r0, [pc, #16]	; (8002f04 <MX_GPIO_Init+0xf0>)
 8002ef2:	f002 ff4f 	bl	8005d94 <HAL_GPIO_Init>

}
 8002ef6:	bf00      	nop
 8002ef8:	3728      	adds	r7, #40	; 0x28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40020000 	.word	0x40020000
 8002f08:	10210000 	.word	0x10210000
 8002f0c:	40020800 	.word	0x40020800

08002f10 <_sbrk_r>:
    static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit;  // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 8002f1a:	4b24      	ldr	r3, [pc, #144]	; (8002fac <_sbrk_r+0x9c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10e      	bne.n	8002f40 <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 8002f22:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <_sbrk_r+0xa0>)
 8002f24:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002f28:	4a22      	ldr	r2, [pc, #136]	; (8002fb4 <_sbrk_r+0xa4>)
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	4a22      	ldr	r2, [pc, #136]	; (8002fb8 <_sbrk_r+0xa8>)
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b1f      	ldr	r3, [pc, #124]	; (8002fb0 <_sbrk_r+0xa0>)
 8002f32:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002f36:	4a1f      	ldr	r2, [pc, #124]	; (8002fb4 <_sbrk_r+0xa4>)
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <_sbrk_r+0x9c>)
 8002f3e:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8002f40:	f00a fedc 	bl	800dcfc <xTaskGetSchedulerState>
 8002f44:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <_sbrk_r+0x3e>
 8002f4a:	466b      	mov	r3, sp
 8002f4c:	e000      	b.n	8002f50 <_sbrk_r+0x40>
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8002f50:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 8002f52:	f00a fab7 	bl	800d4c4 <vTaskSuspendAll>
    char *previousHeapEnd = currentHeapEnd;
 8002f56:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <_sbrk_r+0xb0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60bb      	str	r3, [r7, #8]
    if (currentHeapEnd + incr > limit) {
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <_sbrk_r+0xb0>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d206      	bcs.n	8002f78 <_sbrk_r+0x68>
        // Ooops, no more memory available...
        #if( configUSE_MALLOC_FAILED_HOOK == 1 )
          {
            extern void vApplicationMallocFailedHook( void );
            DRN_EXIT_CRITICAL_SECTION(usis);
 8002f6a:	f00a fab9 	bl	800d4e0 <xTaskResumeAll>
            vApplicationMallocFailedHook();
 8002f6e:	f7ff fdc9 	bl	8002b04 <vApplicationMallocFailedHook>
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
            DRN_EXIT_CRITICAL_SECTION(usis);
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295
 8002f76:	e014      	b.n	8002fa2 <_sbrk_r+0x92>
    }
    // 'incr' of memory is available: update accounting and return it.
    currentHeapEnd += incr;
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <_sbrk_r+0xb0>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	4a0f      	ldr	r2, [pc, #60]	; (8002fc0 <_sbrk_r+0xb0>)
 8002f82:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <_sbrk_r+0xa8>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <_sbrk_r+0xa8>)
 8002f8e:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 8002f90:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <_sbrk_r+0xb4>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <_sbrk_r+0xb4>)
 8002f9a:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 8002f9c:	f00a faa0 	bl	800d4e0 <xTaskResumeAll>
    return (char *) previousHeapEnd;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200060b0 	.word	0x200060b0
 8002fb0:	20020000 	.word	0x20020000
 8002fb4:	20006358 	.word	0x20006358
 8002fb8:	20000224 	.word	0x20000224
 8002fbc:	2001fe00 	.word	0x2001fe00
 8002fc0:	2000000c 	.word	0x2000000c
 8002fc4:	20000228 	.word	0x20000228

08002fc8 <__malloc_lock>:
char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)     {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002fd0:	f3ef 8305 	mrs	r3, IPSR
 8002fd4:	613b      	str	r3, [r7, #16]

	if( ulCurrentInterrupt == 0 )
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <__malloc_lock+0x1a>
	{
		xReturn = pdFALSE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	e001      	b.n	8002fe6 <__malloc_lock+0x1e>
	}
	else
	{
		xReturn = pdTRUE;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d009      	beq.n	800300c <__malloc_lock+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	e7fe      	b.n	800300a <__malloc_lock+0x42>
    vTaskSuspendAll();
 800300c:	f00a fa5a 	bl	800d4c4 <vTaskSuspendAll>
  #endif
};
 8003010:	bf00      	nop
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r)   {
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    (void)xTaskResumeAll();
 8003020:	f00a fa5e 	bl	800d4e0 <xTaskResumeAll>
  #endif
};
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f00b fdff 	bl	800ec38 <malloc>
 800303a:	4603      	mov	r3, r0
 800303c:	60fb      	str	r3, [r7, #12]
    return p;
 800303e:	68fb      	ldr	r3, [r7, #12]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
    free(pv);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f00b fdf9 	bl	800ec48 <free>
};
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <MX_I2C1_Init+0x50>)
 8003066:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <MX_I2C1_Init+0x54>)
 8003068:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <MX_I2C1_Init+0x50>)
 800306c:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <MX_I2C1_Init+0x58>)
 800306e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <MX_I2C1_Init+0x50>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003076:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <MX_I2C1_Init+0x50>)
 8003078:	2200      	movs	r2, #0
 800307a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <MX_I2C1_Init+0x50>)
 800307e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003082:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <MX_I2C1_Init+0x50>)
 8003086:	2200      	movs	r2, #0
 8003088:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <MX_I2C1_Init+0x50>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003090:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <MX_I2C1_Init+0x50>)
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <MX_I2C1_Init+0x50>)
 8003098:	2200      	movs	r2, #0
 800309a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800309c:	4804      	ldr	r0, [pc, #16]	; (80030b0 <MX_I2C1_Init+0x50>)
 800309e:	f003 f825 	bl	80060ec <HAL_I2C_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80030a8:	f000 ff4a 	bl	8003f40 <Error_Handler>
  }

}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	200060b8 	.word	0x200060b8
 80030b4:	40005400 	.word	0x40005400
 80030b8:	00061a80 	.word	0x00061a80

080030bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a19      	ldr	r2, [pc, #100]	; (8003140 <HAL_I2C_MspInit+0x84>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d12c      	bne.n	8003138 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	4b18      	ldr	r3, [pc, #96]	; (8003144 <HAL_I2C_MspInit+0x88>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a17      	ldr	r2, [pc, #92]	; (8003144 <HAL_I2C_MspInit+0x88>)
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <HAL_I2C_MspInit+0x88>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003100:	2312      	movs	r3, #18
 8003102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003104:	2301      	movs	r3, #1
 8003106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003108:	2303      	movs	r3, #3
 800310a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800310c:	2304      	movs	r3, #4
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	4619      	mov	r1, r3
 8003116:	480c      	ldr	r0, [pc, #48]	; (8003148 <HAL_I2C_MspInit+0x8c>)
 8003118:	f002 fe3c 	bl	8005d94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_I2C_MspInit+0x88>)
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <HAL_I2C_MspInit+0x88>)
 8003126:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800312a:	6413      	str	r3, [r2, #64]	; 0x40
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_I2C_MspInit+0x88>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003138:	bf00      	nop
 800313a:	3728      	adds	r7, #40	; 0x28
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40005400 	.word	0x40005400
 8003144:	40023800 	.word	0x40023800
 8003148:	40020400 	.word	0x40020400

0800314c <wifi_init>:
/**
 *  Provides internet connection and dma start
 *  @context: should be used only one time before http reques.
 */
void wifi_init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
	/* Init RingBuffer_DMA object */
	RingBuffer_DMA_Init(&rx_buf_wifi, huart4.hdmarx, rx_wifi, BUF_SIZE_WIFI);
 8003150:	4b45      	ldr	r3, [pc, #276]	; (8003268 <wifi_init+0x11c>)
 8003152:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003158:	4a44      	ldr	r2, [pc, #272]	; (800326c <wifi_init+0x120>)
 800315a:	4845      	ldr	r0, [pc, #276]	; (8003270 <wifi_init+0x124>)
 800315c:	f008 f9de 	bl	800b51c <RingBuffer_DMA_Init>
	/* Start UART4 DMA Reception */
	HAL_UART_Receive_DMA(&huart4, rx_wifi, BUF_SIZE_WIFI);
 8003160:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003164:	4941      	ldr	r1, [pc, #260]	; (800326c <wifi_init+0x120>)
 8003166:	4840      	ldr	r0, [pc, #256]	; (8003268 <wifi_init+0x11c>)
 8003168:	f005 fb3e 	bl	80087e8 <HAL_UART_Receive_DMA>

#ifdef CONSOLE_DEBUG_AT
	/* CONNECT TO WIFI ROUTER */
	/* Simple ping */
	sprintf(wifi_cmd, "AT+RST\r\n");
 800316c:	4941      	ldr	r1, [pc, #260]	; (8003274 <wifi_init+0x128>)
 800316e:	4842      	ldr	r0, [pc, #264]	; (8003278 <wifi_init+0x12c>)
 8003170:	f008 f944 	bl	800b3fc <sprintf_>
	HAL_UART_Transmit(&huart4, (uint8_t*) wifi_cmd, strlen(wifi_cmd), 1000);
 8003174:	4840      	ldr	r0, [pc, #256]	; (8003278 <wifi_init+0x12c>)
 8003176:	f7fd f855 	bl	8000224 <strlen>
 800317a:	4603      	mov	r3, r0
 800317c:	b29a      	uxth	r2, r3
 800317e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003182:	493d      	ldr	r1, [pc, #244]	; (8003278 <wifi_init+0x12c>)
 8003184:	4838      	ldr	r0, [pc, #224]	; (8003268 <wifi_init+0x11c>)
 8003186:	f005 fa96 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(500);
 800318a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800318e:	f008 fb35 	bl	800b7fc <osDelay>
	UART_Read_AT();
 8003192:	f000 f971 	bl	8003478 <UART_Read_AT>

	/* Turn on message echo */
	sprintf(wifi_cmd, "ATE1\r\n");
 8003196:	4939      	ldr	r1, [pc, #228]	; (800327c <wifi_init+0x130>)
 8003198:	4837      	ldr	r0, [pc, #220]	; (8003278 <wifi_init+0x12c>)
 800319a:	f008 f92f 	bl	800b3fc <sprintf_>
	HAL_UART_Transmit(&huart4, (uint8_t*) wifi_cmd, strlen(wifi_cmd), 1000);
 800319e:	4836      	ldr	r0, [pc, #216]	; (8003278 <wifi_init+0x12c>)
 80031a0:	f7fd f840 	bl	8000224 <strlen>
 80031a4:	4603      	mov	r3, r0
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ac:	4932      	ldr	r1, [pc, #200]	; (8003278 <wifi_init+0x12c>)
 80031ae:	482e      	ldr	r0, [pc, #184]	; (8003268 <wifi_init+0x11c>)
 80031b0:	f005 fa81 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(5);
 80031b4:	2005      	movs	r0, #5
 80031b6:	f008 fb21 	bl	800b7fc <osDelay>
	UART_Read_AT();
 80031ba:	f000 f95d 	bl	8003478 <UART_Read_AT>

	/* Display version info */
	sprintf(wifi_cmd, "AT+GMR\r\n");
 80031be:	4930      	ldr	r1, [pc, #192]	; (8003280 <wifi_init+0x134>)
 80031c0:	482d      	ldr	r0, [pc, #180]	; (8003278 <wifi_init+0x12c>)
 80031c2:	f008 f91b 	bl	800b3fc <sprintf_>
	HAL_UART_Transmit(&huart4, (uint8_t*) wifi_cmd, strlen(wifi_cmd), 1000);
 80031c6:	482c      	ldr	r0, [pc, #176]	; (8003278 <wifi_init+0x12c>)
 80031c8:	f7fd f82c 	bl	8000224 <strlen>
 80031cc:	4603      	mov	r3, r0
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031d4:	4928      	ldr	r1, [pc, #160]	; (8003278 <wifi_init+0x12c>)
 80031d6:	4824      	ldr	r0, [pc, #144]	; (8003268 <wifi_init+0x11c>)
 80031d8:	f005 fa6d 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(30);
 80031dc:	201e      	movs	r0, #30
 80031de:	f008 fb0d 	bl	800b7fc <osDelay>
	UART_Read_AT();
 80031e2:	f000 f949 	bl	8003478 <UART_Read_AT>
#endif

	/* Set to client mode */
	sprintf(wifi_cmd, "AT+CWMODE_CUR=1\r\n");
 80031e6:	4927      	ldr	r1, [pc, #156]	; (8003284 <wifi_init+0x138>)
 80031e8:	4823      	ldr	r0, [pc, #140]	; (8003278 <wifi_init+0x12c>)
 80031ea:	f008 f907 	bl	800b3fc <sprintf_>
	HAL_UART_Transmit(&huart4, (uint8_t*) wifi_cmd, strlen(wifi_cmd), 1000);
 80031ee:	4822      	ldr	r0, [pc, #136]	; (8003278 <wifi_init+0x12c>)
 80031f0:	f7fd f818 	bl	8000224 <strlen>
 80031f4:	4603      	mov	r3, r0
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031fc:	491e      	ldr	r1, [pc, #120]	; (8003278 <wifi_init+0x12c>)
 80031fe:	481a      	ldr	r0, [pc, #104]	; (8003268 <wifi_init+0x11c>)
 8003200:	f005 fa59 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(10);
 8003204:	200a      	movs	r0, #10
 8003206:	f008 faf9 	bl	800b7fc <osDelay>
#ifdef CONSOLE_DEBUG_AT
	UART_Read_AT();
 800320a:	f000 f935 	bl	8003478 <UART_Read_AT>
#endif
	/* Connect to network */
	sprintf(wifi_cmd, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", WIFI_SSID, WIFI_PASS);
 800320e:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <wifi_init+0x13c>)
 8003210:	4a1e      	ldr	r2, [pc, #120]	; (800328c <wifi_init+0x140>)
 8003212:	491f      	ldr	r1, [pc, #124]	; (8003290 <wifi_init+0x144>)
 8003214:	4818      	ldr	r0, [pc, #96]	; (8003278 <wifi_init+0x12c>)
 8003216:	f008 f8f1 	bl	800b3fc <sprintf_>
	HAL_UART_Transmit(&huart4, (uint8_t*) wifi_cmd, strlen(wifi_cmd), 1000);
 800321a:	4817      	ldr	r0, [pc, #92]	; (8003278 <wifi_init+0x12c>)
 800321c:	f7fd f802 	bl	8000224 <strlen>
 8003220:	4603      	mov	r3, r0
 8003222:	b29a      	uxth	r2, r3
 8003224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003228:	4913      	ldr	r1, [pc, #76]	; (8003278 <wifi_init+0x12c>)
 800322a:	480f      	ldr	r0, [pc, #60]	; (8003268 <wifi_init+0x11c>)
 800322c:	f005 fa43 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(10000);
 8003230:	f242 7010 	movw	r0, #10000	; 0x2710
 8003234:	f008 fae2 	bl	800b7fc <osDelay>
#ifdef CONSOLE_DEBUG_AT
	UART_Read_AT();
 8003238:	f000 f91e 	bl	8003478 <UART_Read_AT>
#endif
	/* CONNECTED (hope so) */
#ifdef CONSOLE_DEBUG_AT
	/* Check for IP */
	sprintf(wifi_cmd, "AT+CIFSR\r\n");
 800323c:	4915      	ldr	r1, [pc, #84]	; (8003294 <wifi_init+0x148>)
 800323e:	480e      	ldr	r0, [pc, #56]	; (8003278 <wifi_init+0x12c>)
 8003240:	f008 f8dc 	bl	800b3fc <sprintf_>
	HAL_UART_Transmit(&huart4, (uint8_t*) wifi_cmd, strlen(wifi_cmd), 1000);
 8003244:	480c      	ldr	r0, [pc, #48]	; (8003278 <wifi_init+0x12c>)
 8003246:	f7fc ffed 	bl	8000224 <strlen>
 800324a:	4603      	mov	r3, r0
 800324c:	b29a      	uxth	r2, r3
 800324e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003252:	4909      	ldr	r1, [pc, #36]	; (8003278 <wifi_init+0x12c>)
 8003254:	4804      	ldr	r0, [pc, #16]	; (8003268 <wifi_init+0x11c>)
 8003256:	f005 fa2e 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(30);
 800325a:	201e      	movs	r0, #30
 800325c:	f008 face 	bl	800b7fc <osDelay>

	UART_Read_AT();
 8003260:	f000 f90a 	bl	8003478 <UART_Read_AT>
#endif
}
 8003264:	bf00      	nop
 8003266:	bd80      	pop	{r7, pc}
 8003268:	2000622c 	.word	0x2000622c
 800326c:	20002080 	.word	0x20002080
 8003270:	20002070 	.word	0x20002070
 8003274:	080142f0 	.word	0x080142f0
 8003278:	20001e70 	.word	0x20001e70
 800327c:	080142fc 	.word	0x080142fc
 8003280:	08014304 	.word	0x08014304
 8003284:	08014310 	.word	0x08014310
 8003288:	08014324 	.word	0x08014324
 800328c:	08014330 	.word	0x08014330
 8003290:	0801433c 	.word	0x0801433c
 8003294:	08014358 	.word	0x08014358

08003298 <htpp_request_metar>:

/**
 *  Executes http request for METAR.
 */
void htpp_request_metar(void) {
 8003298:	b580      	push	{r7, lr}
 800329a:	b0c2      	sub	sp, #264	; 0x108
 800329c:	af02      	add	r7, sp, #8
	/* Create request string for METAR*/
	char http_req[256];
	sprintf(http_req, "GET /api/metar/%s?token=%s HTTP/1.1\r\nHost: %s\r\n\r\n",
 800329e:	4638      	mov	r0, r7
 80032a0:	4b30      	ldr	r3, [pc, #192]	; (8003364 <htpp_request_metar+0xcc>)
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	4b30      	ldr	r3, [pc, #192]	; (8003368 <htpp_request_metar+0xd0>)
 80032a6:	4a31      	ldr	r2, [pc, #196]	; (800336c <htpp_request_metar+0xd4>)
 80032a8:	4931      	ldr	r1, [pc, #196]	; (8003370 <htpp_request_metar+0xd8>)
 80032aa:	f008 f8a7 	bl	800b3fc <sprintf_>
			           AIRPORT,SERVER_TOKEN,SERVER_ADDRESS);

	/* Connect to server */
	sprintf(wifi_cmd, "AT+CIPSTART=\"TCP\",\"%s\",80\r\n", SERVER_ADDRESS);
 80032ae:	4a2d      	ldr	r2, [pc, #180]	; (8003364 <htpp_request_metar+0xcc>)
 80032b0:	4930      	ldr	r1, [pc, #192]	; (8003374 <htpp_request_metar+0xdc>)
 80032b2:	4831      	ldr	r0, [pc, #196]	; (8003378 <htpp_request_metar+0xe0>)
 80032b4:	f008 f8a2 	bl	800b3fc <sprintf_>
	HAL_UART_Transmit(&huart4, (uint8_t*) wifi_cmd, strlen(wifi_cmd), 1000);
 80032b8:	482f      	ldr	r0, [pc, #188]	; (8003378 <htpp_request_metar+0xe0>)
 80032ba:	f7fc ffb3 	bl	8000224 <strlen>
 80032be:	4603      	mov	r3, r0
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c6:	492c      	ldr	r1, [pc, #176]	; (8003378 <htpp_request_metar+0xe0>)
 80032c8:	482c      	ldr	r0, [pc, #176]	; (800337c <htpp_request_metar+0xe4>)
 80032ca:	f005 f9f4 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(500);
 80032ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032d2:	f008 fa93 	bl	800b7fc <osDelay>
#ifdef CONSOLE_DEBUG_AT
	UART_Read_AT();
 80032d6:	f000 f8cf 	bl	8003478 <UART_Read_AT>
#endif
	/* Send data length (length of request) */
	sprintf(wifi_cmd, "AT+CIPSEND=%d\r\n", strlen(http_req));
 80032da:	463b      	mov	r3, r7
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fc ffa1 	bl	8000224 <strlen>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	4926      	ldr	r1, [pc, #152]	; (8003380 <htpp_request_metar+0xe8>)
 80032e8:	4823      	ldr	r0, [pc, #140]	; (8003378 <htpp_request_metar+0xe0>)
 80032ea:	f008 f887 	bl	800b3fc <sprintf_>
	HAL_UART_Transmit(&huart4, (uint8_t*) wifi_cmd, strlen(wifi_cmd), 1000);
 80032ee:	4822      	ldr	r0, [pc, #136]	; (8003378 <htpp_request_metar+0xe0>)
 80032f0:	f7fc ff98 	bl	8000224 <strlen>
 80032f4:	4603      	mov	r3, r0
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032fc:	491e      	ldr	r1, [pc, #120]	; (8003378 <htpp_request_metar+0xe0>)
 80032fe:	481f      	ldr	r0, [pc, #124]	; (800337c <htpp_request_metar+0xe4>)
 8003300:	f005 f9d9 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(20); // wait for ">"
 8003304:	2014      	movs	r0, #20
 8003306:	f008 fa79 	bl	800b7fc <osDelay>
#ifdef CONSOLE_DEBUG_AT
	UART_Read_AT();
 800330a:	f000 f8b5 	bl	8003478 <UART_Read_AT>
#endif
	/* Send data METAR*/
	HAL_UART_Transmit(&huart4, (uint8_t*) http_req, strlen(http_req), 1000);
 800330e:	463b      	mov	r3, r7
 8003310:	4618      	mov	r0, r3
 8003312:	f7fc ff87 	bl	8000224 <strlen>
 8003316:	4603      	mov	r3, r0
 8003318:	b29a      	uxth	r2, r3
 800331a:	4639      	mov	r1, r7
 800331c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003320:	4816      	ldr	r0, [pc, #88]	; (800337c <htpp_request_metar+0xe4>)
 8003322:	f005 f9c8 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(2000);
 8003326:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800332a:	f008 fa67 	bl	800b7fc <osDelay>
	parcing_data_metar();
 800332e:	f000 fb07 	bl	8003940 <parcing_data_metar>

	/* Disconnect from server */
	sprintf(wifi_cmd, "AT+CIPCLOSE\r\n");
 8003332:	4914      	ldr	r1, [pc, #80]	; (8003384 <htpp_request_metar+0xec>)
 8003334:	4810      	ldr	r0, [pc, #64]	; (8003378 <htpp_request_metar+0xe0>)
 8003336:	f008 f861 	bl	800b3fc <sprintf_>
	HAL_UART_Transmit(&huart4, (uint8_t*) wifi_cmd, strlen(wifi_cmd), 1000);
 800333a:	480f      	ldr	r0, [pc, #60]	; (8003378 <htpp_request_metar+0xe0>)
 800333c:	f7fc ff72 	bl	8000224 <strlen>
 8003340:	4603      	mov	r3, r0
 8003342:	b29a      	uxth	r2, r3
 8003344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003348:	490b      	ldr	r1, [pc, #44]	; (8003378 <htpp_request_metar+0xe0>)
 800334a:	480c      	ldr	r0, [pc, #48]	; (800337c <htpp_request_metar+0xe4>)
 800334c:	f005 f9b3 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(20);
 8003350:	2014      	movs	r0, #20
 8003352:	f008 fa53 	bl	800b7fc <osDelay>
#ifdef CONSOLE_DEBUG_AT
	UART_Read_AT();
 8003356:	f000 f88f 	bl	8003478 <UART_Read_AT>
#endif
}
 800335a:	bf00      	nop
 800335c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	080143cc 	.word	0x080143cc
 8003368:	08014364 	.word	0x08014364
 800336c:	08014390 	.word	0x08014390
 8003370:	08014398 	.word	0x08014398
 8003374:	080143d8 	.word	0x080143d8
 8003378:	20001e70 	.word	0x20001e70
 800337c:	2000622c 	.word	0x2000622c
 8003380:	080143f4 	.word	0x080143f4
 8003384:	08014404 	.word	0x08014404

08003388 <htpp_request_taf>:

/**
 *  Executes http request for TAF.
 */
void htpp_request_taf(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b0c2      	sub	sp, #264	; 0x108
 800338c:	af02      	add	r7, sp, #8
	char http_req[256];
	/* Create request string for TAF*/
	sprintf(http_req, "GET /api/taf/%s?token=%s HTTP/1.1\r\nHost: %s\r\n\r\n",
 800338e:	4638      	mov	r0, r7
 8003390:	4b30      	ldr	r3, [pc, #192]	; (8003454 <htpp_request_taf+0xcc>)
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	4b30      	ldr	r3, [pc, #192]	; (8003458 <htpp_request_taf+0xd0>)
 8003396:	4a31      	ldr	r2, [pc, #196]	; (800345c <htpp_request_taf+0xd4>)
 8003398:	4931      	ldr	r1, [pc, #196]	; (8003460 <htpp_request_taf+0xd8>)
 800339a:	f008 f82f 	bl	800b3fc <sprintf_>
			AIRPORT, SERVER_TOKEN, SERVER_ADDRESS);

	/* Connect to server */
	sprintf(wifi_cmd, "AT+CIPSTART=\"TCP\",\"%s\",80\r\n", SERVER_ADDRESS);
 800339e:	4a2d      	ldr	r2, [pc, #180]	; (8003454 <htpp_request_taf+0xcc>)
 80033a0:	4930      	ldr	r1, [pc, #192]	; (8003464 <htpp_request_taf+0xdc>)
 80033a2:	4831      	ldr	r0, [pc, #196]	; (8003468 <htpp_request_taf+0xe0>)
 80033a4:	f008 f82a 	bl	800b3fc <sprintf_>
	HAL_UART_Transmit(&huart4, (uint8_t*) wifi_cmd, strlen(wifi_cmd), 1000);
 80033a8:	482f      	ldr	r0, [pc, #188]	; (8003468 <htpp_request_taf+0xe0>)
 80033aa:	f7fc ff3b 	bl	8000224 <strlen>
 80033ae:	4603      	mov	r3, r0
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033b6:	492c      	ldr	r1, [pc, #176]	; (8003468 <htpp_request_taf+0xe0>)
 80033b8:	482c      	ldr	r0, [pc, #176]	; (800346c <htpp_request_taf+0xe4>)
 80033ba:	f005 f97c 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(500);
 80033be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033c2:	f008 fa1b 	bl	800b7fc <osDelay>
#ifdef CONSOLE_DEBUG_AT
	UART_Read_AT();
 80033c6:	f000 f857 	bl	8003478 <UART_Read_AT>
#endif

	/* Send data length (length of request) */
	sprintf(wifi_cmd, "AT+CIPSEND=%d\r\n", strlen(http_req));
 80033ca:	463b      	mov	r3, r7
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fc ff29 	bl	8000224 <strlen>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	4926      	ldr	r1, [pc, #152]	; (8003470 <htpp_request_taf+0xe8>)
 80033d8:	4823      	ldr	r0, [pc, #140]	; (8003468 <htpp_request_taf+0xe0>)
 80033da:	f008 f80f 	bl	800b3fc <sprintf_>
	HAL_UART_Transmit(&huart4, (uint8_t*) wifi_cmd, strlen(wifi_cmd), 1000);
 80033de:	4822      	ldr	r0, [pc, #136]	; (8003468 <htpp_request_taf+0xe0>)
 80033e0:	f7fc ff20 	bl	8000224 <strlen>
 80033e4:	4603      	mov	r3, r0
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ec:	491e      	ldr	r1, [pc, #120]	; (8003468 <htpp_request_taf+0xe0>)
 80033ee:	481f      	ldr	r0, [pc, #124]	; (800346c <htpp_request_taf+0xe4>)
 80033f0:	f005 f961 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(20); // wait for ">"
 80033f4:	2014      	movs	r0, #20
 80033f6:	f008 fa01 	bl	800b7fc <osDelay>
#ifdef CONSOLE_DEBUG_AT
	UART_Read_AT();
 80033fa:	f000 f83d 	bl	8003478 <UART_Read_AT>
#endif

	/* Send data TAF*/
	HAL_UART_Transmit(&huart4, (uint8_t*) http_req, strlen(http_req), 1000);
 80033fe:	463b      	mov	r3, r7
 8003400:	4618      	mov	r0, r3
 8003402:	f7fc ff0f 	bl	8000224 <strlen>
 8003406:	4603      	mov	r3, r0
 8003408:	b29a      	uxth	r2, r3
 800340a:	4639      	mov	r1, r7
 800340c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003410:	4816      	ldr	r0, [pc, #88]	; (800346c <htpp_request_taf+0xe4>)
 8003412:	f005 f950 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(2500);
 8003416:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800341a:	f008 f9ef 	bl	800b7fc <osDelay>
	parcing_data_taf();
 800341e:	f000 fb45 	bl	8003aac <parcing_data_taf>

	/* Disconnect from server */
	sprintf(wifi_cmd, "AT+CIPCLOSE\r\n");
 8003422:	4914      	ldr	r1, [pc, #80]	; (8003474 <htpp_request_taf+0xec>)
 8003424:	4810      	ldr	r0, [pc, #64]	; (8003468 <htpp_request_taf+0xe0>)
 8003426:	f007 ffe9 	bl	800b3fc <sprintf_>
	HAL_UART_Transmit(&huart4, (uint8_t*) wifi_cmd, strlen(wifi_cmd), 1000);
 800342a:	480f      	ldr	r0, [pc, #60]	; (8003468 <htpp_request_taf+0xe0>)
 800342c:	f7fc fefa 	bl	8000224 <strlen>
 8003430:	4603      	mov	r3, r0
 8003432:	b29a      	uxth	r2, r3
 8003434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003438:	490b      	ldr	r1, [pc, #44]	; (8003468 <htpp_request_taf+0xe0>)
 800343a:	480c      	ldr	r0, [pc, #48]	; (800346c <htpp_request_taf+0xe4>)
 800343c:	f005 f93b 	bl	80086b6 <HAL_UART_Transmit>
	osDelay(20);
 8003440:	2014      	movs	r0, #20
 8003442:	f008 f9db 	bl	800b7fc <osDelay>
#ifdef CONSOLE_DEBUG_AT
	UART_Read_AT();
 8003446:	f000 f817 	bl	8003478 <UART_Read_AT>
#endif
}
 800344a:	bf00      	nop
 800344c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	080143cc 	.word	0x080143cc
 8003458:	08014364 	.word	0x08014364
 800345c:	08014390 	.word	0x08014390
 8003460:	08014414 	.word	0x08014414
 8003464:	080143d8 	.word	0x080143d8
 8003468:	20001e70 	.word	0x20001e70
 800346c:	2000622c 	.word	0x2000622c
 8003470:	080143f4 	.word	0x080143f4
 8003474:	08014404 	.word	0x08014404

08003478 <UART_Read_AT>:
 *  Reads AT's commands response of wifi module from the ring buffer and displays them to console.
 *  @context: required only for debug
 */
#ifdef CONSOLE_DEBUG_AT
static void UART_Read_AT(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
	/* Check number of bytes in RingBuffer */
    int32_t rx_count_wifi = RingBuffer_DMA_Count(&rx_buf_wifi);
 800347e:	4820      	ldr	r0, [pc, #128]	; (8003500 <UART_Read_AT+0x88>)
 8003480:	f007 ffee 	bl	800b460 <RingBuffer_DMA_Count>
 8003484:	4603      	mov	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]
	uint32_t icmd = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	60bb      	str	r3, [r7, #8]
	console_display(&huart2, "\r\n", strlen("\r\n"));
 800348c:	2202      	movs	r2, #2
 800348e:	491d      	ldr	r1, [pc, #116]	; (8003504 <UART_Read_AT+0x8c>)
 8003490:	481d      	ldr	r0, [pc, #116]	; (8003508 <UART_Read_AT+0x90>)
 8003492:	f7ff fabb 	bl	8002a0c <console_display>
	while (rx_count_wifi--) {
 8003496:	e029      	b.n	80034ec <UART_Read_AT+0x74>
		/* Read out one byte from RingBuffer */
		uint8_t b = RingBuffer_DMA_GetByte(&rx_buf_wifi);
 8003498:	4819      	ldr	r0, [pc, #100]	; (8003500 <UART_Read_AT+0x88>)
 800349a:	f008 f808 	bl	800b4ae <RingBuffer_DMA_GetByte>
 800349e:	4603      	mov	r3, r0
 80034a0:	71fb      	strb	r3, [r7, #7]
		if (b == '\n') { /* If \n process command */
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	2b0a      	cmp	r3, #10
 80034a6:	d115      	bne.n	80034d4 <UART_Read_AT+0x5c>
			/* Terminate string with \0 */
			wifi_response[icmd] = 0;
 80034a8:	4a18      	ldr	r2, [pc, #96]	; (800350c <UART_Read_AT+0x94>)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4413      	add	r3, r2
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
			icmd = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
			/*transmite to console*/
			console_display(&huart2, wifi_response, strlen(wifi_response));
 80034b6:	4815      	ldr	r0, [pc, #84]	; (800350c <UART_Read_AT+0x94>)
 80034b8:	f7fc feb4 	bl	8000224 <strlen>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	4912      	ldr	r1, [pc, #72]	; (800350c <UART_Read_AT+0x94>)
 80034c2:	4811      	ldr	r0, [pc, #68]	; (8003508 <UART_Read_AT+0x90>)
 80034c4:	f7ff faa2 	bl	8002a0c <console_display>
			console_display(&huart2, "\r\n", strlen("\r\n"));
 80034c8:	2202      	movs	r2, #2
 80034ca:	490e      	ldr	r1, [pc, #56]	; (8003504 <UART_Read_AT+0x8c>)
 80034cc:	480e      	ldr	r0, [pc, #56]	; (8003508 <UART_Read_AT+0x90>)
 80034ce:	f7ff fa9d 	bl	8002a0c <console_display>
 80034d2:	e00b      	b.n	80034ec <UART_Read_AT+0x74>

		} else if (b == '\r') { /* If \r skip */
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	2b0d      	cmp	r3, #13
 80034d8:	d100      	bne.n	80034dc <UART_Read_AT+0x64>
			continue;
 80034da:	e007      	b.n	80034ec <UART_Read_AT+0x74>
		} else { /* If regular character, put it into wifi_response[] */
			wifi_response[icmd++ % BUF_SIZE_WIFI] = b;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	60ba      	str	r2, [r7, #8]
 80034e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034e6:	4909      	ldr	r1, [pc, #36]	; (800350c <UART_Read_AT+0x94>)
 80034e8:	79fa      	ldrb	r2, [r7, #7]
 80034ea:	54ca      	strb	r2, [r1, r3]
	while (rx_count_wifi--) {
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1e5a      	subs	r2, r3, #1
 80034f0:	60fa      	str	r2, [r7, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1d0      	bne.n	8003498 <UART_Read_AT+0x20>
		}
	}
}
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20002070 	.word	0x20002070
 8003504:	08014444 	.word	0x08014444
 8003508:	2000626c 	.word	0x2000626c
 800350c:	20004080 	.word	0x20004080

08003510 <UART_Read_http>:

/**
 *  Reads http response from the server and display them to console in debug mode
 */
static void UART_Read_http(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
	/* Check number of bytes in RingBuffer */
	int32_t rx_count_wifi = RingBuffer_DMA_Count(&rx_buf_wifi);
 8003516:	4818      	ldr	r0, [pc, #96]	; (8003578 <UART_Read_http+0x68>)
 8003518:	f007 ffa2 	bl	800b460 <RingBuffer_DMA_Count>
 800351c:	4603      	mov	r3, r0
 800351e:	60fb      	str	r3, [r7, #12]
	uint32_t icmd = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
	wifi_response[icmd] = 0;
 8003524:	4a15      	ldr	r2, [pc, #84]	; (800357c <UART_Read_http+0x6c>)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4413      	add	r3, r2
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
	while (rx_count_wifi--) {
 800352e:	e00c      	b.n	800354a <UART_Read_http+0x3a>
		uint8_t b = RingBuffer_DMA_GetByte(&rx_buf_wifi);
 8003530:	4811      	ldr	r0, [pc, #68]	; (8003578 <UART_Read_http+0x68>)
 8003532:	f007 ffbc 	bl	800b4ae <RingBuffer_DMA_GetByte>
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
		wifi_response[icmd++ % BUF_SIZE_WIFI] = b;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	60ba      	str	r2, [r7, #8]
 8003540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003544:	490d      	ldr	r1, [pc, #52]	; (800357c <UART_Read_http+0x6c>)
 8003546:	79fa      	ldrb	r2, [r7, #7]
 8003548:	54ca      	strb	r2, [r1, r3]
	while (rx_count_wifi--) {
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1e5a      	subs	r2, r3, #1
 800354e:	60fa      	str	r2, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ed      	bne.n	8003530 <UART_Read_http+0x20>
	}
#ifdef CONSOLE_DEBUG_AT
	console_display(&huart2, wifi_response, strlen(wifi_response));
 8003554:	4809      	ldr	r0, [pc, #36]	; (800357c <UART_Read_http+0x6c>)
 8003556:	f7fc fe65 	bl	8000224 <strlen>
 800355a:	4603      	mov	r3, r0
 800355c:	461a      	mov	r2, r3
 800355e:	4907      	ldr	r1, [pc, #28]	; (800357c <UART_Read_http+0x6c>)
 8003560:	4807      	ldr	r0, [pc, #28]	; (8003580 <UART_Read_http+0x70>)
 8003562:	f7ff fa53 	bl	8002a0c <console_display>
	console_display(&huart2, "\r\n", strlen("\r\n"));
 8003566:	2202      	movs	r2, #2
 8003568:	4906      	ldr	r1, [pc, #24]	; (8003584 <UART_Read_http+0x74>)
 800356a:	4805      	ldr	r0, [pc, #20]	; (8003580 <UART_Read_http+0x70>)
 800356c:	f7ff fa4e 	bl	8002a0c <console_display>
#endif
}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20002070 	.word	0x20002070
 800357c:	20004080 	.word	0x20004080
 8003580:	2000626c 	.word	0x2000626c
 8003584:	08014444 	.word	0x08014444

08003588 <json_parsing_metar>:
 *  Provides JSON parcing of METAR report
 *  @data: data for parsing
 *  @return: 1 in success or 0 if not
 */
static uint8_t json_parsing_metar(const char* const data)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b0a4      	sub	sp, #144	; 0x90
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	int status = 1;
 8003590:	2301      	movs	r3, #1
 8003592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	cJSON *metar_root = cJSON_Parse(data);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fe fd54 	bl	8002044 <cJSON_Parse>
 800359c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	if (metar_root == NULL) {
 80035a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d110      	bne.n	80035ca <json_parsing_metar+0x42>
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!cJSON_Parse() - metar.*****\r\n";
 80035a8:	4b85      	ldr	r3, [pc, #532]	; (80037c0 <json_parsing_metar+0x238>)
 80035aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		console_display(&huart2, error, strlen(error));
 80035ae:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80035b2:	f7fc fe37 	bl	8000224 <strlen>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80035be:	4881      	ldr	r0, [pc, #516]	; (80037c4 <json_parsing_metar+0x23c>)
 80035c0:	f7ff fa24 	bl	8002a0c <console_display>
#endif
		status = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}
	report_metar_t metar_data_q;
	if(!json_get_data_int(metar_root, "altimeter", &metar_data_q.QNH_m_report, "value")) {
 80035ca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80035ce:	4b7e      	ldr	r3, [pc, #504]	; (80037c8 <json_parsing_metar+0x240>)
 80035d0:	497e      	ldr	r1, [pc, #504]	; (80037cc <json_parsing_metar+0x244>)
 80035d2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80035d6:	f000 f91f 	bl	8003818 <json_get_data_int>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d112      	bne.n	8003606 <json_parsing_metar+0x7e>
		metar_data_q.QNH_m_report = ERROR_VALUE;
 80035e0:	4b7b      	ldr	r3, [pc, #492]	; (80037d0 <json_parsing_metar+0x248>)
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!json_get_data_int() - QNH metar.*****\r\n";
 80035e4:	4b7b      	ldr	r3, [pc, #492]	; (80037d4 <json_parsing_metar+0x24c>)
 80035e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		console_display(&huart2, error, strlen(error));
 80035ea:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80035ee:	f7fc fe19 	bl	8000224 <strlen>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461a      	mov	r2, r3
 80035f6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80035fa:	4872      	ldr	r0, [pc, #456]	; (80037c4 <json_parsing_metar+0x23c>)
 80035fc:	f7ff fa06 	bl	8002a0c <console_display>
#endif
		status = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}
	if(!json_get_data_int(metar_root, "temperature", &metar_data_q.temp_m_report, "value")) {
 8003606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800360a:	1d1a      	adds	r2, r3, #4
 800360c:	4b6e      	ldr	r3, [pc, #440]	; (80037c8 <json_parsing_metar+0x240>)
 800360e:	4972      	ldr	r1, [pc, #456]	; (80037d8 <json_parsing_metar+0x250>)
 8003610:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003614:	f000 f900 	bl	8003818 <json_get_data_int>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <json_parsing_metar+0xb6>
		metar_data_q.temp_m_report = ERROR_VALUE;
 800361e:	4b6c      	ldr	r3, [pc, #432]	; (80037d0 <json_parsing_metar+0x248>)
 8003620:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!json_get_data_int() - temp metar.*****\r\n";
 8003622:	4b6e      	ldr	r3, [pc, #440]	; (80037dc <json_parsing_metar+0x254>)
 8003624:	67fb      	str	r3, [r7, #124]	; 0x7c
		console_display(&huart2, error, strlen(error));
 8003626:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003628:	f7fc fdfc 	bl	8000224 <strlen>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003632:	4864      	ldr	r0, [pc, #400]	; (80037c4 <json_parsing_metar+0x23c>)
 8003634:	f7ff f9ea 	bl	8002a0c <console_display>
#endif
		status = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}

	if(!json_get_data_int(metar_root, "dewpoint", &metar_data_q.dewpoint_m_report, "value")) {
 800363e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003642:	f103 0208 	add.w	r2, r3, #8
 8003646:	4b60      	ldr	r3, [pc, #384]	; (80037c8 <json_parsing_metar+0x240>)
 8003648:	4965      	ldr	r1, [pc, #404]	; (80037e0 <json_parsing_metar+0x258>)
 800364a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800364e:	f000 f8e3 	bl	8003818 <json_get_data_int>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10f      	bne.n	8003678 <json_parsing_metar+0xf0>
		metar_data_q.dewpoint_m_report = ERROR_VALUE;
 8003658:	4b5d      	ldr	r3, [pc, #372]	; (80037d0 <json_parsing_metar+0x248>)
 800365a:	637b      	str	r3, [r7, #52]	; 0x34
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!json_get_data_int() - dewpoint metar.*****\r\n";
 800365c:	4b61      	ldr	r3, [pc, #388]	; (80037e4 <json_parsing_metar+0x25c>)
 800365e:	67bb      	str	r3, [r7, #120]	; 0x78
		console_display(&huart2, error, strlen(error));
 8003660:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003662:	f7fc fddf 	bl	8000224 <strlen>
 8003666:	4603      	mov	r3, r0
 8003668:	461a      	mov	r2, r3
 800366a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800366c:	4855      	ldr	r0, [pc, #340]	; (80037c4 <json_parsing_metar+0x23c>)
 800366e:	f7ff f9cd 	bl	8002a0c <console_display>
#endif
		status = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}

	if(!json_get_data_int(metar_root, "visibility", &metar_data_q.visibility_m_report, "value")) {
 8003678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800367c:	f103 020c 	add.w	r2, r3, #12
 8003680:	4b51      	ldr	r3, [pc, #324]	; (80037c8 <json_parsing_metar+0x240>)
 8003682:	4959      	ldr	r1, [pc, #356]	; (80037e8 <json_parsing_metar+0x260>)
 8003684:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003688:	f000 f8c6 	bl	8003818 <json_get_data_int>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10f      	bne.n	80036b2 <json_parsing_metar+0x12a>
		metar_data_q.visibility_m_report = ERROR_VALUE;
 8003692:	4b4f      	ldr	r3, [pc, #316]	; (80037d0 <json_parsing_metar+0x248>)
 8003694:	63bb      	str	r3, [r7, #56]	; 0x38
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!json_get_data_int() - visibility metar.*****\r\n";
 8003696:	4b55      	ldr	r3, [pc, #340]	; (80037ec <json_parsing_metar+0x264>)
 8003698:	677b      	str	r3, [r7, #116]	; 0x74
		console_display(&huart2, error, strlen(error));
 800369a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800369c:	f7fc fdc2 	bl	8000224 <strlen>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80036a6:	4847      	ldr	r0, [pc, #284]	; (80037c4 <json_parsing_metar+0x23c>)
 80036a8:	f7ff f9b0 	bl	8002a0c <console_display>
#endif
		status = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}

	if(!json_get_data_int(metar_root, "wind_direction", &metar_data_q.wind_direction_m_report, "value")) {
 80036b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036b6:	f103 0210 	add.w	r2, r3, #16
 80036ba:	4b43      	ldr	r3, [pc, #268]	; (80037c8 <json_parsing_metar+0x240>)
 80036bc:	494c      	ldr	r1, [pc, #304]	; (80037f0 <json_parsing_metar+0x268>)
 80036be:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80036c2:	f000 f8a9 	bl	8003818 <json_get_data_int>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10f      	bne.n	80036ec <json_parsing_metar+0x164>
		metar_data_q.wind_direction_m_report = ERROR_VALUE;
 80036cc:	4b40      	ldr	r3, [pc, #256]	; (80037d0 <json_parsing_metar+0x248>)
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!json_get_data_int() - wind_direction metar.*****\r\n";
 80036d0:	4b48      	ldr	r3, [pc, #288]	; (80037f4 <json_parsing_metar+0x26c>)
 80036d2:	673b      	str	r3, [r7, #112]	; 0x70
		console_display(&huart2, error, strlen(error));
 80036d4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80036d6:	f7fc fda5 	bl	8000224 <strlen>
 80036da:	4603      	mov	r3, r0
 80036dc:	461a      	mov	r2, r3
 80036de:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80036e0:	4838      	ldr	r0, [pc, #224]	; (80037c4 <json_parsing_metar+0x23c>)
 80036e2:	f7ff f993 	bl	8002a0c <console_display>
#endif
		status = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}

	if(!json_get_data_int(metar_root, "wind_speed", &metar_data_q.wind_speed_m_report, "value")) {
 80036ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036f0:	f103 0214 	add.w	r2, r3, #20
 80036f4:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <json_parsing_metar+0x240>)
 80036f6:	4940      	ldr	r1, [pc, #256]	; (80037f8 <json_parsing_metar+0x270>)
 80036f8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80036fc:	f000 f88c 	bl	8003818 <json_get_data_int>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <json_parsing_metar+0x19e>
		metar_data_q.wind_speed_m_report = ERROR_VALUE;
 8003706:	4b32      	ldr	r3, [pc, #200]	; (80037d0 <json_parsing_metar+0x248>)
 8003708:	643b      	str	r3, [r7, #64]	; 0x40
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!json_get_data_int() - wind_speed metar.*****\r\n";
 800370a:	4b3c      	ldr	r3, [pc, #240]	; (80037fc <json_parsing_metar+0x274>)
 800370c:	66fb      	str	r3, [r7, #108]	; 0x6c
		console_display(&huart2, error, strlen(error));
 800370e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003710:	f7fc fd88 	bl	8000224 <strlen>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800371a:	482a      	ldr	r0, [pc, #168]	; (80037c4 <json_parsing_metar+0x23c>)
 800371c:	f7ff f976 	bl	8002a0c <console_display>
#endif
		status = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}

	char timestamp[32] = {0};
 8003726:	f107 030c 	add.w	r3, r7, #12
 800372a:	2220      	movs	r2, #32
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f00b faaf 	bl	800ec92 <memset>
	if(!json_get_data_str(metar_root, "meta", timestamp, "timestamp")) {
 8003734:	f107 020c 	add.w	r2, r7, #12
 8003738:	4b31      	ldr	r3, [pc, #196]	; (8003800 <json_parsing_metar+0x278>)
 800373a:	4932      	ldr	r1, [pc, #200]	; (8003804 <json_parsing_metar+0x27c>)
 800373c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003740:	f000 f8b2 	bl	80038a8 <json_get_data_str>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10d      	bne.n	8003766 <json_parsing_metar+0x1de>
#ifdef CONSOLE_DEBUG_ERROR
		char* error = "*****Error!!!json_get_data_str() - timestamp metar*****.\r\n";
 800374a:	4b2f      	ldr	r3, [pc, #188]	; (8003808 <json_parsing_metar+0x280>)
 800374c:	66bb      	str	r3, [r7, #104]	; 0x68
		console_display(&huart2, error, strlen(error));
 800374e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003750:	f7fc fd68 	bl	8000224 <strlen>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800375a:	481a      	ldr	r0, [pc, #104]	; (80037c4 <json_parsing_metar+0x23c>)
 800375c:	f7ff f956 	bl	8002a0c <console_display>
#endif
		status = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}

	QNH_global = metar_data_q.QNH_m_report;
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	4a28      	ldr	r2, [pc, #160]	; (800380c <json_parsing_metar+0x284>)
 800376a:	6013      	str	r3, [r2, #0]
	strcpy(metar_data_q.timestamp_m_report, timestamp);
 800376c:	f107 020c 	add.w	r2, r7, #12
 8003770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003774:	3318      	adds	r3, #24
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f00c f869 	bl	800f850 <strcpy>

	extern osMessageQueueId_t queue_reportMetarHandle;
	if (osMessageQueuePut(queue_reportMetarHandle, &metar_data_q, 0, 9) != osOK) {
 800377e:	4b24      	ldr	r3, [pc, #144]	; (8003810 <json_parsing_metar+0x288>)
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003786:	2309      	movs	r3, #9
 8003788:	2200      	movs	r2, #0
 800378a:	f008 fa33 	bl	800bbf4 <osMessageQueuePut>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <json_parsing_metar+0x222>
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!osMessageQueuePut() - metar.*****\r\n";
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <json_parsing_metar+0x28c>)
 8003796:	667b      	str	r3, [r7, #100]	; 0x64
		console_display(&huart2, error, strlen(error));
 8003798:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800379a:	f7fc fd43 	bl	8000224 <strlen>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80037a4:	4807      	ldr	r0, [pc, #28]	; (80037c4 <json_parsing_metar+0x23c>)
 80037a6:	f7ff f931 	bl	8002a0c <console_display>
#endif
	}
	cJSON_Delete(metar_root);
 80037aa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80037ae:	f7fd fea9 	bl	8001504 <cJSON_Delete>
	return status;
 80037b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037b6:	b2db      	uxtb	r3, r3
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3790      	adds	r7, #144	; 0x90
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	08014448 	.word	0x08014448
 80037c4:	2000626c 	.word	0x2000626c
 80037c8:	08014474 	.word	0x08014474
 80037cc:	0801447c 	.word	0x0801447c
 80037d0:	fff0bdc1 	.word	0xfff0bdc1
 80037d4:	08014488 	.word	0x08014488
 80037d8:	080144c0 	.word	0x080144c0
 80037dc:	080144cc 	.word	0x080144cc
 80037e0:	08014504 	.word	0x08014504
 80037e4:	08014510 	.word	0x08014510
 80037e8:	0801454c 	.word	0x0801454c
 80037ec:	08014558 	.word	0x08014558
 80037f0:	08014594 	.word	0x08014594
 80037f4:	080145a4 	.word	0x080145a4
 80037f8:	080145e4 	.word	0x080145e4
 80037fc:	080145f0 	.word	0x080145f0
 8003800:	0801462c 	.word	0x0801462c
 8003804:	08014638 	.word	0x08014638
 8003808:	08014640 	.word	0x08014640
 800380c:	20001dd8 	.word	0x20001dd8
 8003810:	20006084 	.word	0x20006084
 8003814:	0801467c 	.word	0x0801467c

08003818 <json_get_data_int>:
 *  @data: variable for saving extracted data
 *  @param: parameter name
 *  @return: 1 in success or 0 if not
 */
static uint8_t json_get_data_int(const cJSON* const root, char* object_name, int *data, char* param)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
	const cJSON *object = cJSON_GetObjectItemCaseSensitive(root, object_name);
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7fe ff43 	bl	80026b4 <cJSON_GetObjectItemCaseSensitive>
 800382e:	61f8      	str	r0, [r7, #28]
	if (!cJSON_IsObject(object)) {
 8003830:	69f8      	ldr	r0, [r7, #28]
 8003832:	f7fe ff93 	bl	800275c <cJSON_IsObject>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10c      	bne.n	8003856 <json_get_data_int+0x3e>
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!cJSON_IsObject().*****\r\n";
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <json_get_data_int+0x84>)
 800383e:	613b      	str	r3, [r7, #16]
		console_display(&huart2, error, strlen(error));
 8003840:	6938      	ldr	r0, [r7, #16]
 8003842:	f7fc fcef 	bl	8000224 <strlen>
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	6939      	ldr	r1, [r7, #16]
 800384c:	4814      	ldr	r0, [pc, #80]	; (80038a0 <json_get_data_int+0x88>)
 800384e:	f7ff f8dd 	bl	8002a0c <console_display>
#endif
		return 0;
 8003852:	2300      	movs	r3, #0
 8003854:	e01e      	b.n	8003894 <json_get_data_int+0x7c>
	}

	const cJSON *value = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]

	value = cJSON_GetObjectItemCaseSensitive(object, param);
 800385a:	6839      	ldr	r1, [r7, #0]
 800385c:	69f8      	ldr	r0, [r7, #28]
 800385e:	f7fe ff29 	bl	80026b4 <cJSON_GetObjectItemCaseSensitive>
 8003862:	61b8      	str	r0, [r7, #24]
	if (!cJSON_IsNumber(value)) {
 8003864:	69b8      	ldr	r0, [r7, #24]
 8003866:	f7fe ff34 	bl	80026d2 <cJSON_IsNumber>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10c      	bne.n	800388a <json_get_data_int+0x72>
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!cJSON_IsNumber().*****\r\n";
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <json_get_data_int+0x8c>)
 8003872:	617b      	str	r3, [r7, #20]
		console_display(&huart2, error, strlen(error));
 8003874:	6978      	ldr	r0, [r7, #20]
 8003876:	f7fc fcd5 	bl	8000224 <strlen>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	6979      	ldr	r1, [r7, #20]
 8003880:	4807      	ldr	r0, [pc, #28]	; (80038a0 <json_get_data_int+0x88>)
 8003882:	f7ff f8c3 	bl	8002a0c <console_display>
#endif
		return 0;
 8003886:	2300      	movs	r3, #0
 8003888:	e004      	b.n	8003894 <json_get_data_int+0x7c>
	}
	*data = value->valueint;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	601a      	str	r2, [r3, #0]

	return 1;
 8003892:	2301      	movs	r3, #1
}
 8003894:	4618      	mov	r0, r3
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	080146b0 	.word	0x080146b0
 80038a0:	2000626c 	.word	0x2000626c
 80038a4:	080146d8 	.word	0x080146d8

080038a8 <json_get_data_str>:
 *  @data: variable for saving extracted data
 *  @param: parameter name
 *  @return: 1 in success or 0 if not
 */
static uint8_t json_get_data_str(const cJSON* const root, char* object_name, char *data, char* param)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
	const cJSON *object = cJSON_GetObjectItemCaseSensitive(root, object_name);
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f7fe fefb 	bl	80026b4 <cJSON_GetObjectItemCaseSensitive>
 80038be:	61f8      	str	r0, [r7, #28]
	if (!cJSON_IsObject(object)) {
 80038c0:	69f8      	ldr	r0, [r7, #28]
 80038c2:	f7fe ff4b 	bl	800275c <cJSON_IsObject>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10c      	bne.n	80038e6 <json_get_data_str+0x3e>
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!cJSON_IsObject.*****";
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <json_get_data_str+0x8c>)
 80038ce:	613b      	str	r3, [r7, #16]
		console_display(&huart2, error, strlen(error));
 80038d0:	6938      	ldr	r0, [r7, #16]
 80038d2:	f7fc fca7 	bl	8000224 <strlen>
 80038d6:	4603      	mov	r3, r0
 80038d8:	461a      	mov	r2, r3
 80038da:	6939      	ldr	r1, [r7, #16]
 80038dc:	4816      	ldr	r0, [pc, #88]	; (8003938 <json_get_data_str+0x90>)
 80038de:	f7ff f895 	bl	8002a0c <console_display>
#endif
		return 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e022      	b.n	800392c <json_get_data_str+0x84>
	}

	const cJSON *value = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]

	value = cJSON_GetObjectItemCaseSensitive(object, param);
 80038ea:	6839      	ldr	r1, [r7, #0]
 80038ec:	69f8      	ldr	r0, [r7, #28]
 80038ee:	f7fe fee1 	bl	80026b4 <cJSON_GetObjectItemCaseSensitive>
 80038f2:	61b8      	str	r0, [r7, #24]
	if (!(cJSON_IsString(value) && (value->valuestring != NULL))) {
 80038f4:	69b8      	ldr	r0, [r7, #24]
 80038f6:	f7fe ff03 	bl	8002700 <cJSON_IsString>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <json_get_data_str+0x60>
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <json_get_data_str+0x76>
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!cJSON_IsString().*****\r\n";
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <json_get_data_str+0x94>)
 800390a:	617b      	str	r3, [r7, #20]
		console_display(&huart2, error, strlen(error));
 800390c:	6978      	ldr	r0, [r7, #20]
 800390e:	f7fc fc89 	bl	8000224 <strlen>
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	6979      	ldr	r1, [r7, #20]
 8003918:	4807      	ldr	r0, [pc, #28]	; (8003938 <json_get_data_str+0x90>)
 800391a:	f7ff f877 	bl	8002a0c <console_display>
#endif
	}
	strcpy(data, value->valuestring);
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f00b ff93 	bl	800f850 <strcpy>

	return 1;
 800392a:	2301      	movs	r3, #1
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	08014700 	.word	0x08014700
 8003938:	2000626c 	.word	0x2000626c
 800393c:	08014724 	.word	0x08014724

08003940 <parcing_data_metar>:

/**
 *  Provides http parcing for METAR
 */
static void parcing_data_metar(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
	UART_Read_http();
 800394a:	f7ff fde1 	bl	8003510 <UART_Read_http>
	char json_chunk[BUF_SIZE_WIFI] = { 0 };
 800394e:	f107 0308 	add.w	r3, r7, #8
 8003952:	3b04      	subs	r3, #4
 8003954:	4618      	mov	r0, r3
 8003956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800395a:	461a      	mov	r2, r3
 800395c:	2100      	movs	r1, #0
 800395e:	f00b f998 	bl	800ec92 <memset>
	get_clean_json(json_chunk);
 8003962:	f107 0308 	add.w	r3, r7, #8
 8003966:	3b04      	subs	r3, #4
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f82b 	bl	80039c4 <get_clean_json>

	if (!json_parsing_metar(json_chunk)) {
 800396e:	f107 0308 	add.w	r3, r7, #8
 8003972:	3b04      	subs	r3, #4
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fe07 	bl	8003588 <json_parsing_metar>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d116      	bne.n	80039ae <parcing_data_metar+0x6e>
#ifdef CONSOLE_DEBUG_ERROR
		char *erro = "*****Error!!!json_parsing_metar().*****\r\n";
 8003980:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <parcing_data_metar+0x7c>)
 8003982:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003986:	f102 0204 	add.w	r2, r2, #4
 800398a:	6013      	str	r3, [r2, #0]
		console_display(&huart2, erro, strlen(erro));
 800398c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003990:	f103 0304 	add.w	r3, r3, #4
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	f7fc fc45 	bl	8000224 <strlen>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80039a2:	f103 0304 	add.w	r3, r3, #4
 80039a6:	6819      	ldr	r1, [r3, #0]
 80039a8:	4805      	ldr	r0, [pc, #20]	; (80039c0 <parcing_data_metar+0x80>)
 80039aa:	f7ff f82f 	bl	8002a0c <console_display>
#endif
	}
}
 80039ae:	bf00      	nop
 80039b0:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	0801474c 	.word	0x0801474c
 80039c0:	2000626c 	.word	0x2000626c

080039c4 <get_clean_json>:
 *  Provides clean JSON format in case more than 1460 bytes are received from the server.
 *  When reading data over a wifi connection the esp8266 splits it into chunks of 1460 bytes maximum each.
 *  @clean_json: array to save clean json
 */
static void get_clean_json(char* clean_json)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
	uint32_t json_cnt = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
	uint32_t icmd = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60bb      	str	r3, [r7, #8]
	while (wifi_response[icmd++] != '{');
 80039d4:	bf00      	nop
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	60ba      	str	r2, [r7, #8]
 80039dc:	4a32      	ldr	r2, [pc, #200]	; (8003aa8 <get_clean_json+0xe4>)
 80039de:	5cd3      	ldrb	r3, [r2, r3]
 80039e0:	2b7b      	cmp	r3, #123	; 0x7b
 80039e2:	d1f8      	bne.n	80039d6 <get_clean_json+0x12>
	clean_json[json_cnt++] = '{';
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	60fa      	str	r2, [r7, #12]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	227b      	movs	r2, #123	; 0x7b
 80039f0:	701a      	strb	r2, [r3, #0]

	while (!(wifi_response[icmd] == '}' && wifi_response[icmd + 1] == '}')) {
 80039f2:	e03b      	b.n	8003a6c <get_clean_json+0xa8>
		if (wifi_response[icmd] == '\n' || wifi_response[icmd] == '\r') {
 80039f4:	4a2c      	ldr	r2, [pc, #176]	; (8003aa8 <get_clean_json+0xe4>)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4413      	add	r3, r2
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b0a      	cmp	r3, #10
 80039fe:	d005      	beq.n	8003a0c <get_clean_json+0x48>
 8003a00:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <get_clean_json+0xe4>)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4413      	add	r3, r2
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b0d      	cmp	r3, #13
 8003a0a:	d103      	bne.n	8003a14 <get_clean_json+0x50>
			icmd++;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	60bb      	str	r3, [r7, #8]
			continue;
 8003a12:	e02b      	b.n	8003a6c <get_clean_json+0xa8>
		} else if (wifi_response[icmd] == '+' && wifi_response[icmd + 1] == 'I'
 8003a14:	4a24      	ldr	r2, [pc, #144]	; (8003aa8 <get_clean_json+0xe4>)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4413      	add	r3, r2
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b2b      	cmp	r3, #43	; 0x2b
 8003a1e:	d11a      	bne.n	8003a56 <get_clean_json+0x92>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	3301      	adds	r3, #1
 8003a24:	4a20      	ldr	r2, [pc, #128]	; (8003aa8 <get_clean_json+0xe4>)
 8003a26:	5cd3      	ldrb	r3, [r2, r3]
 8003a28:	2b49      	cmp	r3, #73	; 0x49
 8003a2a:	d114      	bne.n	8003a56 <get_clean_json+0x92>
				&& wifi_response[icmd + 2] == 'P'
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	3302      	adds	r3, #2
 8003a30:	4a1d      	ldr	r2, [pc, #116]	; (8003aa8 <get_clean_json+0xe4>)
 8003a32:	5cd3      	ldrb	r3, [r2, r3]
 8003a34:	2b50      	cmp	r3, #80	; 0x50
 8003a36:	d10e      	bne.n	8003a56 <get_clean_json+0x92>
				&& wifi_response[icmd + 3] == 'D') {
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	3303      	adds	r3, #3
 8003a3c:	4a1a      	ldr	r2, [pc, #104]	; (8003aa8 <get_clean_json+0xe4>)
 8003a3e:	5cd3      	ldrb	r3, [r2, r3]
 8003a40:	2b44      	cmp	r3, #68	; 0x44
 8003a42:	d108      	bne.n	8003a56 <get_clean_json+0x92>
			while (wifi_response[icmd++] != ':')
 8003a44:	bf00      	nop
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	60ba      	str	r2, [r7, #8]
 8003a4c:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <get_clean_json+0xe4>)
 8003a4e:	5cd3      	ldrb	r3, [r2, r3]
 8003a50:	2b3a      	cmp	r3, #58	; 0x3a
 8003a52:	d1f8      	bne.n	8003a46 <get_clean_json+0x82>
				;
			continue;
 8003a54:	e00a      	b.n	8003a6c <get_clean_json+0xa8>
		}
		clean_json[json_cnt++] = wifi_response[icmd++];
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	60ba      	str	r2, [r7, #8]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	1c51      	adds	r1, r2, #1
 8003a60:	60f9      	str	r1, [r7, #12]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	440a      	add	r2, r1
 8003a66:	4910      	ldr	r1, [pc, #64]	; (8003aa8 <get_clean_json+0xe4>)
 8003a68:	5ccb      	ldrb	r3, [r1, r3]
 8003a6a:	7013      	strb	r3, [r2, #0]
	while (!(wifi_response[icmd] == '}' && wifi_response[icmd + 1] == '}')) {
 8003a6c:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <get_clean_json+0xe4>)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4413      	add	r3, r2
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b7d      	cmp	r3, #125	; 0x7d
 8003a76:	d1bd      	bne.n	80039f4 <get_clean_json+0x30>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <get_clean_json+0xe4>)
 8003a7e:	5cd3      	ldrb	r3, [r2, r3]
 8003a80:	2b7d      	cmp	r3, #125	; 0x7d
 8003a82:	d1b7      	bne.n	80039f4 <get_clean_json+0x30>
	}
	clean_json[json_cnt] = '}';
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	227d      	movs	r2, #125	; 0x7d
 8003a8c:	701a      	strb	r2, [r3, #0]
	clean_json[json_cnt + 1] = '}';
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3301      	adds	r3, #1
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	227d      	movs	r2, #125	; 0x7d
 8003a98:	701a      	strb	r2, [r3, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20004080 	.word	0x20004080

08003aac <parcing_data_taf>:

/**
 *  Provides http parcing for TAF
 */
static void parcing_data_taf(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
	UART_Read_http();
 8003ab6:	f7ff fd2b 	bl	8003510 <UART_Read_http>
	char json_chunk[BUF_SIZE_WIFI] = { 0 };
 8003aba:	f107 0308 	add.w	r3, r7, #8
 8003abe:	3b04      	subs	r3, #4
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2100      	movs	r1, #0
 8003aca:	f00b f8e2 	bl	800ec92 <memset>
	get_clean_json(json_chunk);
 8003ace:	f107 0308 	add.w	r3, r7, #8
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff75 	bl	80039c4 <get_clean_json>

	if (!json_parsing_taf(json_chunk)) {
 8003ada:	f107 0308 	add.w	r3, r7, #8
 8003ade:	3b04      	subs	r3, #4
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 f825 	bl	8003b30 <json_parsing_taf>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d116      	bne.n	8003b1a <parcing_data_taf+0x6e>
#ifdef CONSOLE_DEBUG_ERROR
		char *erro = "*****Error!!!json_parsing_taf().*****\r\n";
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <parcing_data_taf+0x7c>)
 8003aee:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8003af2:	f102 0204 	add.w	r2, r2, #4
 8003af6:	6013      	str	r3, [r2, #0]
		console_display(&huart2, erro, strlen(erro));
 8003af8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003afc:	f103 0304 	add.w	r3, r3, #4
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	f7fc fb8f 	bl	8000224 <strlen>
 8003b06:	4603      	mov	r3, r0
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003b0e:	f103 0304 	add.w	r3, r3, #4
 8003b12:	6819      	ldr	r1, [r3, #0]
 8003b14:	4805      	ldr	r0, [pc, #20]	; (8003b2c <parcing_data_taf+0x80>)
 8003b16:	f7fe ff79 	bl	8002a0c <console_display>
#endif
	}
}
 8003b1a:	bf00      	nop
 8003b1c:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	08014778 	.word	0x08014778
 8003b2c:	2000626c 	.word	0x2000626c

08003b30 <json_parsing_taf>:
 *  Provides JSON parcing of TAF report
 *  @data: data for parsing
 *  @return: 1 in success or 0 if not
 */
static uint8_t json_parsing_taf(const char* const data)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b0b2      	sub	sp, #200	; 0xc8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	int status = 1;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	cJSON *taf_root = cJSON_Parse(data);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fe fa80 	bl	8002044 <cJSON_Parse>
 8003b44:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
	if (taf_root == NULL) {
 8003b48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d110      	bne.n	8003b72 <json_parsing_taf+0x42>
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!cJSON_Parse() - taf.*****\r\n";
 8003b50:	4b88      	ldr	r3, [pc, #544]	; (8003d74 <json_parsing_taf+0x244>)
 8003b52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		console_display(&huart2, error, strlen(error));
 8003b56:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8003b5a:	f7fc fb63 	bl	8000224 <strlen>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	461a      	mov	r2, r3
 8003b62:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8003b66:	4884      	ldr	r0, [pc, #528]	; (8003d78 <json_parsing_taf+0x248>)
 8003b68:	f7fe ff50 	bl	8002a0c <console_display>
#endif
		status = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	}
	char timestamp[32] = { 0 };
 8003b72:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003b76:	2220      	movs	r2, #32
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f00b f889 	bl	800ec92 <memset>
	if (!json_get_data_str(taf_root, "meta", timestamp, "timestamp")) {
 8003b80:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003b84:	4b7d      	ldr	r3, [pc, #500]	; (8003d7c <json_parsing_taf+0x24c>)
 8003b86:	497e      	ldr	r1, [pc, #504]	; (8003d80 <json_parsing_taf+0x250>)
 8003b88:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003b8c:	f7ff fe8c 	bl	80038a8 <json_get_data_str>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d110      	bne.n	8003bb8 <json_parsing_taf+0x88>
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!json_get_data_str() - timestamp taf.*****\r\n";
 8003b96:	4b7b      	ldr	r3, [pc, #492]	; (8003d84 <json_parsing_taf+0x254>)
 8003b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		console_display(&huart2, error, strlen(error));
 8003b9c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8003ba0:	f7fc fb40 	bl	8000224 <strlen>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8003bac:	4872      	ldr	r0, [pc, #456]	; (8003d78 <json_parsing_taf+0x248>)
 8003bae:	f7fe ff2d 	bl	8002a0c <console_display>
#endif
		status = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	}

	char time_issue[32] = { 0 };
 8003bb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f00b f866 	bl	800ec92 <memset>
	if (!json_get_data_str(taf_root, "time", time_issue, "dt")) {
 8003bc6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003bca:	4b6f      	ldr	r3, [pc, #444]	; (8003d88 <json_parsing_taf+0x258>)
 8003bcc:	496f      	ldr	r1, [pc, #444]	; (8003d8c <json_parsing_taf+0x25c>)
 8003bce:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003bd2:	f7ff fe69 	bl	80038a8 <json_get_data_str>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d110      	bne.n	8003bfe <json_parsing_taf+0xce>
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!json_get_data_str() - timestamp taf.*****\r\n";
 8003bdc:	4b69      	ldr	r3, [pc, #420]	; (8003d84 <json_parsing_taf+0x254>)
 8003bde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		console_display(&huart2, error, strlen(error));
 8003be2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8003be6:	f7fc fb1d 	bl	8000224 <strlen>
 8003bea:	4603      	mov	r3, r0
 8003bec:	461a      	mov	r2, r3
 8003bee:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003bf2:	4861      	ldr	r0, [pc, #388]	; (8003d78 <json_parsing_taf+0x248>)
 8003bf4:	f7fe ff0a 	bl	8002a0c <console_display>
#endif
		status = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	}
	const cJSON *forecasts = cJSON_GetObjectItemCaseSensitive(taf_root, "forecast");
 8003bfe:	4964      	ldr	r1, [pc, #400]	; (8003d90 <json_parsing_taf+0x260>)
 8003c00:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003c04:	f7fe fd56 	bl	80026b4 <cJSON_GetObjectItemCaseSensitive>
 8003c08:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	if (!cJSON_IsArray(forecasts)) {
 8003c0c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003c10:	f7fe fd8d 	bl	800272e <cJSON_IsArray>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d110      	bne.n	8003c3c <json_parsing_taf+0x10c>
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!cJSON_IsArray() - forecast.*****\r\n";
 8003c1a:	4b5e      	ldr	r3, [pc, #376]	; (8003d94 <json_parsing_taf+0x264>)
 8003c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		console_display(&huart2, error, strlen(error));
 8003c20:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003c24:	f7fc fafe 	bl	8000224 <strlen>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8003c30:	4851      	ldr	r0, [pc, #324]	; (8003d78 <json_parsing_taf+0x248>)
 8003c32:	f7fe feeb 	bl	8002a0c <console_display>
#endif
		status = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	}
	const cJSON *item = cJSON_GetArrayItem(forecasts, 0);
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003c42:	f7fe fcdb 	bl	80025fc <cJSON_GetArrayItem>
 8003c46:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	report_taf_t taf_data_q;
	if (!json_get_data_int(item, "visibility", &taf_data_q.visibility_t_report, "value")) {
 8003c4a:	f107 030c 	add.w	r3, r7, #12
 8003c4e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003c52:	4b51      	ldr	r3, [pc, #324]	; (8003d98 <json_parsing_taf+0x268>)
 8003c54:	4951      	ldr	r1, [pc, #324]	; (8003d9c <json_parsing_taf+0x26c>)
 8003c56:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003c5a:	f7ff fddd 	bl	8003818 <json_get_data_int>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d112      	bne.n	8003c8a <json_parsing_taf+0x15a>
		taf_data_q.visibility_t_report = ERROR_VALUE;
 8003c64:	4b4e      	ldr	r3, [pc, #312]	; (8003da0 <json_parsing_taf+0x270>)
 8003c66:	64fb      	str	r3, [r7, #76]	; 0x4c
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!json_get_data_int() - visibility taf.*****\r\n";
 8003c68:	4b4e      	ldr	r3, [pc, #312]	; (8003da4 <json_parsing_taf+0x274>)
 8003c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		console_display(&huart2, error, strlen(error));
 8003c6e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003c72:	f7fc fad7 	bl	8000224 <strlen>
 8003c76:	4603      	mov	r3, r0
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c7e:	483e      	ldr	r0, [pc, #248]	; (8003d78 <json_parsing_taf+0x248>)
 8003c80:	f7fe fec4 	bl	8002a0c <console_display>
#endif
		status = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	}
	if (!json_get_data_int(item, "wind_direction", &taf_data_q.wind_direction_t_report, "value")) {
 8003c8a:	f107 030c 	add.w	r3, r7, #12
 8003c8e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8003c92:	4b41      	ldr	r3, [pc, #260]	; (8003d98 <json_parsing_taf+0x268>)
 8003c94:	4944      	ldr	r1, [pc, #272]	; (8003da8 <json_parsing_taf+0x278>)
 8003c96:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003c9a:	f7ff fdbd 	bl	8003818 <json_get_data_int>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d112      	bne.n	8003cca <json_parsing_taf+0x19a>
		taf_data_q.wind_direction_t_report = ERROR_VALUE;
 8003ca4:	4b3e      	ldr	r3, [pc, #248]	; (8003da0 <json_parsing_taf+0x270>)
 8003ca6:	653b      	str	r3, [r7, #80]	; 0x50
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!json_get_data_int() - wind_direction taf.*****\r\n";
 8003ca8:	4b40      	ldr	r3, [pc, #256]	; (8003dac <json_parsing_taf+0x27c>)
 8003caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		console_display(&huart2, error, strlen(error));
 8003cae:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8003cb2:	f7fc fab7 	bl	8000224 <strlen>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003cbe:	482e      	ldr	r0, [pc, #184]	; (8003d78 <json_parsing_taf+0x248>)
 8003cc0:	f7fe fea4 	bl	8002a0c <console_display>
#endif
		status = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	}
	if (!json_get_data_int(item, "wind_speed", &taf_data_q.wind_speed_t_report, "value")) {
 8003cca:	f107 030c 	add.w	r3, r7, #12
 8003cce:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003cd2:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <json_parsing_taf+0x268>)
 8003cd4:	4936      	ldr	r1, [pc, #216]	; (8003db0 <json_parsing_taf+0x280>)
 8003cd6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003cda:	f7ff fd9d 	bl	8003818 <json_get_data_int>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d112      	bne.n	8003d0a <json_parsing_taf+0x1da>
		taf_data_q.wind_speed_t_report = ERROR_VALUE;
 8003ce4:	4b2e      	ldr	r3, [pc, #184]	; (8003da0 <json_parsing_taf+0x270>)
 8003ce6:	657b      	str	r3, [r7, #84]	; 0x54
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!json_get_data_int() - wind_speed taf.*****\r\n";
 8003ce8:	4b32      	ldr	r3, [pc, #200]	; (8003db4 <json_parsing_taf+0x284>)
 8003cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		console_display(&huart2, error, strlen(error));
 8003cee:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003cf2:	f7fc fa97 	bl	8000224 <strlen>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8003cfe:	481e      	ldr	r0, [pc, #120]	; (8003d78 <json_parsing_taf+0x248>)
 8003d00:	f7fe fe84 	bl	8002a0c <console_display>
#endif
		status = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	}

	strcpy(taf_data_q.timestamp_t_report, timestamp);
 8003d0a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003d0e:	f107 030c 	add.w	r3, r7, #12
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f00b fd9b 	bl	800f850 <strcpy>
	strcpy(taf_data_q.timeissue_t_report, time_issue);
 8003d1a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003d1e:	f107 030c 	add.w	r3, r7, #12
 8003d22:	3320      	adds	r3, #32
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f00b fd92 	bl	800f850 <strcpy>

	extern osMessageQueueId_t queue_reportTAFHandle;
	if (osMessageQueuePut(queue_reportTAFHandle, &taf_data_q, 0, 9) != osOK) {
 8003d2c:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <json_parsing_taf+0x288>)
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	f107 010c 	add.w	r1, r7, #12
 8003d34:	2309      	movs	r3, #9
 8003d36:	2200      	movs	r2, #0
 8003d38:	f007 ff5c 	bl	800bbf4 <osMessageQueuePut>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00d      	beq.n	8003d5e <json_parsing_taf+0x22e>
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!osMessageQueuePut() - taf.*****\r\n";
 8003d42:	4b1e      	ldr	r3, [pc, #120]	; (8003dbc <json_parsing_taf+0x28c>)
 8003d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		console_display(&huart2, error, strlen(error));
 8003d48:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8003d4c:	f7fc fa6a 	bl	8000224 <strlen>
 8003d50:	4603      	mov	r3, r0
 8003d52:	461a      	mov	r2, r3
 8003d54:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8003d58:	4807      	ldr	r0, [pc, #28]	; (8003d78 <json_parsing_taf+0x248>)
 8003d5a:	f7fe fe57 	bl	8002a0c <console_display>
#endif
	}
	cJSON_Delete(taf_root);
 8003d5e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003d62:	f7fd fbcf 	bl	8001504 <cJSON_Delete>

	return status;
 8003d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d6a:	b2db      	uxtb	r3, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	37c8      	adds	r7, #200	; 0xc8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	080147a0 	.word	0x080147a0
 8003d78:	2000626c 	.word	0x2000626c
 8003d7c:	0801462c 	.word	0x0801462c
 8003d80:	08014638 	.word	0x08014638
 8003d84:	080147cc 	.word	0x080147cc
 8003d88:	08014808 	.word	0x08014808
 8003d8c:	0801480c 	.word	0x0801480c
 8003d90:	08014814 	.word	0x08014814
 8003d94:	08014820 	.word	0x08014820
 8003d98:	08014474 	.word	0x08014474
 8003d9c:	0801454c 	.word	0x0801454c
 8003da0:	fff0bdc1 	.word	0xfff0bdc1
 8003da4:	08014850 	.word	0x08014850
 8003da8:	08014594 	.word	0x08014594
 8003dac:	0801488c 	.word	0x0801488c
 8003db0:	080145e4 	.word	0x080145e4
 8003db4:	080148cc 	.word	0x080148cc
 8003db8:	20006094 	.word	0x20006094
 8003dbc:	08014908 	.word	0x08014908

08003dc0 <write_metar_data_bt>:
/**
 *  Write METAR parsed data to structure for bluetooth thread
 *  @metar_data: parced METAR's data
 */
void write_metar_data_bt(report_metar_t* metar_data)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	memcpy(&metar_data_bt, metar_data, sizeof (metar_data_bt));
 8003dc8:	2238      	movs	r2, #56	; 0x38
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4803      	ldr	r0, [pc, #12]	; (8003ddc <write_metar_data_bt+0x1c>)
 8003dce:	f00a ff55 	bl	800ec7c <memcpy>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20001ddc 	.word	0x20001ddc

08003de0 <write_taf_data_bt>:
/**
 * Write TAF parsed data to structure for bluetooth thread
 *  @taf_data: parced METAR's data
 */
void write_taf_data_bt(report_taf_t* taf_data)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	memcpy(&taf_data_bt, taf_data, sizeof (taf_data_bt));
 8003de8:	224c      	movs	r2, #76	; 0x4c
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4803      	ldr	r0, [pc, #12]	; (8003dfc <write_taf_data_bt+0x1c>)
 8003dee:	f00a ff45 	bl	800ec7c <memcpy>
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20001e24 	.word	0x20001e24

08003e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e04:	f001 fb12 	bl	800542c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e08:	f000 f816 	bl	8003e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e0c:	f7ff f802 	bl	8002e14 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e10:	f7fe fe1c 	bl	8002a4c <MX_DMA_Init>
  MX_I2C1_Init();
 8003e14:	f7ff f924 	bl	8003060 <MX_I2C1_Init>
  MX_UART5_Init();
 8003e18:	f000 faee 	bl	80043f8 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8003e1c:	f000 fb16 	bl	800444c <MX_USART2_UART_Init>
  MX_UART4_Init();
 8003e20:	f000 fac0 	bl	80043a4 <MX_UART4_Init>
  MX_TIM2_Init();
 8003e24:	f000 fa50 	bl	80042c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003e28:	f007 fb98 	bl	800b55c <osKernelInitialize>
  MX_FREERTOS_Init();
 8003e2c:	f7fe fe7e 	bl	8002b2c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003e30:	f007 fbc8 	bl	800b5c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003e34:	e7fe      	b.n	8003e34 <main+0x34>
	...

08003e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b094      	sub	sp, #80	; 0x50
 8003e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e3e:	f107 031c 	add.w	r3, r7, #28
 8003e42:	2234      	movs	r2, #52	; 0x34
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00a ff23 	bl	800ec92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e4c:	f107 0308 	add.w	r3, r7, #8
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	4b2c      	ldr	r3, [pc, #176]	; (8003f14 <SystemClock_Config+0xdc>)
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	4a2b      	ldr	r2, [pc, #172]	; (8003f14 <SystemClock_Config+0xdc>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6c:	4b29      	ldr	r3, [pc, #164]	; (8003f14 <SystemClock_Config+0xdc>)
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e78:	2300      	movs	r3, #0
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <SystemClock_Config+0xe0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a25      	ldr	r2, [pc, #148]	; (8003f18 <SystemClock_Config+0xe0>)
 8003e82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4b23      	ldr	r3, [pc, #140]	; (8003f18 <SystemClock_Config+0xe0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003e98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003e9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ea2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003eac:	23b4      	movs	r3, #180	; 0xb4
 8003eae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ebc:	f107 031c 	add.w	r3, r7, #28
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f003 fd2d 	bl	8007920 <HAL_RCC_OscConfig>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003ecc:	f000 f838 	bl	8003f40 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003ed0:	f003 f9ea 	bl	80072a8 <HAL_PWREx_EnableOverDrive>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003eda:	f000 f831 	bl	8003f40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ede:	230f      	movs	r3, #15
 8003ee0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003eea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003eee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ef4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003ef6:	f107 0308 	add.w	r3, r7, #8
 8003efa:	2105      	movs	r1, #5
 8003efc:	4618      	mov	r0, r3
 8003efe:	f003 fa23 	bl	8007348 <HAL_RCC_ClockConfig>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003f08:	f000 f81a 	bl	8003f40 <Error_Handler>
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	3750      	adds	r7, #80	; 0x50
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	40023800 	.word	0x40023800
 8003f18:	40007000 	.word	0x40007000

08003f1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003f2e:	f001 fa9f 	bl	8005470 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40001000 	.word	0x40001000

08003f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//TODO:HAndel the error
	while(1);
 8003f44:	e7fe      	b.n	8003f44 <Error_Handler+0x4>

08003f46 <i2c_address_scan>:
 *  @hi2cx: I2C handle.
 *  @device_amount: connected device amount.
 *  @return: 1 if one or more devices found and 0 if no device found.
 */
uint8_t i2c_address_scan(uint8_t* i2c_addr, I2C_HandleTypeDef* hi2cx, uint8_t* device_amount)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b086      	sub	sp, #24
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	60f8      	str	r0, [r7, #12]
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	607a      	str	r2, [r7, #4]
	*device_amount = 0;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]

	for(size_t i =  0x08; i <  0x78; ++i)
 8003f58:	2308      	movs	r3, #8
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	e01a      	b.n	8003f94 <i2c_address_scan+0x4e>
	{
		if(HAL_I2C_IsDeviceReady(hi2cx, i << 1, 1, 100) == HAL_OK)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	b299      	uxth	r1, r3
 8003f66:	2364      	movs	r3, #100	; 0x64
 8003f68:	2201      	movs	r2, #1
 8003f6a:	68b8      	ldr	r0, [r7, #8]
 8003f6c:	f002 fd16 	bl	800699c <HAL_I2C_IsDeviceReady>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10b      	bne.n	8003f8e <i2c_address_scan+0x48>
		{
			i2c_addr[(*device_amount)++] = i;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	b2d1      	uxtb	r1, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	7011      	strb	r1, [r2, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]
	for(size_t i =  0x08; i <  0x78; ++i)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3301      	adds	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b77      	cmp	r3, #119	; 0x77
 8003f98:	d9e1      	bls.n	8003f5e <i2c_address_scan+0x18>
		}
	}
	if(*device_amount > 0)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <i2c_address_scan+0x60>
	{
		return 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <i2c_address_scan+0x62>
	}
	return 0;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <bmp_start>:
/**
 *  Start BMP 280 sensors
 *  @return: 1 if success 0 if not.
 */
uint8_t bmp_start(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
	QNH_global = QNH_GOT_CHECK;
 8003fb6:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <bmp_start+0x70>)
 8003fb8:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <bmp_start+0x74>)
 8003fba:	601a      	str	r2, [r3, #0]
	/* Start BMP280 and change settings */
	int8_t com_rslt;
	static bmp280_t bmp280;
	bmp280.i2c_handle = &hi2c1;
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <bmp_start+0x78>)
 8003fbe:	4a1b      	ldr	r2, [pc, #108]	; (800402c <bmp_start+0x7c>)
 8003fc0:	621a      	str	r2, [r3, #32]
	bmp280.dev_addr = BMP280_I2C_ADDRESS1;
 8003fc2:	4b19      	ldr	r3, [pc, #100]	; (8004028 <bmp_start+0x78>)
 8003fc4:	2276      	movs	r2, #118	; 0x76
 8003fc6:	775a      	strb	r2, [r3, #29]
	com_rslt = BMP280_init(&bmp280);
 8003fc8:	4817      	ldr	r0, [pc, #92]	; (8004028 <bmp_start+0x78>)
 8003fca:	f000 fc1d 	bl	8004808 <BMP280_init>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71fb      	strb	r3, [r7, #7]
	com_rslt += BMP280_set_power_mode(BMP280_NORMAL_MODE);
 8003fd2:	2003      	movs	r0, #3
 8003fd4:	f000 fd96 	bl	8004b04 <BMP280_set_power_mode>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	4413      	add	r3, r2
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	71fb      	strb	r3, [r7, #7]
	com_rslt += BMP280_set_work_mode(BMP280_STANDARD_RESOLUTION_MODE);
 8003fe4:	2002      	movs	r0, #2
 8003fe6:	f000 fe15 	bl	8004c14 <BMP280_set_work_mode>
 8003fea:	4603      	mov	r3, r0
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	71fb      	strb	r3, [r7, #7]
	com_rslt += BMP280_set_standby_durn(BMP280_STANDBY_TIME_1_MS);
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	f000 fdc6 	bl	8004b88 <BMP280_set_standby_durn>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	4413      	add	r3, r2
 8004004:	b2db      	uxtb	r3, r3
 8004006:	71fb      	strb	r3, [r7, #7]
	if (com_rslt != SUCCESS) {
 8004008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <bmp_start+0x64>
		return 1;
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <bmp_start+0x66>
	}
	return 0;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20001dd8 	.word	0x20001dd8
 8004024:	ffffb1e0 	.word	0xffffb1e0
 8004028:	2000022c 	.word	0x2000022c
 800402c:	200060b8 	.word	0x200060b8

08004030 <sensor_get_data>:
/**
 *  Provides receipt of sensor data and writing them to the structure.
 *  @sensor_data: structure for writing data.
 */
void sensor_get_data(sensors_t* sensor_data)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	BMP280_read_temperature_double(&sensor_data->temp);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4618      	mov	r0, r3
 800403c:	f001 f944 	bl	80052c8 <BMP280_read_temperature_double>
	BMP280_read_pressure_double(&sensor_data->press);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3308      	adds	r3, #8
 8004044:	4618      	mov	r0, r3
 8004046:	f001 f969 	bl	800531c <BMP280_read_pressure_double>
	/* Calculate current altitude, based on current QNH pressure */
	if(QNH_global != QNH_GOT_CHECK) {
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <sensor_get_data+0x4c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a0c      	ldr	r2, [pc, #48]	; (8004080 <sensor_get_data+0x50>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00e      	beq.n	8004072 <sensor_get_data+0x42>
		sensor_data->alt = BMP280_calculate_altitude(QNH_global * 100);
 8004054:	4b09      	ldr	r3, [pc, #36]	; (800407c <sensor_get_data+0x4c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2264      	movs	r2, #100	; 0x64
 800405a:	fb02 f303 	mul.w	r3, r2, r3
 800405e:	4618      	mov	r0, r3
 8004060:	f001 f986 	bl	8005370 <BMP280_calculate_altitude>
 8004064:	eeb0 7a40 	vmov.f32	s14, s0
 8004068:	eef0 7a60 	vmov.f32	s15, s1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	ed83 7b04 	vstr	d7, [r3, #16]
	}
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20001dd8 	.word	0x20001dd8
 8004080:	ffffb1e0 	.word	0xffffb1e0

08004084 <sensors_init>:
/**
 *  Start BMP 280 sensors initialization
 *  @return: 1 if success 0 if not.
 */
uint8_t sensors_init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b0a0      	sub	sp, #128	; 0x80
 8004088:	af00      	add	r7, sp, #0
	uint8_t i2c_addr[I2C_MAX_ADDR] = { 0 };
 800408a:	f107 0308 	add.w	r3, r7, #8
 800408e:	2270      	movs	r2, #112	; 0x70
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f00a fdfd 	bl	800ec92 <memset>
	uint8_t device_amount = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	71fb      	strb	r3, [r7, #7]

	if (!i2c_address_scan(i2c_addr, &hi2c1, &device_amount)) {
 800409c:	1dfa      	adds	r2, r7, #7
 800409e:	f107 0308 	add.w	r3, r7, #8
 80040a2:	4915      	ldr	r1, [pc, #84]	; (80040f8 <sensors_init+0x74>)
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff4e 	bl	8003f46 <i2c_address_scan>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10c      	bne.n	80040ca <sensors_init+0x46>
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!!i2c_address_scan().*****\r\n";
 80040b0:	4b12      	ldr	r3, [pc, #72]	; (80040fc <sensors_init+0x78>)
 80040b2:	67bb      	str	r3, [r7, #120]	; 0x78
		console_display(&huart2, error, strlen(error));
 80040b4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80040b6:	f7fc f8b5 	bl	8000224 <strlen>
 80040ba:	4603      	mov	r3, r0
 80040bc:	461a      	mov	r2, r3
 80040be:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80040c0:	480f      	ldr	r0, [pc, #60]	; (8004100 <sensors_init+0x7c>)
 80040c2:	f7fe fca3 	bl	8002a0c <console_display>
#endif
		return 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e012      	b.n	80040f0 <sensors_init+0x6c>
	}

	if (bmp_start()) {
 80040ca:	f7ff ff71 	bl	8003fb0 <bmp_start>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00c      	beq.n	80040ee <sensors_init+0x6a>
#ifdef CONSOLE_DEBUG_ERROR
		char *error = "*****Error!!!!bmp_start().*****\r\n";
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <sensors_init+0x80>)
 80040d6:	67fb      	str	r3, [r7, #124]	; 0x7c
		console_display(&huart2, error, strlen(error));
 80040d8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80040da:	f7fc f8a3 	bl	8000224 <strlen>
 80040de:	4603      	mov	r3, r0
 80040e0:	461a      	mov	r2, r3
 80040e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040e4:	4806      	ldr	r0, [pc, #24]	; (8004100 <sensors_init+0x7c>)
 80040e6:	f7fe fc91 	bl	8002a0c <console_display>
#endif
		return 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	e000      	b.n	80040f0 <sensors_init+0x6c>
	}
	return 1;
 80040ee:	2301      	movs	r3, #1
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3780      	adds	r7, #128	; 0x80
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	200060b8 	.word	0x200060b8
 80040fc:	08014938 	.word	0x08014938
 8004100:	2000626c 	.word	0x2000626c
 8004104:	08014964 	.word	0x08014964

08004108 <write_sensor_data_bt>:
/**
 * Write sensors' data to structure for bluetooth thread
 *  @sensor_data: sensors data
 */
void write_sensor_data_bt(sensors_t* sensor_data)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
	memcpy(&sensor_data_bt, sensor_data, sizeof (sensor_data_bt));
 8004110:	2218      	movs	r2, #24
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4803      	ldr	r0, [pc, #12]	; (8004124 <write_sensor_data_bt+0x1c>)
 8004116:	f00a fdb1 	bl	800ec7c <memcpy>
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20001dc0 	.word	0x20001dc0

08004128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <HAL_MspInit+0x4c>)
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	4a0f      	ldr	r2, [pc, #60]	; (8004174 <HAL_MspInit+0x4c>)
 8004138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800413c:	6453      	str	r3, [r2, #68]	; 0x44
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <HAL_MspInit+0x4c>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004146:	607b      	str	r3, [r7, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_MspInit+0x4c>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	4a08      	ldr	r2, [pc, #32]	; (8004174 <HAL_MspInit+0x4c>)
 8004154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004158:	6413      	str	r3, [r2, #64]	; 0x40
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_MspInit+0x4c>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800

08004178 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08c      	sub	sp, #48	; 0x30
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004188:	2200      	movs	r2, #0
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	2036      	movs	r0, #54	; 0x36
 800418e:	f001 fa69 	bl	8005664 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004192:	2036      	movs	r0, #54	; 0x36
 8004194:	f001 fa82 	bl	800569c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	4b1f      	ldr	r3, [pc, #124]	; (800421c <HAL_InitTick+0xa4>)
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	4a1e      	ldr	r2, [pc, #120]	; (800421c <HAL_InitTick+0xa4>)
 80041a2:	f043 0310 	orr.w	r3, r3, #16
 80041a6:	6413      	str	r3, [r2, #64]	; 0x40
 80041a8:	4b1c      	ldr	r3, [pc, #112]	; (800421c <HAL_InitTick+0xa4>)
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80041b4:	f107 0210 	add.w	r2, r7, #16
 80041b8:	f107 0314 	add.w	r3, r7, #20
 80041bc:	4611      	mov	r1, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f003 f9dc 	bl	800757c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80041c4:	f003 f9b2 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 80041c8:	4603      	mov	r3, r0
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80041ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d0:	4a13      	ldr	r2, [pc, #76]	; (8004220 <HAL_InitTick+0xa8>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	0c9b      	lsrs	r3, r3, #18
 80041d8:	3b01      	subs	r3, #1
 80041da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <HAL_InitTick+0xac>)
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <HAL_InitTick+0xb0>)
 80041e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80041e2:	4b10      	ldr	r3, [pc, #64]	; (8004224 <HAL_InitTick+0xac>)
 80041e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041e8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80041ea:	4a0e      	ldr	r2, [pc, #56]	; (8004224 <HAL_InitTick+0xac>)
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80041f0:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <HAL_InitTick+0xac>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f6:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_InitTick+0xac>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80041fc:	4809      	ldr	r0, [pc, #36]	; (8004224 <HAL_InitTick+0xac>)
 80041fe:	f003 fde9 	bl	8007dd4 <HAL_TIM_Base_Init>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d104      	bne.n	8004212 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004208:	4806      	ldr	r0, [pc, #24]	; (8004224 <HAL_InitTick+0xac>)
 800420a:	f003 fe32 	bl	8007e72 <HAL_TIM_Base_Start_IT>
 800420e:	4603      	mov	r3, r0
 8004210:	e000      	b.n	8004214 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
}
 8004214:	4618      	mov	r0, r3
 8004216:	3730      	adds	r7, #48	; 0x30
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40023800 	.word	0x40023800
 8004220:	431bde83 	.word	0x431bde83
 8004224:	2000610c 	.word	0x2000610c
 8004228:	40001000 	.word	0x40001000

0800422c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800423e:	e7fe      	b.n	800423e <HardFault_Handler+0x4>

08004240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004244:	e7fe      	b.n	8004244 <MemManage_Handler+0x4>

08004246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004246:	b480      	push	{r7}
 8004248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800424a:	e7fe      	b.n	800424a <BusFault_Handler+0x4>

0800424c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004250:	e7fe      	b.n	8004250 <UsageFault_Handler+0x4>

08004252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004252:	b480      	push	{r7}
 8004254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004256:	bf00      	nop
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004264:	4802      	ldr	r0, [pc, #8]	; (8004270 <DMA1_Stream0_IRQHandler+0x10>)
 8004266:	f001 fb2d 	bl	80058c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	200062ac 	.word	0x200062ac

08004274 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004278:	4802      	ldr	r0, [pc, #8]	; (8004284 <DMA1_Stream2_IRQHandler+0x10>)
 800427a:	f001 fb23 	bl	80058c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	2000618c 	.word	0x2000618c

08004288 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800428c:	4802      	ldr	r0, [pc, #8]	; (8004298 <TIM6_DAC_IRQHandler+0x10>)
 800428e:	f003 fe14 	bl	8007eba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	2000610c 	.word	0x2000610c

0800429c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042a0:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <SystemInit+0x28>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a6:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <SystemInit+0x28>)
 80042a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <SystemInit+0x28>)
 80042b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042b6:	609a      	str	r2, [r3, #8]
#endif
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042ce:	f107 0308 	add.w	r3, r7, #8
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	609a      	str	r2, [r3, #8]
 80042da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042dc:	463b      	mov	r3, r7
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80042e4:	4b1e      	ldr	r3, [pc, #120]	; (8004360 <MX_TIM2_Init+0x98>)
 80042e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 80042ec:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <MX_TIM2_Init+0x98>)
 80042ee:	f240 3283 	movw	r2, #899	; 0x383
 80042f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f4:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <MX_TIM2_Init+0x98>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80042fa:	4b19      	ldr	r3, [pc, #100]	; (8004360 <MX_TIM2_Init+0x98>)
 80042fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004300:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004302:	4b17      	ldr	r3, [pc, #92]	; (8004360 <MX_TIM2_Init+0x98>)
 8004304:	2200      	movs	r2, #0
 8004306:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004308:	4b15      	ldr	r3, [pc, #84]	; (8004360 <MX_TIM2_Init+0x98>)
 800430a:	2200      	movs	r2, #0
 800430c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800430e:	4814      	ldr	r0, [pc, #80]	; (8004360 <MX_TIM2_Init+0x98>)
 8004310:	f003 fd60 	bl	8007dd4 <HAL_TIM_Base_Init>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800431a:	f7ff fe11 	bl	8003f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800431e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004322:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004324:	f107 0308 	add.w	r3, r7, #8
 8004328:	4619      	mov	r1, r3
 800432a:	480d      	ldr	r0, [pc, #52]	; (8004360 <MX_TIM2_Init+0x98>)
 800432c:	f003 fecd 	bl	80080ca <HAL_TIM_ConfigClockSource>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004336:	f7ff fe03 	bl	8003f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800433a:	2300      	movs	r3, #0
 800433c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800433e:	2300      	movs	r3, #0
 8004340:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004342:	463b      	mov	r3, r7
 8004344:	4619      	mov	r1, r3
 8004346:	4806      	ldr	r0, [pc, #24]	; (8004360 <MX_TIM2_Init+0x98>)
 8004348:	f004 f8d8 	bl	80084fc <HAL_TIMEx_MasterConfigSynchronization>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004352:	f7ff fdf5 	bl	8003f40 <Error_Handler>
  }

}
 8004356:	bf00      	nop
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	2000614c 	.word	0x2000614c

08004364 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d10d      	bne.n	8004392 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_TIM_Base_MspInit+0x3c>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	4a08      	ldr	r2, [pc, #32]	; (80043a0 <HAL_TIM_Base_MspInit+0x3c>)
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	6413      	str	r3, [r2, #64]	; 0x40
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_TIM_Base_MspInit+0x3c>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40023800 	.word	0x40023800

080043a4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80043a8:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <MX_UART4_Init+0x4c>)
 80043aa:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <MX_UART4_Init+0x50>)
 80043ac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80043ae:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <MX_UART4_Init+0x4c>)
 80043b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043b4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80043b6:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <MX_UART4_Init+0x4c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <MX_UART4_Init+0x4c>)
 80043be:	2200      	movs	r2, #0
 80043c0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80043c2:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <MX_UART4_Init+0x4c>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80043c8:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <MX_UART4_Init+0x4c>)
 80043ca:	220c      	movs	r2, #12
 80043cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043ce:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <MX_UART4_Init+0x4c>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <MX_UART4_Init+0x4c>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80043da:	4805      	ldr	r0, [pc, #20]	; (80043f0 <MX_UART4_Init+0x4c>)
 80043dc:	f004 f91e 	bl	800861c <HAL_UART_Init>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80043e6:	f7ff fdab 	bl	8003f40 <Error_Handler>
  }

}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	2000622c 	.word	0x2000622c
 80043f4:	40004c00 	.word	0x40004c00

080043f8 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <MX_UART5_Init+0x4c>)
 80043fe:	4a12      	ldr	r2, [pc, #72]	; (8004448 <MX_UART5_Init+0x50>)
 8004400:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8004402:	4b10      	ldr	r3, [pc, #64]	; (8004444 <MX_UART5_Init+0x4c>)
 8004404:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004408:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <MX_UART5_Init+0x4c>)
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <MX_UART5_Init+0x4c>)
 8004412:	2200      	movs	r2, #0
 8004414:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <MX_UART5_Init+0x4c>)
 8004418:	2200      	movs	r2, #0
 800441a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <MX_UART5_Init+0x4c>)
 800441e:	220c      	movs	r2, #12
 8004420:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <MX_UART5_Init+0x4c>)
 8004424:	2200      	movs	r2, #0
 8004426:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <MX_UART5_Init+0x4c>)
 800442a:	2200      	movs	r2, #0
 800442c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800442e:	4805      	ldr	r0, [pc, #20]	; (8004444 <MX_UART5_Init+0x4c>)
 8004430:	f004 f8f4 	bl	800861c <HAL_UART_Init>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800443a:	f7ff fd81 	bl	8003f40 <Error_Handler>
  }

}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	200061ec 	.word	0x200061ec
 8004448:	40005000 	.word	0x40005000

0800444c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <MX_USART2_UART_Init+0x4c>)
 8004452:	4a12      	ldr	r2, [pc, #72]	; (800449c <MX_USART2_UART_Init+0x50>)
 8004454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <MX_USART2_UART_Init+0x4c>)
 8004458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800445c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800445e:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <MX_USART2_UART_Init+0x4c>)
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <MX_USART2_UART_Init+0x4c>)
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <MX_USART2_UART_Init+0x4c>)
 800446c:	2200      	movs	r2, #0
 800446e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <MX_USART2_UART_Init+0x4c>)
 8004472:	220c      	movs	r2, #12
 8004474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <MX_USART2_UART_Init+0x4c>)
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <MX_USART2_UART_Init+0x4c>)
 800447e:	2200      	movs	r2, #0
 8004480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004482:	4805      	ldr	r0, [pc, #20]	; (8004498 <MX_USART2_UART_Init+0x4c>)
 8004484:	f004 f8ca 	bl	800861c <HAL_UART_Init>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800448e:	f7ff fd57 	bl	8003f40 <Error_Handler>
  }

}
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	2000626c 	.word	0x2000626c
 800449c:	40004400 	.word	0x40004400

080044a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08e      	sub	sp, #56	; 0x38
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	60da      	str	r2, [r3, #12]
 80044b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a8a      	ldr	r2, [pc, #552]	; (80046e8 <HAL_UART_MspInit+0x248>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d15c      	bne.n	800457c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	623b      	str	r3, [r7, #32]
 80044c6:	4b89      	ldr	r3, [pc, #548]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a88      	ldr	r2, [pc, #544]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80044cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
 80044d2:	4b86      	ldr	r3, [pc, #536]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044da:	623b      	str	r3, [r7, #32]
 80044dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	4b82      	ldr	r3, [pc, #520]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a81      	ldr	r2, [pc, #516]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80044e8:	f043 0304 	orr.w	r3, r3, #4
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
 80044ee:	4b7f      	ldr	r3, [pc, #508]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80044fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004500:	2302      	movs	r3, #2
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004504:	2301      	movs	r3, #1
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004508:	2303      	movs	r3, #3
 800450a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800450c:	2308      	movs	r3, #8
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004514:	4619      	mov	r1, r3
 8004516:	4876      	ldr	r0, [pc, #472]	; (80046f0 <HAL_UART_MspInit+0x250>)
 8004518:	f001 fc3c 	bl	8005d94 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800451c:	4b75      	ldr	r3, [pc, #468]	; (80046f4 <HAL_UART_MspInit+0x254>)
 800451e:	4a76      	ldr	r2, [pc, #472]	; (80046f8 <HAL_UART_MspInit+0x258>)
 8004520:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004522:	4b74      	ldr	r3, [pc, #464]	; (80046f4 <HAL_UART_MspInit+0x254>)
 8004524:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004528:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800452a:	4b72      	ldr	r3, [pc, #456]	; (80046f4 <HAL_UART_MspInit+0x254>)
 800452c:	2200      	movs	r2, #0
 800452e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004530:	4b70      	ldr	r3, [pc, #448]	; (80046f4 <HAL_UART_MspInit+0x254>)
 8004532:	2200      	movs	r2, #0
 8004534:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004536:	4b6f      	ldr	r3, [pc, #444]	; (80046f4 <HAL_UART_MspInit+0x254>)
 8004538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800453c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800453e:	4b6d      	ldr	r3, [pc, #436]	; (80046f4 <HAL_UART_MspInit+0x254>)
 8004540:	2200      	movs	r2, #0
 8004542:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004544:	4b6b      	ldr	r3, [pc, #428]	; (80046f4 <HAL_UART_MspInit+0x254>)
 8004546:	2200      	movs	r2, #0
 8004548:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800454a:	4b6a      	ldr	r3, [pc, #424]	; (80046f4 <HAL_UART_MspInit+0x254>)
 800454c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004550:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004552:	4b68      	ldr	r3, [pc, #416]	; (80046f4 <HAL_UART_MspInit+0x254>)
 8004554:	2200      	movs	r2, #0
 8004556:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004558:	4b66      	ldr	r3, [pc, #408]	; (80046f4 <HAL_UART_MspInit+0x254>)
 800455a:	2200      	movs	r2, #0
 800455c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800455e:	4865      	ldr	r0, [pc, #404]	; (80046f4 <HAL_UART_MspInit+0x254>)
 8004560:	f001 f8aa 	bl	80056b8 <HAL_DMA_Init>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800456a:	f7ff fce9 	bl	8003f40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a60      	ldr	r2, [pc, #384]	; (80046f4 <HAL_UART_MspInit+0x254>)
 8004572:	635a      	str	r2, [r3, #52]	; 0x34
 8004574:	4a5f      	ldr	r2, [pc, #380]	; (80046f4 <HAL_UART_MspInit+0x254>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800457a:	e0b0      	b.n	80046de <HAL_UART_MspInit+0x23e>
  else if(uartHandle->Instance==UART5)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a5e      	ldr	r2, [pc, #376]	; (80046fc <HAL_UART_MspInit+0x25c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d17a      	bne.n	800467c <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	4b58      	ldr	r3, [pc, #352]	; (80046ec <HAL_UART_MspInit+0x24c>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	4a57      	ldr	r2, [pc, #348]	; (80046ec <HAL_UART_MspInit+0x24c>)
 8004590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004594:	6413      	str	r3, [r2, #64]	; 0x40
 8004596:	4b55      	ldr	r3, [pc, #340]	; (80046ec <HAL_UART_MspInit+0x24c>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	4b51      	ldr	r3, [pc, #324]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	4a50      	ldr	r2, [pc, #320]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80045ac:	f043 0304 	orr.w	r3, r3, #4
 80045b0:	6313      	str	r3, [r2, #48]	; 0x30
 80045b2:	4b4e      	ldr	r3, [pc, #312]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	4b4a      	ldr	r3, [pc, #296]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	4a49      	ldr	r2, [pc, #292]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80045c8:	f043 0308 	orr.w	r3, r3, #8
 80045cc:	6313      	str	r3, [r2, #48]	; 0x30
 80045ce:	4b47      	ldr	r3, [pc, #284]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80045da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e0:	2302      	movs	r3, #2
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045e4:	2301      	movs	r3, #1
 80045e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e8:	2303      	movs	r3, #3
 80045ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80045ec:	2308      	movs	r3, #8
 80045ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045f4:	4619      	mov	r1, r3
 80045f6:	483e      	ldr	r0, [pc, #248]	; (80046f0 <HAL_UART_MspInit+0x250>)
 80045f8:	f001 fbcc 	bl	8005d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045fc:	2304      	movs	r3, #4
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004600:	2302      	movs	r3, #2
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004604:	2301      	movs	r3, #1
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004608:	2303      	movs	r3, #3
 800460a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800460c:	2308      	movs	r3, #8
 800460e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004610:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004614:	4619      	mov	r1, r3
 8004616:	483a      	ldr	r0, [pc, #232]	; (8004700 <HAL_UART_MspInit+0x260>)
 8004618:	f001 fbbc 	bl	8005d94 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800461c:	4b39      	ldr	r3, [pc, #228]	; (8004704 <HAL_UART_MspInit+0x264>)
 800461e:	4a3a      	ldr	r2, [pc, #232]	; (8004708 <HAL_UART_MspInit+0x268>)
 8004620:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004622:	4b38      	ldr	r3, [pc, #224]	; (8004704 <HAL_UART_MspInit+0x264>)
 8004624:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004628:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800462a:	4b36      	ldr	r3, [pc, #216]	; (8004704 <HAL_UART_MspInit+0x264>)
 800462c:	2200      	movs	r2, #0
 800462e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004630:	4b34      	ldr	r3, [pc, #208]	; (8004704 <HAL_UART_MspInit+0x264>)
 8004632:	2200      	movs	r2, #0
 8004634:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004636:	4b33      	ldr	r3, [pc, #204]	; (8004704 <HAL_UART_MspInit+0x264>)
 8004638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800463c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800463e:	4b31      	ldr	r3, [pc, #196]	; (8004704 <HAL_UART_MspInit+0x264>)
 8004640:	2200      	movs	r2, #0
 8004642:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004644:	4b2f      	ldr	r3, [pc, #188]	; (8004704 <HAL_UART_MspInit+0x264>)
 8004646:	2200      	movs	r2, #0
 8004648:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800464a:	4b2e      	ldr	r3, [pc, #184]	; (8004704 <HAL_UART_MspInit+0x264>)
 800464c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004650:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004652:	4b2c      	ldr	r3, [pc, #176]	; (8004704 <HAL_UART_MspInit+0x264>)
 8004654:	2200      	movs	r2, #0
 8004656:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004658:	4b2a      	ldr	r3, [pc, #168]	; (8004704 <HAL_UART_MspInit+0x264>)
 800465a:	2200      	movs	r2, #0
 800465c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800465e:	4829      	ldr	r0, [pc, #164]	; (8004704 <HAL_UART_MspInit+0x264>)
 8004660:	f001 f82a 	bl	80056b8 <HAL_DMA_Init>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 800466a:	f7ff fc69 	bl	8003f40 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a24      	ldr	r2, [pc, #144]	; (8004704 <HAL_UART_MspInit+0x264>)
 8004672:	635a      	str	r2, [r3, #52]	; 0x34
 8004674:	4a23      	ldr	r2, [pc, #140]	; (8004704 <HAL_UART_MspInit+0x264>)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6393      	str	r3, [r2, #56]	; 0x38
}
 800467a:	e030      	b.n	80046de <HAL_UART_MspInit+0x23e>
  else if(uartHandle->Instance==USART2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a22      	ldr	r2, [pc, #136]	; (800470c <HAL_UART_MspInit+0x26c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d12b      	bne.n	80046de <HAL_UART_MspInit+0x23e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	4b18      	ldr	r3, [pc, #96]	; (80046ec <HAL_UART_MspInit+0x24c>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	4a17      	ldr	r2, [pc, #92]	; (80046ec <HAL_UART_MspInit+0x24c>)
 8004690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004694:	6413      	str	r3, [r2, #64]	; 0x40
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <HAL_UART_MspInit+0x24c>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	4a10      	ldr	r2, [pc, #64]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	6313      	str	r3, [r2, #48]	; 0x30
 80046b2:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <HAL_UART_MspInit+0x24c>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80046be:	230c      	movs	r3, #12
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c2:	2302      	movs	r3, #2
 80046c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ca:	2303      	movs	r3, #3
 80046cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046ce:	2307      	movs	r3, #7
 80046d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d6:	4619      	mov	r1, r3
 80046d8:	480d      	ldr	r0, [pc, #52]	; (8004710 <HAL_UART_MspInit+0x270>)
 80046da:	f001 fb5b 	bl	8005d94 <HAL_GPIO_Init>
}
 80046de:	bf00      	nop
 80046e0:	3738      	adds	r7, #56	; 0x38
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40004c00 	.word	0x40004c00
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40020800 	.word	0x40020800
 80046f4:	2000618c 	.word	0x2000618c
 80046f8:	40026040 	.word	0x40026040
 80046fc:	40005000 	.word	0x40005000
 8004700:	40020c00 	.word	0x40020c00
 8004704:	200062ac 	.word	0x200062ac
 8004708:	40026010 	.word	0x40026010
 800470c:	40004400 	.word	0x40004400
 8004710:	40020000 	.word	0x40020000

08004714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800474c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800471a:	e003      	b.n	8004724 <LoopCopyDataInit>

0800471c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800471c:	4b0c      	ldr	r3, [pc, #48]	; (8004750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800471e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004722:	3104      	adds	r1, #4

08004724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004724:	480b      	ldr	r0, [pc, #44]	; (8004754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004726:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800472a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800472c:	d3f6      	bcc.n	800471c <CopyDataInit>
  ldr  r2, =_sbss
 800472e:	4a0b      	ldr	r2, [pc, #44]	; (800475c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004730:	e002      	b.n	8004738 <LoopFillZerobss>

08004732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004734:	f842 3b04 	str.w	r3, [r2], #4

08004738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004738:	4b09      	ldr	r3, [pc, #36]	; (8004760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800473a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800473c:	d3f9      	bcc.n	8004732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800473e:	f7ff fdad 	bl	800429c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004742:	f00a fa43 	bl	800ebcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004746:	f7ff fb5b 	bl	8003e00 <main>
  bx  lr    
 800474a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800474c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004750:	08015498 	.word	0x08015498
  ldr  r0, =_sdata
 8004754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004758:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 800475c:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8004760:	20006354 	.word	0x20006354

08004764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004764:	e7fe      	b.n	8004764 <ADC_IRQHandler>
	...

08004768 <BMP280_I2C_Write>:
 *
 */
static inline s8 BMP280_I2C_Write (u8 dev_addr,
		u8 reg_addr,
		u8 *reg_data,
		u8 cnt) {
 8004768:	b590      	push	{r4, r7, lr}
 800476a:	b087      	sub	sp, #28
 800476c:	af04      	add	r7, sp, #16
 800476e:	603a      	str	r2, [r7, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	4603      	mov	r3, r0
 8004774:	71fb      	strb	r3, [r7, #7]
 8004776:	460b      	mov	r3, r1
 8004778:	71bb      	strb	r3, [r7, #6]
 800477a:	4613      	mov	r3, r2
 800477c:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(p_bmp280->i2c_handle, dev_addr << 1U, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 800477e:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <BMP280_I2C_Write+0x4c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6a18      	ldr	r0, [r3, #32]
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	b29b      	uxth	r3, r3
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	b299      	uxth	r1, r3
 800478c:	79bb      	ldrb	r3, [r7, #6]
 800478e:	b29c      	uxth	r4, r3
 8004790:	797b      	ldrb	r3, [r7, #5]
 8004792:	b29b      	uxth	r3, r3
 8004794:	2264      	movs	r2, #100	; 0x64
 8004796:	9202      	str	r2, [sp, #8]
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	2301      	movs	r3, #1
 80047a0:	4622      	mov	r2, r4
 80047a2:	f001 fddb 	bl	800635c <HAL_I2C_Mem_Write>
 80047a6:	4603      	mov	r3, r0
 80047a8:	b25b      	sxtb	r3, r3
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd90      	pop	{r4, r7, pc}
 80047b2:	bf00      	nop
 80047b4:	2000630c 	.word	0x2000630c

080047b8 <BMP280_I2C_Read>:
 *
 */
static inline s8 BMP280_I2C_Read (u8 dev_addr,
		u8 reg_addr,
		u8 *reg_data,
		u8 cnt) {
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af04      	add	r7, sp, #16
 80047be:	603a      	str	r2, [r7, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
 80047c6:	460b      	mov	r3, r1
 80047c8:	71bb      	strb	r3, [r7, #6]
 80047ca:	4613      	mov	r3, r2
 80047cc:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(p_bmp280->i2c_handle, dev_addr << 1U, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, cnt, 100);
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <BMP280_I2C_Read+0x4c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a18      	ldr	r0, [r3, #32]
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	b299      	uxth	r1, r3
 80047dc:	79bb      	ldrb	r3, [r7, #6]
 80047de:	b29c      	uxth	r4, r3
 80047e0:	797b      	ldrb	r3, [r7, #5]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2264      	movs	r2, #100	; 0x64
 80047e6:	9202      	str	r2, [sp, #8]
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	2301      	movs	r3, #1
 80047f0:	4622      	mov	r2, r4
 80047f2:	f001 fead 	bl	8006550 <HAL_I2C_Mem_Read>
 80047f6:	4603      	mov	r3, r0
 80047f8:	b25b      	sxtb	r3, r3
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd90      	pop	{r4, r7, pc}
 8004802:	bf00      	nop
 8004804:	2000630c 	.word	0x2000630c

08004808 <BMP280_init>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_init(bmp280_t *bmp280)
{
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8004810:	23ff      	movs	r3, #255	; 0xff
 8004812:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8004814:	2300      	movs	r3, #0
 8004816:	737b      	strb	r3, [r7, #13]
	u8 v_chip_id_read_count = BMP280_CHIP_ID_READ_COUNT;
 8004818:	2305      	movs	r3, #5
 800481a:	73bb      	strb	r3, [r7, #14]

	p_bmp280 = bmp280;/* assign BMP280 ptr */
 800481c:	4a2b      	ldr	r2, [pc, #172]	; (80048cc <BMP280_init+0xc4>)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6013      	str	r3, [r2, #0]
#ifdef HAL_I2C_MODULE_ENABLED
	p_bmp280->bus_write = BMP280_I2C_Write;
 8004822:	4b2a      	ldr	r3, [pc, #168]	; (80048cc <BMP280_init+0xc4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2a      	ldr	r2, [pc, #168]	; (80048d0 <BMP280_init+0xc8>)
 8004828:	629a      	str	r2, [r3, #40]	; 0x28
	p_bmp280->bus_read = BMP280_I2C_Read;
 800482a:	4b28      	ldr	r3, [pc, #160]	; (80048cc <BMP280_init+0xc4>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a29      	ldr	r2, [pc, #164]	; (80048d4 <BMP280_init+0xcc>)
 8004830:	62da      	str	r2, [r3, #44]	; 0x2c
#elif HAL_SPI_MODULE_ENABLED
	p_bmp280->bus_write = BMP280_SPI_Write;
	p_bmp280->bus_read = BMP280_SPI_Read;
#endif
	if (p_bmp280->dev_addr == 0) {
 8004832:	4b26      	ldr	r3, [pc, #152]	; (80048cc <BMP280_init+0xc4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	7f5b      	ldrb	r3, [r3, #29]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <BMP280_init+0x3c>
		p_bmp280->dev_addr = BMP280_I2C_ADDRESS1;
 800483c:	4b23      	ldr	r3, [pc, #140]	; (80048cc <BMP280_init+0xc4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2276      	movs	r2, #118	; 0x76
 8004842:	775a      	strb	r2, [r3, #29]
	}
	p_bmp280->delay_msec = HAL_Delay;
 8004844:	4b21      	ldr	r3, [pc, #132]	; (80048cc <BMP280_init+0xc4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a23      	ldr	r2, [pc, #140]	; (80048d8 <BMP280_init+0xd0>)
 800484a:	631a      	str	r2, [r3, #48]	; 0x30

	while (v_chip_id_read_count > 0) {
 800484c:	e01d      	b.n	800488a <BMP280_init+0x82>
		/* read chip id */
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 800484e:	4b1f      	ldr	r3, [pc, #124]	; (80048cc <BMP280_init+0xc4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <BMP280_init+0xc4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	7f58      	ldrb	r0, [r3, #29]
 800485a:	f107 020d 	add.w	r2, r7, #13
 800485e:	2301      	movs	r3, #1
 8004860:	21d0      	movs	r1, #208	; 0xd0
 8004862:	47a0      	blx	r4
 8004864:	4603      	mov	r3, r0
 8004866:	73fb      	strb	r3, [r7, #15]
				BMP280_CHIP_ID_REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		/* Check for the correct chip id */
		if ((v_data_u8 == BMP280_CHIP_ID1)
 8004868:	7b7b      	ldrb	r3, [r7, #13]
 800486a:	2b56      	cmp	r3, #86	; 0x56
 800486c:	d010      	beq.n	8004890 <BMP280_init+0x88>
			|| (v_data_u8 == BMP280_CHIP_ID2)
 800486e:	7b7b      	ldrb	r3, [r7, #13]
 8004870:	2b57      	cmp	r3, #87	; 0x57
 8004872:	d00d      	beq.n	8004890 <BMP280_init+0x88>
			|| (v_data_u8 == BMP280_CHIP_ID3))
 8004874:	7b7b      	ldrb	r3, [r7, #13]
 8004876:	2b58      	cmp	r3, #88	; 0x58
 8004878:	d00a      	beq.n	8004890 <BMP280_init+0x88>
			break;
		v_chip_id_read_count--;
 800487a:	7bbb      	ldrb	r3, [r7, #14]
 800487c:	3b01      	subs	r3, #1
 800487e:	73bb      	strb	r3, [r7, #14]
		/* Delay added concerning the low speed of power up system to
		facilitate the proper reading of the chip ID */
		p_bmp280->delay_msec(BMP280_REGISTER_READ_DELAY);
 8004880:	4b12      	ldr	r3, [pc, #72]	; (80048cc <BMP280_init+0xc4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	2001      	movs	r0, #1
 8004888:	4798      	blx	r3
	while (v_chip_id_read_count > 0) {
 800488a:	7bbb      	ldrb	r3, [r7, #14]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1de      	bne.n	800484e <BMP280_init+0x46>
	}

	/*assign chip ID to the global structure*/
	p_bmp280->chip_id = v_data_u8;
 8004890:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <BMP280_init+0xc4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	7b7a      	ldrb	r2, [r7, #13]
 8004896:	771a      	strb	r2, [r3, #28]
	/*com_rslt status of chip ID read*/
	com_rslt = (v_chip_id_read_count == BMP280_INIT_VALUE) ?
 8004898:	7bbb      	ldrb	r3, [r7, #14]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <BMP280_init+0x9c>
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	e000      	b.n	80048a6 <BMP280_init+0x9e>
 80048a4:	2300      	movs	r3, #0
 80048a6:	73fb      	strb	r3, [r7, #15]
			BMP280_CHIP_ID_READ_FAIL : BMP280_CHIP_ID_READ_SUCCESS;

	if (com_rslt == BMP280_CHIP_ID_READ_SUCCESS) {
 80048a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d107      	bne.n	80048c0 <BMP280_init+0xb8>
		/* readout bmp280 calibration parameter structure */
		com_rslt += BMP280_get_calib_param();
 80048b0:	f000 f87c 	bl	80049ac <BMP280_get_calib_param>
 80048b4:	4603      	mov	r3, r0
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	4413      	add	r3, r2
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	73fb      	strb	r3, [r7, #15]
	}
	return com_rslt;
 80048c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd90      	pop	{r4, r7, pc}
 80048cc:	2000630c 	.word	0x2000630c
 80048d0:	08004769 	.word	0x08004769
 80048d4:	080047b9 	.word	0x080047b9
 80048d8:	080054b1 	.word	0x080054b1

080048dc <BMP280_read_uncomp_temperature>:
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_uncomp_temperature(
		s32 *v_uncomp_temperature_s32)
{
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80048e4:	23ff      	movs	r3, #255	; 0xff
 80048e6:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	 a_data_u8r[0] - Temperature MSB
	 a_data_u8r[1] - Temperature LSB
	 a_data_u8r[2] - Temperature LSB
	 */
	u8 a_data_u8r[BMP280_TEMPERATURE_DATA_SIZE] = {BMP280_INIT_VALUE,
 80048e8:	2300      	movs	r3, #0
 80048ea:	733b      	strb	r3, [r7, #12]
 80048ec:	2300      	movs	r3, #0
 80048ee:	737b      	strb	r3, [r7, #13]
 80048f0:	2300      	movs	r3, #0
 80048f2:	73bb      	strb	r3, [r7, #14]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <BMP280_read_uncomp_temperature+0x64>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d102      	bne.n	8004902 <BMP280_read_uncomp_temperature+0x26>
		com_rslt = E_BMP280_NULL_PTR;
 80048fc:	2381      	movs	r3, #129	; 0x81
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	e018      	b.n	8004934 <BMP280_read_uncomp_temperature+0x58>
	} else {
		/* read temperature data */
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8004902:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <BMP280_read_uncomp_temperature+0x64>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004908:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <BMP280_read_uncomp_temperature+0x64>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	7f58      	ldrb	r0, [r3, #29]
 800490e:	f107 020c 	add.w	r2, r7, #12
 8004912:	2303      	movs	r3, #3
 8004914:	21fa      	movs	r1, #250	; 0xfa
 8004916:	47a0      	blx	r4
 8004918:	4603      	mov	r3, r0
 800491a:	73fb      	strb	r3, [r7, #15]
				BMP280_TEMPERATURE_MSB_REG, a_data_u8r,
				BMP280_TEMPERATURE_DATA_LENGTH);
		*v_uncomp_temperature_s32 = (s32)((((u32)(
				a_data_u8r[BMP280_TEMPERATURE_MSB_DATA]))
 800491c:	7b3b      	ldrb	r3, [r7, #12]
				<< BMP280_SHIFT_BIT_POSITION_BY_12_BITS)
 800491e:	031a      	lsls	r2, r3, #12
				| (((u32)(
				a_data_u8r[BMP280_TEMPERATURE_LSB_DATA]))
 8004920:	7b7b      	ldrb	r3, [r7, #13]
				<< BMP280_SHIFT_BIT_POSITION_BY_04_BITS)
 8004922:	011b      	lsls	r3, r3, #4
				| (((u32)(
 8004924:	4313      	orrs	r3, r2
				| ((u32)a_data_u8r[BMP280_TEMPERATURE_XLSB_DATA]
 8004926:	7bba      	ldrb	r2, [r7, #14]
				>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS));
 8004928:	0912      	lsrs	r2, r2, #4
 800492a:	b2d2      	uxtb	r2, r2
				| ((u32)a_data_u8r[BMP280_TEMPERATURE_XLSB_DATA]
 800492c:	4313      	orrs	r3, r2
		*v_uncomp_temperature_s32 = (s32)((((u32)(
 800492e:	461a      	mov	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	601a      	str	r2, [r3, #0]
	}
	return com_rslt;
 8004934:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	bd90      	pop	{r4, r7, pc}
 8004940:	2000630c 	.word	0x2000630c

08004944 <BMP280_read_uncomp_pressure>:
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_uncomp_pressure(
		s32 *v_uncomp_pressure_s32)
{
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 800494c:	23ff      	movs	r3, #255	; 0xff
 800494e:	73fb      	strb	r3, [r7, #15]
	/* Array holding the MSB and LSb value
	 a_data_u8[0] - Pressure MSB
	 a_data_u8[1] - Pressure LSB
	 a_data_u8[2] - Pressure LSB
	 */
	u8 a_data_u8[BMP280_PRESSURE_DATA_SIZE] = {BMP280_INIT_VALUE,
 8004950:	2300      	movs	r3, #0
 8004952:	733b      	strb	r3, [r7, #12]
 8004954:	2300      	movs	r3, #0
 8004956:	737b      	strb	r3, [r7, #13]
 8004958:	2300      	movs	r3, #0
 800495a:	73bb      	strb	r3, [r7, #14]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 800495c:	4b12      	ldr	r3, [pc, #72]	; (80049a8 <BMP280_read_uncomp_pressure+0x64>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <BMP280_read_uncomp_pressure+0x26>
		com_rslt = E_BMP280_NULL_PTR;
 8004964:	2381      	movs	r3, #129	; 0x81
 8004966:	73fb      	strb	r3, [r7, #15]
 8004968:	e018      	b.n	800499c <BMP280_read_uncomp_pressure+0x58>
	} else {
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 800496a:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <BMP280_read_uncomp_pressure+0x64>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004970:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <BMP280_read_uncomp_pressure+0x64>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	7f58      	ldrb	r0, [r3, #29]
 8004976:	f107 020c 	add.w	r2, r7, #12
 800497a:	2303      	movs	r3, #3
 800497c:	21f7      	movs	r1, #247	; 0xf7
 800497e:	47a0      	blx	r4
 8004980:	4603      	mov	r3, r0
 8004982:	73fb      	strb	r3, [r7, #15]
				BMP280_PRESSURE_MSB_REG, a_data_u8,
				BMP280_PRESSURE_DATA_LENGTH);
		*v_uncomp_pressure_s32 = (s32)((((u32)(
				a_data_u8[BMP280_PRESSURE_MSB_DATA]))
 8004984:	7b3b      	ldrb	r3, [r7, #12]
				<< BMP280_SHIFT_BIT_POSITION_BY_12_BITS)
 8004986:	031a      	lsls	r2, r3, #12
				| (((u32)(a_data_u8[BMP280_PRESSURE_LSB_DATA]))
 8004988:	7b7b      	ldrb	r3, [r7, #13]
				<< BMP280_SHIFT_BIT_POSITION_BY_04_BITS)
 800498a:	011b      	lsls	r3, r3, #4
				| (((u32)(a_data_u8[BMP280_PRESSURE_LSB_DATA]))
 800498c:	4313      	orrs	r3, r2
				| ((u32)a_data_u8[BMP280_PRESSURE_XLSB_DATA]
 800498e:	7bba      	ldrb	r2, [r7, #14]
				>> BMP280_SHIFT_BIT_POSITION_BY_04_BITS));
 8004990:	0912      	lsrs	r2, r2, #4
 8004992:	b2d2      	uxtb	r2, r2
				| ((u32)a_data_u8[BMP280_PRESSURE_XLSB_DATA]
 8004994:	4313      	orrs	r3, r2
		*v_uncomp_pressure_s32 = (s32)((((u32)(
 8004996:	461a      	mov	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]
	}
	return com_rslt;
 800499c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd90      	pop	{r4, r7, pc}
 80049a8:	2000630c 	.word	0x2000630c

080049ac <BMP280_get_calib_param>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_get_calib_param(void)
{
 80049ac:	b590      	push	{r4, r7, lr}
 80049ae:	b089      	sub	sp, #36	; 0x24
 80049b0:	af00      	add	r7, sp, #0
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80049b2:	23ff      	movs	r3, #255	; 0xff
 80049b4:	77fb      	strb	r3, [r7, #31]
	u8 a_data_u8[BMP280_CALIB_DATA_SIZE] = {BMP280_INIT_VALUE,
 80049b6:	1d3b      	adds	r3, r7, #4
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	605a      	str	r2, [r3, #4]
 80049be:	609a      	str	r2, [r3, #8]
 80049c0:	60da      	str	r2, [r3, #12]
 80049c2:	611a      	str	r2, [r3, #16]
 80049c4:	615a      	str	r2, [r3, #20]
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE, BMP280_INIT_VALUE,
			BMP280_INIT_VALUE, BMP280_INIT_VALUE};
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 80049c6:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <BMP280_get_calib_param+0x154>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <BMP280_get_calib_param+0x28>
		com_rslt = E_BMP280_NULL_PTR;
 80049ce:	2381      	movs	r3, #129	; 0x81
 80049d0:	77fb      	strb	r3, [r7, #31]
 80049d2:	e08f      	b.n	8004af4 <BMP280_get_calib_param+0x148>
	} else {
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 80049d4:	4b4a      	ldr	r3, [pc, #296]	; (8004b00 <BMP280_get_calib_param+0x154>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80049da:	4b49      	ldr	r3, [pc, #292]	; (8004b00 <BMP280_get_calib_param+0x154>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	7f58      	ldrb	r0, [r3, #29]
 80049e0:	1d3a      	adds	r2, r7, #4
 80049e2:	2318      	movs	r3, #24
 80049e4:	2188      	movs	r1, #136	; 0x88
 80049e6:	47a0      	blx	r4
 80049e8:	4603      	mov	r3, r0
 80049ea:	77fb      	strb	r3, [r7, #31]
				BMP280_TEMPERATURE_CALIB_DIG_T1_LSB_REG,
				a_data_u8,
				BMP280_PRESSURE_TEMPERATURE_CALIB_DATA_LENGTH);
		/* read calibration values*/
		p_bmp280->calib_param.dig_T1 = (u16)((((u16)((u8)a_data_u8[
 80049ec:	797b      	ldrb	r3, [r7, #5]
					BMP280_TEMPERATURE_CALIB_DIG_T1_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 80049ee:	021b      	lsls	r3, r3, #8
					| a_data_u8[
 80049f0:	b21a      	sxth	r2, r3
 80049f2:	793b      	ldrb	r3, [r7, #4]
 80049f4:	b21b      	sxth	r3, r3
 80049f6:	4313      	orrs	r3, r2
 80049f8:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T1 = (u16)((((u16)((u8)a_data_u8[
 80049fa:	4b41      	ldr	r3, [pc, #260]	; (8004b00 <BMP280_get_calib_param+0x154>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	b292      	uxth	r2, r2
 8004a00:	801a      	strh	r2, [r3, #0]
					BMP280_TEMPERATURE_CALIB_DIG_T1_LSB]);
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	b25b      	sxtb	r3, r3
					BMP280_TEMPERATURE_CALIB_DIG_T2_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8004a06:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8004a08:	b219      	sxth	r1, r3
					| a_data_u8[
 8004a0a:	79bb      	ldrb	r3, [r7, #6]
 8004a0c:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T2 = (s16)((((s16)((s8)a_data_u8[
 8004a0e:	4b3c      	ldr	r3, [pc, #240]	; (8004b00 <BMP280_get_calib_param+0x154>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	b212      	sxth	r2, r2
 8004a16:	805a      	strh	r2, [r3, #2]
					BMP280_TEMPERATURE_CALIB_DIG_T2_LSB]);
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 8004a18:	7a7b      	ldrb	r3, [r7, #9]
 8004a1a:	b25b      	sxtb	r3, r3
					BMP280_TEMPERATURE_CALIB_DIG_T3_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8004a1c:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 8004a1e:	b219      	sxth	r1, r3
					| a_data_u8[
 8004a20:	7a3b      	ldrb	r3, [r7, #8]
 8004a22:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_T3 = (s16)((((s16)((s8)a_data_u8[
 8004a24:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <BMP280_get_calib_param+0x154>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	b212      	sxth	r2, r2
 8004a2c:	809a      	strh	r2, [r3, #4]
					BMP280_TEMPERATURE_CALIB_DIG_T3_LSB]);
		p_bmp280->calib_param.dig_P1 = (u16)((((u16)((u8)a_data_u8[
 8004a2e:	7afb      	ldrb	r3, [r7, #11]
					BMP280_PRESSURE_CALIB_DIG_P1_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8004a30:	021b      	lsls	r3, r3, #8
					| a_data_u8[
 8004a32:	b21a      	sxth	r2, r3
 8004a34:	7abb      	ldrb	r3, [r7, #10]
 8004a36:	b21b      	sxth	r3, r3
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P1 = (u16)((((u16)((u8)a_data_u8[
 8004a3c:	4b30      	ldr	r3, [pc, #192]	; (8004b00 <BMP280_get_calib_param+0x154>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	b292      	uxth	r2, r2
 8004a42:	80da      	strh	r2, [r3, #6]
					BMP280_PRESSURE_CALIB_DIG_P1_LSB]);
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 8004a44:	7b7b      	ldrb	r3, [r7, #13]
 8004a46:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P2_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8004a48:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 8004a4a:	b219      	sxth	r1, r3
					| a_data_u8[
 8004a4c:	7b3b      	ldrb	r3, [r7, #12]
 8004a4e:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P2 = (s16)((((s16)((s8)a_data_u8[
 8004a50:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <BMP280_get_calib_param+0x154>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	b212      	sxth	r2, r2
 8004a58:	811a      	strh	r2, [r3, #8]
					BMP280_PRESSURE_CALIB_DIG_P2_LSB]);
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P3_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8004a5e:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 8004a60:	b219      	sxth	r1, r3
					| a_data_u8[
 8004a62:	7bbb      	ldrb	r3, [r7, #14]
 8004a64:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P3 = (s16)((((s16)((s8)a_data_u8[
 8004a66:	4b26      	ldr	r3, [pc, #152]	; (8004b00 <BMP280_get_calib_param+0x154>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	b212      	sxth	r2, r2
 8004a6e:	815a      	strh	r2, [r3, #10]
					BMP280_PRESSURE_CALIB_DIG_P3_LSB]);
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 8004a70:	7c7b      	ldrb	r3, [r7, #17]
 8004a72:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P4_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8004a74:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 8004a76:	b219      	sxth	r1, r3
					| a_data_u8[
 8004a78:	7c3b      	ldrb	r3, [r7, #16]
 8004a7a:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P4 = (s16)((((s16)((s8)a_data_u8[
 8004a7c:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <BMP280_get_calib_param+0x154>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	b212      	sxth	r2, r2
 8004a84:	819a      	strh	r2, [r3, #12]
					BMP280_PRESSURE_CALIB_DIG_P4_LSB]);
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 8004a86:	7cfb      	ldrb	r3, [r7, #19]
 8004a88:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P5_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8004a8a:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 8004a8c:	b219      	sxth	r1, r3
					| a_data_u8[
 8004a8e:	7cbb      	ldrb	r3, [r7, #18]
 8004a90:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P5 = (s16)((((s16)((s8)a_data_u8[
 8004a92:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <BMP280_get_calib_param+0x154>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	b212      	sxth	r2, r2
 8004a9a:	81da      	strh	r2, [r3, #14]
					BMP280_PRESSURE_CALIB_DIG_P5_LSB]);
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8004a9c:	7d7b      	ldrb	r3, [r7, #21]
 8004a9e:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P6_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8004aa0:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8004aa2:	b219      	sxth	r1, r3
					| a_data_u8[
 8004aa4:	7d3b      	ldrb	r3, [r7, #20]
 8004aa6:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P6 = (s16)((((s16)((s8)a_data_u8[
 8004aa8:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <BMP280_get_calib_param+0x154>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	b212      	sxth	r2, r2
 8004ab0:	821a      	strh	r2, [r3, #16]
					BMP280_PRESSURE_CALIB_DIG_P6_LSB]);
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 8004ab2:	7dfb      	ldrb	r3, [r7, #23]
 8004ab4:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P7_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8004ab6:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 8004ab8:	b219      	sxth	r1, r3
					| a_data_u8[
 8004aba:	7dbb      	ldrb	r3, [r7, #22]
 8004abc:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P7 = (s16)((((s16)((s8)a_data_u8[
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <BMP280_get_calib_param+0x154>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	b212      	sxth	r2, r2
 8004ac6:	825a      	strh	r2, [r3, #18]
					BMP280_PRESSURE_CALIB_DIG_P7_LSB]);
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 8004ac8:	7e7b      	ldrb	r3, [r7, #25]
 8004aca:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P8_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8004acc:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 8004ace:	b219      	sxth	r1, r3
					| a_data_u8[
 8004ad0:	7e3b      	ldrb	r3, [r7, #24]
 8004ad2:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P8 = (s16)((((s16)((s8)a_data_u8[
 8004ad4:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <BMP280_get_calib_param+0x154>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	b212      	sxth	r2, r2
 8004adc:	829a      	strh	r2, [r3, #20]
					BMP280_PRESSURE_CALIB_DIG_P8_LSB]);
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 8004ade:	7efb      	ldrb	r3, [r7, #27]
 8004ae0:	b25b      	sxtb	r3, r3
					BMP280_PRESSURE_CALIB_DIG_P9_MSB]))
					<< BMP280_SHIFT_BIT_POSITION_BY_08_BITS)
 8004ae2:	021b      	lsls	r3, r3, #8
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 8004ae4:	b219      	sxth	r1, r3
					| a_data_u8[
 8004ae6:	7ebb      	ldrb	r3, [r7, #26]
 8004ae8:	b21a      	sxth	r2, r3
		p_bmp280->calib_param.dig_P9 = (s16)((((s16)((s8)a_data_u8[
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <BMP280_get_calib_param+0x154>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	b212      	sxth	r2, r2
 8004af2:	82da      	strh	r2, [r3, #22]
					BMP280_PRESSURE_CALIB_DIG_P9_LSB]);
	}
	return com_rslt;
 8004af4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3724      	adds	r7, #36	; 0x24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd90      	pop	{r4, r7, pc}
 8004b00:	2000630c 	.word	0x2000630c

08004b04 <BMP280_set_power_mode>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_power_mode(u8 v_power_mode_u8)
{
 8004b04:	b590      	push	{r4, r7, lr}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8004b0e:	23ff      	movs	r3, #255	; 0xff
 8004b10:	73fb      	strb	r3, [r7, #15]
	u8 v_mode_u8 = BMP280_INIT_VALUE;
 8004b12:	2300      	movs	r3, #0
 8004b14:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8004b16:	4b1b      	ldr	r3, [pc, #108]	; (8004b84 <BMP280_set_power_mode+0x80>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <BMP280_set_power_mode+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 8004b1e:	2381      	movs	r3, #129	; 0x81
 8004b20:	73fb      	strb	r3, [r7, #15]
 8004b22:	e029      	b.n	8004b78 <BMP280_set_power_mode+0x74>
	} else {
		if (v_power_mode_u8 <= BMP280_NORMAL_MODE) {
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d824      	bhi.n	8004b74 <BMP280_set_power_mode+0x70>
			/* write the power mode*/
			v_mode_u8 = (p_bmp280->oversamp_temperature
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <BMP280_set_power_mode+0x80>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
					<< BMP280_SHIFT_BIT_POSITION_BY_05_BITS)
 8004b32:	015b      	lsls	r3, r3, #5
 8004b34:	b2da      	uxtb	r2, r3
					+ (p_bmp280->oversamp_pressure
 8004b36:	4b13      	ldr	r3, [pc, #76]	; (8004b84 <BMP280_set_power_mode+0x80>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
					<< BMP280_SHIFT_BIT_POSITION_BY_02_BITS)
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	b2db      	uxtb	r3, r3
					+ (p_bmp280->oversamp_pressure
 8004b42:	4413      	add	r3, r2
 8004b44:	b2da      	uxtb	r2, r3
					+ v_power_mode_u8;
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	4413      	add	r3, r2
 8004b4a:	b2db      	uxtb	r3, r3
			v_mode_u8 = (p_bmp280->oversamp_temperature
 8004b4c:	73bb      	strb	r3, [r7, #14]
			com_rslt = p_bmp280->BMP280_BUS_WRITE_FUNC(
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <BMP280_set_power_mode+0x80>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <BMP280_set_power_mode+0x80>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	7f58      	ldrb	r0, [r3, #29]
 8004b5a:	f107 020e 	add.w	r2, r7, #14
 8004b5e:	2301      	movs	r3, #1
 8004b60:	21f4      	movs	r1, #244	; 0xf4
 8004b62:	47a0      	blx	r4
 8004b64:	4603      	mov	r3, r0
 8004b66:	73fb      	strb	r3, [r7, #15]
					BMP280_CTRL_MEAS_REG_POWER_MODE__REG,
					&v_mode_u8,
					BMP280_GEN_READ_WRITE_DATA_LENGTH);
			/* Delay added concerning the low speed of power up system to
			facilitate the proper setting of power mode */
			p_bmp280->delay_msec(T_INIT_MAX);
 8004b68:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <BMP280_set_power_mode+0x80>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	2014      	movs	r0, #20
 8004b70:	4798      	blx	r3
 8004b72:	e001      	b.n	8004b78 <BMP280_set_power_mode+0x74>
		} else {
			com_rslt = E_BMP280_OUT_OF_RANGE;
 8004b74:	23fe      	movs	r3, #254	; 0xfe
 8004b76:	73fb      	strb	r3, [r7, #15]
		}
	}
	return com_rslt;
 8004b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd90      	pop	{r4, r7, pc}
 8004b84:	2000630c 	.word	0x2000630c

08004b88 <BMP280_set_standby_durn>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_standby_durn(u8 v_standby_durn_u8)
{
 8004b88:	b590      	push	{r4, r7, lr}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8004b92:	23ff      	movs	r3, #255	; 0xff
 8004b94:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <BMP280_set_standby_durn+0x88>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <BMP280_set_standby_durn+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 8004ba2:	2381      	movs	r3, #129	; 0x81
 8004ba4:	73fb      	strb	r3, [r7, #15]
 8004ba6:	e02d      	b.n	8004c04 <BMP280_set_standby_durn+0x7c>
	} else {
		/* write the standby duration*/
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(p_bmp280->dev_addr,
 8004ba8:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <BMP280_set_standby_durn+0x88>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004bae:	4b18      	ldr	r3, [pc, #96]	; (8004c10 <BMP280_set_standby_durn+0x88>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	7f58      	ldrb	r0, [r3, #29]
 8004bb4:	f107 020e 	add.w	r2, r7, #14
 8004bb8:	2301      	movs	r3, #1
 8004bba:	21f5      	movs	r1, #245	; 0xf5
 8004bbc:	47a0      	blx	r4
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	73fb      	strb	r3, [r7, #15]
				BMP280_CONFIG_REG_STANDBY_DURN__REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		if (com_rslt == SUCCESS) {
 8004bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d11c      	bne.n	8004c04 <BMP280_set_standby_durn+0x7c>
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 8004bca:	7bbb      	ldrb	r3, [r7, #14]
 8004bcc:	b25b      	sxtb	r3, r3
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	b25a      	sxtb	r2, r3
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	015b      	lsls	r3, r3, #5
 8004bd8:	b25b      	sxtb	r3, r3
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	b25b      	sxtb	r3, r3
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	73bb      	strb	r3, [r7, #14]
					BMP280_CONFIG_REG_STANDBY_DURN,
					v_standby_durn_u8);
			com_rslt += p_bmp280->BMP280_BUS_WRITE_FUNC(
 8004be2:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <BMP280_set_standby_durn+0x88>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004be8:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <BMP280_set_standby_durn+0x88>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	7f58      	ldrb	r0, [r3, #29]
 8004bee:	f107 020e 	add.w	r2, r7, #14
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	21f5      	movs	r1, #245	; 0xf5
 8004bf6:	47a0      	blx	r4
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	4413      	add	r3, r2
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	73fb      	strb	r3, [r7, #15]
					BMP280_CONFIG_REG_STANDBY_DURN__REG,
					&v_data_u8,
					BMP280_GEN_READ_WRITE_DATA_LENGTH);
		}
	}
	return com_rslt;
 8004c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd90      	pop	{r4, r7, pc}
 8004c10:	2000630c 	.word	0x2000630c

08004c14 <BMP280_set_work_mode>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_set_work_mode(u8 v_work_mode_u8)
{
 8004c14:	b590      	push	{r4, r7, lr}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8004c1e:	23ff      	movs	r3, #255	; 0xff
 8004c20:	73fb      	strb	r3, [r7, #15]
	u8 v_data_u8 = BMP280_INIT_VALUE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73bb      	strb	r3, [r7, #14]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 8004c26:	4b4f      	ldr	r3, [pc, #316]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <BMP280_set_work_mode+0x20>
		com_rslt = E_BMP280_NULL_PTR;
 8004c2e:	2381      	movs	r3, #129	; 0x81
 8004c30:	73fb      	strb	r3, [r7, #15]
 8004c32:	e091      	b.n	8004d58 <BMP280_set_work_mode+0x144>
	} else {
	if (v_work_mode_u8 <= BMP280_ULTRA_HIGH_RESOLUTION_MODE) {
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	f200 808c 	bhi.w	8004d54 <BMP280_set_work_mode+0x140>
		com_rslt = p_bmp280->BMP280_BUS_READ_FUNC(
 8004c3c:	4b49      	ldr	r3, [pc, #292]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004c42:	4b48      	ldr	r3, [pc, #288]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	7f58      	ldrb	r0, [r3, #29]
 8004c48:	f107 020e 	add.w	r2, r7, #14
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	21f4      	movs	r1, #244	; 0xf4
 8004c50:	47a0      	blx	r4
 8004c52:	4603      	mov	r3, r0
 8004c54:	73fb      	strb	r3, [r7, #15]
				p_bmp280->dev_addr,
				BMP280_CTRL_MEAS_REG, &v_data_u8,
				BMP280_GEN_READ_WRITE_DATA_LENGTH);
		if (com_rslt == SUCCESS) {
 8004c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d17c      	bne.n	8004d58 <BMP280_set_work_mode+0x144>
			switch (v_work_mode_u8) {
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d844      	bhi.n	8004cee <BMP280_set_work_mode+0xda>
 8004c64:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <BMP280_set_work_mode+0x58>)
 8004c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6a:	bf00      	nop
 8004c6c:	08004c81 	.word	0x08004c81
 8004c70:	08004c97 	.word	0x08004c97
 8004c74:	08004cad 	.word	0x08004cad
 8004c78:	08004cc3 	.word	0x08004cc3
 8004c7c:	08004cd9 	.word	0x08004cd9
			/* write work mode*/
			case BMP280_ULTRA_LOW_POWER_MODE:
				p_bmp280->oversamp_temperature =
 8004c80:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_ULTRALOWPOWER_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8004c8a:	4b36      	ldr	r3, [pc, #216]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					BMP280_ULTRALOWPOWER_OVERSAMP_PRESSURE;
				break;
 8004c94:	e02b      	b.n	8004cee <BMP280_set_work_mode+0xda>
			case BMP280_LOW_POWER_MODE:
				p_bmp280->oversamp_temperature =
 8004c96:	4b33      	ldr	r3, [pc, #204]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					BMP280_LOWPOWER_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8004ca0:	4b30      	ldr	r3, [pc, #192]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
					BMP280_LOWPOWER_OVERSAMP_PRESSURE;
				break;
 8004caa:	e020      	b.n	8004cee <BMP280_set_work_mode+0xda>
			case BMP280_STANDARD_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8004cac:	4b2d      	ldr	r3, [pc, #180]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_STANDARDRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8004cb6:	4b2b      	ldr	r3, [pc, #172]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2203      	movs	r2, #3
 8004cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_STANDARDRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8004cc0:	e015      	b.n	8004cee <BMP280_set_work_mode+0xda>
			case BMP280_HIGH_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8004cc2:	4b28      	ldr	r3, [pc, #160]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_HIGHRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8004ccc:	4b25      	ldr	r3, [pc, #148]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_HIGHRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8004cd6:	e00a      	b.n	8004cee <BMP280_set_work_mode+0xda>
			case BMP280_ULTRA_HIGH_RESOLUTION_MODE:
				p_bmp280->oversamp_temperature =
 8004cd8:	4b22      	ldr	r3, [pc, #136]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				BMP280_ULTRAHIGHRESOLUTION_OVERSAMP_TEMPERATURE;
				p_bmp280->oversamp_pressure =
 8004ce2:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2205      	movs	r2, #5
 8004ce8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				BMP280_ULTRAHIGHRESOLUTION_OVERSAMP_PRESSURE;
				break;
 8004cec:	bf00      	nop
			}
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 8004cee:	7bbb      	ldrb	r3, [r7, #14]
 8004cf0:	b25b      	sxtb	r3, r3
 8004cf2:	f003 031f 	and.w	r3, r3, #31
 8004cf6:	b25a      	sxtb	r2, r3
 8004cf8:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d00:	015b      	lsls	r3, r3, #5
 8004d02:	b25b      	sxtb	r3, r3
 8004d04:	4313      	orrs	r3, r2
 8004d06:	b25b      	sxtb	r3, r3
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	73bb      	strb	r3, [r7, #14]
				BMP280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE,
				p_bmp280->oversamp_temperature);
			v_data_u8 = BMP280_SET_BITSLICE(v_data_u8,
 8004d0c:	7bbb      	ldrb	r3, [r7, #14]
 8004d0e:	b25b      	sxtb	r3, r3
 8004d10:	f023 031c 	bic.w	r3, r3, #28
 8004d14:	b25a      	sxtb	r2, r3
 8004d16:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	b25b      	sxtb	r3, r3
 8004d22:	f003 031c 	and.w	r3, r3, #28
 8004d26:	b25b      	sxtb	r3, r3
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	b25b      	sxtb	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	73bb      	strb	r3, [r7, #14]
				BMP280_CTRL_MEAS_REG_OVERSAMP_PRESSURE,
				p_bmp280->oversamp_pressure);
			com_rslt += p_bmp280->BMP280_BUS_WRITE_FUNC(
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <BMP280_set_work_mode+0x150>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	7f58      	ldrb	r0, [r3, #29]
 8004d3c:	f107 020e 	add.w	r2, r7, #14
 8004d40:	2301      	movs	r3, #1
 8004d42:	21f4      	movs	r1, #244	; 0xf4
 8004d44:	47a0      	blx	r4
 8004d46:	4603      	mov	r3, r0
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	73fb      	strb	r3, [r7, #15]
 8004d52:	e001      	b.n	8004d58 <BMP280_set_work_mode+0x144>
				p_bmp280->dev_addr, BMP280_CTRL_MEAS_REG,
				&v_data_u8, BMP280_GEN_READ_WRITE_DATA_LENGTH);
		}
	} else {
		com_rslt = E_BMP280_OUT_OF_RANGE;
 8004d54:	23fe      	movs	r3, #254	; 0xfe
 8004d56:	73fb      	strb	r3, [r7, #15]
	}
	}
	return com_rslt;
 8004d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd90      	pop	{r4, r7, pc}
 8004d64:	2000630c 	.word	0x2000630c

08004d68 <BMP280_compensate_temperature_double>:
 *  @return
 *	Actual temperature in floating point
 *
 */
double BMP280_compensate_temperature_double(s32 v_uncomp_temperature_s32)
{
 8004d68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d6c:	b088      	sub	sp, #32
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
	double v_x1_u32r = BMP280_INIT_VALUE;
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	f04f 0400 	mov.w	r4, #0
 8004d7a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double v_x2_u32r = BMP280_INIT_VALUE;
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	f04f 0400 	mov.w	r4, #0
 8004d86:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double temperature = BMP280_INIT_VALUE;
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	f04f 0400 	mov.w	r4, #0
 8004d92:	e9c7 3402 	strd	r3, r4, [r7, #8]
	/* calculate x1*/
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fb fbf4 	bl	8000584 <__aeabi_i2d>
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	4b5c      	ldr	r3, [pc, #368]	; (8004f14 <BMP280_compensate_temperature_double+0x1ac>)
 8004da2:	f7fb fd83 	bl	80008ac <__aeabi_ddiv>
 8004da6:	4603      	mov	r3, r0
 8004da8:	460c      	mov	r4, r1
 8004daa:	4625      	mov	r5, r4
 8004dac:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_T1) / 1024.0) *
 8004dae:	4b5a      	ldr	r3, [pc, #360]	; (8004f18 <BMP280_compensate_temperature_double+0x1b0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fb fbd5 	bl	8000564 <__aeabi_ui2d>
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	4b57      	ldr	r3, [pc, #348]	; (8004f1c <BMP280_compensate_temperature_double+0x1b4>)
 8004dc0:	f7fb fd74 	bl	80008ac <__aeabi_ddiv>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8004dc8:	4620      	mov	r0, r4
 8004dca:	4629      	mov	r1, r5
 8004dcc:	f7fb fa8c 	bl	80002e8 <__aeabi_dsub>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	4625      	mov	r5, r4
 8004dd6:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_T2);
 8004dd8:	4b4f      	ldr	r3, [pc, #316]	; (8004f18 <BMP280_compensate_temperature_double+0x1b0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fb fbcf 	bl	8000584 <__aeabi_i2d>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
	v_x1_u32r = (((double)v_uncomp_temperature_s32) / 16384.0 -
 8004dea:	4620      	mov	r0, r4
 8004dec:	4629      	mov	r1, r5
 8004dee:	f7fb fc33 	bl	8000658 <__aeabi_dmul>
 8004df2:	4603      	mov	r3, r0
 8004df4:	460c      	mov	r4, r1
 8004df6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	/* calculate x2*/
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fb fbc2 	bl	8000584 <__aeabi_i2d>
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004e08:	f7fb fd50 	bl	80008ac <__aeabi_ddiv>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	4625      	mov	r5, r4
 8004e12:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_T1) / 8192.0) *
 8004e14:	4b40      	ldr	r3, [pc, #256]	; (8004f18 <BMP280_compensate_temperature_double+0x1b0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fb fba2 	bl	8000564 <__aeabi_ui2d>
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <BMP280_compensate_temperature_double+0x1b8>)
 8004e26:	f7fb fd41 	bl	80008ac <__aeabi_ddiv>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 8004e2e:	4620      	mov	r0, r4
 8004e30:	4629      	mov	r1, r5
 8004e32:	f7fb fa59 	bl	80002e8 <__aeabi_dsub>
 8004e36:	4603      	mov	r3, r0
 8004e38:	460c      	mov	r4, r1
 8004e3a:	4625      	mov	r5, r4
 8004e3c:	461c      	mov	r4, r3
			(((double)v_uncomp_temperature_s32) / 131072.0 -
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fb fba0 	bl	8000584 <__aeabi_i2d>
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004e4c:	f7fb fd2e 	bl	80008ac <__aeabi_ddiv>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4690      	mov	r8, r2
 8004e56:	4699      	mov	r9, r3
			((double)p_bmp280->calib_param.dig_T1) / 8192.0)) *
 8004e58:	4b2f      	ldr	r3, [pc, #188]	; (8004f18 <BMP280_compensate_temperature_double+0x1b0>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fb fb80 	bl	8000564 <__aeabi_ui2d>
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	4b2d      	ldr	r3, [pc, #180]	; (8004f20 <BMP280_compensate_temperature_double+0x1b8>)
 8004e6a:	f7fb fd1f 	bl	80008ac <__aeabi_ddiv>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
			(((double)v_uncomp_temperature_s32) / 131072.0 -
 8004e72:	4640      	mov	r0, r8
 8004e74:	4649      	mov	r1, r9
 8004e76:	f7fb fa37 	bl	80002e8 <__aeabi_dsub>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
			((double)p_bmp280->calib_param.dig_T1) / 8192.0) *
 8004e7e:	4620      	mov	r0, r4
 8004e80:	4629      	mov	r1, r5
 8004e82:	f7fb fbe9 	bl	8000658 <__aeabi_dmul>
 8004e86:	4603      	mov	r3, r0
 8004e88:	460c      	mov	r4, r1
 8004e8a:	4625      	mov	r5, r4
 8004e8c:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_T3);
 8004e8e:	4b22      	ldr	r3, [pc, #136]	; (8004f18 <BMP280_compensate_temperature_double+0x1b0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fb fb74 	bl	8000584 <__aeabi_i2d>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
	v_x2_u32r = ((((double)v_uncomp_temperature_s32) / 131072.0 -
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb fbd8 	bl	8000658 <__aeabi_dmul>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	460c      	mov	r4, r1
 8004eac:	e9c7 3404 	strd	r3, r4, [r7, #16]
	/* calculate t_fine*/
	p_bmp280->calib_param.t_fine = (s32)(v_x1_u32r + v_x2_u32r);
 8004eb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004eb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004eb8:	f7fb fa18 	bl	80002ec <__adddf3>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <BMP280_compensate_temperature_double+0x1b0>)
 8004ec6:	681c      	ldr	r4, [r3, #0]
 8004ec8:	4608      	mov	r0, r1
 8004eca:	4611      	mov	r1, r2
 8004ecc:	f7fb fe74 	bl	8000bb8 <__aeabi_d2iz>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	61a3      	str	r3, [r4, #24]
	/* calculate true pressure*/
	temperature = (v_x1_u32r + v_x2_u32r) / 5120.0;
 8004ed4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ed8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004edc:	f7fb fa06 	bl	80002ec <__adddf3>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <BMP280_compensate_temperature_double+0x1bc>)
 8004eee:	f7fb fcdd 	bl	80008ac <__aeabi_ddiv>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return temperature;
 8004efa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004efe:	ec44 3b17 	vmov	d7, r3, r4
}
 8004f02:	eeb0 0a47 	vmov.f32	s0, s14
 8004f06:	eef0 0a67 	vmov.f32	s1, s15
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f12:	bf00      	nop
 8004f14:	40d00000 	.word	0x40d00000
 8004f18:	2000630c 	.word	0x2000630c
 8004f1c:	40900000 	.word	0x40900000
 8004f20:	40c00000 	.word	0x40c00000
 8004f24:	40b40000 	.word	0x40b40000

08004f28 <BMP280_compensate_pressure_double>:
 *  @return
 *	Actual pressure in floating point
 *
 */
double BMP280_compensate_pressure_double(s32 v_uncomp_pressure_s32)
{
 8004f28:	b5b0      	push	{r4, r5, r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	double v_x1_u32r = BMP280_INIT_VALUE;
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	f04f 0400 	mov.w	r4, #0
 8004f38:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double v_x2_u32r = BMP280_INIT_VALUE;
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	f04f 0400 	mov.w	r4, #0
 8004f44:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double pressure = BMP280_INIT_VALUE;
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	f04f 0400 	mov.w	r4, #0
 8004f50:	e9c7 3402 	strd	r3, r4, [r7, #8]

	v_x1_u32r = ((double)p_bmp280->calib_param.t_fine/2.0) - 64000.0;
 8004f54:	4bca      	ldr	r3, [pc, #808]	; (8005280 <BMP280_compensate_pressure_double+0x358>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fb fb12 	bl	8000584 <__aeabi_i2d>
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f68:	f7fb fca0 	bl	80008ac <__aeabi_ddiv>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	4618      	mov	r0, r3
 8004f72:	4621      	mov	r1, r4
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	4bc2      	ldr	r3, [pc, #776]	; (8005284 <BMP280_compensate_pressure_double+0x35c>)
 8004f7a:	f7fb f9b5 	bl	80002e8 <__aeabi_dsub>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	460c      	mov	r4, r1
 8004f82:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_x2_u32r = v_x1_u32r * v_x1_u32r *
 8004f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004f8e:	f7fb fb63 	bl	8000658 <__aeabi_dmul>
 8004f92:	4603      	mov	r3, r0
 8004f94:	460c      	mov	r4, r1
 8004f96:	4625      	mov	r5, r4
 8004f98:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_P6) / 32768.0;
 8004f9a:	4bb9      	ldr	r3, [pc, #740]	; (8005280 <BMP280_compensate_pressure_double+0x358>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fb faee 	bl	8000584 <__aeabi_i2d>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
	v_x2_u32r = v_x1_u32r * v_x1_u32r *
 8004fac:	4620      	mov	r0, r4
 8004fae:	4629      	mov	r1, r5
 8004fb0:	f7fb fb52 	bl	8000658 <__aeabi_dmul>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	4618      	mov	r0, r3
 8004fba:	4621      	mov	r1, r4
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	4bb1      	ldr	r3, [pc, #708]	; (8005288 <BMP280_compensate_pressure_double+0x360>)
 8004fc2:	f7fb fc73 	bl	80008ac <__aeabi_ddiv>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	460c      	mov	r4, r1
 8004fca:	e9c7 3404 	strd	r3, r4, [r7, #16]
	v_x2_u32r = v_x2_u32r + v_x1_u32r *
	((double)p_bmp280->calib_param.dig_P5) * 2.0;
 8004fce:	4bac      	ldr	r3, [pc, #688]	; (8005280 <BMP280_compensate_pressure_double+0x358>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fb fad4 	bl	8000584 <__aeabi_i2d>
	v_x2_u32r = v_x2_u32r + v_x1_u32r *
 8004fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fe0:	f7fb fb3a 	bl	8000658 <__aeabi_dmul>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	4618      	mov	r0, r3
 8004fea:	4621      	mov	r1, r4
	((double)p_bmp280->calib_param.dig_P5) * 2.0;
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	f7fb f97c 	bl	80002ec <__adddf3>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	460c      	mov	r4, r1
	v_x2_u32r = v_x2_u32r + v_x1_u32r *
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4623      	mov	r3, r4
 8004ffc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005000:	f7fb f974 	bl	80002ec <__adddf3>
 8005004:	4603      	mov	r3, r0
 8005006:	460c      	mov	r4, r1
 8005008:	e9c7 3404 	strd	r3, r4, [r7, #16]
	v_x2_u32r = (v_x2_u32r / 4.0) +
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	4b9e      	ldr	r3, [pc, #632]	; (800528c <BMP280_compensate_pressure_double+0x364>)
 8005012:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005016:	f7fb fc49 	bl	80008ac <__aeabi_ddiv>
 800501a:	4603      	mov	r3, r0
 800501c:	460c      	mov	r4, r1
 800501e:	4625      	mov	r5, r4
 8005020:	461c      	mov	r4, r3
	(((double)p_bmp280->calib_param.dig_P4) * 65536.0);
 8005022:	4b97      	ldr	r3, [pc, #604]	; (8005280 <BMP280_compensate_pressure_double+0x358>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800502a:	4618      	mov	r0, r3
 800502c:	f7fb faaa 	bl	8000584 <__aeabi_i2d>
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	4b96      	ldr	r3, [pc, #600]	; (8005290 <BMP280_compensate_pressure_double+0x368>)
 8005036:	f7fb fb0f 	bl	8000658 <__aeabi_dmul>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
	v_x2_u32r = (v_x2_u32r / 4.0) +
 800503e:	4620      	mov	r0, r4
 8005040:	4629      	mov	r1, r5
 8005042:	f7fb f953 	bl	80002ec <__adddf3>
 8005046:	4603      	mov	r3, r0
 8005048:	460c      	mov	r4, r1
 800504a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	v_x1_u32r = (((double)p_bmp280->calib_param.dig_P3) *
 800504e:	4b8c      	ldr	r3, [pc, #560]	; (8005280 <BMP280_compensate_pressure_double+0x358>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005056:	4618      	mov	r0, r3
 8005058:	f7fb fa94 	bl	8000584 <__aeabi_i2d>
 800505c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005060:	f7fb fafa 	bl	8000658 <__aeabi_dmul>
 8005064:	4603      	mov	r3, r0
 8005066:	460c      	mov	r4, r1
 8005068:	4618      	mov	r0, r3
 800506a:	4621      	mov	r1, r4
		v_x1_u32r * v_x1_u32r / 524288.0 +
 800506c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005070:	f7fb faf2 	bl	8000658 <__aeabi_dmul>
 8005074:	4603      	mov	r3, r0
 8005076:	460c      	mov	r4, r1
 8005078:	4618      	mov	r0, r3
 800507a:	4621      	mov	r1, r4
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	4b84      	ldr	r3, [pc, #528]	; (8005294 <BMP280_compensate_pressure_double+0x36c>)
 8005082:	f7fb fc13 	bl	80008ac <__aeabi_ddiv>
 8005086:	4603      	mov	r3, r0
 8005088:	460c      	mov	r4, r1
 800508a:	4625      	mov	r5, r4
 800508c:	461c      	mov	r4, r3
		((double)p_bmp280->calib_param.dig_P2) * v_x1_u32r) / 524288.0;
 800508e:	4b7c      	ldr	r3, [pc, #496]	; (8005280 <BMP280_compensate_pressure_double+0x358>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005096:	4618      	mov	r0, r3
 8005098:	f7fb fa74 	bl	8000584 <__aeabi_i2d>
 800509c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050a0:	f7fb fada 	bl	8000658 <__aeabi_dmul>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
		v_x1_u32r * v_x1_u32r / 524288.0 +
 80050a8:	4620      	mov	r0, r4
 80050aa:	4629      	mov	r1, r5
 80050ac:	f7fb f91e 	bl	80002ec <__adddf3>
 80050b0:	4603      	mov	r3, r0
 80050b2:	460c      	mov	r4, r1
 80050b4:	4618      	mov	r0, r3
 80050b6:	4621      	mov	r1, r4
	v_x1_u32r = (((double)p_bmp280->calib_param.dig_P3) *
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	4b75      	ldr	r3, [pc, #468]	; (8005294 <BMP280_compensate_pressure_double+0x36c>)
 80050be:	f7fb fbf5 	bl	80008ac <__aeabi_ddiv>
 80050c2:	4603      	mov	r3, r0
 80050c4:	460c      	mov	r4, r1
 80050c6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_x1_u32r = (1.0 + v_x1_u32r / 32768.0) *
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	4b6e      	ldr	r3, [pc, #440]	; (8005288 <BMP280_compensate_pressure_double+0x360>)
 80050d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80050d4:	f7fb fbea 	bl	80008ac <__aeabi_ddiv>
 80050d8:	4603      	mov	r3, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	4618      	mov	r0, r3
 80050de:	4621      	mov	r1, r4
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	4b6c      	ldr	r3, [pc, #432]	; (8005298 <BMP280_compensate_pressure_double+0x370>)
 80050e6:	f7fb f901 	bl	80002ec <__adddf3>
 80050ea:	4603      	mov	r3, r0
 80050ec:	460c      	mov	r4, r1
 80050ee:	4625      	mov	r5, r4
 80050f0:	461c      	mov	r4, r3
	((double)p_bmp280->calib_param.dig_P1);
 80050f2:	4b63      	ldr	r3, [pc, #396]	; (8005280 <BMP280_compensate_pressure_double+0x358>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	88db      	ldrh	r3, [r3, #6]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fb fa33 	bl	8000564 <__aeabi_ui2d>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
	v_x1_u32r = (1.0 + v_x1_u32r / 32768.0) *
 8005102:	4620      	mov	r0, r4
 8005104:	4629      	mov	r1, r5
 8005106:	f7fb faa7 	bl	8000658 <__aeabi_dmul>
 800510a:	4603      	mov	r3, r0
 800510c:	460c      	mov	r4, r1
 800510e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	pressure = 1048576.0 - (double)v_uncomp_pressure_s32;
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fb fa36 	bl	8000584 <__aeabi_i2d>
 8005118:	4603      	mov	r3, r0
 800511a:	460c      	mov	r4, r1
 800511c:	461a      	mov	r2, r3
 800511e:	4623      	mov	r3, r4
 8005120:	f04f 0000 	mov.w	r0, #0
 8005124:	495d      	ldr	r1, [pc, #372]	; (800529c <BMP280_compensate_pressure_double+0x374>)
 8005126:	f7fb f8df 	bl	80002e8 <__aeabi_dsub>
 800512a:	4603      	mov	r3, r0
 800512c:	460c      	mov	r4, r1
 800512e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	/* Avoid exception caused by division by zero */
	if ((v_x1_u32r > 0) || (v_x1_u32r < 0))
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800513e:	f7fb fd1b 	bl	8000b78 <__aeabi_dcmpgt>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10b      	bne.n	8005160 <BMP280_compensate_pressure_double+0x238>
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005154:	f7fb fcf2 	bl	8000b3c <__aeabi_dcmplt>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 80a7 	beq.w	80052ae <BMP280_compensate_pressure_double+0x386>
		pressure = (pressure - (v_x2_u32r / 4096.0)) *
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	4b4e      	ldr	r3, [pc, #312]	; (80052a0 <BMP280_compensate_pressure_double+0x378>)
 8005166:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800516a:	f7fb fb9f 	bl	80008ac <__aeabi_ddiv>
 800516e:	4603      	mov	r3, r0
 8005170:	460c      	mov	r4, r1
 8005172:	461a      	mov	r2, r3
 8005174:	4623      	mov	r3, r4
 8005176:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800517a:	f7fb f8b5 	bl	80002e8 <__aeabi_dsub>
 800517e:	4603      	mov	r3, r0
 8005180:	460c      	mov	r4, r1
 8005182:	4618      	mov	r0, r3
 8005184:	4621      	mov	r1, r4
 8005186:	a33c      	add	r3, pc, #240	; (adr r3, 8005278 <BMP280_compensate_pressure_double+0x350>)
 8005188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518c:	f7fb fa64 	bl	8000658 <__aeabi_dmul>
 8005190:	4603      	mov	r3, r0
 8005192:	460c      	mov	r4, r1
 8005194:	4618      	mov	r0, r3
 8005196:	4621      	mov	r1, r4
 8005198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800519c:	f7fb fb86 	bl	80008ac <__aeabi_ddiv>
 80051a0:	4603      	mov	r3, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	e9c7 3402 	strd	r3, r4, [r7, #8]
					6250.0 / v_x1_u32r;
	else
	return BMP280_INVALID_DATA;
	v_x1_u32r = ((double)p_bmp280->calib_param.dig_P9) *
 80051a8:	4b35      	ldr	r3, [pc, #212]	; (8005280 <BMP280_compensate_pressure_double+0x358>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fb f9e7 	bl	8000584 <__aeabi_i2d>
 80051b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ba:	f7fb fa4d 	bl	8000658 <__aeabi_dmul>
 80051be:	4603      	mov	r3, r0
 80051c0:	460c      	mov	r4, r1
 80051c2:	4618      	mov	r0, r3
 80051c4:	4621      	mov	r1, r4
	pressure * pressure / 2147483648.0;
 80051c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ca:	f7fb fa45 	bl	8000658 <__aeabi_dmul>
 80051ce:	4603      	mov	r3, r0
 80051d0:	460c      	mov	r4, r1
 80051d2:	4618      	mov	r0, r3
 80051d4:	4621      	mov	r1, r4
	v_x1_u32r = ((double)p_bmp280->calib_param.dig_P9) *
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	4b32      	ldr	r3, [pc, #200]	; (80052a4 <BMP280_compensate_pressure_double+0x37c>)
 80051dc:	f7fb fb66 	bl	80008ac <__aeabi_ddiv>
 80051e0:	4603      	mov	r3, r0
 80051e2:	460c      	mov	r4, r1
 80051e4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	v_x2_u32r = pressure * ((double)p_bmp280->calib_param.dig_P8) / 32768.0;
 80051e8:	4b25      	ldr	r3, [pc, #148]	; (8005280 <BMP280_compensate_pressure_double+0x358>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fb f9c7 	bl	8000584 <__aeabi_i2d>
 80051f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051fa:	f7fb fa2d 	bl	8000658 <__aeabi_dmul>
 80051fe:	4603      	mov	r3, r0
 8005200:	460c      	mov	r4, r1
 8005202:	4618      	mov	r0, r3
 8005204:	4621      	mov	r1, r4
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	4b1f      	ldr	r3, [pc, #124]	; (8005288 <BMP280_compensate_pressure_double+0x360>)
 800520c:	f7fb fb4e 	bl	80008ac <__aeabi_ddiv>
 8005210:	4603      	mov	r3, r0
 8005212:	460c      	mov	r4, r1
 8005214:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pressure = pressure + (v_x1_u32r + v_x2_u32r +
 8005218:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800521c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005220:	f7fb f864 	bl	80002ec <__adddf3>
 8005224:	4603      	mov	r3, r0
 8005226:	460c      	mov	r4, r1
 8005228:	4625      	mov	r5, r4
 800522a:	461c      	mov	r4, r3
			((double)p_bmp280->calib_param.dig_P7)) / 16.0;
 800522c:	4b14      	ldr	r3, [pc, #80]	; (8005280 <BMP280_compensate_pressure_double+0x358>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005234:	4618      	mov	r0, r3
 8005236:	f7fb f9a5 	bl	8000584 <__aeabi_i2d>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
	pressure = pressure + (v_x1_u32r + v_x2_u32r +
 800523e:	4620      	mov	r0, r4
 8005240:	4629      	mov	r1, r5
 8005242:	f7fb f853 	bl	80002ec <__adddf3>
 8005246:	4603      	mov	r3, r0
 8005248:	460c      	mov	r4, r1
 800524a:	4618      	mov	r0, r3
 800524c:	4621      	mov	r1, r4
			((double)p_bmp280->calib_param.dig_P7)) / 16.0;
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <BMP280_compensate_pressure_double+0x380>)
 8005254:	f7fb fb2a 	bl	80008ac <__aeabi_ddiv>
 8005258:	4603      	mov	r3, r0
 800525a:	460c      	mov	r4, r1
	pressure = pressure + (v_x1_u32r + v_x2_u32r +
 800525c:	461a      	mov	r2, r3
 800525e:	4623      	mov	r3, r4
 8005260:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005264:	f7fb f842 	bl	80002ec <__adddf3>
 8005268:	4603      	mov	r3, r0
 800526a:	460c      	mov	r4, r1
 800526c:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return pressure;
 8005270:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005274:	e01a      	b.n	80052ac <BMP280_compensate_pressure_double+0x384>
 8005276:	bf00      	nop
 8005278:	00000000 	.word	0x00000000
 800527c:	40b86a00 	.word	0x40b86a00
 8005280:	2000630c 	.word	0x2000630c
 8005284:	40ef4000 	.word	0x40ef4000
 8005288:	40e00000 	.word	0x40e00000
 800528c:	40100000 	.word	0x40100000
 8005290:	40f00000 	.word	0x40f00000
 8005294:	41200000 	.word	0x41200000
 8005298:	3ff00000 	.word	0x3ff00000
 800529c:	41300000 	.word	0x41300000
 80052a0:	40b00000 	.word	0x40b00000
 80052a4:	41e00000 	.word	0x41e00000
 80052a8:	40300000 	.word	0x40300000
 80052ac:	e003      	b.n	80052b6 <BMP280_compensate_pressure_double+0x38e>
	return BMP280_INVALID_DATA;
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	f04f 0400 	mov.w	r4, #0
 80052b6:	ec44 3b17 	vmov	d7, r3, r4
}
 80052ba:	eeb0 0a47 	vmov.f32	s0, s14
 80052be:	eef0 0a67 	vmov.f32	s1, s15
 80052c2:	3720      	adds	r7, #32
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bdb0      	pop	{r4, r5, r7, pc}

080052c8 <BMP280_read_temperature_double>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_temperature_double(double *v_temperature_d)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 80052d0:	23ff      	movs	r3, #255	; 0xff
 80052d2:	73fb      	strb	r3, [r7, #15]
	s32 v_uncomp_temperature_s32 = BMP280_INIT_VALUE;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60bb      	str	r3, [r7, #8]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 80052d8:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <BMP280_read_temperature_double+0x50>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d102      	bne.n	80052e6 <BMP280_read_temperature_double+0x1e>
		com_rslt = E_BMP280_NULL_PTR;
 80052e0:	2381      	movs	r3, #129	; 0x81
 80052e2:	73fb      	strb	r3, [r7, #15]
 80052e4:	e011      	b.n	800530a <BMP280_read_temperature_double+0x42>
	} else {
		/* read uncompensated temperature*/
		com_rslt = BMP280_read_uncomp_temperature(
 80052e6:	f107 0308 	add.w	r3, r7, #8
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff faf6 	bl	80048dc <BMP280_read_uncomp_temperature>
 80052f0:	4603      	mov	r3, r0
 80052f2:	73fb      	strb	r3, [r7, #15]
				&v_uncomp_temperature_s32);
		/* read true temperature as double*/
		*v_temperature_d = BMP280_compensate_temperature_double(
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fd36 	bl	8004d68 <BMP280_compensate_temperature_double>
 80052fc:	eeb0 7a40 	vmov.f32	s14, s0
 8005300:	eef0 7a60 	vmov.f32	s15, s1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	ed83 7b00 	vstr	d7, [r3]
				v_uncomp_temperature_s32);
	}
	return com_rslt;
 800530a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	2000630c 	.word	0x2000630c

0800531c <BMP280_read_pressure_double>:
 *	@retval -1 -> Error
 *
 *
 */
BMP280_RETURN_FUNCTION_TYPE BMP280_read_pressure_double(double *v_pressure_d)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
	BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8005324:	23ff      	movs	r3, #255	; 0xff
 8005326:	73fb      	strb	r3, [r7, #15]
	s32 v_uncomp_pressure_s32 = BMP280_INIT_VALUE;
 8005328:	2300      	movs	r3, #0
 800532a:	60bb      	str	r3, [r7, #8]
	/* check the p_bmp280 structure pointer as NULL*/
	if (p_bmp280 == BMP280_NULL) {
 800532c:	4b0f      	ldr	r3, [pc, #60]	; (800536c <BMP280_read_pressure_double+0x50>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <BMP280_read_pressure_double+0x1e>
		com_rslt = E_BMP280_NULL_PTR;
 8005334:	2381      	movs	r3, #129	; 0x81
 8005336:	73fb      	strb	r3, [r7, #15]
 8005338:	e011      	b.n	800535e <BMP280_read_pressure_double+0x42>
	} else {
		/* read uncompensated pressure*/
		com_rslt = BMP280_read_uncomp_pressure(
 800533a:	f107 0308 	add.w	r3, r7, #8
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff fb00 	bl	8004944 <BMP280_read_uncomp_pressure>
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]
				&v_uncomp_pressure_s32);
		/* read true pressure as double*/
		*v_pressure_d = BMP280_compensate_pressure_double(
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fdec 	bl	8004f28 <BMP280_compensate_pressure_double>
 8005350:	eeb0 7a40 	vmov.f32	s14, s0
 8005354:	eef0 7a60 	vmov.f32	s15, s1
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	ed83 7b00 	vstr	d7, [r3]
				v_uncomp_pressure_s32);
	}
	return com_rslt;
 800535e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	2000630c 	.word	0x2000630c

08005370 <BMP280_calculate_altitude>:
 *  @return Actual altitude output as float
 *
 *
 */
double BMP280_calculate_altitude(u32 v_sea_level_pressure_u32)
{
 8005370:	b5b0      	push	{r4, r5, r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
	/* variable used to return communication result*/
		BMP280_RETURN_FUNCTION_TYPE com_rslt = ERROR;
 8005378:	23ff      	movs	r3, #255	; 0xff
 800537a:	75fb      	strb	r3, [r7, #23]
	/* read true pressure*/
	double v_pressure_d = BMP280_INIT_VALUE;
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	f04f 0400 	mov.w	r4, #0
 8005384:	e9c7 3402 	strd	r3, r4, [r7, #8]
	com_rslt = BMP280_read_pressure_double(&v_pressure_d);
 8005388:	f107 0308 	add.w	r3, r7, #8
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff ffc5 	bl	800531c <BMP280_read_pressure_double>
 8005392:	4603      	mov	r3, r0
 8005394:	75fb      	strb	r3, [r7, #23]
	/* check the successful pressure read*/
	if (com_rslt == ERROR) {
 8005396:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d104      	bne.n	80053aa <BMP280_calculate_altitude+0x3a>
		return 0.0;
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	f04f 0400 	mov.w	r4, #0
 80053a8:	e02a      	b.n	8005400 <BMP280_calculate_altitude+0x90>
	} else {
		/* calculate altitude*/
		return 44330 * (1.0 - pow(v_pressure_d / v_sea_level_pressure_u32, 1 / 5.255));
 80053aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fb f8d8 	bl	8000564 <__aeabi_ui2d>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4620      	mov	r0, r4
 80053ba:	4629      	mov	r1, r5
 80053bc:	f7fb fa76 	bl	80008ac <__aeabi_ddiv>
 80053c0:	4603      	mov	r3, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	ec44 3b17 	vmov	d7, r3, r4
 80053c8:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8005418 <BMP280_calculate_altitude+0xa8>
 80053cc:	eeb0 0a47 	vmov.f32	s0, s14
 80053d0:	eef0 0a67 	vmov.f32	s1, s15
 80053d4:	f00d fc36 	bl	8012c44 <pow>
 80053d8:	ec54 3b10 	vmov	r3, r4, d0
 80053dc:	461a      	mov	r2, r3
 80053de:	4623      	mov	r3, r4
 80053e0:	f04f 0000 	mov.w	r0, #0
 80053e4:	4910      	ldr	r1, [pc, #64]	; (8005428 <BMP280_calculate_altitude+0xb8>)
 80053e6:	f7fa ff7f 	bl	80002e8 <__aeabi_dsub>
 80053ea:	4603      	mov	r3, r0
 80053ec:	460c      	mov	r4, r1
 80053ee:	4618      	mov	r0, r3
 80053f0:	4621      	mov	r1, r4
 80053f2:	a30b      	add	r3, pc, #44	; (adr r3, 8005420 <BMP280_calculate_altitude+0xb0>)
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f7fb f92e 	bl	8000658 <__aeabi_dmul>
 80053fc:	4603      	mov	r3, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	ec44 3b17 	vmov	d7, r3, r4
	}
}
 8005404:	eeb0 0a47 	vmov.f32	s0, s14
 8005408:	eef0 0a67 	vmov.f32	s1, s15
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bdb0      	pop	{r4, r5, r7, pc}
 8005412:	bf00      	nop
 8005414:	f3af 8000 	nop.w
 8005418:	ccd9456c 	.word	0xccd9456c
 800541c:	3fc85b95 	.word	0x3fc85b95
 8005420:	00000000 	.word	0x00000000
 8005424:	40e5a540 	.word	0x40e5a540
 8005428:	3ff00000 	.word	0x3ff00000

0800542c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <HAL_Init+0x40>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a0d      	ldr	r2, [pc, #52]	; (800546c <HAL_Init+0x40>)
 8005436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800543a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <HAL_Init+0x40>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a0a      	ldr	r2, [pc, #40]	; (800546c <HAL_Init+0x40>)
 8005442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005448:	4b08      	ldr	r3, [pc, #32]	; (800546c <HAL_Init+0x40>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a07      	ldr	r2, [pc, #28]	; (800546c <HAL_Init+0x40>)
 800544e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005454:	2003      	movs	r0, #3
 8005456:	f000 f8fa 	bl	800564e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800545a:	2000      	movs	r0, #0
 800545c:	f7fe fe8c 	bl	8004178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005460:	f7fe fe62 	bl	8004128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40023c00 	.word	0x40023c00

08005470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005474:	4b06      	ldr	r3, [pc, #24]	; (8005490 <HAL_IncTick+0x20>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <HAL_IncTick+0x24>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4413      	add	r3, r2
 8005480:	4a04      	ldr	r2, [pc, #16]	; (8005494 <HAL_IncTick+0x24>)
 8005482:	6013      	str	r3, [r2, #0]
}
 8005484:	bf00      	nop
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	20000018 	.word	0x20000018
 8005494:	20006310 	.word	0x20006310

08005498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  return uwTick;
 800549c:	4b03      	ldr	r3, [pc, #12]	; (80054ac <HAL_GetTick+0x14>)
 800549e:	681b      	ldr	r3, [r3, #0]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	20006310 	.word	0x20006310

080054b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054b8:	f7ff ffee 	bl	8005498 <HAL_GetTick>
 80054bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c8:	d005      	beq.n	80054d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <HAL_Delay+0x40>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054d6:	bf00      	nop
 80054d8:	f7ff ffde 	bl	8005498 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d8f7      	bhi.n	80054d8 <HAL_Delay+0x28>
  {
  }
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	20000018 	.word	0x20000018

080054f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005504:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <__NVIC_SetPriorityGrouping+0x44>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005510:	4013      	ands	r3, r2
 8005512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800551c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005526:	4a04      	ldr	r2, [pc, #16]	; (8005538 <__NVIC_SetPriorityGrouping+0x44>)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	60d3      	str	r3, [r2, #12]
}
 800552c:	bf00      	nop
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	e000ed00 	.word	0xe000ed00

0800553c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <__NVIC_GetPriorityGrouping+0x18>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	0a1b      	lsrs	r3, r3, #8
 8005546:	f003 0307 	and.w	r3, r3, #7
}
 800554a:	4618      	mov	r0, r3
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	e000ed00 	.word	0xe000ed00

08005558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005566:	2b00      	cmp	r3, #0
 8005568:	db0b      	blt.n	8005582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	f003 021f 	and.w	r2, r3, #31
 8005570:	4907      	ldr	r1, [pc, #28]	; (8005590 <__NVIC_EnableIRQ+0x38>)
 8005572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	2001      	movs	r0, #1
 800557a:	fa00 f202 	lsl.w	r2, r0, r2
 800557e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	e000e100 	.word	0xe000e100

08005594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	6039      	str	r1, [r7, #0]
 800559e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	db0a      	blt.n	80055be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	490c      	ldr	r1, [pc, #48]	; (80055e0 <__NVIC_SetPriority+0x4c>)
 80055ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b2:	0112      	lsls	r2, r2, #4
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	440b      	add	r3, r1
 80055b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055bc:	e00a      	b.n	80055d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	4908      	ldr	r1, [pc, #32]	; (80055e4 <__NVIC_SetPriority+0x50>)
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	3b04      	subs	r3, #4
 80055cc:	0112      	lsls	r2, r2, #4
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	440b      	add	r3, r1
 80055d2:	761a      	strb	r2, [r3, #24]
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	e000e100 	.word	0xe000e100
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b089      	sub	sp, #36	; 0x24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f1c3 0307 	rsb	r3, r3, #7
 8005602:	2b04      	cmp	r3, #4
 8005604:	bf28      	it	cs
 8005606:	2304      	movcs	r3, #4
 8005608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	3304      	adds	r3, #4
 800560e:	2b06      	cmp	r3, #6
 8005610:	d902      	bls.n	8005618 <NVIC_EncodePriority+0x30>
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	3b03      	subs	r3, #3
 8005616:	e000      	b.n	800561a <NVIC_EncodePriority+0x32>
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800561c:	f04f 32ff 	mov.w	r2, #4294967295
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	43da      	mvns	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	401a      	ands	r2, r3
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005630:	f04f 31ff 	mov.w	r1, #4294967295
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	fa01 f303 	lsl.w	r3, r1, r3
 800563a:	43d9      	mvns	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005640:	4313      	orrs	r3, r2
         );
}
 8005642:	4618      	mov	r0, r3
 8005644:	3724      	adds	r7, #36	; 0x24
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff ff4c 	bl	80054f4 <__NVIC_SetPriorityGrouping>
}
 800565c:	bf00      	nop
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005676:	f7ff ff61 	bl	800553c <__NVIC_GetPriorityGrouping>
 800567a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	6978      	ldr	r0, [r7, #20]
 8005682:	f7ff ffb1 	bl	80055e8 <NVIC_EncodePriority>
 8005686:	4602      	mov	r2, r0
 8005688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ff80 	bl	8005594 <__NVIC_SetPriority>
}
 8005694:	bf00      	nop
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff ff54 	bl	8005558 <__NVIC_EnableIRQ>
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80056c4:	f7ff fee8 	bl	8005498 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e099      	b.n	8005808 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056f4:	e00f      	b.n	8005716 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056f6:	f7ff fecf 	bl	8005498 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b05      	cmp	r3, #5
 8005702:	d908      	bls.n	8005716 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2203      	movs	r2, #3
 800570e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e078      	b.n	8005808 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e8      	bne.n	80056f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4b38      	ldr	r3, [pc, #224]	; (8005810 <HAL_DMA_Init+0x158>)
 8005730:	4013      	ands	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005742:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800574e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800575a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	2b04      	cmp	r3, #4
 800576e:	d107      	bne.n	8005780 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	4313      	orrs	r3, r2
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f023 0307 	bic.w	r3, r3, #7
 8005796:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d117      	bne.n	80057da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00e      	beq.n	80057da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fa6f 	bl	8005ca0 <DMA_CheckFifoParam>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2240      	movs	r2, #64	; 0x40
 80057cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80057d6:	2301      	movs	r3, #1
 80057d8:	e016      	b.n	8005808 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fa26 	bl	8005c34 <DMA_CalcBaseAndBitshift>
 80057e8:	4603      	mov	r3, r0
 80057ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f0:	223f      	movs	r2, #63	; 0x3f
 80057f2:	409a      	lsls	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	f010803f 	.word	0xf010803f

08005814 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_DMA_Start_IT+0x26>
 8005836:	2302      	movs	r3, #2
 8005838:	e040      	b.n	80058bc <HAL_DMA_Start_IT+0xa8>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b01      	cmp	r3, #1
 800584c:	d12f      	bne.n	80058ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2202      	movs	r2, #2
 8005852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 f9b8 	bl	8005bd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586c:	223f      	movs	r2, #63	; 0x3f
 800586e:	409a      	lsls	r2, r3
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0216 	orr.w	r2, r2, #22
 8005882:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	d007      	beq.n	800589c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0208 	orr.w	r2, r2, #8
 800589a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	e005      	b.n	80058ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80058b6:	2302      	movs	r3, #2
 80058b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058d0:	4b92      	ldr	r3, [pc, #584]	; (8005b1c <HAL_DMA_IRQHandler+0x258>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a92      	ldr	r2, [pc, #584]	; (8005b20 <HAL_DMA_IRQHandler+0x25c>)
 80058d6:	fba2 2303 	umull	r2, r3, r2, r3
 80058da:	0a9b      	lsrs	r3, r3, #10
 80058dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ee:	2208      	movs	r2, #8
 80058f0:	409a      	lsls	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d01a      	beq.n	8005930 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d013      	beq.n	8005930 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0204 	bic.w	r2, r2, #4
 8005916:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591c:	2208      	movs	r2, #8
 800591e:	409a      	lsls	r2, r3
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005928:	f043 0201 	orr.w	r2, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005934:	2201      	movs	r2, #1
 8005936:	409a      	lsls	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d012      	beq.n	8005966 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005952:	2201      	movs	r2, #1
 8005954:	409a      	lsls	r2, r3
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595e:	f043 0202 	orr.w	r2, r3, #2
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596a:	2204      	movs	r2, #4
 800596c:	409a      	lsls	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4013      	ands	r3, r2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d012      	beq.n	800599c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00b      	beq.n	800599c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005988:	2204      	movs	r2, #4
 800598a:	409a      	lsls	r2, r3
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005994:	f043 0204 	orr.w	r2, r3, #4
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a0:	2210      	movs	r2, #16
 80059a2:	409a      	lsls	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d043      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d03c      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059be:	2210      	movs	r2, #16
 80059c0:	409a      	lsls	r2, r3
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d018      	beq.n	8005a06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d108      	bne.n	80059f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d024      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	4798      	blx	r3
 80059f2:	e01f      	b.n	8005a34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01b      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	4798      	blx	r3
 8005a04:	e016      	b.n	8005a34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d107      	bne.n	8005a24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0208 	bic.w	r2, r2, #8
 8005a22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a38:	2220      	movs	r2, #32
 8005a3a:	409a      	lsls	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 808e 	beq.w	8005b62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0310 	and.w	r3, r3, #16
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8086 	beq.w	8005b62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	409a      	lsls	r2, r3
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b05      	cmp	r3, #5
 8005a6c:	d136      	bne.n	8005adc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0216 	bic.w	r2, r2, #22
 8005a7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695a      	ldr	r2, [r3, #20]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <HAL_DMA_IRQHandler+0x1da>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0208 	bic.w	r2, r2, #8
 8005aac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab2:	223f      	movs	r2, #63	; 0x3f
 8005ab4:	409a      	lsls	r2, r3
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d07d      	beq.n	8005bce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	4798      	blx	r3
        }
        return;
 8005ada:	e078      	b.n	8005bce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01c      	beq.n	8005b24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d108      	bne.n	8005b0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d030      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	4798      	blx	r3
 8005b08:	e02b      	b.n	8005b62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d027      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	4798      	blx	r3
 8005b1a:	e022      	b.n	8005b62 <HAL_DMA_IRQHandler+0x29e>
 8005b1c:	20000010 	.word	0x20000010
 8005b20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10f      	bne.n	8005b52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0210 	bic.w	r2, r2, #16
 8005b40:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d032      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d022      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2205      	movs	r2, #5
 8005b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	3301      	adds	r3, #1
 8005b92:	60bb      	str	r3, [r7, #8]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d307      	bcc.n	8005baa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1f2      	bne.n	8005b8e <HAL_DMA_IRQHandler+0x2ca>
 8005ba8:	e000      	b.n	8005bac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005baa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d005      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
 8005bcc:	e000      	b.n	8005bd0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005bce:	bf00      	nop
    }
  }
}
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop

08005bd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b40      	cmp	r3, #64	; 0x40
 8005c04:	d108      	bne.n	8005c18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c16:	e007      	b.n	8005c28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	60da      	str	r2, [r3, #12]
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	3b10      	subs	r3, #16
 8005c44:	4a14      	ldr	r2, [pc, #80]	; (8005c98 <DMA_CalcBaseAndBitshift+0x64>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	091b      	lsrs	r3, r3, #4
 8005c4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c4e:	4a13      	ldr	r2, [pc, #76]	; (8005c9c <DMA_CalcBaseAndBitshift+0x68>)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d909      	bls.n	8005c76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c6a:	f023 0303 	bic.w	r3, r3, #3
 8005c6e:	1d1a      	adds	r2, r3, #4
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	659a      	str	r2, [r3, #88]	; 0x58
 8005c74:	e007      	b.n	8005c86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c7e:	f023 0303 	bic.w	r3, r3, #3
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	aaaaaaab 	.word	0xaaaaaaab
 8005c9c:	08014b1c 	.word	0x08014b1c

08005ca0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d11f      	bne.n	8005cfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d855      	bhi.n	8005d6c <DMA_CheckFifoParam+0xcc>
 8005cc0:	a201      	add	r2, pc, #4	; (adr r2, 8005cc8 <DMA_CheckFifoParam+0x28>)
 8005cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc6:	bf00      	nop
 8005cc8:	08005cd9 	.word	0x08005cd9
 8005ccc:	08005ceb 	.word	0x08005ceb
 8005cd0:	08005cd9 	.word	0x08005cd9
 8005cd4:	08005d6d 	.word	0x08005d6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d045      	beq.n	8005d70 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ce8:	e042      	b.n	8005d70 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cf2:	d13f      	bne.n	8005d74 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cf8:	e03c      	b.n	8005d74 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d02:	d121      	bne.n	8005d48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d836      	bhi.n	8005d78 <DMA_CheckFifoParam+0xd8>
 8005d0a:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <DMA_CheckFifoParam+0x70>)
 8005d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d10:	08005d21 	.word	0x08005d21
 8005d14:	08005d27 	.word	0x08005d27
 8005d18:	08005d21 	.word	0x08005d21
 8005d1c:	08005d39 	.word	0x08005d39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	73fb      	strb	r3, [r7, #15]
      break;
 8005d24:	e02f      	b.n	8005d86 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d024      	beq.n	8005d7c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d36:	e021      	b.n	8005d7c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d40:	d11e      	bne.n	8005d80 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d46:	e01b      	b.n	8005d80 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d902      	bls.n	8005d54 <DMA_CheckFifoParam+0xb4>
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d003      	beq.n	8005d5a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d52:	e018      	b.n	8005d86 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	73fb      	strb	r3, [r7, #15]
      break;
 8005d58:	e015      	b.n	8005d86 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00e      	beq.n	8005d84 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	73fb      	strb	r3, [r7, #15]
      break;
 8005d6a:	e00b      	b.n	8005d84 <DMA_CheckFifoParam+0xe4>
      break;
 8005d6c:	bf00      	nop
 8005d6e:	e00a      	b.n	8005d86 <DMA_CheckFifoParam+0xe6>
      break;
 8005d70:	bf00      	nop
 8005d72:	e008      	b.n	8005d86 <DMA_CheckFifoParam+0xe6>
      break;
 8005d74:	bf00      	nop
 8005d76:	e006      	b.n	8005d86 <DMA_CheckFifoParam+0xe6>
      break;
 8005d78:	bf00      	nop
 8005d7a:	e004      	b.n	8005d86 <DMA_CheckFifoParam+0xe6>
      break;
 8005d7c:	bf00      	nop
 8005d7e:	e002      	b.n	8005d86 <DMA_CheckFifoParam+0xe6>
      break;   
 8005d80:	bf00      	nop
 8005d82:	e000      	b.n	8005d86 <DMA_CheckFifoParam+0xe6>
      break;
 8005d84:	bf00      	nop
    }
  } 
  
  return status; 
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b089      	sub	sp, #36	; 0x24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	e165      	b.n	800607c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005db0:	2201      	movs	r2, #1
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	f040 8154 	bne.w	8006076 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d00b      	beq.n	8005dee <HAL_GPIO_Init+0x5a>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d007      	beq.n	8005dee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005de2:	2b11      	cmp	r3, #17
 8005de4:	d003      	beq.n	8005dee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b12      	cmp	r3, #18
 8005dec:	d130      	bne.n	8005e50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	2203      	movs	r2, #3
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	4013      	ands	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e24:	2201      	movs	r2, #1
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4013      	ands	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	f003 0201 	and.w	r2, r3, #1
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	2203      	movs	r2, #3
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	43db      	mvns	r3, r3
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4013      	ands	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d003      	beq.n	8005e90 <HAL_GPIO_Init+0xfc>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b12      	cmp	r3, #18
 8005e8e:	d123      	bne.n	8005ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	08da      	lsrs	r2, r3, #3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3208      	adds	r2, #8
 8005e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	220f      	movs	r2, #15
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	43db      	mvns	r3, r3
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	08da      	lsrs	r2, r3, #3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3208      	adds	r2, #8
 8005ed2:	69b9      	ldr	r1, [r7, #24]
 8005ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4013      	ands	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 0203 	and.w	r2, r3, #3
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 80ae 	beq.w	8006076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	4b5c      	ldr	r3, [pc, #368]	; (8006090 <HAL_GPIO_Init+0x2fc>)
 8005f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f22:	4a5b      	ldr	r2, [pc, #364]	; (8006090 <HAL_GPIO_Init+0x2fc>)
 8005f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f28:	6453      	str	r3, [r2, #68]	; 0x44
 8005f2a:	4b59      	ldr	r3, [pc, #356]	; (8006090 <HAL_GPIO_Init+0x2fc>)
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f36:	4a57      	ldr	r2, [pc, #348]	; (8006094 <HAL_GPIO_Init+0x300>)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	089b      	lsrs	r3, r3, #2
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	220f      	movs	r2, #15
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	43db      	mvns	r3, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4013      	ands	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a4e      	ldr	r2, [pc, #312]	; (8006098 <HAL_GPIO_Init+0x304>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d025      	beq.n	8005fae <HAL_GPIO_Init+0x21a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a4d      	ldr	r2, [pc, #308]	; (800609c <HAL_GPIO_Init+0x308>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01f      	beq.n	8005faa <HAL_GPIO_Init+0x216>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a4c      	ldr	r2, [pc, #304]	; (80060a0 <HAL_GPIO_Init+0x30c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d019      	beq.n	8005fa6 <HAL_GPIO_Init+0x212>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a4b      	ldr	r2, [pc, #300]	; (80060a4 <HAL_GPIO_Init+0x310>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <HAL_GPIO_Init+0x20e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a4a      	ldr	r2, [pc, #296]	; (80060a8 <HAL_GPIO_Init+0x314>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00d      	beq.n	8005f9e <HAL_GPIO_Init+0x20a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a49      	ldr	r2, [pc, #292]	; (80060ac <HAL_GPIO_Init+0x318>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d007      	beq.n	8005f9a <HAL_GPIO_Init+0x206>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a48      	ldr	r2, [pc, #288]	; (80060b0 <HAL_GPIO_Init+0x31c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d101      	bne.n	8005f96 <HAL_GPIO_Init+0x202>
 8005f92:	2306      	movs	r3, #6
 8005f94:	e00c      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005f96:	2307      	movs	r3, #7
 8005f98:	e00a      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005f9a:	2305      	movs	r3, #5
 8005f9c:	e008      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005f9e:	2304      	movs	r3, #4
 8005fa0:	e006      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e004      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e002      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	f002 0203 	and.w	r2, r2, #3
 8005fb6:	0092      	lsls	r2, r2, #2
 8005fb8:	4093      	lsls	r3, r2
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fc0:	4934      	ldr	r1, [pc, #208]	; (8006094 <HAL_GPIO_Init+0x300>)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	089b      	lsrs	r3, r3, #2
 8005fc6:	3302      	adds	r3, #2
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fce:	4b39      	ldr	r3, [pc, #228]	; (80060b4 <HAL_GPIO_Init+0x320>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ff2:	4a30      	ldr	r2, [pc, #192]	; (80060b4 <HAL_GPIO_Init+0x320>)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ff8:	4b2e      	ldr	r3, [pc, #184]	; (80060b4 <HAL_GPIO_Init+0x320>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	43db      	mvns	r3, r3
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	4013      	ands	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800601c:	4a25      	ldr	r2, [pc, #148]	; (80060b4 <HAL_GPIO_Init+0x320>)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006022:	4b24      	ldr	r3, [pc, #144]	; (80060b4 <HAL_GPIO_Init+0x320>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	43db      	mvns	r3, r3
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4013      	ands	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006046:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <HAL_GPIO_Init+0x320>)
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800604c:	4b19      	ldr	r3, [pc, #100]	; (80060b4 <HAL_GPIO_Init+0x320>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	43db      	mvns	r3, r3
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	4013      	ands	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006070:	4a10      	ldr	r2, [pc, #64]	; (80060b4 <HAL_GPIO_Init+0x320>)
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	3301      	adds	r3, #1
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b0f      	cmp	r3, #15
 8006080:	f67f ae96 	bls.w	8005db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006084:	bf00      	nop
 8006086:	3724      	adds	r7, #36	; 0x24
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	40023800 	.word	0x40023800
 8006094:	40013800 	.word	0x40013800
 8006098:	40020000 	.word	0x40020000
 800609c:	40020400 	.word	0x40020400
 80060a0:	40020800 	.word	0x40020800
 80060a4:	40020c00 	.word	0x40020c00
 80060a8:	40021000 	.word	0x40021000
 80060ac:	40021400 	.word	0x40021400
 80060b0:	40021800 	.word	0x40021800
 80060b4:	40013c00 	.word	0x40013c00

080060b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	807b      	strh	r3, [r7, #2]
 80060c4:	4613      	mov	r3, r2
 80060c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060c8:	787b      	ldrb	r3, [r7, #1]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060ce:	887a      	ldrh	r2, [r7, #2]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060d4:	e003      	b.n	80060de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060d6:	887b      	ldrh	r3, [r7, #2]
 80060d8:	041a      	lsls	r2, r3, #16
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	619a      	str	r2, [r3, #24]
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e11f      	b.n	800633e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fc ffd2 	bl	80030bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2224      	movs	r2, #36	; 0x24
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0201 	bic.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800613e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800614e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006150:	f001 f9ec 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 8006154:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4a7b      	ldr	r2, [pc, #492]	; (8006348 <HAL_I2C_Init+0x25c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d807      	bhi.n	8006170 <HAL_I2C_Init+0x84>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4a7a      	ldr	r2, [pc, #488]	; (800634c <HAL_I2C_Init+0x260>)
 8006164:	4293      	cmp	r3, r2
 8006166:	bf94      	ite	ls
 8006168:	2301      	movls	r3, #1
 800616a:	2300      	movhi	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	e006      	b.n	800617e <HAL_I2C_Init+0x92>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4a77      	ldr	r2, [pc, #476]	; (8006350 <HAL_I2C_Init+0x264>)
 8006174:	4293      	cmp	r3, r2
 8006176:	bf94      	ite	ls
 8006178:	2301      	movls	r3, #1
 800617a:	2300      	movhi	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e0db      	b.n	800633e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4a72      	ldr	r2, [pc, #456]	; (8006354 <HAL_I2C_Init+0x268>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	0c9b      	lsrs	r3, r3, #18
 8006190:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4a64      	ldr	r2, [pc, #400]	; (8006348 <HAL_I2C_Init+0x25c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d802      	bhi.n	80061c0 <HAL_I2C_Init+0xd4>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	3301      	adds	r3, #1
 80061be:	e009      	b.n	80061d4 <HAL_I2C_Init+0xe8>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
 80061ca:	4a63      	ldr	r2, [pc, #396]	; (8006358 <HAL_I2C_Init+0x26c>)
 80061cc:	fba2 2303 	umull	r2, r3, r2, r3
 80061d0:	099b      	lsrs	r3, r3, #6
 80061d2:	3301      	adds	r3, #1
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6812      	ldr	r2, [r2, #0]
 80061d8:	430b      	orrs	r3, r1
 80061da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80061e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4956      	ldr	r1, [pc, #344]	; (8006348 <HAL_I2C_Init+0x25c>)
 80061f0:	428b      	cmp	r3, r1
 80061f2:	d80d      	bhi.n	8006210 <HAL_I2C_Init+0x124>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	1e59      	subs	r1, r3, #1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006202:	3301      	adds	r3, #1
 8006204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006208:	2b04      	cmp	r3, #4
 800620a:	bf38      	it	cc
 800620c:	2304      	movcc	r3, #4
 800620e:	e04f      	b.n	80062b0 <HAL_I2C_Init+0x1c4>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d111      	bne.n	800623c <HAL_I2C_Init+0x150>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	1e58      	subs	r0, r3, #1
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6859      	ldr	r1, [r3, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	440b      	add	r3, r1
 8006226:	fbb0 f3f3 	udiv	r3, r0, r3
 800622a:	3301      	adds	r3, #1
 800622c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006230:	2b00      	cmp	r3, #0
 8006232:	bf0c      	ite	eq
 8006234:	2301      	moveq	r3, #1
 8006236:	2300      	movne	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	e012      	b.n	8006262 <HAL_I2C_Init+0x176>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	1e58      	subs	r0, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6859      	ldr	r1, [r3, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	0099      	lsls	r1, r3, #2
 800624c:	440b      	add	r3, r1
 800624e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006252:	3301      	adds	r3, #1
 8006254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006258:	2b00      	cmp	r3, #0
 800625a:	bf0c      	ite	eq
 800625c:	2301      	moveq	r3, #1
 800625e:	2300      	movne	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_I2C_Init+0x17e>
 8006266:	2301      	movs	r3, #1
 8006268:	e022      	b.n	80062b0 <HAL_I2C_Init+0x1c4>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10e      	bne.n	8006290 <HAL_I2C_Init+0x1a4>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1e58      	subs	r0, r3, #1
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6859      	ldr	r1, [r3, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	440b      	add	r3, r1
 8006280:	fbb0 f3f3 	udiv	r3, r0, r3
 8006284:	3301      	adds	r3, #1
 8006286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800628a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628e:	e00f      	b.n	80062b0 <HAL_I2C_Init+0x1c4>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	1e58      	subs	r0, r3, #1
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6859      	ldr	r1, [r3, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	0099      	lsls	r1, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062a6:	3301      	adds	r3, #1
 80062a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	6809      	ldr	r1, [r1, #0]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	69da      	ldr	r2, [r3, #28]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80062de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6911      	ldr	r1, [r2, #16]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	68d2      	ldr	r2, [r2, #12]
 80062ea:	4311      	orrs	r1, r2
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6812      	ldr	r2, [r2, #0]
 80062f0:	430b      	orrs	r3, r1
 80062f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695a      	ldr	r2, [r3, #20]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	000186a0 	.word	0x000186a0
 800634c:	001e847f 	.word	0x001e847f
 8006350:	003d08ff 	.word	0x003d08ff
 8006354:	431bde83 	.word	0x431bde83
 8006358:	10624dd3 	.word	0x10624dd3

0800635c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	4608      	mov	r0, r1
 8006366:	4611      	mov	r1, r2
 8006368:	461a      	mov	r2, r3
 800636a:	4603      	mov	r3, r0
 800636c:	817b      	strh	r3, [r7, #10]
 800636e:	460b      	mov	r3, r1
 8006370:	813b      	strh	r3, [r7, #8]
 8006372:	4613      	mov	r3, r2
 8006374:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006376:	f7ff f88f 	bl	8005498 <HAL_GetTick>
 800637a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b20      	cmp	r3, #32
 8006386:	f040 80d9 	bne.w	800653c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	2319      	movs	r3, #25
 8006390:	2201      	movs	r2, #1
 8006392:	496d      	ldr	r1, [pc, #436]	; (8006548 <HAL_I2C_Mem_Write+0x1ec>)
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fda9 	bl	8006eec <I2C_WaitOnFlagUntilTimeout>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
 80063a2:	e0cc      	b.n	800653e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_I2C_Mem_Write+0x56>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e0c5      	b.n	800653e <HAL_I2C_Mem_Write+0x1e2>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d007      	beq.n	80063d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2221      	movs	r2, #33	; 0x21
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2240      	movs	r2, #64	; 0x40
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a3a      	ldr	r2, [r7, #32]
 8006402:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006408:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a4d      	ldr	r2, [pc, #308]	; (800654c <HAL_I2C_Mem_Write+0x1f0>)
 8006418:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800641a:	88f8      	ldrh	r0, [r7, #6]
 800641c:	893a      	ldrh	r2, [r7, #8]
 800641e:	8979      	ldrh	r1, [r7, #10]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	9301      	str	r3, [sp, #4]
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	4603      	mov	r3, r0
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fbe4 	bl	8006bf8 <I2C_RequestMemoryWrite>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d052      	beq.n	80064dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e081      	b.n	800653e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 fe2a 	bl	8007098 <I2C_WaitOnTXEFlagUntilTimeout>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00d      	beq.n	8006466 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	2b04      	cmp	r3, #4
 8006450:	d107      	bne.n	8006462 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006460:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e06b      	b.n	800653e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	781a      	ldrb	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d11b      	bne.n	80064dc <HAL_I2C_Mem_Write+0x180>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d017      	beq.n	80064dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	781a      	ldrb	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1aa      	bne.n	800643a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fe16 	bl	800711a <I2C_WaitOnBTFFlagUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00d      	beq.n	8006510 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d107      	bne.n	800650c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e016      	b.n	800653e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800651e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e000      	b.n	800653e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800653c:	2302      	movs	r3, #2
  }
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	00100002 	.word	0x00100002
 800654c:	ffff0000 	.word	0xffff0000

08006550 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08c      	sub	sp, #48	; 0x30
 8006554:	af02      	add	r7, sp, #8
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	4608      	mov	r0, r1
 800655a:	4611      	mov	r1, r2
 800655c:	461a      	mov	r2, r3
 800655e:	4603      	mov	r3, r0
 8006560:	817b      	strh	r3, [r7, #10]
 8006562:	460b      	mov	r3, r1
 8006564:	813b      	strh	r3, [r7, #8]
 8006566:	4613      	mov	r3, r2
 8006568:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800656a:	f7fe ff95 	bl	8005498 <HAL_GetTick>
 800656e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b20      	cmp	r3, #32
 800657a:	f040 8208 	bne.w	800698e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	2319      	movs	r3, #25
 8006584:	2201      	movs	r2, #1
 8006586:	497b      	ldr	r1, [pc, #492]	; (8006774 <HAL_I2C_Mem_Read+0x224>)
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 fcaf 	bl	8006eec <I2C_WaitOnFlagUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006594:	2302      	movs	r3, #2
 8006596:	e1fb      	b.n	8006990 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_I2C_Mem_Read+0x56>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e1f4      	b.n	8006990 <HAL_I2C_Mem_Read+0x440>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d007      	beq.n	80065cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2222      	movs	r2, #34	; 0x22
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2240      	movs	r2, #64	; 0x40
 80065e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80065fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4a5b      	ldr	r2, [pc, #364]	; (8006778 <HAL_I2C_Mem_Read+0x228>)
 800660c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800660e:	88f8      	ldrh	r0, [r7, #6]
 8006610:	893a      	ldrh	r2, [r7, #8]
 8006612:	8979      	ldrh	r1, [r7, #10]
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	4603      	mov	r3, r0
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fb7e 	bl	8006d20 <I2C_RequestMemoryRead>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e1b0      	b.n	8006990 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006632:	2b00      	cmp	r3, #0
 8006634:	d113      	bne.n	800665e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006636:	2300      	movs	r3, #0
 8006638:	623b      	str	r3, [r7, #32]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	623b      	str	r3, [r7, #32]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	623b      	str	r3, [r7, #32]
 800664a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	e184      	b.n	8006968 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006662:	2b01      	cmp	r3, #1
 8006664:	d11b      	bne.n	800669e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006676:	2300      	movs	r3, #0
 8006678:	61fb      	str	r3, [r7, #28]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	61fb      	str	r3, [r7, #28]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	61fb      	str	r3, [r7, #28]
 800668a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	e164      	b.n	8006968 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d11b      	bne.n	80066de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066c6:	2300      	movs	r3, #0
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	61bb      	str	r3, [r7, #24]
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	e144      	b.n	8006968 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80066f4:	e138      	b.n	8006968 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	f200 80f1 	bhi.w	80068e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006704:	2b01      	cmp	r3, #1
 8006706:	d123      	bne.n	8006750 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fd45 	bl	800719c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e139      	b.n	8006990 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006738:	3b01      	subs	r3, #1
 800673a:	b29a      	uxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800674e:	e10b      	b.n	8006968 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006754:	2b02      	cmp	r3, #2
 8006756:	d14e      	bne.n	80067f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	2200      	movs	r2, #0
 8006760:	4906      	ldr	r1, [pc, #24]	; (800677c <HAL_I2C_Mem_Read+0x22c>)
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 fbc2 	bl	8006eec <I2C_WaitOnFlagUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d008      	beq.n	8006780 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e10e      	b.n	8006990 <HAL_I2C_Mem_Read+0x440>
 8006772:	bf00      	nop
 8006774:	00100002 	.word	0x00100002
 8006778:	ffff0000 	.word	0xffff0000
 800677c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800678e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691a      	ldr	r2, [r3, #16]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	691a      	ldr	r2, [r3, #16]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067de:	3b01      	subs	r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067f4:	e0b8      	b.n	8006968 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fc:	2200      	movs	r2, #0
 80067fe:	4966      	ldr	r1, [pc, #408]	; (8006998 <HAL_I2C_Mem_Read+0x448>)
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 fb73 	bl	8006eec <I2C_WaitOnFlagUntilTimeout>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e0bf      	b.n	8006990 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800681e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691a      	ldr	r2, [r3, #16]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006858:	2200      	movs	r2, #0
 800685a:	494f      	ldr	r1, [pc, #316]	; (8006998 <HAL_I2C_Mem_Read+0x448>)
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 fb45 	bl	8006eec <I2C_WaitOnFlagUntilTimeout>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e091      	b.n	8006990 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800687a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691a      	ldr	r2, [r3, #16]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068e0:	e042      	b.n	8006968 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fc58 	bl	800719c <I2C_WaitOnRXNEFlagUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e04c      	b.n	8006990 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	b2d2      	uxtb	r2, r2
 8006902:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f003 0304 	and.w	r3, r3, #4
 8006932:	2b04      	cmp	r3, #4
 8006934:	d118      	bne.n	8006968 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695e:	b29b      	uxth	r3, r3
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800696c:	2b00      	cmp	r3, #0
 800696e:	f47f aec2 	bne.w	80066f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2220      	movs	r2, #32
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	e000      	b.n	8006990 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800698e:	2302      	movs	r3, #2
  }
}
 8006990:	4618      	mov	r0, r3
 8006992:	3728      	adds	r7, #40	; 0x28
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	00010004 	.word	0x00010004

0800699c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	; 0x28
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	607a      	str	r2, [r7, #4]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	460b      	mov	r3, r1
 80069aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80069ac:	f7fe fd74 	bl	8005498 <HAL_GetTick>
 80069b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80069b2:	2301      	movs	r3, #1
 80069b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b20      	cmp	r3, #32
 80069c0:	f040 8110 	bne.w	8006be4 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	2319      	movs	r3, #25
 80069ca:	2201      	movs	r2, #1
 80069cc:	4988      	ldr	r1, [pc, #544]	; (8006bf0 <HAL_I2C_IsDeviceReady+0x254>)
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 fa8c 	bl	8006eec <I2C_WaitOnFlagUntilTimeout>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80069da:	2302      	movs	r3, #2
 80069dc:	e103      	b.n	8006be6 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_I2C_IsDeviceReady+0x50>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e0fc      	b.n	8006be6 <HAL_I2C_IsDeviceReady+0x24a>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d007      	beq.n	8006a12 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f042 0201 	orr.w	r2, r2, #1
 8006a10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2224      	movs	r2, #36	; 0x24
 8006a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4a70      	ldr	r2, [pc, #448]	; (8006bf4 <HAL_I2C_IsDeviceReady+0x258>)
 8006a34:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a44:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fa4a 	bl	8006eec <I2C_WaitOnFlagUntilTimeout>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00c      	beq.n	8006a78 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a72:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e0b6      	b.n	8006be6 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a78:	897b      	ldrh	r3, [r7, #10]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a86:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006a88:	f7fe fd06 	bl	8005498 <HAL_GetTick>
 8006a8c:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	bf0c      	ite	eq
 8006a9c:	2301      	moveq	r3, #1
 8006a9e:	2300      	movne	r3, #0
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab2:	bf0c      	ite	eq
 8006ab4:	2301      	moveq	r3, #1
 8006ab6:	2300      	movne	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006abc:	e025      	b.n	8006b0a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006abe:	f7fe fceb 	bl	8005498 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <HAL_I2C_IsDeviceReady+0x138>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d103      	bne.n	8006adc <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	22a0      	movs	r2, #160	; 0xa0
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	bf0c      	ite	eq
 8006aea:	2301      	moveq	r3, #1
 8006aec:	2300      	movne	r3, #0
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b00:	bf0c      	ite	eq
 8006b02:	2301      	moveq	r3, #1
 8006b04:	2300      	movne	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2ba0      	cmp	r3, #160	; 0xa0
 8006b14:	d005      	beq.n	8006b22 <HAL_I2C_IsDeviceReady+0x186>
 8006b16:	7dfb      	ldrb	r3, [r7, #23]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d102      	bne.n	8006b22 <HAL_I2C_IsDeviceReady+0x186>
 8006b1c:	7dbb      	ldrb	r3, [r7, #22]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0cd      	beq.n	8006abe <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d129      	bne.n	8006b8c <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b46:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b48:	2300      	movs	r3, #0
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	2319      	movs	r3, #25
 8006b64:	2201      	movs	r2, #1
 8006b66:	4922      	ldr	r1, [pc, #136]	; (8006bf0 <HAL_I2C_IsDeviceReady+0x254>)
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 f9bf 	bl	8006eec <I2C_WaitOnFlagUntilTimeout>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e036      	b.n	8006be6 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	e02c      	b.n	8006be6 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b9a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ba4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	2319      	movs	r3, #25
 8006bac:	2201      	movs	r2, #1
 8006bae:	4910      	ldr	r1, [pc, #64]	; (8006bf0 <HAL_I2C_IsDeviceReady+0x254>)
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f99b 	bl	8006eec <I2C_WaitOnFlagUntilTimeout>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e012      	b.n	8006be6 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	f4ff af33 	bcc.w	8006a36 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8006be4:	2302      	movs	r3, #2
  }
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3720      	adds	r7, #32
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	00100002 	.word	0x00100002
 8006bf4:	ffff0000 	.word	0xffff0000

08006bf8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	4608      	mov	r0, r1
 8006c02:	4611      	mov	r1, r2
 8006c04:	461a      	mov	r2, r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	817b      	strh	r3, [r7, #10]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	813b      	strh	r3, [r7, #8]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f95c 	bl	8006eec <I2C_WaitOnFlagUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00c      	beq.n	8006c54 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e05f      	b.n	8006d14 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c54:	897b      	ldrh	r3, [r7, #10]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	6a3a      	ldr	r2, [r7, #32]
 8006c68:	492c      	ldr	r1, [pc, #176]	; (8006d1c <I2C_RequestMemoryWrite+0x124>)
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 f995 	bl	8006f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e04c      	b.n	8006d14 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c92:	6a39      	ldr	r1, [r7, #32]
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 f9ff 	bl	8007098 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00d      	beq.n	8006cbc <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	d107      	bne.n	8006cb8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e02b      	b.n	8006d14 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d105      	bne.n	8006cce <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cc2:	893b      	ldrh	r3, [r7, #8]
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	611a      	str	r2, [r3, #16]
 8006ccc:	e021      	b.n	8006d12 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006cce:	893b      	ldrh	r3, [r7, #8]
 8006cd0:	0a1b      	lsrs	r3, r3, #8
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cde:	6a39      	ldr	r1, [r7, #32]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f9d9 	bl	8007098 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00d      	beq.n	8006d08 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d107      	bne.n	8006d04 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e005      	b.n	8006d14 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d08:	893b      	ldrh	r3, [r7, #8]
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	00010002 	.word	0x00010002

08006d20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	4608      	mov	r0, r1
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	4603      	mov	r3, r0
 8006d30:	817b      	strh	r3, [r7, #10]
 8006d32:	460b      	mov	r3, r1
 8006d34:	813b      	strh	r3, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 f8c0 	bl	8006eec <I2C_WaitOnFlagUntilTimeout>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00c      	beq.n	8006d8c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e0a9      	b.n	8006ee0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d8c:	897b      	ldrh	r3, [r7, #10]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	6a3a      	ldr	r2, [r7, #32]
 8006da0:	4951      	ldr	r1, [pc, #324]	; (8006ee8 <I2C_RequestMemoryRead+0x1c8>)
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 f8f9 	bl	8006f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e096      	b.n	8006ee0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006db2:	2300      	movs	r3, #0
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dca:	6a39      	ldr	r1, [r7, #32]
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 f963 	bl	8007098 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00d      	beq.n	8006df4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d107      	bne.n	8006df0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e075      	b.n	8006ee0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006df4:	88fb      	ldrh	r3, [r7, #6]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d105      	bne.n	8006e06 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006dfa:	893b      	ldrh	r3, [r7, #8]
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	611a      	str	r2, [r3, #16]
 8006e04:	e021      	b.n	8006e4a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e06:	893b      	ldrh	r3, [r7, #8]
 8006e08:	0a1b      	lsrs	r3, r3, #8
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e16:	6a39      	ldr	r1, [r7, #32]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f93d 	bl	8007098 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00d      	beq.n	8006e40 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d107      	bne.n	8006e3c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e04f      	b.n	8006ee0 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e40:	893b      	ldrh	r3, [r7, #8]
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e4c:	6a39      	ldr	r1, [r7, #32]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 f922 	bl	8007098 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00d      	beq.n	8006e76 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d107      	bne.n	8006e72 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e034      	b.n	8006ee0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	6a3b      	ldr	r3, [r7, #32]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 f82a 	bl	8006eec <I2C_WaitOnFlagUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00c      	beq.n	8006eb8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e013      	b.n	8006ee0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006eb8:	897b      	ldrh	r3, [r7, #10]
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	f043 0301 	orr.w	r3, r3, #1
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	6a3a      	ldr	r2, [r7, #32]
 8006ecc:	4906      	ldr	r1, [pc, #24]	; (8006ee8 <I2C_RequestMemoryRead+0x1c8>)
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 f863 	bl	8006f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	00010002 	.word	0x00010002

08006eec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006efc:	e025      	b.n	8006f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f04:	d021      	beq.n	8006f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f06:	f7fe fac7 	bl	8005498 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d302      	bcc.n	8006f1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d116      	bne.n	8006f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	f043 0220 	orr.w	r2, r3, #32
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e023      	b.n	8006f92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	0c1b      	lsrs	r3, r3, #16
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d10d      	bne.n	8006f70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	43da      	mvns	r2, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4013      	ands	r3, r2
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bf0c      	ite	eq
 8006f66:	2301      	moveq	r3, #1
 8006f68:	2300      	movne	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	e00c      	b.n	8006f8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	43da      	mvns	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bf0c      	ite	eq
 8006f82:	2301      	moveq	r3, #1
 8006f84:	2300      	movne	r3, #0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d0b6      	beq.n	8006efe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	607a      	str	r2, [r7, #4]
 8006fa6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fa8:	e051      	b.n	800704e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fb8:	d123      	bne.n	8007002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	f043 0204 	orr.w	r2, r3, #4
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e046      	b.n	8007090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007008:	d021      	beq.n	800704e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800700a:	f7fe fa45 	bl	8005498 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	429a      	cmp	r2, r3
 8007018:	d302      	bcc.n	8007020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d116      	bne.n	800704e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2220      	movs	r2, #32
 800702a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	f043 0220 	orr.w	r2, r3, #32
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e020      	b.n	8007090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	0c1b      	lsrs	r3, r3, #16
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b01      	cmp	r3, #1
 8007056:	d10c      	bne.n	8007072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	43da      	mvns	r2, r3
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	4013      	ands	r3, r2
 8007064:	b29b      	uxth	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	bf14      	ite	ne
 800706a:	2301      	movne	r3, #1
 800706c:	2300      	moveq	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	e00b      	b.n	800708a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	43da      	mvns	r2, r3
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	4013      	ands	r3, r2
 800707e:	b29b      	uxth	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	bf14      	ite	ne
 8007084:	2301      	movne	r3, #1
 8007086:	2300      	moveq	r3, #0
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d18d      	bne.n	8006faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070a4:	e02d      	b.n	8007102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 f8ce 	bl	8007248 <I2C_IsAcknowledgeFailed>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e02d      	b.n	8007112 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070bc:	d021      	beq.n	8007102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070be:	f7fe f9eb 	bl	8005498 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d302      	bcc.n	80070d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d116      	bne.n	8007102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2220      	movs	r2, #32
 80070de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	f043 0220 	orr.w	r2, r3, #32
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e007      	b.n	8007112 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710c:	2b80      	cmp	r3, #128	; 0x80
 800710e:	d1ca      	bne.n	80070a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007126:	e02d      	b.n	8007184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f88d 	bl	8007248 <I2C_IsAcknowledgeFailed>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e02d      	b.n	8007194 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713e:	d021      	beq.n	8007184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007140:	f7fe f9aa 	bl	8005498 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	429a      	cmp	r2, r3
 800714e:	d302      	bcc.n	8007156 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d116      	bne.n	8007184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	f043 0220 	orr.w	r2, r3, #32
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e007      	b.n	8007194 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b04      	cmp	r3, #4
 8007190:	d1ca      	bne.n	8007128 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071a8:	e042      	b.n	8007230 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	f003 0310 	and.w	r3, r3, #16
 80071b4:	2b10      	cmp	r3, #16
 80071b6:	d119      	bne.n	80071ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f06f 0210 	mvn.w	r2, #16
 80071c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2220      	movs	r2, #32
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e029      	b.n	8007240 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ec:	f7fe f954 	bl	8005498 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d302      	bcc.n	8007202 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d116      	bne.n	8007230 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	f043 0220 	orr.w	r2, r3, #32
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e007      	b.n	8007240 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723a:	2b40      	cmp	r3, #64	; 0x40
 800723c:	d1b5      	bne.n	80071aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800725a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800725e:	d11b      	bne.n	8007298 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007268:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007284:	f043 0204 	orr.w	r2, r3, #4
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e000      	b.n	800729a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
	...

080072a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80072b2:	2300      	movs	r3, #0
 80072b4:	603b      	str	r3, [r7, #0]
 80072b6:	4b20      	ldr	r3, [pc, #128]	; (8007338 <HAL_PWREx_EnableOverDrive+0x90>)
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	4a1f      	ldr	r2, [pc, #124]	; (8007338 <HAL_PWREx_EnableOverDrive+0x90>)
 80072bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072c0:	6413      	str	r3, [r2, #64]	; 0x40
 80072c2:	4b1d      	ldr	r3, [pc, #116]	; (8007338 <HAL_PWREx_EnableOverDrive+0x90>)
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80072ce:	4b1b      	ldr	r3, [pc, #108]	; (800733c <HAL_PWREx_EnableOverDrive+0x94>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072d4:	f7fe f8e0 	bl	8005498 <HAL_GetTick>
 80072d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80072da:	e009      	b.n	80072f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80072dc:	f7fe f8dc 	bl	8005498 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072ea:	d901      	bls.n	80072f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e01f      	b.n	8007330 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80072f0:	4b13      	ldr	r3, [pc, #76]	; (8007340 <HAL_PWREx_EnableOverDrive+0x98>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072fc:	d1ee      	bne.n	80072dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80072fe:	4b11      	ldr	r3, [pc, #68]	; (8007344 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007300:	2201      	movs	r2, #1
 8007302:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007304:	f7fe f8c8 	bl	8005498 <HAL_GetTick>
 8007308:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800730a:	e009      	b.n	8007320 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800730c:	f7fe f8c4 	bl	8005498 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800731a:	d901      	bls.n	8007320 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e007      	b.n	8007330 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007320:	4b07      	ldr	r3, [pc, #28]	; (8007340 <HAL_PWREx_EnableOverDrive+0x98>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800732c:	d1ee      	bne.n	800730c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	40023800 	.word	0x40023800
 800733c:	420e0040 	.word	0x420e0040
 8007340:	40007000 	.word	0x40007000
 8007344:	420e0044 	.word	0x420e0044

08007348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e0cc      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800735c:	4b68      	ldr	r3, [pc, #416]	; (8007500 <HAL_RCC_ClockConfig+0x1b8>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 030f 	and.w	r3, r3, #15
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d90c      	bls.n	8007384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800736a:	4b65      	ldr	r3, [pc, #404]	; (8007500 <HAL_RCC_ClockConfig+0x1b8>)
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	b2d2      	uxtb	r2, r2
 8007370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007372:	4b63      	ldr	r3, [pc, #396]	; (8007500 <HAL_RCC_ClockConfig+0x1b8>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d001      	beq.n	8007384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e0b8      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d020      	beq.n	80073d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b00      	cmp	r3, #0
 800739a:	d005      	beq.n	80073a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800739c:	4b59      	ldr	r3, [pc, #356]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	4a58      	ldr	r2, [pc, #352]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 80073a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0308 	and.w	r3, r3, #8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073b4:	4b53      	ldr	r3, [pc, #332]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	4a52      	ldr	r2, [pc, #328]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 80073ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073c0:	4b50      	ldr	r3, [pc, #320]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	494d      	ldr	r1, [pc, #308]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d044      	beq.n	8007468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d107      	bne.n	80073f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e6:	4b47      	ldr	r3, [pc, #284]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d119      	bne.n	8007426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e07f      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d003      	beq.n	8007406 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007402:	2b03      	cmp	r3, #3
 8007404:	d107      	bne.n	8007416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007406:	4b3f      	ldr	r3, [pc, #252]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e06f      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007416:	4b3b      	ldr	r3, [pc, #236]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e067      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007426:	4b37      	ldr	r3, [pc, #220]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f023 0203 	bic.w	r2, r3, #3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	4934      	ldr	r1, [pc, #208]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 8007434:	4313      	orrs	r3, r2
 8007436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007438:	f7fe f82e 	bl	8005498 <HAL_GetTick>
 800743c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743e:	e00a      	b.n	8007456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007440:	f7fe f82a 	bl	8005498 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	f241 3288 	movw	r2, #5000	; 0x1388
 800744e:	4293      	cmp	r3, r2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e04f      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007456:	4b2b      	ldr	r3, [pc, #172]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f003 020c 	and.w	r2, r3, #12
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	429a      	cmp	r2, r3
 8007466:	d1eb      	bne.n	8007440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007468:	4b25      	ldr	r3, [pc, #148]	; (8007500 <HAL_RCC_ClockConfig+0x1b8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d20c      	bcs.n	8007490 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007476:	4b22      	ldr	r3, [pc, #136]	; (8007500 <HAL_RCC_ClockConfig+0x1b8>)
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800747e:	4b20      	ldr	r3, [pc, #128]	; (8007500 <HAL_RCC_ClockConfig+0x1b8>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 030f 	and.w	r3, r3, #15
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d001      	beq.n	8007490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e032      	b.n	80074f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d008      	beq.n	80074ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800749c:	4b19      	ldr	r3, [pc, #100]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	4916      	ldr	r1, [pc, #88]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074ba:	4b12      	ldr	r3, [pc, #72]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	490e      	ldr	r1, [pc, #56]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074ce:	f000 f887 	bl	80075e0 <HAL_RCC_GetSysClockFreq>
 80074d2:	4601      	mov	r1, r0
 80074d4:	4b0b      	ldr	r3, [pc, #44]	; (8007504 <HAL_RCC_ClockConfig+0x1bc>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	091b      	lsrs	r3, r3, #4
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	4a0a      	ldr	r2, [pc, #40]	; (8007508 <HAL_RCC_ClockConfig+0x1c0>)
 80074e0:	5cd3      	ldrb	r3, [r2, r3]
 80074e2:	fa21 f303 	lsr.w	r3, r1, r3
 80074e6:	4a09      	ldr	r2, [pc, #36]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 80074e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074ea:	4b09      	ldr	r3, [pc, #36]	; (8007510 <HAL_RCC_ClockConfig+0x1c8>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fc fe42 	bl	8004178 <HAL_InitTick>

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	40023c00 	.word	0x40023c00
 8007504:	40023800 	.word	0x40023800
 8007508:	08014b04 	.word	0x08014b04
 800750c:	20000010 	.word	0x20000010
 8007510:	20000014 	.word	0x20000014

08007514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007518:	4b03      	ldr	r3, [pc, #12]	; (8007528 <HAL_RCC_GetHCLKFreq+0x14>)
 800751a:	681b      	ldr	r3, [r3, #0]
}
 800751c:	4618      	mov	r0, r3
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	20000010 	.word	0x20000010

0800752c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007530:	f7ff fff0 	bl	8007514 <HAL_RCC_GetHCLKFreq>
 8007534:	4601      	mov	r1, r0
 8007536:	4b05      	ldr	r3, [pc, #20]	; (800754c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	0a9b      	lsrs	r3, r3, #10
 800753c:	f003 0307 	and.w	r3, r3, #7
 8007540:	4a03      	ldr	r2, [pc, #12]	; (8007550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007542:	5cd3      	ldrb	r3, [r2, r3]
 8007544:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007548:	4618      	mov	r0, r3
 800754a:	bd80      	pop	{r7, pc}
 800754c:	40023800 	.word	0x40023800
 8007550:	08014b14 	.word	0x08014b14

08007554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007558:	f7ff ffdc 	bl	8007514 <HAL_RCC_GetHCLKFreq>
 800755c:	4601      	mov	r1, r0
 800755e:	4b05      	ldr	r3, [pc, #20]	; (8007574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	0b5b      	lsrs	r3, r3, #13
 8007564:	f003 0307 	and.w	r3, r3, #7
 8007568:	4a03      	ldr	r2, [pc, #12]	; (8007578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800756a:	5cd3      	ldrb	r3, [r2, r3]
 800756c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007570:	4618      	mov	r0, r3
 8007572:	bd80      	pop	{r7, pc}
 8007574:	40023800 	.word	0x40023800
 8007578:	08014b14 	.word	0x08014b14

0800757c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	220f      	movs	r2, #15
 800758a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800758c:	4b12      	ldr	r3, [pc, #72]	; (80075d8 <HAL_RCC_GetClockConfig+0x5c>)
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f003 0203 	and.w	r2, r3, #3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007598:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <HAL_RCC_GetClockConfig+0x5c>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <HAL_RCC_GetClockConfig+0x5c>)
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80075b0:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <HAL_RCC_GetClockConfig+0x5c>)
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	08db      	lsrs	r3, r3, #3
 80075b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80075be:	4b07      	ldr	r3, [pc, #28]	; (80075dc <HAL_RCC_GetClockConfig+0x60>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 020f 	and.w	r2, r3, #15
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	601a      	str	r2, [r3, #0]
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	40023800 	.word	0x40023800
 80075dc:	40023c00 	.word	0x40023c00

080075e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075fa:	4bc6      	ldr	r3, [pc, #792]	; (8007914 <HAL_RCC_GetSysClockFreq+0x334>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 030c 	and.w	r3, r3, #12
 8007602:	2b0c      	cmp	r3, #12
 8007604:	f200 817e 	bhi.w	8007904 <HAL_RCC_GetSysClockFreq+0x324>
 8007608:	a201      	add	r2, pc, #4	; (adr r2, 8007610 <HAL_RCC_GetSysClockFreq+0x30>)
 800760a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760e:	bf00      	nop
 8007610:	08007645 	.word	0x08007645
 8007614:	08007905 	.word	0x08007905
 8007618:	08007905 	.word	0x08007905
 800761c:	08007905 	.word	0x08007905
 8007620:	0800764b 	.word	0x0800764b
 8007624:	08007905 	.word	0x08007905
 8007628:	08007905 	.word	0x08007905
 800762c:	08007905 	.word	0x08007905
 8007630:	08007651 	.word	0x08007651
 8007634:	08007905 	.word	0x08007905
 8007638:	08007905 	.word	0x08007905
 800763c:	08007905 	.word	0x08007905
 8007640:	080077ad 	.word	0x080077ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007644:	4bb4      	ldr	r3, [pc, #720]	; (8007918 <HAL_RCC_GetSysClockFreq+0x338>)
 8007646:	613b      	str	r3, [r7, #16]
       break;
 8007648:	e15f      	b.n	800790a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800764a:	4bb4      	ldr	r3, [pc, #720]	; (800791c <HAL_RCC_GetSysClockFreq+0x33c>)
 800764c:	613b      	str	r3, [r7, #16]
      break;
 800764e:	e15c      	b.n	800790a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007650:	4bb0      	ldr	r3, [pc, #704]	; (8007914 <HAL_RCC_GetSysClockFreq+0x334>)
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007658:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800765a:	4bae      	ldr	r3, [pc, #696]	; (8007914 <HAL_RCC_GetSysClockFreq+0x334>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d04a      	beq.n	80076fc <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007666:	4bab      	ldr	r3, [pc, #684]	; (8007914 <HAL_RCC_GetSysClockFreq+0x334>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	099b      	lsrs	r3, r3, #6
 800766c:	f04f 0400 	mov.w	r4, #0
 8007670:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007674:	f04f 0200 	mov.w	r2, #0
 8007678:	ea03 0501 	and.w	r5, r3, r1
 800767c:	ea04 0602 	and.w	r6, r4, r2
 8007680:	4629      	mov	r1, r5
 8007682:	4632      	mov	r2, r6
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	f04f 0400 	mov.w	r4, #0
 800768c:	0154      	lsls	r4, r2, #5
 800768e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007692:	014b      	lsls	r3, r1, #5
 8007694:	4619      	mov	r1, r3
 8007696:	4622      	mov	r2, r4
 8007698:	1b49      	subs	r1, r1, r5
 800769a:	eb62 0206 	sbc.w	r2, r2, r6
 800769e:	f04f 0300 	mov.w	r3, #0
 80076a2:	f04f 0400 	mov.w	r4, #0
 80076a6:	0194      	lsls	r4, r2, #6
 80076a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80076ac:	018b      	lsls	r3, r1, #6
 80076ae:	1a5b      	subs	r3, r3, r1
 80076b0:	eb64 0402 	sbc.w	r4, r4, r2
 80076b4:	f04f 0100 	mov.w	r1, #0
 80076b8:	f04f 0200 	mov.w	r2, #0
 80076bc:	00e2      	lsls	r2, r4, #3
 80076be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80076c2:	00d9      	lsls	r1, r3, #3
 80076c4:	460b      	mov	r3, r1
 80076c6:	4614      	mov	r4, r2
 80076c8:	195b      	adds	r3, r3, r5
 80076ca:	eb44 0406 	adc.w	r4, r4, r6
 80076ce:	f04f 0100 	mov.w	r1, #0
 80076d2:	f04f 0200 	mov.w	r2, #0
 80076d6:	0262      	lsls	r2, r4, #9
 80076d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80076dc:	0259      	lsls	r1, r3, #9
 80076de:	460b      	mov	r3, r1
 80076e0:	4614      	mov	r4, r2
 80076e2:	4618      	mov	r0, r3
 80076e4:	4621      	mov	r1, r4
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f04f 0400 	mov.w	r4, #0
 80076ec:	461a      	mov	r2, r3
 80076ee:	4623      	mov	r3, r4
 80076f0:	f7f9 faaa 	bl	8000c48 <__aeabi_uldivmod>
 80076f4:	4603      	mov	r3, r0
 80076f6:	460c      	mov	r4, r1
 80076f8:	617b      	str	r3, [r7, #20]
 80076fa:	e049      	b.n	8007790 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076fc:	4b85      	ldr	r3, [pc, #532]	; (8007914 <HAL_RCC_GetSysClockFreq+0x334>)
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	099b      	lsrs	r3, r3, #6
 8007702:	f04f 0400 	mov.w	r4, #0
 8007706:	f240 11ff 	movw	r1, #511	; 0x1ff
 800770a:	f04f 0200 	mov.w	r2, #0
 800770e:	ea03 0501 	and.w	r5, r3, r1
 8007712:	ea04 0602 	and.w	r6, r4, r2
 8007716:	4629      	mov	r1, r5
 8007718:	4632      	mov	r2, r6
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	f04f 0400 	mov.w	r4, #0
 8007722:	0154      	lsls	r4, r2, #5
 8007724:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007728:	014b      	lsls	r3, r1, #5
 800772a:	4619      	mov	r1, r3
 800772c:	4622      	mov	r2, r4
 800772e:	1b49      	subs	r1, r1, r5
 8007730:	eb62 0206 	sbc.w	r2, r2, r6
 8007734:	f04f 0300 	mov.w	r3, #0
 8007738:	f04f 0400 	mov.w	r4, #0
 800773c:	0194      	lsls	r4, r2, #6
 800773e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007742:	018b      	lsls	r3, r1, #6
 8007744:	1a5b      	subs	r3, r3, r1
 8007746:	eb64 0402 	sbc.w	r4, r4, r2
 800774a:	f04f 0100 	mov.w	r1, #0
 800774e:	f04f 0200 	mov.w	r2, #0
 8007752:	00e2      	lsls	r2, r4, #3
 8007754:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007758:	00d9      	lsls	r1, r3, #3
 800775a:	460b      	mov	r3, r1
 800775c:	4614      	mov	r4, r2
 800775e:	195b      	adds	r3, r3, r5
 8007760:	eb44 0406 	adc.w	r4, r4, r6
 8007764:	f04f 0100 	mov.w	r1, #0
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	02a2      	lsls	r2, r4, #10
 800776e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007772:	0299      	lsls	r1, r3, #10
 8007774:	460b      	mov	r3, r1
 8007776:	4614      	mov	r4, r2
 8007778:	4618      	mov	r0, r3
 800777a:	4621      	mov	r1, r4
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f04f 0400 	mov.w	r4, #0
 8007782:	461a      	mov	r2, r3
 8007784:	4623      	mov	r3, r4
 8007786:	f7f9 fa5f 	bl	8000c48 <__aeabi_uldivmod>
 800778a:	4603      	mov	r3, r0
 800778c:	460c      	mov	r4, r1
 800778e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007790:	4b60      	ldr	r3, [pc, #384]	; (8007914 <HAL_RCC_GetSysClockFreq+0x334>)
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	0c1b      	lsrs	r3, r3, #16
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	3301      	adds	r3, #1
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a8:	613b      	str	r3, [r7, #16]
      break;
 80077aa:	e0ae      	b.n	800790a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077ac:	4b59      	ldr	r3, [pc, #356]	; (8007914 <HAL_RCC_GetSysClockFreq+0x334>)
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077b4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077b6:	4b57      	ldr	r3, [pc, #348]	; (8007914 <HAL_RCC_GetSysClockFreq+0x334>)
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d04a      	beq.n	8007858 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077c2:	4b54      	ldr	r3, [pc, #336]	; (8007914 <HAL_RCC_GetSysClockFreq+0x334>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	f04f 0400 	mov.w	r4, #0
 80077cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	ea03 0501 	and.w	r5, r3, r1
 80077d8:	ea04 0602 	and.w	r6, r4, r2
 80077dc:	4629      	mov	r1, r5
 80077de:	4632      	mov	r2, r6
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	f04f 0400 	mov.w	r4, #0
 80077e8:	0154      	lsls	r4, r2, #5
 80077ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80077ee:	014b      	lsls	r3, r1, #5
 80077f0:	4619      	mov	r1, r3
 80077f2:	4622      	mov	r2, r4
 80077f4:	1b49      	subs	r1, r1, r5
 80077f6:	eb62 0206 	sbc.w	r2, r2, r6
 80077fa:	f04f 0300 	mov.w	r3, #0
 80077fe:	f04f 0400 	mov.w	r4, #0
 8007802:	0194      	lsls	r4, r2, #6
 8007804:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007808:	018b      	lsls	r3, r1, #6
 800780a:	1a5b      	subs	r3, r3, r1
 800780c:	eb64 0402 	sbc.w	r4, r4, r2
 8007810:	f04f 0100 	mov.w	r1, #0
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	00e2      	lsls	r2, r4, #3
 800781a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800781e:	00d9      	lsls	r1, r3, #3
 8007820:	460b      	mov	r3, r1
 8007822:	4614      	mov	r4, r2
 8007824:	195b      	adds	r3, r3, r5
 8007826:	eb44 0406 	adc.w	r4, r4, r6
 800782a:	f04f 0100 	mov.w	r1, #0
 800782e:	f04f 0200 	mov.w	r2, #0
 8007832:	0262      	lsls	r2, r4, #9
 8007834:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007838:	0259      	lsls	r1, r3, #9
 800783a:	460b      	mov	r3, r1
 800783c:	4614      	mov	r4, r2
 800783e:	4618      	mov	r0, r3
 8007840:	4621      	mov	r1, r4
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f04f 0400 	mov.w	r4, #0
 8007848:	461a      	mov	r2, r3
 800784a:	4623      	mov	r3, r4
 800784c:	f7f9 f9fc 	bl	8000c48 <__aeabi_uldivmod>
 8007850:	4603      	mov	r3, r0
 8007852:	460c      	mov	r4, r1
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	e049      	b.n	80078ec <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007858:	4b2e      	ldr	r3, [pc, #184]	; (8007914 <HAL_RCC_GetSysClockFreq+0x334>)
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	099b      	lsrs	r3, r3, #6
 800785e:	f04f 0400 	mov.w	r4, #0
 8007862:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	ea03 0501 	and.w	r5, r3, r1
 800786e:	ea04 0602 	and.w	r6, r4, r2
 8007872:	4629      	mov	r1, r5
 8007874:	4632      	mov	r2, r6
 8007876:	f04f 0300 	mov.w	r3, #0
 800787a:	f04f 0400 	mov.w	r4, #0
 800787e:	0154      	lsls	r4, r2, #5
 8007880:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007884:	014b      	lsls	r3, r1, #5
 8007886:	4619      	mov	r1, r3
 8007888:	4622      	mov	r2, r4
 800788a:	1b49      	subs	r1, r1, r5
 800788c:	eb62 0206 	sbc.w	r2, r2, r6
 8007890:	f04f 0300 	mov.w	r3, #0
 8007894:	f04f 0400 	mov.w	r4, #0
 8007898:	0194      	lsls	r4, r2, #6
 800789a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800789e:	018b      	lsls	r3, r1, #6
 80078a0:	1a5b      	subs	r3, r3, r1
 80078a2:	eb64 0402 	sbc.w	r4, r4, r2
 80078a6:	f04f 0100 	mov.w	r1, #0
 80078aa:	f04f 0200 	mov.w	r2, #0
 80078ae:	00e2      	lsls	r2, r4, #3
 80078b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80078b4:	00d9      	lsls	r1, r3, #3
 80078b6:	460b      	mov	r3, r1
 80078b8:	4614      	mov	r4, r2
 80078ba:	195b      	adds	r3, r3, r5
 80078bc:	eb44 0406 	adc.w	r4, r4, r6
 80078c0:	f04f 0100 	mov.w	r1, #0
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	02a2      	lsls	r2, r4, #10
 80078ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80078ce:	0299      	lsls	r1, r3, #10
 80078d0:	460b      	mov	r3, r1
 80078d2:	4614      	mov	r4, r2
 80078d4:	4618      	mov	r0, r3
 80078d6:	4621      	mov	r1, r4
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f04f 0400 	mov.w	r4, #0
 80078de:	461a      	mov	r2, r3
 80078e0:	4623      	mov	r3, r4
 80078e2:	f7f9 f9b1 	bl	8000c48 <__aeabi_uldivmod>
 80078e6:	4603      	mov	r3, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80078ec:	4b09      	ldr	r3, [pc, #36]	; (8007914 <HAL_RCC_GetSysClockFreq+0x334>)
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	0f1b      	lsrs	r3, r3, #28
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007900:	613b      	str	r3, [r7, #16]
      break;
 8007902:	e002      	b.n	800790a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007904:	4b04      	ldr	r3, [pc, #16]	; (8007918 <HAL_RCC_GetSysClockFreq+0x338>)
 8007906:	613b      	str	r3, [r7, #16]
      break;
 8007908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800790a:	693b      	ldr	r3, [r7, #16]
}
 800790c:	4618      	mov	r0, r3
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007914:	40023800 	.word	0x40023800
 8007918:	00f42400 	.word	0x00f42400
 800791c:	007a1200 	.word	0x007a1200

08007920 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 8083 	beq.w	8007a40 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800793a:	4b95      	ldr	r3, [pc, #596]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f003 030c 	and.w	r3, r3, #12
 8007942:	2b04      	cmp	r3, #4
 8007944:	d019      	beq.n	800797a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007946:	4b92      	ldr	r3, [pc, #584]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800794e:	2b08      	cmp	r3, #8
 8007950:	d106      	bne.n	8007960 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007952:	4b8f      	ldr	r3, [pc, #572]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800795e:	d00c      	beq.n	800797a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007960:	4b8b      	ldr	r3, [pc, #556]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007968:	2b0c      	cmp	r3, #12
 800796a:	d112      	bne.n	8007992 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800796c:	4b88      	ldr	r3, [pc, #544]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007978:	d10b      	bne.n	8007992 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800797a:	4b85      	ldr	r3, [pc, #532]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d05b      	beq.n	8007a3e <HAL_RCC_OscConfig+0x11e>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d157      	bne.n	8007a3e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e216      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800799a:	d106      	bne.n	80079aa <HAL_RCC_OscConfig+0x8a>
 800799c:	4b7c      	ldr	r3, [pc, #496]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a7b      	ldr	r2, [pc, #492]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 80079a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	e01d      	b.n	80079e6 <HAL_RCC_OscConfig+0xc6>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079b2:	d10c      	bne.n	80079ce <HAL_RCC_OscConfig+0xae>
 80079b4:	4b76      	ldr	r3, [pc, #472]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a75      	ldr	r2, [pc, #468]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 80079ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	4b73      	ldr	r3, [pc, #460]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a72      	ldr	r2, [pc, #456]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 80079c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	e00b      	b.n	80079e6 <HAL_RCC_OscConfig+0xc6>
 80079ce:	4b70      	ldr	r3, [pc, #448]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a6f      	ldr	r2, [pc, #444]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 80079d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	4b6d      	ldr	r3, [pc, #436]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a6c      	ldr	r2, [pc, #432]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 80079e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d013      	beq.n	8007a16 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ee:	f7fd fd53 	bl	8005498 <HAL_GetTick>
 80079f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079f4:	e008      	b.n	8007a08 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079f6:	f7fd fd4f 	bl	8005498 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b64      	cmp	r3, #100	; 0x64
 8007a02:	d901      	bls.n	8007a08 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e1db      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a08:	4b61      	ldr	r3, [pc, #388]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d0f0      	beq.n	80079f6 <HAL_RCC_OscConfig+0xd6>
 8007a14:	e014      	b.n	8007a40 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a16:	f7fd fd3f 	bl	8005498 <HAL_GetTick>
 8007a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a1c:	e008      	b.n	8007a30 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a1e:	f7fd fd3b 	bl	8005498 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	2b64      	cmp	r3, #100	; 0x64
 8007a2a:	d901      	bls.n	8007a30 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e1c7      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a30:	4b57      	ldr	r3, [pc, #348]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1f0      	bne.n	8007a1e <HAL_RCC_OscConfig+0xfe>
 8007a3c:	e000      	b.n	8007a40 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a3e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d06f      	beq.n	8007b2c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007a4c:	4b50      	ldr	r3, [pc, #320]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f003 030c 	and.w	r3, r3, #12
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d017      	beq.n	8007a88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007a58:	4b4d      	ldr	r3, [pc, #308]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d105      	bne.n	8007a70 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007a64:	4b4a      	ldr	r3, [pc, #296]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00b      	beq.n	8007a88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a70:	4b47      	ldr	r3, [pc, #284]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007a78:	2b0c      	cmp	r3, #12
 8007a7a:	d11c      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a7c:	4b44      	ldr	r3, [pc, #272]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d116      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a88:	4b41      	ldr	r3, [pc, #260]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d005      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x180>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d001      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e18f      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aa0:	4b3b      	ldr	r3, [pc, #236]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	00db      	lsls	r3, r3, #3
 8007aae:	4938      	ldr	r1, [pc, #224]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ab4:	e03a      	b.n	8007b2c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d020      	beq.n	8007b00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007abe:	4b35      	ldr	r3, [pc, #212]	; (8007b94 <HAL_RCC_OscConfig+0x274>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac4:	f7fd fce8 	bl	8005498 <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007acc:	f7fd fce4 	bl	8005498 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e170      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ade:	4b2c      	ldr	r3, [pc, #176]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d0f0      	beq.n	8007acc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aea:	4b29      	ldr	r3, [pc, #164]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	4925      	ldr	r1, [pc, #148]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	600b      	str	r3, [r1, #0]
 8007afe:	e015      	b.n	8007b2c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b00:	4b24      	ldr	r3, [pc, #144]	; (8007b94 <HAL_RCC_OscConfig+0x274>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b06:	f7fd fcc7 	bl	8005498 <HAL_GetTick>
 8007b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b0c:	e008      	b.n	8007b20 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b0e:	f7fd fcc3 	bl	8005498 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d901      	bls.n	8007b20 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e14f      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b20:	4b1b      	ldr	r3, [pc, #108]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1f0      	bne.n	8007b0e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0308 	and.w	r3, r3, #8
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d037      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d016      	beq.n	8007b6e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b40:	4b15      	ldr	r3, [pc, #84]	; (8007b98 <HAL_RCC_OscConfig+0x278>)
 8007b42:	2201      	movs	r2, #1
 8007b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b46:	f7fd fca7 	bl	8005498 <HAL_GetTick>
 8007b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b4c:	e008      	b.n	8007b60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b4e:	f7fd fca3 	bl	8005498 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e12f      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b60:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <HAL_RCC_OscConfig+0x270>)
 8007b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0f0      	beq.n	8007b4e <HAL_RCC_OscConfig+0x22e>
 8007b6c:	e01c      	b.n	8007ba8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b6e:	4b0a      	ldr	r3, [pc, #40]	; (8007b98 <HAL_RCC_OscConfig+0x278>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b74:	f7fd fc90 	bl	8005498 <HAL_GetTick>
 8007b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b7a:	e00f      	b.n	8007b9c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b7c:	f7fd fc8c 	bl	8005498 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d908      	bls.n	8007b9c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e118      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
 8007b8e:	bf00      	nop
 8007b90:	40023800 	.word	0x40023800
 8007b94:	42470000 	.word	0x42470000
 8007b98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b9c:	4b8a      	ldr	r3, [pc, #552]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e9      	bne.n	8007b7c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 8097 	beq.w	8007ce4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bba:	4b83      	ldr	r3, [pc, #524]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10f      	bne.n	8007be6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	4b7f      	ldr	r3, [pc, #508]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	4a7e      	ldr	r2, [pc, #504]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8007bd6:	4b7c      	ldr	r3, [pc, #496]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007be2:	2301      	movs	r3, #1
 8007be4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007be6:	4b79      	ldr	r3, [pc, #484]	; (8007dcc <HAL_RCC_OscConfig+0x4ac>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d118      	bne.n	8007c24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bf2:	4b76      	ldr	r3, [pc, #472]	; (8007dcc <HAL_RCC_OscConfig+0x4ac>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a75      	ldr	r2, [pc, #468]	; (8007dcc <HAL_RCC_OscConfig+0x4ac>)
 8007bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bfe:	f7fd fc4b 	bl	8005498 <HAL_GetTick>
 8007c02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c04:	e008      	b.n	8007c18 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c06:	f7fd fc47 	bl	8005498 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d901      	bls.n	8007c18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e0d3      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c18:	4b6c      	ldr	r3, [pc, #432]	; (8007dcc <HAL_RCC_OscConfig+0x4ac>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0f0      	beq.n	8007c06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d106      	bne.n	8007c3a <HAL_RCC_OscConfig+0x31a>
 8007c2c:	4b66      	ldr	r3, [pc, #408]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c30:	4a65      	ldr	r2, [pc, #404]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007c32:	f043 0301 	orr.w	r3, r3, #1
 8007c36:	6713      	str	r3, [r2, #112]	; 0x70
 8007c38:	e01c      	b.n	8007c74 <HAL_RCC_OscConfig+0x354>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b05      	cmp	r3, #5
 8007c40:	d10c      	bne.n	8007c5c <HAL_RCC_OscConfig+0x33c>
 8007c42:	4b61      	ldr	r3, [pc, #388]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c46:	4a60      	ldr	r2, [pc, #384]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007c48:	f043 0304 	orr.w	r3, r3, #4
 8007c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c4e:	4b5e      	ldr	r3, [pc, #376]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c52:	4a5d      	ldr	r2, [pc, #372]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007c54:	f043 0301 	orr.w	r3, r3, #1
 8007c58:	6713      	str	r3, [r2, #112]	; 0x70
 8007c5a:	e00b      	b.n	8007c74 <HAL_RCC_OscConfig+0x354>
 8007c5c:	4b5a      	ldr	r3, [pc, #360]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c60:	4a59      	ldr	r2, [pc, #356]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007c62:	f023 0301 	bic.w	r3, r3, #1
 8007c66:	6713      	str	r3, [r2, #112]	; 0x70
 8007c68:	4b57      	ldr	r3, [pc, #348]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6c:	4a56      	ldr	r2, [pc, #344]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007c6e:	f023 0304 	bic.w	r3, r3, #4
 8007c72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d015      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c7c:	f7fd fc0c 	bl	8005498 <HAL_GetTick>
 8007c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c82:	e00a      	b.n	8007c9a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c84:	f7fd fc08 	bl	8005498 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d901      	bls.n	8007c9a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e092      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c9a:	4b4b      	ldr	r3, [pc, #300]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0ee      	beq.n	8007c84 <HAL_RCC_OscConfig+0x364>
 8007ca6:	e014      	b.n	8007cd2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ca8:	f7fd fbf6 	bl	8005498 <HAL_GetTick>
 8007cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cae:	e00a      	b.n	8007cc6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cb0:	f7fd fbf2 	bl	8005498 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d901      	bls.n	8007cc6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e07c      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cc6:	4b40      	ldr	r3, [pc, #256]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1ee      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d105      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cd8:	4b3b      	ldr	r3, [pc, #236]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cdc:	4a3a      	ldr	r2, [pc, #232]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ce2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d068      	beq.n	8007dbe <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007cec:	4b36      	ldr	r3, [pc, #216]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f003 030c 	and.w	r3, r3, #12
 8007cf4:	2b08      	cmp	r3, #8
 8007cf6:	d060      	beq.n	8007dba <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d145      	bne.n	8007d8c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d00:	4b33      	ldr	r3, [pc, #204]	; (8007dd0 <HAL_RCC_OscConfig+0x4b0>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d06:	f7fd fbc7 	bl	8005498 <HAL_GetTick>
 8007d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d0c:	e008      	b.n	8007d20 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d0e:	f7fd fbc3 	bl	8005498 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d901      	bls.n	8007d20 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e04f      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d20:	4b29      	ldr	r3, [pc, #164]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1f0      	bne.n	8007d0e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	69da      	ldr	r2, [r3, #28]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a1b      	ldr	r3, [r3, #32]
 8007d34:	431a      	orrs	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	019b      	lsls	r3, r3, #6
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	085b      	lsrs	r3, r3, #1
 8007d44:	3b01      	subs	r3, #1
 8007d46:	041b      	lsls	r3, r3, #16
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	061b      	lsls	r3, r3, #24
 8007d50:	431a      	orrs	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d56:	071b      	lsls	r3, r3, #28
 8007d58:	491b      	ldr	r1, [pc, #108]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d5e:	4b1c      	ldr	r3, [pc, #112]	; (8007dd0 <HAL_RCC_OscConfig+0x4b0>)
 8007d60:	2201      	movs	r2, #1
 8007d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d64:	f7fd fb98 	bl	8005498 <HAL_GetTick>
 8007d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d6a:	e008      	b.n	8007d7e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d6c:	f7fd fb94 	bl	8005498 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e020      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d7e:	4b12      	ldr	r3, [pc, #72]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0f0      	beq.n	8007d6c <HAL_RCC_OscConfig+0x44c>
 8007d8a:	e018      	b.n	8007dbe <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d8c:	4b10      	ldr	r3, [pc, #64]	; (8007dd0 <HAL_RCC_OscConfig+0x4b0>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d92:	f7fd fb81 	bl	8005498 <HAL_GetTick>
 8007d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d98:	e008      	b.n	8007dac <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d9a:	f7fd fb7d 	bl	8005498 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d901      	bls.n	8007dac <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e009      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dac:	4b06      	ldr	r3, [pc, #24]	; (8007dc8 <HAL_RCC_OscConfig+0x4a8>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1f0      	bne.n	8007d9a <HAL_RCC_OscConfig+0x47a>
 8007db8:	e001      	b.n	8007dbe <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e000      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	40023800 	.word	0x40023800
 8007dcc:	40007000 	.word	0x40007000
 8007dd0:	42470060 	.word	0x42470060

08007dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e01d      	b.n	8007e22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d106      	bne.n	8007e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7fc fab2 	bl	8004364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2202      	movs	r2, #2
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4619      	mov	r1, r3
 8007e12:	4610      	mov	r0, r2
 8007e14:	f000 fa38 	bl	8008288 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b085      	sub	sp, #20
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2202      	movs	r2, #2
 8007e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b06      	cmp	r3, #6
 8007e4a:	d007      	beq.n	8007e5c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68da      	ldr	r2, [r3, #12]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f042 0201 	orr.w	r2, r2, #1
 8007e88:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f003 0307 	and.w	r3, r3, #7
 8007e94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b06      	cmp	r3, #6
 8007e9a:	d007      	beq.n	8007eac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0201 	orr.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d122      	bne.n	8007f16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d11b      	bne.n	8007f16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f06f 0202 	mvn.w	r2, #2
 8007ee6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	f003 0303 	and.w	r3, r3, #3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f9a5 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8007f02:	e005      	b.n	8007f10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f997 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f9a8 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d122      	bne.n	8007f6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f003 0304 	and.w	r3, r3, #4
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	d11b      	bne.n	8007f6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f06f 0204 	mvn.w	r2, #4
 8007f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d003      	beq.n	8007f58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f97b 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8007f56:	e005      	b.n	8007f64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f96d 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f97e 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	f003 0308 	and.w	r3, r3, #8
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d122      	bne.n	8007fbe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	f003 0308 	and.w	r3, r3, #8
 8007f82:	2b08      	cmp	r3, #8
 8007f84:	d11b      	bne.n	8007fbe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f06f 0208 	mvn.w	r2, #8
 8007f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2204      	movs	r2, #4
 8007f94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69db      	ldr	r3, [r3, #28]
 8007f9c:	f003 0303 	and.w	r3, r3, #3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f951 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8007faa:	e005      	b.n	8007fb8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f943 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f954 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	f003 0310 	and.w	r3, r3, #16
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d122      	bne.n	8008012 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f003 0310 	and.w	r3, r3, #16
 8007fd6:	2b10      	cmp	r3, #16
 8007fd8:	d11b      	bne.n	8008012 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f06f 0210 	mvn.w	r2, #16
 8007fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f927 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8007ffe:	e005      	b.n	800800c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f919 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f92a 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b01      	cmp	r3, #1
 800801e:	d10e      	bne.n	800803e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b01      	cmp	r3, #1
 800802c:	d107      	bne.n	800803e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f06f 0201 	mvn.w	r2, #1
 8008036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7fb ff6f 	bl	8003f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008048:	2b80      	cmp	r3, #128	; 0x80
 800804a:	d10e      	bne.n	800806a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008056:	2b80      	cmp	r3, #128	; 0x80
 8008058:	d107      	bne.n	800806a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 facf 	bl	8008608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008074:	2b40      	cmp	r3, #64	; 0x40
 8008076:	d10e      	bne.n	8008096 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008082:	2b40      	cmp	r3, #64	; 0x40
 8008084:	d107      	bne.n	8008096 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800808e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f8ef 	bl	8008274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b20      	cmp	r3, #32
 80080a2:	d10e      	bne.n	80080c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	d107      	bne.n	80080c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f06f 0220 	mvn.w	r2, #32
 80080ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fa99 	bl	80085f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080c2:	bf00      	nop
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d101      	bne.n	80080e2 <HAL_TIM_ConfigClockSource+0x18>
 80080de:	2302      	movs	r3, #2
 80080e0:	e0a6      	b.n	8008230 <HAL_TIM_ConfigClockSource+0x166>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008100:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008108:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b40      	cmp	r3, #64	; 0x40
 8008118:	d067      	beq.n	80081ea <HAL_TIM_ConfigClockSource+0x120>
 800811a:	2b40      	cmp	r3, #64	; 0x40
 800811c:	d80b      	bhi.n	8008136 <HAL_TIM_ConfigClockSource+0x6c>
 800811e:	2b10      	cmp	r3, #16
 8008120:	d073      	beq.n	800820a <HAL_TIM_ConfigClockSource+0x140>
 8008122:	2b10      	cmp	r3, #16
 8008124:	d802      	bhi.n	800812c <HAL_TIM_ConfigClockSource+0x62>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d06f      	beq.n	800820a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800812a:	e078      	b.n	800821e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800812c:	2b20      	cmp	r3, #32
 800812e:	d06c      	beq.n	800820a <HAL_TIM_ConfigClockSource+0x140>
 8008130:	2b30      	cmp	r3, #48	; 0x30
 8008132:	d06a      	beq.n	800820a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008134:	e073      	b.n	800821e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008136:	2b70      	cmp	r3, #112	; 0x70
 8008138:	d00d      	beq.n	8008156 <HAL_TIM_ConfigClockSource+0x8c>
 800813a:	2b70      	cmp	r3, #112	; 0x70
 800813c:	d804      	bhi.n	8008148 <HAL_TIM_ConfigClockSource+0x7e>
 800813e:	2b50      	cmp	r3, #80	; 0x50
 8008140:	d033      	beq.n	80081aa <HAL_TIM_ConfigClockSource+0xe0>
 8008142:	2b60      	cmp	r3, #96	; 0x60
 8008144:	d041      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008146:	e06a      	b.n	800821e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814c:	d066      	beq.n	800821c <HAL_TIM_ConfigClockSource+0x152>
 800814e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008152:	d017      	beq.n	8008184 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008154:	e063      	b.n	800821e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	6899      	ldr	r1, [r3, #8]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f000 f9a9 	bl	80084bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008178:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	609a      	str	r2, [r3, #8]
      break;
 8008182:	e04c      	b.n	800821e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	6899      	ldr	r1, [r3, #8]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f000 f992 	bl	80084bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689a      	ldr	r2, [r3, #8]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081a6:	609a      	str	r2, [r3, #8]
      break;
 80081a8:	e039      	b.n	800821e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	6859      	ldr	r1, [r3, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f000 f906 	bl	80083c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2150      	movs	r1, #80	; 0x50
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f95f 	bl	8008486 <TIM_ITRx_SetConfig>
      break;
 80081c8:	e029      	b.n	800821e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	6859      	ldr	r1, [r3, #4]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	461a      	mov	r2, r3
 80081d8:	f000 f925 	bl	8008426 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2160      	movs	r1, #96	; 0x60
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 f94f 	bl	8008486 <TIM_ITRx_SetConfig>
      break;
 80081e8:	e019      	b.n	800821e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	6859      	ldr	r1, [r3, #4]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	461a      	mov	r2, r3
 80081f8:	f000 f8e6 	bl	80083c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2140      	movs	r1, #64	; 0x40
 8008202:	4618      	mov	r0, r3
 8008204:	f000 f93f 	bl	8008486 <TIM_ITRx_SetConfig>
      break;
 8008208:	e009      	b.n	800821e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4619      	mov	r1, r3
 8008214:	4610      	mov	r0, r2
 8008216:	f000 f936 	bl	8008486 <TIM_ITRx_SetConfig>
      break;
 800821a:	e000      	b.n	800821e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800821c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a40      	ldr	r2, [pc, #256]	; (800839c <TIM_Base_SetConfig+0x114>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d013      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a6:	d00f      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a3d      	ldr	r2, [pc, #244]	; (80083a0 <TIM_Base_SetConfig+0x118>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d00b      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a3c      	ldr	r2, [pc, #240]	; (80083a4 <TIM_Base_SetConfig+0x11c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d007      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a3b      	ldr	r2, [pc, #236]	; (80083a8 <TIM_Base_SetConfig+0x120>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d003      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a3a      	ldr	r2, [pc, #232]	; (80083ac <TIM_Base_SetConfig+0x124>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d108      	bne.n	80082da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a2f      	ldr	r2, [pc, #188]	; (800839c <TIM_Base_SetConfig+0x114>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d02b      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e8:	d027      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a2c      	ldr	r2, [pc, #176]	; (80083a0 <TIM_Base_SetConfig+0x118>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d023      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a2b      	ldr	r2, [pc, #172]	; (80083a4 <TIM_Base_SetConfig+0x11c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d01f      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a2a      	ldr	r2, [pc, #168]	; (80083a8 <TIM_Base_SetConfig+0x120>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d01b      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a29      	ldr	r2, [pc, #164]	; (80083ac <TIM_Base_SetConfig+0x124>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d017      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a28      	ldr	r2, [pc, #160]	; (80083b0 <TIM_Base_SetConfig+0x128>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d013      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a27      	ldr	r2, [pc, #156]	; (80083b4 <TIM_Base_SetConfig+0x12c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d00f      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a26      	ldr	r2, [pc, #152]	; (80083b8 <TIM_Base_SetConfig+0x130>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d00b      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a25      	ldr	r2, [pc, #148]	; (80083bc <TIM_Base_SetConfig+0x134>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d007      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a24      	ldr	r2, [pc, #144]	; (80083c0 <TIM_Base_SetConfig+0x138>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d003      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a23      	ldr	r2, [pc, #140]	; (80083c4 <TIM_Base_SetConfig+0x13c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d108      	bne.n	800834c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	4313      	orrs	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a0a      	ldr	r2, [pc, #40]	; (800839c <TIM_Base_SetConfig+0x114>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d003      	beq.n	8008380 <TIM_Base_SetConfig+0xf8>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a0c      	ldr	r2, [pc, #48]	; (80083ac <TIM_Base_SetConfig+0x124>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d103      	bne.n	8008388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	615a      	str	r2, [r3, #20]
}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	40010000 	.word	0x40010000
 80083a0:	40000400 	.word	0x40000400
 80083a4:	40000800 	.word	0x40000800
 80083a8:	40000c00 	.word	0x40000c00
 80083ac:	40010400 	.word	0x40010400
 80083b0:	40014000 	.word	0x40014000
 80083b4:	40014400 	.word	0x40014400
 80083b8:	40014800 	.word	0x40014800
 80083bc:	40001800 	.word	0x40001800
 80083c0:	40001c00 	.word	0x40001c00
 80083c4:	40002000 	.word	0x40002000

080083c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	f023 0201 	bic.w	r2, r3, #1
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	011b      	lsls	r3, r3, #4
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f023 030a 	bic.w	r3, r3, #10
 8008404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	621a      	str	r2, [r3, #32]
}
 800841a:	bf00      	nop
 800841c:	371c      	adds	r7, #28
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008426:	b480      	push	{r7}
 8008428:	b087      	sub	sp, #28
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	f023 0210 	bic.w	r2, r3, #16
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	031b      	lsls	r3, r3, #12
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4313      	orrs	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	4313      	orrs	r3, r2
 800846c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	621a      	str	r2, [r3, #32]
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008486:	b480      	push	{r7}
 8008488:	b085      	sub	sp, #20
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	f043 0307 	orr.w	r3, r3, #7
 80084a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	609a      	str	r2, [r3, #8]
}
 80084b0:	bf00      	nop
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
 80084c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	021a      	lsls	r2, r3, #8
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	431a      	orrs	r2, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	609a      	str	r2, [r3, #8]
}
 80084f0:	bf00      	nop
 80084f2:	371c      	adds	r7, #28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008510:	2302      	movs	r3, #2
 8008512:	e05a      	b.n	80085ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2202      	movs	r2, #2
 8008520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a21      	ldr	r2, [pc, #132]	; (80085d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d022      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008560:	d01d      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a1d      	ldr	r2, [pc, #116]	; (80085dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d018      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1b      	ldr	r2, [pc, #108]	; (80085e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d013      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1a      	ldr	r2, [pc, #104]	; (80085e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00e      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a18      	ldr	r2, [pc, #96]	; (80085e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d009      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a17      	ldr	r2, [pc, #92]	; (80085ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d004      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a15      	ldr	r2, [pc, #84]	; (80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d10c      	bne.n	80085b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	40010000 	.word	0x40010000
 80085dc:	40000400 	.word	0x40000400
 80085e0:	40000800 	.word	0x40000800
 80085e4:	40000c00 	.word	0x40000c00
 80085e8:	40010400 	.word	0x40010400
 80085ec:	40014000 	.word	0x40014000
 80085f0:	40001800 	.word	0x40001800

080085f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e03f      	b.n	80086ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d106      	bne.n	8008648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7fb ff2c 	bl	80044a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2224      	movs	r2, #36	; 0x24
 800864c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800865e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fa69 	bl	8008b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	691a      	ldr	r2, [r3, #16]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	695a      	ldr	r2, [r3, #20]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2220      	movs	r2, #32
 80086a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b088      	sub	sp, #32
 80086ba:	af02      	add	r7, sp, #8
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	603b      	str	r3, [r7, #0]
 80086c2:	4613      	mov	r3, r2
 80086c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	f040 8083 	bne.w	80087de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <HAL_UART_Transmit+0x2e>
 80086de:	88fb      	ldrh	r3, [r7, #6]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e07b      	b.n	80087e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d101      	bne.n	80086f6 <HAL_UART_Transmit+0x40>
 80086f2:	2302      	movs	r3, #2
 80086f4:	e074      	b.n	80087e0 <HAL_UART_Transmit+0x12a>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2221      	movs	r2, #33	; 0x21
 8008708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800870c:	f7fc fec4 	bl	8005498 <HAL_GetTick>
 8008710:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	88fa      	ldrh	r2, [r7, #6]
 8008716:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	88fa      	ldrh	r2, [r7, #6]
 800871c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008726:	e042      	b.n	80087ae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800872c:	b29b      	uxth	r3, r3
 800872e:	3b01      	subs	r3, #1
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800873e:	d122      	bne.n	8008786 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2200      	movs	r2, #0
 8008748:	2180      	movs	r1, #128	; 0x80
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f000 f976 	bl	8008a3c <UART_WaitOnFlagUntilTimeout>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e042      	b.n	80087e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800876c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d103      	bne.n	800877e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	3302      	adds	r3, #2
 800877a:	60bb      	str	r3, [r7, #8]
 800877c:	e017      	b.n	80087ae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	3301      	adds	r3, #1
 8008782:	60bb      	str	r3, [r7, #8]
 8008784:	e013      	b.n	80087ae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2200      	movs	r2, #0
 800878e:	2180      	movs	r1, #128	; 0x80
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 f953 	bl	8008a3c <UART_WaitOnFlagUntilTimeout>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e01f      	b.n	80087e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	1c5a      	adds	r2, r3, #1
 80087a4:	60ba      	str	r2, [r7, #8]
 80087a6:	781a      	ldrb	r2, [r3, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1b7      	bne.n	8008728 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2200      	movs	r2, #0
 80087c0:	2140      	movs	r1, #64	; 0x40
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 f93a 	bl	8008a3c <UART_WaitOnFlagUntilTimeout>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e006      	b.n	80087e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2220      	movs	r2, #32
 80087d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	e000      	b.n	80087e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80087de:	2302      	movs	r3, #2
  }
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3718      	adds	r7, #24
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	4613      	mov	r3, r2
 80087f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b20      	cmp	r3, #32
 8008800:	d166      	bne.n	80088d0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <HAL_UART_Receive_DMA+0x26>
 8008808:	88fb      	ldrh	r3, [r7, #6]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e05f      	b.n	80088d2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008818:	2b01      	cmp	r3, #1
 800881a:	d101      	bne.n	8008820 <HAL_UART_Receive_DMA+0x38>
 800881c:	2302      	movs	r3, #2
 800881e:	e058      	b.n	80088d2 <HAL_UART_Receive_DMA+0xea>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	88fa      	ldrh	r2, [r7, #6]
 8008832:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2222      	movs	r2, #34	; 0x22
 800883e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008846:	4a25      	ldr	r2, [pc, #148]	; (80088dc <HAL_UART_Receive_DMA+0xf4>)
 8008848:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884e:	4a24      	ldr	r2, [pc, #144]	; (80088e0 <HAL_UART_Receive_DMA+0xf8>)
 8008850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008856:	4a23      	ldr	r2, [pc, #140]	; (80088e4 <HAL_UART_Receive_DMA+0xfc>)
 8008858:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885e:	2200      	movs	r2, #0
 8008860:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8008862:	f107 0308 	add.w	r3, r7, #8
 8008866:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	3304      	adds	r3, #4
 8008872:	4619      	mov	r1, r3
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	88fb      	ldrh	r3, [r7, #6]
 800887a:	f7fc ffcb 	bl	8005814 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800887e:	2300      	movs	r3, #0
 8008880:	613b      	str	r3, [r7, #16]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	613b      	str	r3, [r7, #16]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	613b      	str	r3, [r7, #16]
 8008892:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088aa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	695a      	ldr	r2, [r3, #20]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f042 0201 	orr.w	r2, r2, #1
 80088ba:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	695a      	ldr	r2, [r3, #20]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088ca:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	e000      	b.n	80088d2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80088d0:	2302      	movs	r3, #2
  }
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3718      	adds	r7, #24
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	08008925 	.word	0x08008925
 80088e0:	0800898d 	.word	0x0800898d
 80088e4:	080089a9 	.word	0x080089a9

080088e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893c:	2b00      	cmp	r3, #0
 800893e:	d11e      	bne.n	800897e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68da      	ldr	r2, [r3, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008954:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	695a      	ldr	r2, [r3, #20]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0201 	bic.w	r2, r2, #1
 8008964:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	695a      	ldr	r2, [r3, #20]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008974:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2220      	movs	r2, #32
 800897a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f7ff ffb2 	bl	80088e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008984:	bf00      	nop
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008998:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f7ff ffae 	bl	80088fc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089a0:	bf00      	nop
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c4:	2b80      	cmp	r3, #128	; 0x80
 80089c6:	bf0c      	ite	eq
 80089c8:	2301      	moveq	r3, #1
 80089ca:	2300      	movne	r3, #0
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b21      	cmp	r3, #33	; 0x21
 80089da:	d108      	bne.n	80089ee <UART_DMAError+0x46>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d005      	beq.n	80089ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2200      	movs	r2, #0
 80089e6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80089e8:	68b8      	ldr	r0, [r7, #8]
 80089ea:	f000 f871 	bl	8008ad0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f8:	2b40      	cmp	r3, #64	; 0x40
 80089fa:	bf0c      	ite	eq
 80089fc:	2301      	moveq	r3, #1
 80089fe:	2300      	movne	r3, #0
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b22      	cmp	r3, #34	; 0x22
 8008a0e:	d108      	bne.n	8008a22 <UART_DMAError+0x7a>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d005      	beq.n	8008a22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008a1c:	68b8      	ldr	r0, [r7, #8]
 8008a1e:	f000 f86d 	bl	8008afc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a26:	f043 0210 	orr.w	r2, r3, #16
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a2e:	68b8      	ldr	r0, [r7, #8]
 8008a30:	f7ff ff6e 	bl	8008910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a34:	bf00      	nop
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a4c:	e02c      	b.n	8008aa8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a54:	d028      	beq.n	8008aa8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d007      	beq.n	8008a6c <UART_WaitOnFlagUntilTimeout+0x30>
 8008a5c:	f7fc fd1c 	bl	8005498 <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d21d      	bcs.n	8008aa8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	695a      	ldr	r2, [r3, #20]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f022 0201 	bic.w	r2, r2, #1
 8008a8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e00f      	b.n	8008ac8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	bf0c      	ite	eq
 8008ab8:	2301      	moveq	r3, #1
 8008aba:	2300      	movne	r3, #0
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	461a      	mov	r2, r3
 8008ac0:	79fb      	ldrb	r3, [r7, #7]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d0c3      	beq.n	8008a4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3710      	adds	r7, #16
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008ae6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b12:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	695a      	ldr	r2, [r3, #20]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f022 0201 	bic.w	r2, r2, #1
 8008b22:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	b085      	sub	sp, #20
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68da      	ldr	r2, [r3, #12]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	689a      	ldr	r2, [r3, #8]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	431a      	orrs	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	431a      	orrs	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008b7a:	f023 030c 	bic.w	r3, r3, #12
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	6812      	ldr	r2, [r2, #0]
 8008b82:	68f9      	ldr	r1, [r7, #12]
 8008b84:	430b      	orrs	r3, r1
 8008b86:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	699a      	ldr	r2, [r3, #24]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ba6:	f040 818b 	bne.w	8008ec0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4ac1      	ldr	r2, [pc, #772]	; (8008eb4 <UART_SetConfig+0x37c>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d005      	beq.n	8008bc0 <UART_SetConfig+0x88>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4abf      	ldr	r2, [pc, #764]	; (8008eb8 <UART_SetConfig+0x380>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	f040 80bd 	bne.w	8008d3a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bc0:	f7fe fcc8 	bl	8007554 <HAL_RCC_GetPCLK2Freq>
 8008bc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	461d      	mov	r5, r3
 8008bca:	f04f 0600 	mov.w	r6, #0
 8008bce:	46a8      	mov	r8, r5
 8008bd0:	46b1      	mov	r9, r6
 8008bd2:	eb18 0308 	adds.w	r3, r8, r8
 8008bd6:	eb49 0409 	adc.w	r4, r9, r9
 8008bda:	4698      	mov	r8, r3
 8008bdc:	46a1      	mov	r9, r4
 8008bde:	eb18 0805 	adds.w	r8, r8, r5
 8008be2:	eb49 0906 	adc.w	r9, r9, r6
 8008be6:	f04f 0100 	mov.w	r1, #0
 8008bea:	f04f 0200 	mov.w	r2, #0
 8008bee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008bf2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008bf6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008bfa:	4688      	mov	r8, r1
 8008bfc:	4691      	mov	r9, r2
 8008bfe:	eb18 0005 	adds.w	r0, r8, r5
 8008c02:	eb49 0106 	adc.w	r1, r9, r6
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	461d      	mov	r5, r3
 8008c0c:	f04f 0600 	mov.w	r6, #0
 8008c10:	196b      	adds	r3, r5, r5
 8008c12:	eb46 0406 	adc.w	r4, r6, r6
 8008c16:	461a      	mov	r2, r3
 8008c18:	4623      	mov	r3, r4
 8008c1a:	f7f8 f815 	bl	8000c48 <__aeabi_uldivmod>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	460c      	mov	r4, r1
 8008c22:	461a      	mov	r2, r3
 8008c24:	4ba5      	ldr	r3, [pc, #660]	; (8008ebc <UART_SetConfig+0x384>)
 8008c26:	fba3 2302 	umull	r2, r3, r3, r2
 8008c2a:	095b      	lsrs	r3, r3, #5
 8008c2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	461d      	mov	r5, r3
 8008c34:	f04f 0600 	mov.w	r6, #0
 8008c38:	46a9      	mov	r9, r5
 8008c3a:	46b2      	mov	sl, r6
 8008c3c:	eb19 0309 	adds.w	r3, r9, r9
 8008c40:	eb4a 040a 	adc.w	r4, sl, sl
 8008c44:	4699      	mov	r9, r3
 8008c46:	46a2      	mov	sl, r4
 8008c48:	eb19 0905 	adds.w	r9, r9, r5
 8008c4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c50:	f04f 0100 	mov.w	r1, #0
 8008c54:	f04f 0200 	mov.w	r2, #0
 8008c58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c64:	4689      	mov	r9, r1
 8008c66:	4692      	mov	sl, r2
 8008c68:	eb19 0005 	adds.w	r0, r9, r5
 8008c6c:	eb4a 0106 	adc.w	r1, sl, r6
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	461d      	mov	r5, r3
 8008c76:	f04f 0600 	mov.w	r6, #0
 8008c7a:	196b      	adds	r3, r5, r5
 8008c7c:	eb46 0406 	adc.w	r4, r6, r6
 8008c80:	461a      	mov	r2, r3
 8008c82:	4623      	mov	r3, r4
 8008c84:	f7f7 ffe0 	bl	8000c48 <__aeabi_uldivmod>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	4b8b      	ldr	r3, [pc, #556]	; (8008ebc <UART_SetConfig+0x384>)
 8008c90:	fba3 1302 	umull	r1, r3, r3, r2
 8008c94:	095b      	lsrs	r3, r3, #5
 8008c96:	2164      	movs	r1, #100	; 0x64
 8008c98:	fb01 f303 	mul.w	r3, r1, r3
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	3332      	adds	r3, #50	; 0x32
 8008ca2:	4a86      	ldr	r2, [pc, #536]	; (8008ebc <UART_SetConfig+0x384>)
 8008ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca8:	095b      	lsrs	r3, r3, #5
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cb0:	4498      	add	r8, r3
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	461d      	mov	r5, r3
 8008cb6:	f04f 0600 	mov.w	r6, #0
 8008cba:	46a9      	mov	r9, r5
 8008cbc:	46b2      	mov	sl, r6
 8008cbe:	eb19 0309 	adds.w	r3, r9, r9
 8008cc2:	eb4a 040a 	adc.w	r4, sl, sl
 8008cc6:	4699      	mov	r9, r3
 8008cc8:	46a2      	mov	sl, r4
 8008cca:	eb19 0905 	adds.w	r9, r9, r5
 8008cce:	eb4a 0a06 	adc.w	sl, sl, r6
 8008cd2:	f04f 0100 	mov.w	r1, #0
 8008cd6:	f04f 0200 	mov.w	r2, #0
 8008cda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ce2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ce6:	4689      	mov	r9, r1
 8008ce8:	4692      	mov	sl, r2
 8008cea:	eb19 0005 	adds.w	r0, r9, r5
 8008cee:	eb4a 0106 	adc.w	r1, sl, r6
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	461d      	mov	r5, r3
 8008cf8:	f04f 0600 	mov.w	r6, #0
 8008cfc:	196b      	adds	r3, r5, r5
 8008cfe:	eb46 0406 	adc.w	r4, r6, r6
 8008d02:	461a      	mov	r2, r3
 8008d04:	4623      	mov	r3, r4
 8008d06:	f7f7 ff9f 	bl	8000c48 <__aeabi_uldivmod>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	461a      	mov	r2, r3
 8008d10:	4b6a      	ldr	r3, [pc, #424]	; (8008ebc <UART_SetConfig+0x384>)
 8008d12:	fba3 1302 	umull	r1, r3, r3, r2
 8008d16:	095b      	lsrs	r3, r3, #5
 8008d18:	2164      	movs	r1, #100	; 0x64
 8008d1a:	fb01 f303 	mul.w	r3, r1, r3
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	00db      	lsls	r3, r3, #3
 8008d22:	3332      	adds	r3, #50	; 0x32
 8008d24:	4a65      	ldr	r2, [pc, #404]	; (8008ebc <UART_SetConfig+0x384>)
 8008d26:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2a:	095b      	lsrs	r3, r3, #5
 8008d2c:	f003 0207 	and.w	r2, r3, #7
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4442      	add	r2, r8
 8008d36:	609a      	str	r2, [r3, #8]
 8008d38:	e26f      	b.n	800921a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d3a:	f7fe fbf7 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 8008d3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	461d      	mov	r5, r3
 8008d44:	f04f 0600 	mov.w	r6, #0
 8008d48:	46a8      	mov	r8, r5
 8008d4a:	46b1      	mov	r9, r6
 8008d4c:	eb18 0308 	adds.w	r3, r8, r8
 8008d50:	eb49 0409 	adc.w	r4, r9, r9
 8008d54:	4698      	mov	r8, r3
 8008d56:	46a1      	mov	r9, r4
 8008d58:	eb18 0805 	adds.w	r8, r8, r5
 8008d5c:	eb49 0906 	adc.w	r9, r9, r6
 8008d60:	f04f 0100 	mov.w	r1, #0
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008d6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008d70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008d74:	4688      	mov	r8, r1
 8008d76:	4691      	mov	r9, r2
 8008d78:	eb18 0005 	adds.w	r0, r8, r5
 8008d7c:	eb49 0106 	adc.w	r1, r9, r6
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	461d      	mov	r5, r3
 8008d86:	f04f 0600 	mov.w	r6, #0
 8008d8a:	196b      	adds	r3, r5, r5
 8008d8c:	eb46 0406 	adc.w	r4, r6, r6
 8008d90:	461a      	mov	r2, r3
 8008d92:	4623      	mov	r3, r4
 8008d94:	f7f7 ff58 	bl	8000c48 <__aeabi_uldivmod>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	4b47      	ldr	r3, [pc, #284]	; (8008ebc <UART_SetConfig+0x384>)
 8008da0:	fba3 2302 	umull	r2, r3, r3, r2
 8008da4:	095b      	lsrs	r3, r3, #5
 8008da6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	461d      	mov	r5, r3
 8008dae:	f04f 0600 	mov.w	r6, #0
 8008db2:	46a9      	mov	r9, r5
 8008db4:	46b2      	mov	sl, r6
 8008db6:	eb19 0309 	adds.w	r3, r9, r9
 8008dba:	eb4a 040a 	adc.w	r4, sl, sl
 8008dbe:	4699      	mov	r9, r3
 8008dc0:	46a2      	mov	sl, r4
 8008dc2:	eb19 0905 	adds.w	r9, r9, r5
 8008dc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8008dca:	f04f 0100 	mov.w	r1, #0
 8008dce:	f04f 0200 	mov.w	r2, #0
 8008dd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008dd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008dde:	4689      	mov	r9, r1
 8008de0:	4692      	mov	sl, r2
 8008de2:	eb19 0005 	adds.w	r0, r9, r5
 8008de6:	eb4a 0106 	adc.w	r1, sl, r6
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	461d      	mov	r5, r3
 8008df0:	f04f 0600 	mov.w	r6, #0
 8008df4:	196b      	adds	r3, r5, r5
 8008df6:	eb46 0406 	adc.w	r4, r6, r6
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	4623      	mov	r3, r4
 8008dfe:	f7f7 ff23 	bl	8000c48 <__aeabi_uldivmod>
 8008e02:	4603      	mov	r3, r0
 8008e04:	460c      	mov	r4, r1
 8008e06:	461a      	mov	r2, r3
 8008e08:	4b2c      	ldr	r3, [pc, #176]	; (8008ebc <UART_SetConfig+0x384>)
 8008e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8008e0e:	095b      	lsrs	r3, r3, #5
 8008e10:	2164      	movs	r1, #100	; 0x64
 8008e12:	fb01 f303 	mul.w	r3, r1, r3
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	00db      	lsls	r3, r3, #3
 8008e1a:	3332      	adds	r3, #50	; 0x32
 8008e1c:	4a27      	ldr	r2, [pc, #156]	; (8008ebc <UART_SetConfig+0x384>)
 8008e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e22:	095b      	lsrs	r3, r3, #5
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e2a:	4498      	add	r8, r3
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	461d      	mov	r5, r3
 8008e30:	f04f 0600 	mov.w	r6, #0
 8008e34:	46a9      	mov	r9, r5
 8008e36:	46b2      	mov	sl, r6
 8008e38:	eb19 0309 	adds.w	r3, r9, r9
 8008e3c:	eb4a 040a 	adc.w	r4, sl, sl
 8008e40:	4699      	mov	r9, r3
 8008e42:	46a2      	mov	sl, r4
 8008e44:	eb19 0905 	adds.w	r9, r9, r5
 8008e48:	eb4a 0a06 	adc.w	sl, sl, r6
 8008e4c:	f04f 0100 	mov.w	r1, #0
 8008e50:	f04f 0200 	mov.w	r2, #0
 8008e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e60:	4689      	mov	r9, r1
 8008e62:	4692      	mov	sl, r2
 8008e64:	eb19 0005 	adds.w	r0, r9, r5
 8008e68:	eb4a 0106 	adc.w	r1, sl, r6
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	461d      	mov	r5, r3
 8008e72:	f04f 0600 	mov.w	r6, #0
 8008e76:	196b      	adds	r3, r5, r5
 8008e78:	eb46 0406 	adc.w	r4, r6, r6
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	4623      	mov	r3, r4
 8008e80:	f7f7 fee2 	bl	8000c48 <__aeabi_uldivmod>
 8008e84:	4603      	mov	r3, r0
 8008e86:	460c      	mov	r4, r1
 8008e88:	461a      	mov	r2, r3
 8008e8a:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <UART_SetConfig+0x384>)
 8008e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e90:	095b      	lsrs	r3, r3, #5
 8008e92:	2164      	movs	r1, #100	; 0x64
 8008e94:	fb01 f303 	mul.w	r3, r1, r3
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	3332      	adds	r3, #50	; 0x32
 8008e9e:	4a07      	ldr	r2, [pc, #28]	; (8008ebc <UART_SetConfig+0x384>)
 8008ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea4:	095b      	lsrs	r3, r3, #5
 8008ea6:	f003 0207 	and.w	r2, r3, #7
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4442      	add	r2, r8
 8008eb0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008eb2:	e1b2      	b.n	800921a <UART_SetConfig+0x6e2>
 8008eb4:	40011000 	.word	0x40011000
 8008eb8:	40011400 	.word	0x40011400
 8008ebc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4ad7      	ldr	r2, [pc, #860]	; (8009224 <UART_SetConfig+0x6ec>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d005      	beq.n	8008ed6 <UART_SetConfig+0x39e>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4ad6      	ldr	r2, [pc, #856]	; (8009228 <UART_SetConfig+0x6f0>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	f040 80d1 	bne.w	8009078 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ed6:	f7fe fb3d 	bl	8007554 <HAL_RCC_GetPCLK2Freq>
 8008eda:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	469a      	mov	sl, r3
 8008ee0:	f04f 0b00 	mov.w	fp, #0
 8008ee4:	46d0      	mov	r8, sl
 8008ee6:	46d9      	mov	r9, fp
 8008ee8:	eb18 0308 	adds.w	r3, r8, r8
 8008eec:	eb49 0409 	adc.w	r4, r9, r9
 8008ef0:	4698      	mov	r8, r3
 8008ef2:	46a1      	mov	r9, r4
 8008ef4:	eb18 080a 	adds.w	r8, r8, sl
 8008ef8:	eb49 090b 	adc.w	r9, r9, fp
 8008efc:	f04f 0100 	mov.w	r1, #0
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008f08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008f0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008f10:	4688      	mov	r8, r1
 8008f12:	4691      	mov	r9, r2
 8008f14:	eb1a 0508 	adds.w	r5, sl, r8
 8008f18:	eb4b 0609 	adc.w	r6, fp, r9
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	4619      	mov	r1, r3
 8008f22:	f04f 0200 	mov.w	r2, #0
 8008f26:	f04f 0300 	mov.w	r3, #0
 8008f2a:	f04f 0400 	mov.w	r4, #0
 8008f2e:	0094      	lsls	r4, r2, #2
 8008f30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f34:	008b      	lsls	r3, r1, #2
 8008f36:	461a      	mov	r2, r3
 8008f38:	4623      	mov	r3, r4
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	f7f7 fe83 	bl	8000c48 <__aeabi_uldivmod>
 8008f42:	4603      	mov	r3, r0
 8008f44:	460c      	mov	r4, r1
 8008f46:	461a      	mov	r2, r3
 8008f48:	4bb8      	ldr	r3, [pc, #736]	; (800922c <UART_SetConfig+0x6f4>)
 8008f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f4e:	095b      	lsrs	r3, r3, #5
 8008f50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	469b      	mov	fp, r3
 8008f58:	f04f 0c00 	mov.w	ip, #0
 8008f5c:	46d9      	mov	r9, fp
 8008f5e:	46e2      	mov	sl, ip
 8008f60:	eb19 0309 	adds.w	r3, r9, r9
 8008f64:	eb4a 040a 	adc.w	r4, sl, sl
 8008f68:	4699      	mov	r9, r3
 8008f6a:	46a2      	mov	sl, r4
 8008f6c:	eb19 090b 	adds.w	r9, r9, fp
 8008f70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f74:	f04f 0100 	mov.w	r1, #0
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f88:	4689      	mov	r9, r1
 8008f8a:	4692      	mov	sl, r2
 8008f8c:	eb1b 0509 	adds.w	r5, fp, r9
 8008f90:	eb4c 060a 	adc.w	r6, ip, sl
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	f04f 0200 	mov.w	r2, #0
 8008f9e:	f04f 0300 	mov.w	r3, #0
 8008fa2:	f04f 0400 	mov.w	r4, #0
 8008fa6:	0094      	lsls	r4, r2, #2
 8008fa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008fac:	008b      	lsls	r3, r1, #2
 8008fae:	461a      	mov	r2, r3
 8008fb0:	4623      	mov	r3, r4
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	f7f7 fe47 	bl	8000c48 <__aeabi_uldivmod>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	4b9a      	ldr	r3, [pc, #616]	; (800922c <UART_SetConfig+0x6f4>)
 8008fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8008fc6:	095b      	lsrs	r3, r3, #5
 8008fc8:	2164      	movs	r1, #100	; 0x64
 8008fca:	fb01 f303 	mul.w	r3, r1, r3
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	011b      	lsls	r3, r3, #4
 8008fd2:	3332      	adds	r3, #50	; 0x32
 8008fd4:	4a95      	ldr	r2, [pc, #596]	; (800922c <UART_SetConfig+0x6f4>)
 8008fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fda:	095b      	lsrs	r3, r3, #5
 8008fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fe0:	4498      	add	r8, r3
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	469b      	mov	fp, r3
 8008fe6:	f04f 0c00 	mov.w	ip, #0
 8008fea:	46d9      	mov	r9, fp
 8008fec:	46e2      	mov	sl, ip
 8008fee:	eb19 0309 	adds.w	r3, r9, r9
 8008ff2:	eb4a 040a 	adc.w	r4, sl, sl
 8008ff6:	4699      	mov	r9, r3
 8008ff8:	46a2      	mov	sl, r4
 8008ffa:	eb19 090b 	adds.w	r9, r9, fp
 8008ffe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009002:	f04f 0100 	mov.w	r1, #0
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800900e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009012:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009016:	4689      	mov	r9, r1
 8009018:	4692      	mov	sl, r2
 800901a:	eb1b 0509 	adds.w	r5, fp, r9
 800901e:	eb4c 060a 	adc.w	r6, ip, sl
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	4619      	mov	r1, r3
 8009028:	f04f 0200 	mov.w	r2, #0
 800902c:	f04f 0300 	mov.w	r3, #0
 8009030:	f04f 0400 	mov.w	r4, #0
 8009034:	0094      	lsls	r4, r2, #2
 8009036:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800903a:	008b      	lsls	r3, r1, #2
 800903c:	461a      	mov	r2, r3
 800903e:	4623      	mov	r3, r4
 8009040:	4628      	mov	r0, r5
 8009042:	4631      	mov	r1, r6
 8009044:	f7f7 fe00 	bl	8000c48 <__aeabi_uldivmod>
 8009048:	4603      	mov	r3, r0
 800904a:	460c      	mov	r4, r1
 800904c:	461a      	mov	r2, r3
 800904e:	4b77      	ldr	r3, [pc, #476]	; (800922c <UART_SetConfig+0x6f4>)
 8009050:	fba3 1302 	umull	r1, r3, r3, r2
 8009054:	095b      	lsrs	r3, r3, #5
 8009056:	2164      	movs	r1, #100	; 0x64
 8009058:	fb01 f303 	mul.w	r3, r1, r3
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	011b      	lsls	r3, r3, #4
 8009060:	3332      	adds	r3, #50	; 0x32
 8009062:	4a72      	ldr	r2, [pc, #456]	; (800922c <UART_SetConfig+0x6f4>)
 8009064:	fba2 2303 	umull	r2, r3, r2, r3
 8009068:	095b      	lsrs	r3, r3, #5
 800906a:	f003 020f 	and.w	r2, r3, #15
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4442      	add	r2, r8
 8009074:	609a      	str	r2, [r3, #8]
 8009076:	e0d0      	b.n	800921a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009078:	f7fe fa58 	bl	800752c <HAL_RCC_GetPCLK1Freq>
 800907c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	469a      	mov	sl, r3
 8009082:	f04f 0b00 	mov.w	fp, #0
 8009086:	46d0      	mov	r8, sl
 8009088:	46d9      	mov	r9, fp
 800908a:	eb18 0308 	adds.w	r3, r8, r8
 800908e:	eb49 0409 	adc.w	r4, r9, r9
 8009092:	4698      	mov	r8, r3
 8009094:	46a1      	mov	r9, r4
 8009096:	eb18 080a 	adds.w	r8, r8, sl
 800909a:	eb49 090b 	adc.w	r9, r9, fp
 800909e:	f04f 0100 	mov.w	r1, #0
 80090a2:	f04f 0200 	mov.w	r2, #0
 80090a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80090aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80090ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80090b2:	4688      	mov	r8, r1
 80090b4:	4691      	mov	r9, r2
 80090b6:	eb1a 0508 	adds.w	r5, sl, r8
 80090ba:	eb4b 0609 	adc.w	r6, fp, r9
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	4619      	mov	r1, r3
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	f04f 0300 	mov.w	r3, #0
 80090cc:	f04f 0400 	mov.w	r4, #0
 80090d0:	0094      	lsls	r4, r2, #2
 80090d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80090d6:	008b      	lsls	r3, r1, #2
 80090d8:	461a      	mov	r2, r3
 80090da:	4623      	mov	r3, r4
 80090dc:	4628      	mov	r0, r5
 80090de:	4631      	mov	r1, r6
 80090e0:	f7f7 fdb2 	bl	8000c48 <__aeabi_uldivmod>
 80090e4:	4603      	mov	r3, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	461a      	mov	r2, r3
 80090ea:	4b50      	ldr	r3, [pc, #320]	; (800922c <UART_SetConfig+0x6f4>)
 80090ec:	fba3 2302 	umull	r2, r3, r3, r2
 80090f0:	095b      	lsrs	r3, r3, #5
 80090f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	469b      	mov	fp, r3
 80090fa:	f04f 0c00 	mov.w	ip, #0
 80090fe:	46d9      	mov	r9, fp
 8009100:	46e2      	mov	sl, ip
 8009102:	eb19 0309 	adds.w	r3, r9, r9
 8009106:	eb4a 040a 	adc.w	r4, sl, sl
 800910a:	4699      	mov	r9, r3
 800910c:	46a2      	mov	sl, r4
 800910e:	eb19 090b 	adds.w	r9, r9, fp
 8009112:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009116:	f04f 0100 	mov.w	r1, #0
 800911a:	f04f 0200 	mov.w	r2, #0
 800911e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009122:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009126:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800912a:	4689      	mov	r9, r1
 800912c:	4692      	mov	sl, r2
 800912e:	eb1b 0509 	adds.w	r5, fp, r9
 8009132:	eb4c 060a 	adc.w	r6, ip, sl
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	4619      	mov	r1, r3
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	f04f 0300 	mov.w	r3, #0
 8009144:	f04f 0400 	mov.w	r4, #0
 8009148:	0094      	lsls	r4, r2, #2
 800914a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800914e:	008b      	lsls	r3, r1, #2
 8009150:	461a      	mov	r2, r3
 8009152:	4623      	mov	r3, r4
 8009154:	4628      	mov	r0, r5
 8009156:	4631      	mov	r1, r6
 8009158:	f7f7 fd76 	bl	8000c48 <__aeabi_uldivmod>
 800915c:	4603      	mov	r3, r0
 800915e:	460c      	mov	r4, r1
 8009160:	461a      	mov	r2, r3
 8009162:	4b32      	ldr	r3, [pc, #200]	; (800922c <UART_SetConfig+0x6f4>)
 8009164:	fba3 1302 	umull	r1, r3, r3, r2
 8009168:	095b      	lsrs	r3, r3, #5
 800916a:	2164      	movs	r1, #100	; 0x64
 800916c:	fb01 f303 	mul.w	r3, r1, r3
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	011b      	lsls	r3, r3, #4
 8009174:	3332      	adds	r3, #50	; 0x32
 8009176:	4a2d      	ldr	r2, [pc, #180]	; (800922c <UART_SetConfig+0x6f4>)
 8009178:	fba2 2303 	umull	r2, r3, r2, r3
 800917c:	095b      	lsrs	r3, r3, #5
 800917e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009182:	4498      	add	r8, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	469b      	mov	fp, r3
 8009188:	f04f 0c00 	mov.w	ip, #0
 800918c:	46d9      	mov	r9, fp
 800918e:	46e2      	mov	sl, ip
 8009190:	eb19 0309 	adds.w	r3, r9, r9
 8009194:	eb4a 040a 	adc.w	r4, sl, sl
 8009198:	4699      	mov	r9, r3
 800919a:	46a2      	mov	sl, r4
 800919c:	eb19 090b 	adds.w	r9, r9, fp
 80091a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80091a4:	f04f 0100 	mov.w	r1, #0
 80091a8:	f04f 0200 	mov.w	r2, #0
 80091ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80091b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80091b8:	4689      	mov	r9, r1
 80091ba:	4692      	mov	sl, r2
 80091bc:	eb1b 0509 	adds.w	r5, fp, r9
 80091c0:	eb4c 060a 	adc.w	r6, ip, sl
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	4619      	mov	r1, r3
 80091ca:	f04f 0200 	mov.w	r2, #0
 80091ce:	f04f 0300 	mov.w	r3, #0
 80091d2:	f04f 0400 	mov.w	r4, #0
 80091d6:	0094      	lsls	r4, r2, #2
 80091d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80091dc:	008b      	lsls	r3, r1, #2
 80091de:	461a      	mov	r2, r3
 80091e0:	4623      	mov	r3, r4
 80091e2:	4628      	mov	r0, r5
 80091e4:	4631      	mov	r1, r6
 80091e6:	f7f7 fd2f 	bl	8000c48 <__aeabi_uldivmod>
 80091ea:	4603      	mov	r3, r0
 80091ec:	460c      	mov	r4, r1
 80091ee:	461a      	mov	r2, r3
 80091f0:	4b0e      	ldr	r3, [pc, #56]	; (800922c <UART_SetConfig+0x6f4>)
 80091f2:	fba3 1302 	umull	r1, r3, r3, r2
 80091f6:	095b      	lsrs	r3, r3, #5
 80091f8:	2164      	movs	r1, #100	; 0x64
 80091fa:	fb01 f303 	mul.w	r3, r1, r3
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	011b      	lsls	r3, r3, #4
 8009202:	3332      	adds	r3, #50	; 0x32
 8009204:	4a09      	ldr	r2, [pc, #36]	; (800922c <UART_SetConfig+0x6f4>)
 8009206:	fba2 2303 	umull	r2, r3, r2, r3
 800920a:	095b      	lsrs	r3, r3, #5
 800920c:	f003 020f 	and.w	r2, r3, #15
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4442      	add	r2, r8
 8009216:	609a      	str	r2, [r3, #8]
}
 8009218:	e7ff      	b.n	800921a <UART_SetConfig+0x6e2>
 800921a:	bf00      	nop
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009224:	40011000 	.word	0x40011000
 8009228:	40011400 	.word	0x40011400
 800922c:	51eb851f 	.word	0x51eb851f

08009230 <LCD_Write8>:
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80
#if defined(USE_LOOKUP)
	GPIOA->BSRR = lookup_gpioa[data];
 8009230:	4a0f      	ldr	r2, [pc, #60]	; (8009270 <LCD_Write8+0x40>)
 8009232:	4b10      	ldr	r3, [pc, #64]	; (8009274 <LCD_Write8+0x44>)
 8009234:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
	GPIOB->BSRR = lookup_gpiob[data];
 8009238:	490f      	ldr	r1, [pc, #60]	; (8009278 <LCD_Write8+0x48>)
static inline void LCD_Write8(uint8_t data) {
 800923a:	b410      	push	{r4}
	GPIOA->BSRR = lookup_gpioa[data];
 800923c:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = lookup_gpiob[data];
 800923e:	4a0f      	ldr	r2, [pc, #60]	; (800927c <LCD_Write8+0x4c>)
 8009240:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
	GPIOC->BSRR = lookup_gpioc[data];
 8009244:	490e      	ldr	r1, [pc, #56]	; (8009280 <LCD_Write8+0x50>)
	GPIOB->BSRR = lookup_gpiob[data];
 8009246:	6194      	str	r4, [r2, #24]
	GPIOC->BSRR = lookup_gpioc[data];
 8009248:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800924c:	f8c2 1418 	str.w	r1, [r2, #1048]	; 0x418
#else
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9) | ((data & 0x04) << 8) | ((data & 0x80) << 1);
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1) | ((data & 0x20) >> 1) | ((data & 0x40) << 4);
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
#endif
	LCD_WR_STROBE();
 8009250:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009254:	619a      	str	r2, [r3, #24]
 8009256:	2201      	movs	r2, #1
 8009258:	4610      	mov	r0, r2
 800925a:	3801      	subs	r0, #1
 800925c:	d8fd      	bhi.n	800925a <LCD_Write8+0x2a>
 800925e:	2102      	movs	r1, #2
 8009260:	6199      	str	r1, [r3, #24]
 8009262:	4610      	mov	r0, r2
 8009264:	3801      	subs	r0, #1
 8009266:	d8fd      	bhi.n	8009264 <LCD_Write8+0x34>
}
 8009268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	20000270 	.word	0x20000270
 8009274:	40020000 	.word	0x40020000
 8009278:	20000670 	.word	0x20000670
 800927c:	40020400 	.word	0x40020400
 8009280:	20000a70 	.word	0x20000a70

08009284 <LCD_Write16Register16>:
 * \param a		Register
 * \param d		Data
 *
 * \return void
 */
static inline void LCD_Write16Register16(uint16_t a, uint16_t d) {
 8009284:	b570      	push	{r4, r5, r6, lr}
	LCD_CD_COMMAND();
 8009286:	4d0b      	ldr	r5, [pc, #44]	; (80092b4 <LCD_Write16Register16+0x30>)
 8009288:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800928c:	61ab      	str	r3, [r5, #24]
static inline void LCD_Write16Register16(uint16_t a, uint16_t d) {
 800928e:	4606      	mov	r6, r0
	LCD_Write8(a >> 8);
 8009290:	0a00      	lsrs	r0, r0, #8
static inline void LCD_Write16Register16(uint16_t a, uint16_t d) {
 8009292:	460c      	mov	r4, r1
	LCD_Write8(a >> 8);
 8009294:	f7ff ffcc 	bl	8009230 <LCD_Write8>
	LCD_Write8(a);
 8009298:	b2f0      	uxtb	r0, r6
 800929a:	f7ff ffc9 	bl	8009230 <LCD_Write8>
	LCD_CD_DATA();
 800929e:	2310      	movs	r3, #16
	LCD_Write8(d >> 8);
 80092a0:	0a20      	lsrs	r0, r4, #8
	LCD_CD_DATA();
 80092a2:	61ab      	str	r3, [r5, #24]
	LCD_Write8(d >> 8);
 80092a4:	f7ff ffc4 	bl	8009230 <LCD_Write8>
	LCD_Write8(d);
 80092a8:	b2e0      	uxtb	r0, r4
}
 80092aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_Write8(d);
 80092ae:	f7ff bfbf 	b.w	8009230 <LCD_Write8>
 80092b2:	bf00      	nop
 80092b4:	40020000 	.word	0x40020000

080092b8 <LCD_GPIO_Init>:
	// GPIOA, GPIO_PIN_4  -> CD
	// GPIOC, GPIO_PIN_1  -> RST
	// GPIOA, GPIO_PIN_0  -> RD
	// GPIOA, GPIO_PIN_1  -> WR

	if (!(mode == GPIO_MODE_OUTPUT_PP || mode == GPIO_MODE_INPUT)) return;
 80092b8:	2801      	cmp	r0, #1
 80092ba:	d900      	bls.n	80092be <LCD_GPIO_Init+0x6>
 80092bc:	4770      	bx	lr
static void LCD_GPIO_Init(uint32_t mode) {
 80092be:	b570      	push	{r4, r5, r6, lr}
 80092c0:	b088      	sub	sp, #32

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 80092c2:	2500      	movs	r5, #0
 80092c4:	4b31      	ldr	r3, [pc, #196]	; (800938c <LCD_GPIO_Init+0xd4>)
 80092c6:	9500      	str	r5, [sp, #0]
 80092c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092ca:	f042 0201 	orr.w	r2, r2, #1
 80092ce:	631a      	str	r2, [r3, #48]	; 0x30
 80092d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092d2:	f002 0201 	and.w	r2, r2, #1
 80092d6:	9200      	str	r2, [sp, #0]
 80092d8:	9a00      	ldr	r2, [sp, #0]
	__GPIOB_CLK_ENABLE();
 80092da:	9501      	str	r5, [sp, #4]
 80092dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092de:	f042 0202 	orr.w	r2, r2, #2
 80092e2:	631a      	str	r2, [r3, #48]	; 0x30
 80092e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092e6:	f002 0202 	and.w	r2, r2, #2
 80092ea:	9201      	str	r2, [sp, #4]
 80092ec:	9a01      	ldr	r2, [sp, #4]
	__GPIOC_CLK_ENABLE();
 80092ee:	9502      	str	r5, [sp, #8]
 80092f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092f2:	f042 0204 	orr.w	r2, r2, #4
 80092f6:	631a      	str	r2, [r3, #48]	; 0x30
 80092f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30

	/*Configure GPIO data pins : PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = mode;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092fa:	9505      	str	r5, [sp, #20]
	__GPIOC_CLK_ENABLE();
 80092fc:	f003 0304 	and.w	r3, r3, #4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009300:	2603      	movs	r6, #3
 8009302:	4604      	mov	r4, r0
	__GPIOC_CLK_ENABLE();
 8009304:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009306:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8009308:	f44f 63e0 	mov.w	r3, #1792	; 0x700
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800930c:	4820      	ldr	r0, [pc, #128]	; (8009390 <LCD_GPIO_Init+0xd8>)
	__GPIOC_CLK_ENABLE();
 800930e:	9a02      	ldr	r2, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009310:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8009312:	e9cd 3403 	strd	r3, r4, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009316:	f7fc fd3d 	bl	8005d94 <HAL_GPIO_Init>
	/*Configure GPIO data pins : PB3 PB4 PB5 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = mode;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800931a:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
 800931c:	f44f 6387 	mov.w	r3, #1080	; 0x438
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009320:	481c      	ldr	r0, [pc, #112]	; (8009394 <LCD_GPIO_Init+0xdc>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10;
 8009322:	e9cd 3403 	strd	r3, r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009326:	e9cd 5605 	strd	r5, r6, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800932a:	f7fc fd33 	bl	8005d94 <HAL_GPIO_Init>
	/*Configure GPIO data pins : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
	GPIO_InitStruct.Mode = mode;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800932e:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009330:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009332:	4819      	ldr	r0, [pc, #100]	; (8009398 <LCD_GPIO_Init+0xe0>)
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009334:	e9cd 3403 	strd	r3, r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009338:	e9cd 5605 	strd	r5, r6, [sp, #20]

	/*Configure GPIO control pins : PA0 PA1 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800933c:	2401      	movs	r4, #1
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800933e:	f7fc fd29 	bl	8005d94 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 8009342:	2313      	movs	r3, #19
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009344:	a903      	add	r1, sp, #12
 8009346:	4812      	ldr	r0, [pc, #72]	; (8009390 <LCD_GPIO_Init+0xd8>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009348:	e9cd 3403 	strd	r3, r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800934c:	e9cd 5605 	strd	r5, r6, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009350:	f7fc fd20 	bl	8005d94 <HAL_GPIO_Init>
	/*Configure GPIO control pins : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009354:	a903      	add	r1, sp, #12
 8009356:	480f      	ldr	r0, [pc, #60]	; (8009394 <LCD_GPIO_Init+0xdc>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009358:	e9cd 4403 	strd	r4, r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800935c:	e9cd 5605 	strd	r5, r6, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009360:	f7fc fd18 	bl	8005d94 <HAL_GPIO_Init>
	/*Configure GPIO control pins : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009364:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009366:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009368:	480b      	ldr	r0, [pc, #44]	; (8009398 <LCD_GPIO_Init+0xe0>)
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800936a:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800936c:	e9cd 4504 	strd	r4, r5, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009370:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009372:	f7fc fd0f 	bl	8005d94 <HAL_GPIO_Init>

	/*Configure GPIO test pins : PC4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009376:	2310      	movs	r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009378:	a903      	add	r1, sp, #12
 800937a:	4807      	ldr	r0, [pc, #28]	; (8009398 <LCD_GPIO_Init+0xe0>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800937c:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800937e:	e9cd 4504 	strd	r4, r5, [sp, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009382:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009384:	f7fc fd06 	bl	8005d94 <HAL_GPIO_Init>
}
 8009388:	b008      	add	sp, #32
 800938a:	bd70      	pop	{r4, r5, r6, pc}
 800938c:	40023800 	.word	0x40023800
 8009390:	40020000 	.word	0x40020000
 8009394:	40020400 	.word	0x40020400
 8009398:	40020800 	.word	0x40020800

0800939c <LCD_Init>:
 *
 * \param
 *
 * \return void
 */
void LCD_Init(void) {
 800939c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	m_width = TFTWIDTH;
 80093a0:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8009530 <LCD_Init+0x194>
	m_height = TFTHEIGHT;
 80093a4:	4e58      	ldr	r6, [pc, #352]	; (8009508 <LCD_Init+0x16c>)
	m_rotation = 0;
	m_cursor_y = m_cursor_x = 0;
 80093a6:	4b59      	ldr	r3, [pc, #356]	; (800950c <LCD_Init+0x170>)
	m_font = 0;
 80093a8:	4959      	ldr	r1, [pc, #356]	; (8009510 <LCD_Init+0x174>)
	m_textcolor = m_textbgcolor = 0xFFFF;
 80093aa:	485a      	ldr	r0, [pc, #360]	; (8009514 <LCD_Init+0x178>)
	m_rotation = 0;
 80093ac:	4f5a      	ldr	r7, [pc, #360]	; (8009518 <LCD_Init+0x17c>)
	m_cursor_y = m_cursor_x = 0;
 80093ae:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009534 <LCD_Init+0x198>
	m_textcolor = m_textbgcolor = 0xFFFF;
 80093b2:	4d5a      	ldr	r5, [pc, #360]	; (800951c <LCD_Init+0x180>)
	m_wrap = 1;
 80093b4:	4a5a      	ldr	r2, [pc, #360]	; (8009520 <LCD_Init+0x184>)
 80093b6:	f8df c180 	ldr.w	ip, [pc, #384]	; 8009538 <LCD_Init+0x19c>
	m_width = TFTWIDTH;
 80093ba:	24f0      	movs	r4, #240	; 0xf0
 80093bc:	f8aa 4000 	strh.w	r4, [sl]
	m_height = TFTHEIGHT;
 80093c0:	f44f 74a0 	mov.w	r4, #320	; 0x140
 80093c4:	8034      	strh	r4, [r6, #0]
	m_rotation = 0;
 80093c6:	2400      	movs	r4, #0
	m_cursor_y = m_cursor_x = 0;
 80093c8:	801c      	strh	r4, [r3, #0]
	m_font = 0;
 80093ca:	700c      	strb	r4, [r1, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 80093cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	m_wrap = 1;
 80093d0:	2101      	movs	r1, #1
	m_textcolor = m_textbgcolor = 0xFFFF;
 80093d2:	8003      	strh	r3, [r0, #0]
	m_wrap = 1;
 80093d4:	7011      	strb	r1, [r2, #0]
	m_rotation = 0;
 80093d6:	703c      	strb	r4, [r7, #0]
	m_cursor_y = m_cursor_x = 0;
 80093d8:	f8ae 4000 	strh.w	r4, [lr]
	m_textcolor = m_textbgcolor = 0xFFFF;
 80093dc:	802b      	strh	r3, [r5, #0]
 80093de:	4951      	ldr	r1, [pc, #324]	; (8009524 <LCD_Init+0x188>)
 80093e0:	4851      	ldr	r0, [pc, #324]	; (8009528 <LCD_Init+0x18c>)
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80
	for (uint32_t data = 0; data < 256; data++) {
		lookup_gpioa[data] =	((data & 0x01) ? GPIO_PIN_9  : (GPIO_PIN_9  << 16)) |
 80093e2:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80093e6:	e006      	b.n	80093f6 <LCD_Init+0x5a>
 80093e8:	f014 0f01 	tst.w	r4, #1
 80093ec:	bf0c      	ite	eq
 80093ee:	f04f 7800 	moveq.w	r8, #33554432	; 0x2000000
 80093f2:	f44f 7800 	movne.w	r8, #512	; 0x200
								((data & 0x04) ? GPIO_PIN_10 : (GPIO_PIN_10 << 16)) |
 80093f6:	f014 0f04 	tst.w	r4, #4
 80093fa:	bf0c      	ite	eq
 80093fc:	f04f 6280 	moveq.w	r2, #67108864	; 0x4000000
 8009400:	f44f 6280 	movne.w	r2, #1024	; 0x400
								((data & 0x80) ? GPIO_PIN_8  : (GPIO_PIN_8  << 16));
 8009404:	f014 0f80 	tst.w	r4, #128	; 0x80
 8009408:	bf0c      	ite	eq
 800940a:	f04f 7980 	moveq.w	r9, #16777216	; 0x1000000
 800940e:	f44f 7980 	movne.w	r9, #256	; 0x100

		lookup_gpiob[data] =	((data & 0x08) ? GPIO_PIN_3  : (GPIO_PIN_3  << 16)) |
 8009412:	f014 0f08 	tst.w	r4, #8
 8009416:	bf0c      	ite	eq
 8009418:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 800941c:	2308      	movne	r3, #8
								((data & 0x10) ? GPIO_PIN_5  : (GPIO_PIN_5  << 16)) |
 800941e:	f014 0f10 	tst.w	r4, #16
 8009422:	bf0c      	ite	eq
 8009424:	f44f 1e00 	moveq.w	lr, #2097152	; 0x200000
 8009428:	f04f 0e20 	movne.w	lr, #32
								((data & 0x20) ? GPIO_PIN_4  : (GPIO_PIN_4  << 16)) |
 800942c:	f014 0f20 	tst.w	r4, #32
		lookup_gpiob[data] =	((data & 0x08) ? GPIO_PIN_3  : (GPIO_PIN_3  << 16)) |
 8009430:	ea43 030e 	orr.w	r3, r3, lr
								((data & 0x20) ? GPIO_PIN_4  : (GPIO_PIN_4  << 16)) |
 8009434:	bf0c      	ite	eq
 8009436:	f44f 1e80 	moveq.w	lr, #1048576	; 0x100000
 800943a:	f04f 0e10 	movne.w	lr, #16
								((data & 0x40) ? GPIO_PIN_10 : (GPIO_PIN_10 << 16));
 800943e:	f014 0f40 	tst.w	r4, #64	; 0x40
								((data & 0x10) ? GPIO_PIN_5  : (GPIO_PIN_5  << 16)) |
 8009442:	ea43 030e 	orr.w	r3, r3, lr
								((data & 0x04) ? GPIO_PIN_10 : (GPIO_PIN_10 << 16)) |
 8009446:	ea42 0209 	orr.w	r2, r2, r9
								((data & 0x40) ? GPIO_PIN_10 : (GPIO_PIN_10 << 16));
 800944a:	bf0c      	ite	eq
 800944c:	f04f 6e80 	moveq.w	lr, #67108864	; 0x4000000
 8009450:	f44f 6e80 	movne.w	lr, #1024	; 0x400

		lookup_gpioc[data] =	((data & 0x02) ? GPIO_PIN_7  : (GPIO_PIN_7  << 16));
 8009454:	f014 0f02 	tst.w	r4, #2
	for (uint32_t data = 0; data < 256; data++) {
 8009458:	f104 0401 	add.w	r4, r4, #1
		lookup_gpioc[data] =	((data & 0x02) ? GPIO_PIN_7  : (GPIO_PIN_7  << 16));
 800945c:	bf0c      	ite	eq
 800945e:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
 8009462:	2580      	movne	r5, #128	; 0x80
								((data & 0x04) ? GPIO_PIN_10 : (GPIO_PIN_10 << 16)) |
 8009464:	ea42 0208 	orr.w	r2, r2, r8
								((data & 0x20) ? GPIO_PIN_4  : (GPIO_PIN_4  << 16)) |
 8009468:	ea43 030e 	orr.w	r3, r3, lr
	for (uint32_t data = 0; data < 256; data++) {
 800946c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
		lookup_gpioa[data] =	((data & 0x01) ? GPIO_PIN_9  : (GPIO_PIN_9  << 16)) |
 8009470:	f84c 2f04 	str.w	r2, [ip, #4]!
		lookup_gpiob[data] =	((data & 0x08) ? GPIO_PIN_3  : (GPIO_PIN_3  << 16)) |
 8009474:	f840 3f04 	str.w	r3, [r0, #4]!
		lookup_gpioc[data] =	((data & 0x02) ? GPIO_PIN_7  : (GPIO_PIN_7  << 16));
 8009478:	f841 5f04 	str.w	r5, [r1, #4]!
	for (uint32_t data = 0; data < 256; data++) {
 800947c:	d1b4      	bne.n	80093e8 <LCD_Init+0x4c>
	}
#endif

	LCD_GPIO_Init(GPIO_MODE_OUTPUT_PP);
 800947e:	2001      	movs	r0, #1
 8009480:	f7ff ff1a 	bl	80092b8 <LCD_GPIO_Init>

	LCD_Reset();
 8009484:	f000 f916 	bl	80096b4 <LCD_Reset>
	HAL_Delay(50);
 8009488:	2032      	movs	r0, #50	; 0x32
 800948a:	f7fc f811 	bl	80054b0 <HAL_Delay>
 800948e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800953c <LCD_Init+0x1a0>

	LCD_CS_ACTIVE();
 8009492:	4b26      	ldr	r3, [pc, #152]	; (800952c <LCD_Init+0x190>)
 8009494:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009498:	619a      	str	r2, [r3, #24]
 800949a:	f508 798e 	add.w	r9, r8, #284	; 0x11c
 800949e:	2001      	movs	r0, #1
 80094a0:	e009      	b.n	80094b6 <LCD_Init+0x11a>
 80094a2:	f108 0804 	add.w	r8, r8, #4
		a = ST7781_regValues[i++];
		d = ST7781_regValues[i++];
		if (a == TFTLCD_DELAY) {
			HAL_Delay(d);
		} else {
			LCD_Write16Register16(a, d);
 80094a6:	f7ff feed 	bl	8009284 <LCD_Write16Register16>
	while (i < sizeof(ST7781_regValues) / sizeof(ST7781_regValues[0])) {
 80094aa:	45c1      	cmp	r9, r8
 80094ac:	d00d      	beq.n	80094ca <LCD_Init+0x12e>
 80094ae:	f838 0c04 	ldrh.w	r0, [r8, #-4]
 80094b2:	f838 4c02 	ldrh.w	r4, [r8, #-2]
		if (a == TFTLCD_DELAY) {
 80094b6:	28ff      	cmp	r0, #255	; 0xff
			LCD_Write16Register16(a, d);
 80094b8:	4621      	mov	r1, r4
		if (a == TFTLCD_DELAY) {
 80094ba:	d1f2      	bne.n	80094a2 <LCD_Init+0x106>
			HAL_Delay(d);
 80094bc:	4620      	mov	r0, r4
 80094be:	f108 0804 	add.w	r8, r8, #4
 80094c2:	f7fb fff5 	bl	80054b0 <HAL_Delay>
	while (i < sizeof(ST7781_regValues) / sizeof(ST7781_regValues[0])) {
 80094c6:	45c1      	cmp	r9, r8
 80094c8:	d1f1      	bne.n	80094ae <LCD_Init+0x112>
		}
	}
	LCD_SetRotation(m_rotation);
 80094ca:	7838      	ldrb	r0, [r7, #0]
 80094cc:	f000 f98c 	bl	80097e8 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80094d0:	8833      	ldrh	r3, [r6, #0]
 80094d2:	f8ba 2000 	ldrh.w	r2, [sl]
 80094d6:	2100      	movs	r1, #0
 80094d8:	3b01      	subs	r3, #1
 80094da:	3a01      	subs	r2, #1
 80094dc:	4608      	mov	r0, r1
 80094de:	b29b      	uxth	r3, r3
 80094e0:	b292      	uxth	r2, r2
 80094e2:	f000 f925 	bl	8009730 <LCD_SetAddrWindow>
	}
	LCD_SetRotation(m_rotation);
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif

	LCD_CS_IDLE();
 80094e6:	4b11      	ldr	r3, [pc, #68]	; (800952c <LCD_Init+0x190>)
 80094e8:	2201      	movs	r2, #1
 80094ea:	619a      	str	r2, [r3, #24]
	LCD_FillScreen(BLACK);
 80094ec:	2000      	movs	r0, #0
 80094ee:	f000 f8b3 	bl	8009658 <LCD_FillScreen>
	LCD_SetTextSize(0);
 80094f2:	2000      	movs	r0, #0
 80094f4:	f000 fb38 	bl	8009b68 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 80094f8:	2100      	movs	r1, #0
 80094fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80094fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	LCD_SetTextColor(WHITE, BLACK);
 8009502:	f000 bb37 	b.w	8009b74 <LCD_SetTextColor>
 8009506:	bf00      	nop
 8009508:	20000262 	.word	0x20000262
 800950c:	20000266 	.word	0x20000266
 8009510:	2000026c 	.word	0x2000026c
 8009514:	20000268 	.word	0x20000268
 8009518:	2000026d 	.word	0x2000026d
 800951c:	2000026a 	.word	0x2000026a
 8009520:	2000026e 	.word	0x2000026e
 8009524:	20000a6c 	.word	0x20000a6c
 8009528:	2000066c 	.word	0x2000066c
 800952c:	40020400 	.word	0x40020400
 8009530:	20000260 	.word	0x20000260
 8009534:	20000264 	.word	0x20000264
 8009538:	2000026c 	.word	0x2000026c
 800953c:	08014f9c 	.word	0x08014f9c

08009540 <LCD_DrawPixel>:
 *
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
	// Clip
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 8009540:	2800      	cmp	r0, #0
 8009542:	db2a      	blt.n	800959a <LCD_DrawPixel+0x5a>
 8009544:	2900      	cmp	r1, #0
 8009546:	db28      	blt.n	800959a <LCD_DrawPixel+0x5a>
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8009548:	b538      	push	{r3, r4, r5, lr}
	if ((x < 0) || (y < 0) || (x >= m_width) || (y >= m_height)) return;
 800954a:	4b1e      	ldr	r3, [pc, #120]	; (80095c4 <LCD_DrawPixel+0x84>)
 800954c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009550:	4283      	cmp	r3, r0
 8009552:	dd21      	ble.n	8009598 <LCD_DrawPixel+0x58>
 8009554:	4b1c      	ldr	r3, [pc, #112]	; (80095c8 <LCD_DrawPixel+0x88>)
 8009556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800955a:	428b      	cmp	r3, r1
 800955c:	dd1c      	ble.n	8009598 <LCD_DrawPixel+0x58>

	LCD_CS_ACTIVE();
 800955e:	4c1b      	ldr	r4, [pc, #108]	; (80095cc <LCD_DrawPixel+0x8c>)

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154) || defined(ST7781)
	int16_t t;
	switch (m_rotation) {
 8009560:	4b1b      	ldr	r3, [pc, #108]	; (80095d0 <LCD_DrawPixel+0x90>)
	LCD_CS_ACTIVE();
 8009562:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8009566:	61a5      	str	r5, [r4, #24]
	switch (m_rotation) {
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b02      	cmp	r3, #2
 800956c:	b28c      	uxth	r4, r1
 800956e:	b281      	uxth	r1, r0
 8009570:	d01f      	beq.n	80095b2 <LCD_DrawPixel+0x72>
 8009572:	2b03      	cmp	r3, #3
 8009574:	d017      	beq.n	80095a6 <LCD_DrawPixel+0x66>
 8009576:	2b01      	cmp	r3, #1
 8009578:	d010      	beq.n	800959c <LCD_DrawPixel+0x5c>
		t = x;
		x = y;
		y = TFTHEIGHT - 1 - t;
		break;
	}
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 800957a:	2020      	movs	r0, #32
 800957c:	4615      	mov	r5, r2
 800957e:	f7ff fe81 	bl	8009284 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8009582:	4621      	mov	r1, r4
 8009584:	2021      	movs	r0, #33	; 0x21
 8009586:	f7ff fe7d 	bl	8009284 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 800958a:	4629      	mov	r1, r5
 800958c:	2022      	movs	r0, #34	; 0x22
 800958e:	f7ff fe79 	bl	8009284 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
	}
	LCD_Write24Register8(SSD1297_RAMDATA_WRITE, LCD_Color565_to_888(color));
#endif

	LCD_CS_IDLE();
 8009592:	4b0e      	ldr	r3, [pc, #56]	; (80095cc <LCD_DrawPixel+0x8c>)
 8009594:	2201      	movs	r2, #1
 8009596:	619a      	str	r2, [r3, #24]
}
 8009598:	bd38      	pop	{r3, r4, r5, pc}
 800959a:	4770      	bx	lr
		x = TFTWIDTH - 1 - y;
 800959c:	f1c4 03ef 	rsb	r3, r4, #239	; 0xef
		break;
 80095a0:	460c      	mov	r4, r1
 80095a2:	b299      	uxth	r1, r3
 80095a4:	e7e9      	b.n	800957a <LCD_DrawPixel+0x3a>
		y = TFTHEIGHT - 1 - t;
 80095a6:	f5c1 739f 	rsb	r3, r1, #318	; 0x13e
 80095aa:	3301      	adds	r3, #1
		break;
 80095ac:	4621      	mov	r1, r4
 80095ae:	b29c      	uxth	r4, r3
 80095b0:	e7e3      	b.n	800957a <LCD_DrawPixel+0x3a>
		y = TFTHEIGHT - 1 - y;
 80095b2:	f5c4 749f 	rsb	r4, r4, #318	; 0x13e
 80095b6:	3401      	adds	r4, #1
		x = TFTWIDTH - 1 - x;
 80095b8:	f1c1 00ef 	rsb	r0, r1, #239	; 0xef
		y = TFTHEIGHT - 1 - y;
 80095bc:	b2a4      	uxth	r4, r4
		x = TFTWIDTH - 1 - x;
 80095be:	b281      	uxth	r1, r0
		break;
 80095c0:	e7db      	b.n	800957a <LCD_DrawPixel+0x3a>
 80095c2:	bf00      	nop
 80095c4:	20000260 	.word	0x20000260
 80095c8:	20000262 	.word	0x20000262
 80095cc:	40020400 	.word	0x40020400
 80095d0:	2000026d 	.word	0x2000026d

080095d4 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 *
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 80095d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t blue = LCD_Color565_to_B(color);
#else
	uint8_t hi = color >> 8, lo = color;
#endif

	LCD_CS_ACTIVE();
 80095d6:	4b1e      	ldr	r3, [pc, #120]	; (8009650 <LCD_Flood+0x7c>)
 80095d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
void LCD_Flood(uint16_t color, uint32_t len) {
 80095dc:	460f      	mov	r7, r1
	uint8_t hi = color >> 8, lo = color;
 80095de:	0a06      	lsrs	r6, r0, #8
 80095e0:	b2c5      	uxtb	r5, r0

#if	defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(S6D0154) || defined(ST7781)
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 80095e2:	4601      	mov	r1, r0
	LCD_CS_ACTIVE();
 80095e4:	619a      	str	r2, [r3, #24]
	LCD_Write16Register16(ILI932X_GRAM_WR, color);
 80095e6:	2022      	movs	r0, #34	; 0x22
 80095e8:	f7ff fe4c 	bl	8009284 <LCD_Write16Register16>
#endif
	len--;
#if defined(SSD1297)
	if ((red == green) && (green == blue) && (red == blue)) {
#else
	if (hi == lo) {
 80095ec:	42ae      	cmp	r6, r5
 80095ee:	f1a7 0402 	sub.w	r4, r7, #2
	len--;
 80095f2:	f107 37ff 	add.w	r7, r7, #4294967295
	if (hi == lo) {
 80095f6:	d00d      	beq.n	8009614 <LCD_Flood+0x40>
#endif
			LCD_WR_STROBE();
			LCD_WR_STROBE();
		}
	} else {
		while (len--) {
 80095f8:	b147      	cbz	r7, 800960c <LCD_Flood+0x38>
#if defined(SSD1297)
			LCD_Write8(red);
			LCD_Write8(green);
			LCD_Write8(blue);
#else
			LCD_Write8(hi);
 80095fa:	4630      	mov	r0, r6
 80095fc:	f7ff fe18 	bl	8009230 <LCD_Write8>
		while (len--) {
 8009600:	3c01      	subs	r4, #1
			LCD_Write8(lo);
 8009602:	4628      	mov	r0, r5
 8009604:	f7ff fe14 	bl	8009230 <LCD_Write8>
		while (len--) {
 8009608:	1c63      	adds	r3, r4, #1
 800960a:	d1f6      	bne.n	80095fa <LCD_Flood+0x26>
#endif
		}
	}

	LCD_CS_IDLE();
 800960c:	4b10      	ldr	r3, [pc, #64]	; (8009650 <LCD_Flood+0x7c>)
 800960e:	2201      	movs	r2, #1
 8009610:	619a      	str	r2, [r3, #24]
}
 8009612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		while (len--) {
 8009614:	2f00      	cmp	r7, #0
 8009616:	d0f9      	beq.n	800960c <LCD_Flood+0x38>
			LCD_WR_STROBE();
 8009618:	4a0e      	ldr	r2, [pc, #56]	; (8009654 <LCD_Flood+0x80>)
 800961a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800961e:	2301      	movs	r3, #1
 8009620:	2102      	movs	r1, #2
 8009622:	6195      	str	r5, [r2, #24]
 8009624:	4618      	mov	r0, r3
 8009626:	3801      	subs	r0, #1
 8009628:	d8fd      	bhi.n	8009626 <LCD_Flood+0x52>
 800962a:	6191      	str	r1, [r2, #24]
 800962c:	4618      	mov	r0, r3
 800962e:	3801      	subs	r0, #1
 8009630:	d8fd      	bhi.n	800962e <LCD_Flood+0x5a>
			LCD_WR_STROBE();
 8009632:	6195      	str	r5, [r2, #24]
 8009634:	4618      	mov	r0, r3
 8009636:	3801      	subs	r0, #1
 8009638:	d8fd      	bhi.n	8009636 <LCD_Flood+0x62>
 800963a:	6191      	str	r1, [r2, #24]
 800963c:	4618      	mov	r0, r3
 800963e:	3801      	subs	r0, #1
 8009640:	d8fd      	bhi.n	800963e <LCD_Flood+0x6a>
		while (len--) {
 8009642:	f114 34ff 	adds.w	r4, r4, #4294967295
 8009646:	d2ec      	bcs.n	8009622 <LCD_Flood+0x4e>
	LCD_CS_IDLE();
 8009648:	4b01      	ldr	r3, [pc, #4]	; (8009650 <LCD_Flood+0x7c>)
 800964a:	2201      	movs	r2, #1
 800964c:	619a      	str	r2, [r3, #24]
}
 800964e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009650:	40020400 	.word	0x40020400
 8009654:	40020000 	.word	0x40020000

08009658 <LCD_FillScreen>:
 *
 * \param color	Color
 *
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 8009658:	b570      	push	{r4, r5, r6, lr}
		Although we could fill in any direction, the code uses the current
		screen rotation because some users find it disconcerting when a
		fill does not occur top-to-bottom. 
	*/
	uint16_t x, y;
	switch (m_rotation) {
 800965a:	4b12      	ldr	r3, [pc, #72]	; (80096a4 <LCD_FillScreen+0x4c>)
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	3b01      	subs	r3, #1
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b02      	cmp	r3, #2
void LCD_FillScreen(uint16_t color) {
 8009664:	4606      	mov	r6, r0
 8009666:	d819      	bhi.n	800969c <LCD_FillScreen+0x44>
 8009668:	490f      	ldr	r1, [pc, #60]	; (80096a8 <LCD_FillScreen+0x50>)
 800966a:	4a10      	ldr	r2, [pc, #64]	; (80096ac <LCD_FillScreen+0x54>)
 800966c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8009670:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
	case 3:
		x = 0;
		y = TFTHEIGHT - 1;
		break;
	}
	LCD_CS_ACTIVE();
 8009674:	4c0e      	ldr	r4, [pc, #56]	; (80096b0 <LCD_FillScreen+0x58>)
 8009676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800967a:	61a3      	str	r3, [r4, #24]
#if defined(SSD1297)
	LCD_Write16Register8(SSD1297_SETXCOUNTER, x); //GRAM Address Set
	LCD_Write16Register8(SSD1297_SETYCOUNTER, y);
#else
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x);
 800967c:	2020      	movs	r0, #32
 800967e:	f7ff fe01 	bl	8009284 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8009682:	4629      	mov	r1, r5
 8009684:	2021      	movs	r0, #33	; 0x21
 8009686:	f7ff fdfd 	bl	8009284 <LCD_Write16Register16>
#endif
	LCD_CS_IDLE();
 800968a:	2301      	movs	r3, #1
		this display takes rotation into account for the parameters, no
		need to do extra rotation math here.
	*/
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 800968c:	4630      	mov	r0, r6
	LCD_CS_IDLE();
 800968e:	61a3      	str	r3, [r4, #24]
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8009690:	f44f 3196 	mov.w	r1, #76800	; 0x12c00
}
 8009694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8009698:	f7ff bf9c 	b.w	80095d4 <LCD_Flood>
	switch (m_rotation) {
 800969c:	2500      	movs	r5, #0
 800969e:	4629      	mov	r1, r5
 80096a0:	e7e8      	b.n	8009674 <LCD_FillScreen+0x1c>
 80096a2:	bf00      	nop
 80096a4:	2000026d 	.word	0x2000026d
 80096a8:	080150b4 	.word	0x080150b4
 80096ac:	080150bc 	.word	0x080150bc
 80096b0:	40020400 	.word	0x40020400

080096b4 <LCD_Reset>:
 *
 * \param
 *
 * \return void
 */
void LCD_Reset(void) {
 80096b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	LCD_CS_IDLE();
	LCD_CD_DATA();
 80096b8:	4c1a      	ldr	r4, [pc, #104]	; (8009724 <LCD_Reset+0x70>)
	LCD_CS_IDLE();
 80096ba:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8009728 <LCD_Reset+0x74>
	LCD_WR_IDLE();
	LCD_RD_IDLE();

	LCD_RST_ACTIVE();
 80096be:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800972c <LCD_Reset+0x78>
	LCD_CD_DATA();
 80096c2:	2310      	movs	r3, #16
	LCD_WR_IDLE();
 80096c4:	2602      	movs	r6, #2
	LCD_CS_IDLE();
 80096c6:	2501      	movs	r5, #1
	LCD_RST_ACTIVE();
 80096c8:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	LCD_CS_IDLE();
 80096cc:	f8c8 5018 	str.w	r5, [r8, #24]
	HAL_Delay(2);
 80096d0:	4630      	mov	r0, r6
	LCD_CD_DATA();
 80096d2:	61a3      	str	r3, [r4, #24]
	LCD_WR_IDLE();
 80096d4:	61a6      	str	r6, [r4, #24]
	LCD_RD_IDLE();
 80096d6:	61a5      	str	r5, [r4, #24]
	LCD_RST_ACTIVE();
 80096d8:	f8c9 7018 	str.w	r7, [r9, #24]
	HAL_Delay(2);
 80096dc:	f7fb fee8 	bl	80054b0 <HAL_Delay>
	LCD_RST_IDLE();
	HAL_Delay(120);
 80096e0:	2078      	movs	r0, #120	; 0x78
	LCD_RST_IDLE();
 80096e2:	f8c9 6018 	str.w	r6, [r9, #24]
	HAL_Delay(120);
 80096e6:	f7fb fee3 	bl	80054b0 <HAL_Delay>
	// Data transfer sync
	LCD_CS_ACTIVE();
 80096ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	LCD_CD_COMMAND();
 80096ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	LCD_CS_ACTIVE();
 80096f2:	f8c8 2018 	str.w	r2, [r8, #24]
	LCD_Write8(0x00);
 80096f6:	2000      	movs	r0, #0
	LCD_CD_COMMAND();
 80096f8:	61a3      	str	r3, [r4, #24]
	LCD_Write8(0x00);
 80096fa:	f7ff fd99 	bl	8009230 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++) {
		LCD_WR_STROBE(); // Three extra 0x00s
 80096fe:	4622      	mov	r2, r4
	LCD_Write8(0x00);
 8009700:	2303      	movs	r3, #3
		LCD_WR_STROBE(); // Three extra 0x00s
 8009702:	6197      	str	r7, [r2, #24]
 8009704:	4628      	mov	r0, r5
 8009706:	3801      	subs	r0, #1
 8009708:	d8fd      	bhi.n	8009706 <LCD_Reset+0x52>
 800970a:	6196      	str	r6, [r2, #24]
 800970c:	4628      	mov	r0, r5
 800970e:	3801      	subs	r0, #1
 8009710:	d8fd      	bhi.n	800970e <LCD_Reset+0x5a>
 8009712:	3b01      	subs	r3, #1
	for (uint8_t i = 0; i < 3; i++) {
 8009714:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8009718:	d1f3      	bne.n	8009702 <LCD_Reset+0x4e>
	}
	LCD_CS_IDLE();
 800971a:	4b03      	ldr	r3, [pc, #12]	; (8009728 <LCD_Reset+0x74>)
 800971c:	619d      	str	r5, [r3, #24]
}
 800971e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009722:	bf00      	nop
 8009724:	40020000 	.word	0x40020000
 8009728:	40020400 	.word	0x40020400
 800972c:	40020800 	.word	0x40020800

08009730 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 *
 * \return void
 */
void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8009730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LCD_CS_ACTIVE();
 8009734:	4d2a      	ldr	r5, [pc, #168]	; (80097e0 <LCD_SetAddrWindow+0xb0>)
		done in any direction, the current screen rotation is applied
		because some users find it disconcerting when a fill does not
		occur top-to-bottom.
	*/
	int x, y, t;
	switch (m_rotation) {
 8009736:	4c2b      	ldr	r4, [pc, #172]	; (80097e4 <LCD_SetAddrWindow+0xb4>)
	LCD_CS_ACTIVE();
 8009738:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800973c:	61ae      	str	r6, [r5, #24]
	switch (m_rotation) {
 800973e:	f894 c000 	ldrb.w	ip, [r4]
 8009742:	f1bc 0f02 	cmp.w	ip, #2
void LCD_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8009746:	4617      	mov	r7, r2
	switch (m_rotation) {
 8009748:	d03b      	beq.n	80097c2 <LCD_SetAddrWindow+0x92>
 800974a:	f1bc 0f03 	cmp.w	ip, #3
 800974e:	d02e      	beq.n	80097ae <LCD_SetAddrWindow+0x7e>
 8009750:	f1bc 0f01 	cmp.w	ip, #1
 8009754:	d021      	beq.n	800979a <LCD_SetAddrWindow+0x6a>
	default:
		x = x1;
 8009756:	4680      	mov	r8, r0
		y = y1;
 8009758:	460c      	mov	r4, r1
		break;
 800975a:	4615      	mov	r5, r2
 800975c:	460e      	mov	r6, r1
 800975e:	461f      	mov	r7, r3
		x = x2;
		y = y2;
		break;
	case 3:
		t = x1;
		x1 = y1;
 8009760:	4641      	mov	r1, r8
		x = x1;
		y = y2;
		break;
	}
#if defined(ILI9325) || defined(ILI9328) || defined(R61505) || defined(R61505V) || defined(ST7781)
	LCD_Write16Register16(ILI932X_HOR_START_AD, x1); // Set address window
 8009762:	2050      	movs	r0, #80	; 0x50
 8009764:	f7ff fd8e 	bl	8009284 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_HOR_END_AD, x2);
 8009768:	4629      	mov	r1, r5
 800976a:	2051      	movs	r0, #81	; 0x51
 800976c:	f7ff fd8a 	bl	8009284 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_START_AD, y1);
 8009770:	4631      	mov	r1, r6
 8009772:	2052      	movs	r0, #82	; 0x52
 8009774:	f7ff fd86 	bl	8009284 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_VER_END_AD, y2);
 8009778:	4639      	mov	r1, r7
 800977a:	2053      	movs	r0, #83	; 0x53
 800977c:	f7ff fd82 	bl	8009284 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_HOR_AD, x); // Set address counter to top left
 8009780:	4641      	mov	r1, r8
 8009782:	2020      	movs	r0, #32
 8009784:	f7ff fd7e 	bl	8009284 <LCD_Write16Register16>
	LCD_Write16Register16(ILI932X_GRAM_VER_AD, y);
 8009788:	4621      	mov	r1, r4
 800978a:	2021      	movs	r0, #33	; 0x21
 800978c:	f7ff fd7a 	bl	8009284 <LCD_Write16Register16>
		LCD_Write16Register8(SSD1297_SETXADDR, x2 << 8 | x1); //HorizontalStartAddress and HorizontalEndAddress
		LCD_Write16Register8(SSD1297_SETYADDR_START, y1); //VerticalStartAddress
		LCD_Write16Register8(SSD1297_SETYADDR_END, y2); //VerticalEndAddress
	}
#endif
	LCD_CS_IDLE();
 8009790:	4b13      	ldr	r3, [pc, #76]	; (80097e0 <LCD_SetAddrWindow+0xb0>)
 8009792:	2201      	movs	r2, #1
 8009794:	619a      	str	r2, [r3, #24]
}
 8009796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		x2 = TFTWIDTH - 1 - t;
 800979a:	f1c1 05ef 	rsb	r5, r1, #239	; 0xef
		x1 = TFTWIDTH - 1 - y2;
 800979e:	f1c3 06ef 	rsb	r6, r3, #239	; 0xef
		x2 = TFTWIDTH - 1 - t;
 80097a2:	b2ad      	uxth	r5, r5
		x1 = TFTWIDTH - 1 - y2;
 80097a4:	b2b1      	uxth	r1, r6
		y = y1;
 80097a6:	4604      	mov	r4, r0
		x = x2;
 80097a8:	46a8      	mov	r8, r5
		y1 = x1;
 80097aa:	4606      	mov	r6, r0
		break;
 80097ac:	e7d9      	b.n	8009762 <LCD_SetAddrWindow+0x32>
		y1 = TFTHEIGHT - 1 - x2;
 80097ae:	f240 163f 	movw	r6, #319	; 0x13f
		y2 = TFTHEIGHT - 1 - t;
 80097b2:	1a30      	subs	r0, r6, r0
 80097b4:	b287      	uxth	r7, r0
		y1 = TFTHEIGHT - 1 - x2;
 80097b6:	1ab6      	subs	r6, r6, r2
		x = x1;
 80097b8:	4688      	mov	r8, r1
		x2 = y2;
 80097ba:	461d      	mov	r5, r3
		y1 = TFTHEIGHT - 1 - x2;
 80097bc:	b2b6      	uxth	r6, r6
		y = y2;
 80097be:	463c      	mov	r4, r7
 80097c0:	e7ce      	b.n	8009760 <LCD_SetAddrWindow+0x30>
		y1 = TFTHEIGHT - 1 - y2;
 80097c2:	f240 163f 	movw	r6, #319	; 0x13f
		y2 = TFTHEIGHT - 1 - t;
 80097c6:	1a74      	subs	r4, r6, r1
		x2 = TFTWIDTH - 1 - t;
 80097c8:	f1c0 05ef 	rsb	r5, r0, #239	; 0xef
 80097cc:	b2ad      	uxth	r5, r5
		x1 = TFTWIDTH - 1 - x2;
 80097ce:	f1c2 01ef 	rsb	r1, r2, #239	; 0xef
		y1 = TFTHEIGHT - 1 - y2;
 80097d2:	1af6      	subs	r6, r6, r3
		y2 = TFTHEIGHT - 1 - t;
 80097d4:	b2a7      	uxth	r7, r4
		x1 = TFTWIDTH - 1 - x2;
 80097d6:	b289      	uxth	r1, r1
		y1 = TFTHEIGHT - 1 - y2;
 80097d8:	b2b6      	uxth	r6, r6
		y = y2;
 80097da:	463c      	mov	r4, r7
		x = x2;
 80097dc:	46a8      	mov	r8, r5
		break;
 80097de:	e7c0      	b.n	8009762 <LCD_SetAddrWindow+0x32>
 80097e0:	40020400 	.word	0x40020400
 80097e4:	2000026d 	.word	0x2000026d

080097e8 <LCD_SetRotation>:
 * 						3 - 90 deg CCW (reversed album)
 *
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
	m_rotation = (x & 3);
 80097e8:	4b0c      	ldr	r3, [pc, #48]	; (800981c <LCD_SetRotation+0x34>)
		m_width = TFTWIDTH;
		m_height = TFTHEIGHT;
		break;
	case 1:
	case 3:
		m_width = TFTHEIGHT;
 80097ea:	490d      	ldr	r1, [pc, #52]	; (8009820 <LCD_SetRotation+0x38>)
	m_rotation = (x & 3);
 80097ec:	f000 0003 	and.w	r0, r0, #3
	switch (m_rotation) {
 80097f0:	2801      	cmp	r0, #1
	m_rotation = (x & 3);
 80097f2:	7018      	strb	r0, [r3, #0]
		m_height = TFTWIDTH;
 80097f4:	4b0b      	ldr	r3, [pc, #44]	; (8009824 <LCD_SetRotation+0x3c>)
	switch (m_rotation) {
 80097f6:	d005      	beq.n	8009804 <LCD_SetRotation+0x1c>
 80097f8:	2803      	cmp	r0, #3
 80097fa:	d003      	beq.n	8009804 <LCD_SetRotation+0x1c>
		m_width = TFTWIDTH;
 80097fc:	20f0      	movs	r0, #240	; 0xf0
		m_height = TFTHEIGHT;
 80097fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009802:	e002      	b.n	800980a <LCD_SetRotation+0x22>
		m_width = TFTHEIGHT;
 8009804:	f44f 70a0 	mov.w	r0, #320	; 0x140
		m_height = TFTWIDTH;
 8009808:	22f0      	movs	r2, #240	; 0xf0
 800980a:	801a      	strh	r2, [r3, #0]
		break;
	}
	LCD_CS_ACTIVE();
 800980c:	4b06      	ldr	r3, [pc, #24]	; (8009828 <LCD_SetRotation+0x40>)
		m_width = TFTHEIGHT;
 800980e:	8008      	strh	r0, [r1, #0]
	}
	LCD_Write16Register8(SSD1297_DRVOUTCTL, t1); // DRVOUT
	LCD_Write16Register8(SSD1297_ENTRYMODE1, t2); // ENTRYMODE
    LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
#endif
	LCD_CS_IDLE();
 8009810:	2201      	movs	r2, #1
	LCD_CS_ACTIVE();
 8009812:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009816:	6199      	str	r1, [r3, #24]
	LCD_CS_IDLE();
 8009818:	619a      	str	r2, [r3, #24]
}
 800981a:	4770      	bx	lr
 800981c:	2000026d 	.word	0x2000026d
 8009820:	20000260 	.word	0x20000260
 8009824:	20000262 	.word	0x20000262
 8009828:	40020400 	.word	0x40020400

0800982c <LCD_FillRect>:
 * \param h				Height of the rectangle to draw
 * \param color			Color
 *
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h, uint16_t color) {
 800982c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 8009830:	1e17      	subs	r7, r2, #0
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h, uint16_t color) {
 8009832:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 8009836:	dd55      	ble.n	80098e4 <LCD_FillRect+0xb8>
 8009838:	2b00      	cmp	r3, #0
 800983a:	461c      	mov	r4, r3
 800983c:	dd52      	ble.n	80098e4 <LCD_FillRect+0xb8>
 800983e:	4d2a      	ldr	r5, [pc, #168]	; (80098e8 <LCD_FillRect+0xbc>)
 8009840:	f9b5 e000 	ldrsh.w	lr, [r5]
 8009844:	4586      	cmp	lr, r0
 8009846:	dd4d      	ble.n	80098e4 <LCD_FillRect+0xb8>
 8009848:	4e28      	ldr	r6, [pc, #160]	; (80098ec <LCD_FillRect+0xc0>)
 800984a:	f9b6 c000 	ldrsh.w	ip, [r6]
 800984e:	458c      	cmp	ip, r1
 8009850:	dd48      	ble.n	80098e4 <LCD_FillRect+0xb8>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8009852:	eb00 0a07 	add.w	sl, r0, r7
 8009856:	fa1f fa8a 	uxth.w	sl, sl
 800985a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800985e:	b212      	sxth	r2, r2
 8009860:	2a00      	cmp	r2, #0
 8009862:	db3f      	blt.n	80098e4 <LCD_FillRect+0xb8>
 8009864:	eb01 0903 	add.w	r9, r1, r3
 8009868:	fa1f f989 	uxth.w	r9, r9
 800986c:	f109 33ff 	add.w	r3, r9, #4294967295
 8009870:	b21b      	sxth	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	db36      	blt.n	80098e4 <LCD_FillRect+0xb8>
		return;
	if (x < 0) { // Clip left
 8009876:	2800      	cmp	r0, #0
		w += x;
		x = 0;
 8009878:	bfbc      	itt	lt
 800987a:	2000      	movlt	r0, #0
		w += x;
 800987c:	fa0f f78a 	sxthlt.w	r7, sl
	}
	if (y1 < 0) { // Clip top
 8009880:	2900      	cmp	r1, #0
		h += y1;
 8009882:	bfbc      	itt	lt
 8009884:	fa0f f489 	sxthlt.w	r4, r9
		y1 = 0;
 8009888:	2100      	movlt	r1, #0
	}
	if (x2 >= m_width) { // Clip right
 800988a:	4596      	cmp	lr, r2
 800988c:	b280      	uxth	r0, r0
 800988e:	dc08      	bgt.n	80098a2 <LCD_FillRect+0x76>
		x2 = m_width - 1;
 8009890:	fa1f fe8e 	uxth.w	lr, lr
 8009894:	f10e 32ff 	add.w	r2, lr, #4294967295
		w = x2 - x + 1;
 8009898:	ebae 0e00 	sub.w	lr, lr, r0
		x2 = m_width - 1;
 800989c:	b212      	sxth	r2, r2
		w = x2 - x + 1;
 800989e:	fa0f f78e 	sxth.w	r7, lr
	}
	if (y2 >= m_height) { // Clip bottom
 80098a2:	459c      	cmp	ip, r3
 80098a4:	b289      	uxth	r1, r1
 80098a6:	dc08      	bgt.n	80098ba <LCD_FillRect+0x8e>
		y2 = m_height - 1;
 80098a8:	fa1f fc8c 	uxth.w	ip, ip
 80098ac:	f10c 33ff 	add.w	r3, ip, #4294967295
		h = y2 - y1 + 1;
 80098b0:	ebac 0c01 	sub.w	ip, ip, r1
		y2 = m_height - 1;
 80098b4:	b21b      	sxth	r3, r3
		h = y2 - y1 + 1;
 80098b6:	fa0f f48c 	sxth.w	r4, ip
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	b292      	uxth	r2, r2
 80098be:	f7ff ff37 	bl	8009730 <LCD_SetAddrWindow>
	LCD_Flood(color, (uint32_t) w * (uint32_t) h);
 80098c2:	fb07 f104 	mul.w	r1, r7, r4
 80098c6:	4640      	mov	r0, r8
 80098c8:	f7ff fe84 	bl	80095d4 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80098cc:	8833      	ldrh	r3, [r6, #0]
 80098ce:	882a      	ldrh	r2, [r5, #0]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	3a01      	subs	r2, #1
 80098d4:	2100      	movs	r1, #0
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	b292      	uxth	r2, r2
 80098da:	4608      	mov	r0, r1
}
 80098dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80098e0:	f7ff bf26 	b.w	8009730 <LCD_SetAddrWindow>
}
 80098e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e8:	20000260 	.word	0x20000260
 80098ec:	20000262 	.word	0x20000262

080098f0 <LCD_DrawChar>:
 * \param bg		Background color
 * \param size		Character Size
 *
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t fontindex) {
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	b089      	sub	sp, #36	; 0x24
 80098f6:	9303      	str	r3, [sp, #12]
 80098f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80098fc:	9304      	str	r3, [sp, #16]
 80098fe:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8009902:	9305      	str	r3, [sp, #20]
	uint32_t line = 0;

	height = fonts[fontindex]->Height;
	width = fonts[fontindex]->Width;

	if ((x >= m_width) || // Clip right
 8009904:	4b47      	ldr	r3, [pc, #284]	; (8009a24 <LCD_DrawChar+0x134>)
 8009906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800990a:	4283      	cmp	r3, r0
 800990c:	dd33      	ble.n	8009976 <LCD_DrawChar+0x86>
		(y >= m_height) || // Clip bottom
 800990e:	4b46      	ldr	r3, [pc, #280]	; (8009a28 <LCD_DrawChar+0x138>)
	if ((x >= m_width) || // Clip right
 8009910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009914:	428b      	cmp	r3, r1
 8009916:	460d      	mov	r5, r1
 8009918:	dd2d      	ble.n	8009976 <LCD_DrawChar+0x86>
	height = fonts[fontindex]->Height;
 800991a:	9905      	ldr	r1, [sp, #20]
 800991c:	4b43      	ldr	r3, [pc, #268]	; (8009a2c <LCD_DrawChar+0x13c>)
 800991e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
	width = fonts[fontindex]->Width;
 8009922:	f8b3 8004 	ldrh.w	r8, [r3, #4]
		((x + width - 1) < 0) || // Clip left
 8009926:	eb00 0108 	add.w	r1, r0, r8
		(y >= m_height) || // Clip bottom
 800992a:	2900      	cmp	r1, #0
 800992c:	4682      	mov	sl, r0
 800992e:	dd22      	ble.n	8009976 <LCD_DrawChar+0x86>
	height = fonts[fontindex]->Height;
 8009930:	f8b3 b006 	ldrh.w	fp, [r3, #6]
		((y + height - 1) < 0))   // Clip top
 8009934:	eb05 030b 	add.w	r3, r5, fp
		((x + width - 1) < 0) || // Clip left
 8009938:	2b00      	cmp	r3, #0
 800993a:	dd1c      	ble.n	8009976 <LCD_DrawChar+0x86>
		return;

	bytes = (width + 7) / 8;
	if (c < ' ') c = ' ';
 800993c:	f1a2 0320 	sub.w	r3, r2, #32
 8009940:	2b5e      	cmp	r3, #94	; 0x5e
	bytes = (width + 7) / 8;
 8009942:	f108 0707 	add.w	r7, r8, #7
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
			break;
		}
		if (m_scale) {
			for (uint32_t j = 0; j < width * 2; j+=2) {
 8009946:	ea4f 0348 	mov.w	r3, r8, lsl #1
	bytes = (width + 7) / 8;
 800994a:	ea4f 07e7 	mov.w	r7, r7, asr #3
	if (c < ' ') c = ' ';
 800994e:	bf88      	it	hi
 8009950:	2220      	movhi	r2, #32
			for (uint32_t j = 0; j < width * 2; j+=2) {
 8009952:	9307      	str	r3, [sp, #28]
	for (uint32_t i = 0; i < height; i++) {
 8009954:	2300      	movs	r3, #0
	charindex = (c - ' ') * height * bytes;
 8009956:	f1a2 0620 	sub.w	r6, r2, #32
	for (uint32_t i = 0; i < height; i++) {
 800995a:	9302      	str	r3, [sp, #8]
	offset = 8 * bytes - width;
 800995c:	ebc8 02c7 	rsb	r2, r8, r7, lsl #3
				if (line & (1 << (width - j / 2 + offset - 1))) {
 8009960:	f108 33ff 	add.w	r3, r8, #4294967295
	charindex = (c - ' ') * height * bytes;
 8009964:	fb0b f606 	mul.w	r6, fp, r6
				if (line & (1 << (width - j / 2 + offset - 1))) {
 8009968:	fa53 f382 	uxtab	r3, r3, r2
	charindex = (c - ' ') * height * bytes;
 800996c:	437e      	muls	r6, r7
				if (line & (1 << (width - j / 2 + offset - 1))) {
 800996e:	9306      	str	r3, [sp, #24]
	for (uint32_t i = 0; i < height; i++) {
 8009970:	9b02      	ldr	r3, [sp, #8]
 8009972:	459b      	cmp	fp, r3
 8009974:	d802      	bhi.n	800997c <LCD_DrawChar+0x8c>
				}
			}
			y++;
		}
	}
}
 8009976:	b009      	add	sp, #36	; 0x24
 8009978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex] + (width + 7) / 8 * i);
 800997c:	9a05      	ldr	r2, [sp, #20]
 800997e:	4b2b      	ldr	r3, [pc, #172]	; (8009a2c <LCD_DrawChar+0x13c>)
 8009980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009984:	681a      	ldr	r2, [r3, #0]
		switch (bytes) {
 8009986:	2f01      	cmp	r7, #1
		pchar = ((uint8_t *) &fonts[fontindex]->table[charindex] + (width + 7) / 8 * i);
 8009988:	eb02 0306 	add.w	r3, r2, r6
 800998c:	5d94      	ldrb	r4, [r2, r6]
		switch (bytes) {
 800998e:	d004      	beq.n	800999a <LCD_DrawChar+0xaa>
 8009990:	2f02      	cmp	r7, #2
 8009992:	d10a      	bne.n	80099aa <LCD_DrawChar+0xba>
			line = (pchar[0] << 8) | pchar[1];
 8009994:	881c      	ldrh	r4, [r3, #0]
 8009996:	ba64      	rev16	r4, r4
 8009998:	b2a4      	uxth	r4, r4
		if (m_scale) {
 800999a:	4b25      	ldr	r3, [pc, #148]	; (8009a30 <LCD_DrawChar+0x140>)
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	bb53      	cbnz	r3, 80099f6 <LCD_DrawChar+0x106>
			for (uint32_t j = 0; j < width; j++) {
 80099a0:	4699      	mov	r9, r3
 80099a2:	45c8      	cmp	r8, r9
 80099a4:	d82a      	bhi.n	80099fc <LCD_DrawChar+0x10c>
			y++;
 80099a6:	3501      	adds	r5, #1
 80099a8:	e01f      	b.n	80099ea <LCD_DrawChar+0xfa>
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 80099aa:	785a      	ldrb	r2, [r3, #1]
 80099ac:	789b      	ldrb	r3, [r3, #2]
 80099ae:	0424      	lsls	r4, r4, #16
 80099b0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80099b4:	431c      	orrs	r4, r3
			break;
 80099b6:	e7f0      	b.n	800999a <LCD_DrawChar+0xaa>
				if (line & (1 << (width - j / 2 + offset - 1))) {
 80099b8:	9b06      	ldr	r3, [sp, #24]
 80099ba:	2201      	movs	r2, #1
 80099bc:	eba3 0359 	sub.w	r3, r3, r9, lsr #1
 80099c0:	fa02 f303 	lsl.w	r3, r2, r3
 80099c4:	4223      	tst	r3, r4
					LCD_FillRect(x + j, y, 2, 2, color);
 80099c6:	bf14      	ite	ne
 80099c8:	9b03      	ldrne	r3, [sp, #12]
					LCD_FillRect(x + j, y, 2, 2, bg);
 80099ca:	9b04      	ldreq	r3, [sp, #16]
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	eb09 000a 	add.w	r0, r9, sl
 80099d2:	2302      	movs	r3, #2
 80099d4:	b200      	sxth	r0, r0
 80099d6:	461a      	mov	r2, r3
 80099d8:	4629      	mov	r1, r5
 80099da:	f7ff ff27 	bl	800982c <LCD_FillRect>
			for (uint32_t j = 0; j < width * 2; j+=2) {
 80099de:	f109 0902 	add.w	r9, r9, #2
 80099e2:	9b07      	ldr	r3, [sp, #28]
 80099e4:	454b      	cmp	r3, r9
 80099e6:	d8e7      	bhi.n	80099b8 <LCD_DrawChar+0xc8>
			y+=2;
 80099e8:	3502      	adds	r5, #2
	for (uint32_t i = 0; i < height; i++) {
 80099ea:	9b02      	ldr	r3, [sp, #8]
 80099ec:	3301      	adds	r3, #1
			y++;
 80099ee:	b22d      	sxth	r5, r5
	for (uint32_t i = 0; i < height; i++) {
 80099f0:	9302      	str	r3, [sp, #8]
 80099f2:	443e      	add	r6, r7
 80099f4:	e7bc      	b.n	8009970 <LCD_DrawChar+0x80>
			for (uint32_t j = 0; j < width * 2; j+=2) {
 80099f6:	f04f 0900 	mov.w	r9, #0
 80099fa:	e7f2      	b.n	80099e2 <LCD_DrawChar+0xf2>
				if (line & (1 << (width - j + offset - 1))) {
 80099fc:	9b06      	ldr	r3, [sp, #24]
 80099fe:	eba3 0209 	sub.w	r2, r3, r9
 8009a02:	2301      	movs	r3, #1
 8009a04:	fa03 f202 	lsl.w	r2, r3, r2
 8009a08:	4222      	tst	r2, r4
 8009a0a:	eb09 000a 	add.w	r0, r9, sl
 8009a0e:	b200      	sxth	r0, r0
					LCD_DrawPixel((x + j), y, color);
 8009a10:	bf14      	ite	ne
 8009a12:	9a03      	ldrne	r2, [sp, #12]
					LCD_DrawPixel((x + j), y, bg);
 8009a14:	9a04      	ldreq	r2, [sp, #16]
 8009a16:	4629      	mov	r1, r5
 8009a18:	f7ff fd92 	bl	8009540 <LCD_DrawPixel>
			for (uint32_t j = 0; j < width; j++) {
 8009a1c:	f109 0901 	add.w	r9, r9, #1
 8009a20:	e7bf      	b.n	80099a2 <LCD_DrawChar+0xb2>
 8009a22:	bf00      	nop
 8009a24:	20000260 	.word	0x20000260
 8009a28:	20000262 	.word	0x20000262
 8009a2c:	20000024 	.word	0x20000024
 8009a30:	2000026f 	.word	0x2000026f

08009a34 <LCD_Printf>:
 * \param fmt	Format text
 * \param
 *
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8009a34:	b40f      	push	{r0, r1, r2, r3}
 8009a36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a38:	b085      	sub	sp, #20
 8009a3a:	ab0a      	add	r3, sp, #40	; 0x28
	va_start(lst, fmt);
	vsnprintf(buf, sizeof(buf), fmt, lst);
	va_end(lst);
	
	volatile uint16_t height, width;
	height = fonts[m_font]->Height;
 8009a3c:	4e39      	ldr	r6, [pc, #228]	; (8009b24 <LCD_Printf+0xf0>)
void LCD_Printf(const char *fmt, ...) {
 8009a3e:	f853 2b04 	ldr.w	r2, [r3], #4
	vsnprintf(buf, sizeof(buf), fmt, lst);
 8009a42:	4839      	ldr	r0, [pc, #228]	; (8009b28 <LCD_Printf+0xf4>)
	va_start(lst, fmt);
 8009a44:	9303      	str	r3, [sp, #12]
	vsnprintf(buf, sizeof(buf), fmt, lst);
 8009a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009a4a:	f001 fcf3 	bl	800b434 <vsnprintf_>
	height = fonts[m_font]->Height;
 8009a4e:	7832      	ldrb	r2, [r6, #0]
 8009a50:	4b36      	ldr	r3, [pc, #216]	; (8009b2c <LCD_Printf+0xf8>)
 8009a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a56:	88da      	ldrh	r2, [r3, #6]
	width = fonts[m_font]->Width;
 8009a58:	889b      	ldrh	r3, [r3, #4]
	height = fonts[m_font]->Height;
 8009a5a:	f8ad 2008 	strh.w	r2, [sp, #8]
	width = fonts[m_font]->Width;
 8009a5e:	f8ad 300a 	strh.w	r3, [sp, #10]
	if (m_scale) {
 8009a62:	4b33      	ldr	r3, [pc, #204]	; (8009b30 <LCD_Printf+0xfc>)
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	b15b      	cbz	r3, 8009a80 <LCD_Printf+0x4c>
		height *= 2;
 8009a68:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009a6c:	005b      	lsls	r3, r3, #1
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	f8ad 3008 	strh.w	r3, [sp, #8]
		width *= 2;
 8009a74:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009a80:	4f2c      	ldr	r7, [pc, #176]	; (8009b34 <LCD_Printf+0x100>)
 8009a82:	4c2d      	ldr	r4, [pc, #180]	; (8009b38 <LCD_Printf+0x104>)
				LCD_SetAddrWindow(0, m_cursor_y, m_width - 1, m_cursor_y + height);
				LCD_Flood(m_textbgcolor, (long) m_width * height);
				LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
			}
#endif
			if (m_cursor_y >= (m_height - height)) {
 8009a84:	4d2d      	ldr	r5, [pc, #180]	; (8009b3c <LCD_Printf+0x108>)
	while (*p) {
 8009a86:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 8009a8a:	b922      	cbnz	r2, 8009a96 <LCD_Printf+0x62>
				m_cursor_x = 0;
			}
		}
		p++;
	}
}
 8009a8c:	b005      	add	sp, #20
 8009a8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009a92:	b004      	add	sp, #16
 8009a94:	4770      	bx	lr
		if (*p == '\n') {
 8009a96:	2a0a      	cmp	r2, #10
 8009a98:	d105      	bne.n	8009aa6 <LCD_Printf+0x72>
				m_cursor_y += height;
 8009a9a:	882a      	ldrh	r2, [r5, #0]
 8009a9c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	802b      	strh	r3, [r5, #0]
 8009aa4:	e001      	b.n	8009aaa <LCD_Printf+0x76>
		} else if (*p == '\r') {
 8009aa6:	2a0d      	cmp	r2, #13
 8009aa8:	d102      	bne.n	8009ab0 <LCD_Printf+0x7c>
				m_cursor_x = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	8023      	strh	r3, [r4, #0]
 8009aae:	e7ea      	b.n	8009a86 <LCD_Printf+0x52>
		} else if (*p == '\t') {
 8009ab0:	2a09      	cmp	r2, #9
 8009ab2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8009ab6:	d105      	bne.n	8009ac4 <LCD_Printf+0x90>
			m_cursor_x += width * 4;
 8009ab8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009abc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009ac0:	8020      	strh	r0, [r4, #0]
 8009ac2:	e7e0      	b.n	8009a86 <LCD_Printf+0x52>
			if (m_cursor_y >= (m_height - height)) {
 8009ac4:	4b1e      	ldr	r3, [pc, #120]	; (8009b40 <LCD_Printf+0x10c>)
 8009ac6:	f8bd c008 	ldrh.w	ip, [sp, #8]
 8009aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ace:	f9b5 1000 	ldrsh.w	r1, [r5]
 8009ad2:	eba3 030c 	sub.w	r3, r3, ip
 8009ad6:	4299      	cmp	r1, r3
				m_cursor_y = 0;
 8009ad8:	bfa4      	itt	ge
 8009ada:	2300      	movge	r3, #0
 8009adc:	802b      	strhge	r3, [r5, #0]
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor, m_font);
 8009ade:	4b19      	ldr	r3, [pc, #100]	; (8009b44 <LCD_Printf+0x110>)
 8009ae0:	f896 c000 	ldrb.w	ip, [r6]
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	f8cd c004 	str.w	ip, [sp, #4]
 8009aea:	f8df c064 	ldr.w	ip, [pc, #100]	; 8009b50 <LCD_Printf+0x11c>
 8009aee:	f9b5 1000 	ldrsh.w	r1, [r5]
 8009af2:	f8bc c000 	ldrh.w	ip, [ip]
 8009af6:	f8cd c000 	str.w	ip, [sp]
 8009afa:	f7ff fef9 	bl	80098f0 <LCD_DrawChar>
			m_cursor_x += width;
 8009afe:	8822      	ldrh	r2, [r4, #0]
 8009b00:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009b04:	4413      	add	r3, r2
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 8009b06:	4a10      	ldr	r2, [pc, #64]	; (8009b48 <LCD_Printf+0x114>)
 8009b08:	7812      	ldrb	r2, [r2, #0]
			m_cursor_x += width;
 8009b0a:	b21b      	sxth	r3, r3
 8009b0c:	8023      	strh	r3, [r4, #0]
			if (m_wrap && (m_cursor_x > (m_width - width))) {
 8009b0e:	2a00      	cmp	r2, #0
 8009b10:	d0b9      	beq.n	8009a86 <LCD_Printf+0x52>
 8009b12:	4a0e      	ldr	r2, [pc, #56]	; (8009b4c <LCD_Printf+0x118>)
 8009b14:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8009b18:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009b1c:	1a52      	subs	r2, r2, r1
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	ddb1      	ble.n	8009a86 <LCD_Printf+0x52>
 8009b22:	e7ba      	b.n	8009a9a <LCD_Printf+0x66>
 8009b24:	2000026c 	.word	0x2000026c
 8009b28:	20000e70 	.word	0x20000e70
 8009b2c:	20000024 	.word	0x20000024
 8009b30:	2000026f 	.word	0x2000026f
 8009b34:	20000e6f 	.word	0x20000e6f
 8009b38:	20000264 	.word	0x20000264
 8009b3c:	20000266 	.word	0x20000266
 8009b40:	20000262 	.word	0x20000262
 8009b44:	20000268 	.word	0x20000268
 8009b48:	2000026e 	.word	0x2000026e
 8009b4c:	20000260 	.word	0x20000260
 8009b50:	2000026a 	.word	0x2000026a

08009b54 <LCD_SetCursor>:
 * \param y		The y-coordinate
 *
 * \return void
 */
void LCD_SetCursor(uint16_t x, uint16_t y) {
	m_cursor_x = x;
 8009b54:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <LCD_SetCursor+0xc>)
 8009b56:	8018      	strh	r0, [r3, #0]
	m_cursor_y = y;
 8009b58:	4b02      	ldr	r3, [pc, #8]	; (8009b64 <LCD_SetCursor+0x10>)
 8009b5a:	8019      	strh	r1, [r3, #0]
}
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	20000264 	.word	0x20000264
 8009b64:	20000266 	.word	0x20000266

08009b68 <LCD_SetTextSize>:
 */
void LCD_SetTextSize(uint8_t s) {
	if (s < 0) {
		m_font = 0;
	} else if (s >= fontsNum) {
		m_font = fontsNum - 1;
 8009b68:	4b01      	ldr	r3, [pc, #4]	; (8009b70 <LCD_SetTextSize+0x8>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	701a      	strb	r2, [r3, #0]
	} else {
		m_font = s;
	}
}
 8009b6e:	4770      	bx	lr
 8009b70:	2000026c 	.word	0x2000026c

08009b74 <LCD_SetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
	m_textcolor = c;
 8009b74:	4b02      	ldr	r3, [pc, #8]	; (8009b80 <LCD_SetTextColor+0xc>)
 8009b76:	8018      	strh	r0, [r3, #0]
	m_textbgcolor = b;
 8009b78:	4b02      	ldr	r3, [pc, #8]	; (8009b84 <LCD_SetTextColor+0x10>)
 8009b7a:	8019      	strh	r1, [r3, #0]
}
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	20000268 	.word	0x20000268
 8009b84:	2000026a 	.word	0x2000026a

08009b88 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	607a      	str	r2, [r7, #4]
 8009b92:	603b      	str	r3, [r7, #0]
 8009b94:	4603      	mov	r3, r0
 8009b96:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d204      	bcs.n	8009baa <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	7bfa      	ldrb	r2, [r7, #15]
 8009ba8:	701a      	strb	r2, [r3, #0]
  }
}
 8009baa:	bf00      	nop
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr

08009bb6 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b085      	sub	sp, #20
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
 8009bc0:	603b      	str	r3, [r7, #0]
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8009bc6:	bf00      	nop
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b085      	sub	sp, #20
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	60fb      	str	r3, [r7, #12]
 8009be0:	e002      	b.n	8009be8 <_strnlen_s+0x16>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3301      	adds	r3, #1
 8009be6:	60fb      	str	r3, [r7, #12]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d004      	beq.n	8009bfa <_strnlen_s+0x28>
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	1e5a      	subs	r2, r3, #1
 8009bf4:	603a      	str	r2, [r7, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1f3      	bne.n	8009be2 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	1ad3      	subs	r3, r2, r3
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8009c16:	79fb      	ldrb	r3, [r7, #7]
 8009c18:	2b2f      	cmp	r3, #47	; 0x2f
 8009c1a:	d904      	bls.n	8009c26 <_is_digit+0x1a>
 8009c1c:	79fb      	ldrb	r3, [r7, #7]
 8009c1e:	2b39      	cmp	r3, #57	; 0x39
 8009c20:	d801      	bhi.n	8009c26 <_is_digit+0x1a>
 8009c22:	2301      	movs	r3, #1
 8009c24:	e000      	b.n	8009c28 <_is_digit+0x1c>
 8009c26:	2300      	movs	r3, #0
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	b2db      	uxtb	r3, r3
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8009c42:	2300      	movs	r3, #0
 8009c44:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8009c46:	e00e      	b.n	8009c66 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	4618      	mov	r0, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	1c59      	adds	r1, r3, #1
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	6011      	str	r1, [r2, #0]
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	4403      	add	r3, r0
 8009c62:	3b30      	subs	r3, #48	; 0x30
 8009c64:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7ff ffcd 	bl	8009c0c <_is_digit>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e7      	bne.n	8009c48 <_atoi+0xe>
  }
  return i;
 8009c78:	68fb      	ldr	r3, [r7, #12]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8009c82:	b590      	push	{r4, r7, lr}
 8009c84:	b087      	sub	sp, #28
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	607a      	str	r2, [r7, #4]
 8009c8e:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8009c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c96:	f003 0302 	and.w	r3, r3, #2
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d125      	bne.n	8009cea <_out_rev+0x68>
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca0:	f003 0301 	and.w	r3, r3, #1
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d120      	bne.n	8009cea <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8009ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	e00a      	b.n	8009cc4 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	1c53      	adds	r3, r2, #1
 8009cb2:	607b      	str	r3, [r7, #4]
 8009cb4:	68fc      	ldr	r4, [r7, #12]
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	68b9      	ldr	r1, [r7, #8]
 8009cba:	2020      	movs	r0, #32
 8009cbc:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	617b      	str	r3, [r7, #20]
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d3f0      	bcc.n	8009cae <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8009ccc:	e00d      	b.n	8009cea <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8009cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd8:	4413      	add	r3, r2
 8009cda:	7818      	ldrb	r0, [r3, #0]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	1c53      	adds	r3, r2, #1
 8009ce0:	607b      	str	r3, [r7, #4]
 8009ce2:	68fc      	ldr	r4, [r7, #12]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	68b9      	ldr	r1, [r7, #8]
 8009ce8:	47a0      	blx	r4
  while (len) {
 8009cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1ee      	bne.n	8009cce <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8009cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf2:	f003 0302 	and.w	r3, r3, #2
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00e      	beq.n	8009d18 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8009cfa:	e007      	b.n	8009d0c <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	1c53      	adds	r3, r2, #1
 8009d00:	607b      	str	r3, [r7, #4]
 8009d02:	68fc      	ldr	r4, [r7, #12]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	68b9      	ldr	r1, [r7, #8]
 8009d08:	2020      	movs	r0, #32
 8009d0a:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d8f1      	bhi.n	8009cfc <_out_rev+0x7a>
    }
  }

  return idx;
 8009d18:	687b      	ldr	r3, [r7, #4]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	371c      	adds	r7, #28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd90      	pop	{r4, r7, pc}

08009d22 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b088      	sub	sp, #32
 8009d26:	af04      	add	r7, sp, #16
 8009d28:	60f8      	str	r0, [r7, #12]
 8009d2a:	60b9      	str	r1, [r7, #8]
 8009d2c:	607a      	str	r2, [r7, #4]
 8009d2e:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8009d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d32:	f003 0302 	and.w	r3, r3, #2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d136      	bne.n	8009da8 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8009d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d018      	beq.n	8009d72 <_ntoa_format+0x50>
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d013      	beq.n	8009d72 <_ntoa_format+0x50>
 8009d4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d104      	bne.n	8009d5c <_ntoa_format+0x3a>
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	f003 030c 	and.w	r3, r3, #12
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00a      	beq.n	8009d72 <_ntoa_format+0x50>
      width--;
 8009d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009d62:	e006      	b.n	8009d72 <_ntoa_format+0x50>
      buf[len++] = '0';
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	61fa      	str	r2, [r7, #28]
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	2230      	movs	r2, #48	; 0x30
 8009d70:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009d72:	69fa      	ldr	r2, [r7, #28]
 8009d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d20a      	bcs.n	8009d90 <_ntoa_format+0x6e>
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	2b1f      	cmp	r3, #31
 8009d7e:	d9f1      	bls.n	8009d64 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009d80:	e006      	b.n	8009d90 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	1c5a      	adds	r2, r3, #1
 8009d86:	61fa      	str	r2, [r7, #28]
 8009d88:	69ba      	ldr	r2, [r7, #24]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	2230      	movs	r2, #48	; 0x30
 8009d8e:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d006      	beq.n	8009da8 <_ntoa_format+0x86>
 8009d9a:	69fa      	ldr	r2, [r7, #28]
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d202      	bcs.n	8009da8 <_ntoa_format+0x86>
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	2b1f      	cmp	r3, #31
 8009da6:	d9ec      	bls.n	8009d82 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8009da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009daa:	f003 0310 	and.w	r3, r3, #16
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d058      	beq.n	8009e64 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8009db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d116      	bne.n	8009dea <_ntoa_format+0xc8>
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d013      	beq.n	8009dea <_ntoa_format+0xc8>
 8009dc2:	69fa      	ldr	r2, [r7, #28]
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d003      	beq.n	8009dd2 <_ntoa_format+0xb0>
 8009dca:	69fa      	ldr	r2, [r7, #28]
 8009dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d10b      	bne.n	8009dea <_ntoa_format+0xc8>
      len--;
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d005      	beq.n	8009dea <_ntoa_format+0xc8>
 8009dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de0:	2b10      	cmp	r3, #16
 8009de2:	d102      	bne.n	8009dea <_ntoa_format+0xc8>
        len--;
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	2b10      	cmp	r3, #16
 8009dee:	d10f      	bne.n	8009e10 <_ntoa_format+0xee>
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	f003 0320 	and.w	r3, r3, #32
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10a      	bne.n	8009e10 <_ntoa_format+0xee>
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	2b1f      	cmp	r3, #31
 8009dfe:	d807      	bhi.n	8009e10 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	61fa      	str	r2, [r7, #28]
 8009e06:	69ba      	ldr	r2, [r7, #24]
 8009e08:	4413      	add	r3, r2
 8009e0a:	2278      	movs	r2, #120	; 0x78
 8009e0c:	701a      	strb	r2, [r3, #0]
 8009e0e:	e01f      	b.n	8009e50 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	2b10      	cmp	r3, #16
 8009e14:	d10f      	bne.n	8009e36 <_ntoa_format+0x114>
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	f003 0320 	and.w	r3, r3, #32
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00a      	beq.n	8009e36 <_ntoa_format+0x114>
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	2b1f      	cmp	r3, #31
 8009e24:	d807      	bhi.n	8009e36 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	61fa      	str	r2, [r7, #28]
 8009e2c:	69ba      	ldr	r2, [r7, #24]
 8009e2e:	4413      	add	r3, r2
 8009e30:	2258      	movs	r2, #88	; 0x58
 8009e32:	701a      	strb	r2, [r3, #0]
 8009e34:	e00c      	b.n	8009e50 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d109      	bne.n	8009e50 <_ntoa_format+0x12e>
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	2b1f      	cmp	r3, #31
 8009e40:	d806      	bhi.n	8009e50 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	1c5a      	adds	r2, r3, #1
 8009e46:	61fa      	str	r2, [r7, #28]
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	2262      	movs	r2, #98	; 0x62
 8009e4e:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	2b1f      	cmp	r3, #31
 8009e54:	d806      	bhi.n	8009e64 <_ntoa_format+0x142>
      buf[len++] = '0';
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	1c5a      	adds	r2, r3, #1
 8009e5a:	61fa      	str	r2, [r7, #28]
 8009e5c:	69ba      	ldr	r2, [r7, #24]
 8009e5e:	4413      	add	r3, r2
 8009e60:	2230      	movs	r2, #48	; 0x30
 8009e62:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	2b1f      	cmp	r3, #31
 8009e68:	d824      	bhi.n	8009eb4 <_ntoa_format+0x192>
    if (negative) {
 8009e6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d007      	beq.n	8009e82 <_ntoa_format+0x160>
      buf[len++] = '-';
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	61fa      	str	r2, [r7, #28]
 8009e78:	69ba      	ldr	r2, [r7, #24]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	222d      	movs	r2, #45	; 0x2d
 8009e7e:	701a      	strb	r2, [r3, #0]
 8009e80:	e018      	b.n	8009eb4 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	f003 0304 	and.w	r3, r3, #4
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d007      	beq.n	8009e9c <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	1c5a      	adds	r2, r3, #1
 8009e90:	61fa      	str	r2, [r7, #28]
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	4413      	add	r3, r2
 8009e96:	222b      	movs	r2, #43	; 0x2b
 8009e98:	701a      	strb	r2, [r3, #0]
 8009e9a:	e00b      	b.n	8009eb4 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	f003 0308 	and.w	r3, r3, #8
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d006      	beq.n	8009eb4 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	1c5a      	adds	r2, r3, #1
 8009eaa:	61fa      	str	r2, [r7, #28]
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	4413      	add	r3, r2
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb6:	9303      	str	r3, [sp, #12]
 8009eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eba:	9302      	str	r3, [sp, #8]
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	9301      	str	r3, [sp, #4]
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	68b9      	ldr	r1, [r7, #8]
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f7ff fed9 	bl	8009c82 <_out_rev>
 8009ed0:	4603      	mov	r3, r0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b096      	sub	sp, #88	; 0x58
 8009ede:	af08      	add	r7, sp, #32
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	60b9      	str	r1, [r7, #8]
 8009ee4:	607a      	str	r2, [r7, #4]
 8009ee6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8009eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d103      	bne.n	8009efa <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8009ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ef4:	f023 0310 	bic.w	r3, r3, #16
 8009ef8:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8009efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <_ntoa_long+0x30>
 8009f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d033      	beq.n	8009f72 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8009f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009f14:	fb01 f202 	mul.w	r2, r1, r2
 8009f18:	1a9b      	subs	r3, r3, r2
 8009f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8009f1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f22:	2b09      	cmp	r3, #9
 8009f24:	d804      	bhi.n	8009f30 <_ntoa_long+0x56>
 8009f26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f2a:	3330      	adds	r3, #48	; 0x30
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	e00d      	b.n	8009f4c <_ntoa_long+0x72>
 8009f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f32:	f003 0320 	and.w	r3, r3, #32
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <_ntoa_long+0x64>
 8009f3a:	2241      	movs	r2, #65	; 0x41
 8009f3c:	e000      	b.n	8009f40 <_ntoa_long+0x66>
 8009f3e:	2261      	movs	r2, #97	; 0x61
 8009f40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f44:	4413      	add	r3, r2
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	3b0a      	subs	r3, #10
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f4e:	1c59      	adds	r1, r3, #1
 8009f50:	6379      	str	r1, [r7, #52]	; 0x34
 8009f52:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009f56:	440b      	add	r3, r1
 8009f58:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8009f5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f64:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8009f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <_ntoa_long+0x98>
 8009f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6e:	2b1f      	cmp	r3, #31
 8009f70:	d9cb      	bls.n	8009f0a <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8009f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f74:	9306      	str	r3, [sp, #24]
 8009f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f78:	9305      	str	r3, [sp, #20]
 8009f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7c:	9304      	str	r3, [sp, #16]
 8009f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f80:	9303      	str	r3, [sp, #12]
 8009f82:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009f86:	9302      	str	r3, [sp, #8]
 8009f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	f107 0310 	add.w	r3, r7, #16
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	68b9      	ldr	r1, [r7, #8]
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f7ff fec2 	bl	8009d22 <_ntoa_format>
 8009f9e:	4603      	mov	r3, r0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3738      	adds	r7, #56	; 0x38
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8009fa8:	b590      	push	{r4, r7, lr}
 8009faa:	b097      	sub	sp, #92	; 0x5c
 8009fac:	af08      	add	r7, sp, #32
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8009fba:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8009fbe:	4323      	orrs	r3, r4
 8009fc0:	d103      	bne.n	8009fca <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8009fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fc4:	f023 0310 	bic.w	r3, r3, #16
 8009fc8:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8009fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d003      	beq.n	8009fdc <_ntoa_long_long+0x34>
 8009fd4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8009fd8:	4323      	orrs	r3, r4
 8009fda:	d039      	beq.n	800a050 <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8009fdc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009fe0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009fe4:	f7f6 fe30 	bl	8000c48 <__aeabi_uldivmod>
 8009fe8:	461c      	mov	r4, r3
 8009fea:	4613      	mov	r3, r2
 8009fec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8009ff0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ff4:	2b09      	cmp	r3, #9
 8009ff6:	d804      	bhi.n	800a002 <_ntoa_long_long+0x5a>
 8009ff8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ffc:	3330      	adds	r3, #48	; 0x30
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	e00d      	b.n	800a01e <_ntoa_long_long+0x76>
 800a002:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a004:	f003 0320 	and.w	r3, r3, #32
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <_ntoa_long_long+0x68>
 800a00c:	2241      	movs	r2, #65	; 0x41
 800a00e:	e000      	b.n	800a012 <_ntoa_long_long+0x6a>
 800a010:	2261      	movs	r2, #97	; 0x61
 800a012:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a016:	4413      	add	r3, r2
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	3b0a      	subs	r3, #10
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a020:	1c59      	adds	r1, r3, #1
 800a022:	6379      	str	r1, [r7, #52]	; 0x34
 800a024:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800a028:	440b      	add	r3, r1
 800a02a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800a02e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a032:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a036:	f7f6 fe07 	bl	8000c48 <__aeabi_uldivmod>
 800a03a:	4603      	mov	r3, r0
 800a03c:	460c      	mov	r4, r1
 800a03e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800a042:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800a046:	4323      	orrs	r3, r4
 800a048:	d002      	beq.n	800a050 <_ntoa_long_long+0xa8>
 800a04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a04c:	2b1f      	cmp	r3, #31
 800a04e:	d9c5      	bls.n	8009fdc <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800a050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a052:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a054:	9206      	str	r2, [sp, #24]
 800a056:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a058:	9205      	str	r2, [sp, #20]
 800a05a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a05c:	9204      	str	r2, [sp, #16]
 800a05e:	9303      	str	r3, [sp, #12]
 800a060:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800a064:	9302      	str	r3, [sp, #8]
 800a066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a068:	9301      	str	r3, [sp, #4]
 800a06a:	f107 0310 	add.w	r3, r7, #16
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	68b9      	ldr	r1, [r7, #8]
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f7ff fe53 	bl	8009d22 <_ntoa_format>
 800a07c:	4603      	mov	r3, r0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	373c      	adds	r7, #60	; 0x3c
 800a082:	46bd      	mov	sp, r7
 800a084:	bd90      	pop	{r4, r7, pc}
	...

0800a088 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800a088:	b590      	push	{r4, r7, lr}
 800a08a:	b09d      	sub	sp, #116	; 0x74
 800a08c:	af04      	add	r7, sp, #16
 800a08e:	6178      	str	r0, [r7, #20]
 800a090:	6139      	str	r1, [r7, #16]
 800a092:	60fa      	str	r2, [r7, #12]
 800a094:	60bb      	str	r3, [r7, #8]
 800a096:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800a09a:	2300      	movs	r3, #0
 800a09c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800a09e:	f04f 0300 	mov.w	r3, #0
 800a0a2:	f04f 0400 	mov.w	r4, #0
 800a0a6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800a0aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0b2:	f7f6 fd39 	bl	8000b28 <__aeabi_dcmpeq>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10f      	bne.n	800a0dc <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800a0bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0be:	9303      	str	r3, [sp, #12]
 800a0c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0c2:	9302      	str	r3, [sp, #8]
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	4baf      	ldr	r3, [pc, #700]	; (800a388 <_ftoa+0x300>)
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	6939      	ldr	r1, [r7, #16]
 800a0d2:	6978      	ldr	r0, [r7, #20]
 800a0d4:	f7ff fdd5 	bl	8009c82 <_out_rev>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	e237      	b.n	800a54c <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 800a0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800a0e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0e8:	f7f6 fd28 	bl	8000b3c <__aeabi_dcmplt>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00f      	beq.n	800a112 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800a0f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0f4:	9303      	str	r3, [sp, #12]
 800a0f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0f8:	9302      	str	r3, [sp, #8]
 800a0fa:	2304      	movs	r3, #4
 800a0fc:	9301      	str	r3, [sp, #4]
 800a0fe:	4ba3      	ldr	r3, [pc, #652]	; (800a38c <_ftoa+0x304>)
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	6939      	ldr	r1, [r7, #16]
 800a108:	6978      	ldr	r0, [r7, #20]
 800a10a:	f7ff fdba 	bl	8009c82 <_out_rev>
 800a10e:	4603      	mov	r3, r0
 800a110:	e21c      	b.n	800a54c <_ftoa+0x4c4>
  if (value > DBL_MAX)
 800a112:	f04f 32ff 	mov.w	r2, #4294967295
 800a116:	4b9e      	ldr	r3, [pc, #632]	; (800a390 <_ftoa+0x308>)
 800a118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a11c:	f7f6 fd2c 	bl	8000b78 <__aeabi_dcmpgt>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d01d      	beq.n	800a162 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800a126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a128:	f003 0304 	and.w	r3, r3, #4
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <_ftoa+0xac>
 800a130:	4b98      	ldr	r3, [pc, #608]	; (800a394 <_ftoa+0x30c>)
 800a132:	e000      	b.n	800a136 <_ftoa+0xae>
 800a134:	4b98      	ldr	r3, [pc, #608]	; (800a398 <_ftoa+0x310>)
 800a136:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a138:	f002 0204 	and.w	r2, r2, #4
 800a13c:	2a00      	cmp	r2, #0
 800a13e:	d001      	beq.n	800a144 <_ftoa+0xbc>
 800a140:	2204      	movs	r2, #4
 800a142:	e000      	b.n	800a146 <_ftoa+0xbe>
 800a144:	2203      	movs	r2, #3
 800a146:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a148:	9103      	str	r1, [sp, #12]
 800a14a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a14c:	9102      	str	r1, [sp, #8]
 800a14e:	9201      	str	r2, [sp, #4]
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	6939      	ldr	r1, [r7, #16]
 800a158:	6978      	ldr	r0, [r7, #20]
 800a15a:	f7ff fd92 	bl	8009c82 <_out_rev>
 800a15e:	4603      	mov	r3, r0
 800a160:	e1f4      	b.n	800a54c <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800a162:	a385      	add	r3, pc, #532	; (adr r3, 800a378 <_ftoa+0x2f0>)
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a16c:	f7f6 fd04 	bl	8000b78 <__aeabi_dcmpgt>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d109      	bne.n	800a18a <_ftoa+0x102>
 800a176:	a382      	add	r3, pc, #520	; (adr r3, 800a380 <_ftoa+0x2f8>)
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a180:	f7f6 fcdc 	bl	8000b3c <__aeabi_dcmplt>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00f      	beq.n	800a1aa <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800a18a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a18c:	9302      	str	r3, [sp, #8]
 800a18e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a190:	9301      	str	r3, [sp, #4]
 800a192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	ed97 0b00 	vldr	d0, [r7]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	6939      	ldr	r1, [r7, #16]
 800a1a0:	6978      	ldr	r0, [r7, #20]
 800a1a2:	f000 f9dd 	bl	800a560 <_etoa>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	e1d0      	b.n	800a54c <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800a1b0:	f04f 0200 	mov.w	r2, #0
 800a1b4:	f04f 0300 	mov.w	r3, #0
 800a1b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a1bc:	f7f6 fcbe 	bl	8000b3c <__aeabi_dcmplt>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00e      	beq.n	800a1e4 <_ftoa+0x15c>
    negative = true;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800a1cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1d0:	f04f 0000 	mov.w	r0, #0
 800a1d4:	f04f 0100 	mov.w	r1, #0
 800a1d8:	f7f6 f886 	bl	80002e8 <__aeabi_dsub>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	460c      	mov	r4, r1
 800a1e0:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800a1e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d10e      	bne.n	800a20c <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800a1ee:	2306      	movs	r3, #6
 800a1f0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800a1f2:	e00b      	b.n	800a20c <_ftoa+0x184>
    buf[len++] = '0';
 800a1f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1f6:	1c5a      	adds	r2, r3, #1
 800a1f8:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a1fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a1fe:	4413      	add	r3, r2
 800a200:	2230      	movs	r2, #48	; 0x30
 800a202:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800a206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a208:	3b01      	subs	r3, #1
 800a20a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800a20c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a20e:	2b1f      	cmp	r3, #31
 800a210:	d802      	bhi.n	800a218 <_ftoa+0x190>
 800a212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a214:	2b09      	cmp	r3, #9
 800a216:	d8ed      	bhi.n	800a1f4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 800a218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a21c:	f7f6 fccc 	bl	8000bb8 <__aeabi_d2iz>
 800a220:	4603      	mov	r3, r0
 800a222:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800a224:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a226:	f7f6 f9ad 	bl	8000584 <__aeabi_i2d>
 800a22a:	4603      	mov	r3, r0
 800a22c:	460c      	mov	r4, r1
 800a22e:	461a      	mov	r2, r3
 800a230:	4623      	mov	r3, r4
 800a232:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a236:	f7f6 f857 	bl	80002e8 <__aeabi_dsub>
 800a23a:	4603      	mov	r3, r0
 800a23c:	460c      	mov	r4, r1
 800a23e:	4618      	mov	r0, r3
 800a240:	4621      	mov	r1, r4
 800a242:	4a56      	ldr	r2, [pc, #344]	; (800a39c <_ftoa+0x314>)
 800a244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	4413      	add	r3, r2
 800a24a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a24e:	461a      	mov	r2, r3
 800a250:	4623      	mov	r3, r4
 800a252:	f7f6 fa01 	bl	8000658 <__aeabi_dmul>
 800a256:	4603      	mov	r3, r0
 800a258:	460c      	mov	r4, r1
 800a25a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800a25e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a262:	f7f6 fcd1 	bl	8000c08 <__aeabi_d2uiz>
 800a266:	4603      	mov	r3, r0
 800a268:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800a26a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a26c:	f7f6 f97a 	bl	8000564 <__aeabi_ui2d>
 800a270:	4603      	mov	r3, r0
 800a272:	460c      	mov	r4, r1
 800a274:	461a      	mov	r2, r3
 800a276:	4623      	mov	r3, r4
 800a278:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a27c:	f7f6 f834 	bl	80002e8 <__aeabi_dsub>
 800a280:	4603      	mov	r3, r0
 800a282:	460c      	mov	r4, r1
 800a284:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800a288:	f04f 0200 	mov.w	r2, #0
 800a28c:	4b44      	ldr	r3, [pc, #272]	; (800a3a0 <_ftoa+0x318>)
 800a28e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a292:	f7f6 fc71 	bl	8000b78 <__aeabi_dcmpgt>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d018      	beq.n	800a2ce <_ftoa+0x246>
    ++frac;
 800a29c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a29e:	3301      	adds	r3, #1
 800a2a0:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800a2a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a2a4:	f7f6 f95e 	bl	8000564 <__aeabi_ui2d>
 800a2a8:	4a3c      	ldr	r2, [pc, #240]	; (800a39c <_ftoa+0x314>)
 800a2aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	4413      	add	r3, r2
 800a2b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	4623      	mov	r3, r4
 800a2b8:	f7f6 fc54 	bl	8000b64 <__aeabi_dcmpge>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d01a      	beq.n	800a2f8 <_ftoa+0x270>
      frac = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800a2c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	657b      	str	r3, [r7, #84]	; 0x54
 800a2cc:	e014      	b.n	800a2f8 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 800a2ce:	f04f 0200 	mov.w	r2, #0
 800a2d2:	4b33      	ldr	r3, [pc, #204]	; (800a3a0 <_ftoa+0x318>)
 800a2d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a2d8:	f7f6 fc30 	bl	8000b3c <__aeabi_dcmplt>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10a      	bne.n	800a2f8 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800a2e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d004      	beq.n	800a2f2 <_ftoa+0x26a>
 800a2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2ea:	f003 0301 	and.w	r3, r3, #1
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d002      	beq.n	800a2f8 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800a2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800a2f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d136      	bne.n	800a36c <_ftoa+0x2e4>
    diff = value - (double)whole;
 800a2fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a300:	f7f6 f940 	bl	8000584 <__aeabi_i2d>
 800a304:	4603      	mov	r3, r0
 800a306:	460c      	mov	r4, r1
 800a308:	461a      	mov	r2, r3
 800a30a:	4623      	mov	r3, r4
 800a30c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a310:	f7f5 ffea 	bl	80002e8 <__aeabi_dsub>
 800a314:	4603      	mov	r3, r0
 800a316:	460c      	mov	r4, r1
 800a318:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800a31c:	2301      	movs	r3, #1
 800a31e:	461c      	mov	r4, r3
 800a320:	f04f 0200 	mov.w	r2, #0
 800a324:	4b1e      	ldr	r3, [pc, #120]	; (800a3a0 <_ftoa+0x318>)
 800a326:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a32a:	f7f6 fc07 	bl	8000b3c <__aeabi_dcmplt>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d101      	bne.n	800a338 <_ftoa+0x2b0>
 800a334:	2300      	movs	r3, #0
 800a336:	461c      	mov	r4, r3
 800a338:	b2e3      	uxtb	r3, r4
 800a33a:	f083 0301 	eor.w	r3, r3, #1
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b00      	cmp	r3, #0
 800a342:	d109      	bne.n	800a358 <_ftoa+0x2d0>
 800a344:	f04f 0200 	mov.w	r2, #0
 800a348:	4b15      	ldr	r3, [pc, #84]	; (800a3a0 <_ftoa+0x318>)
 800a34a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a34e:	f7f6 fc13 	bl	8000b78 <__aeabi_dcmpgt>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d069      	beq.n	800a42c <_ftoa+0x3a4>
 800a358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a35a:	f003 0301 	and.w	r3, r3, #1
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 8087 	beq.w	800a472 <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800a364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a366:	3301      	adds	r3, #1
 800a368:	657b      	str	r3, [r7, #84]	; 0x54
 800a36a:	e082      	b.n	800a472 <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 800a36c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a36e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a370:	e039      	b.n	800a3e6 <_ftoa+0x35e>
 800a372:	bf00      	nop
 800a374:	f3af 8000 	nop.w
 800a378:	00000000 	.word	0x00000000
 800a37c:	41cdcd65 	.word	0x41cdcd65
 800a380:	00000000 	.word	0x00000000
 800a384:	c1cdcd65 	.word	0xc1cdcd65
 800a388:	08014988 	.word	0x08014988
 800a38c:	0801498c 	.word	0x0801498c
 800a390:	7fefffff 	.word	0x7fefffff
 800a394:	08014994 	.word	0x08014994
 800a398:	0801499c 	.word	0x0801499c
 800a39c:	080150c8 	.word	0x080150c8
 800a3a0:	3fe00000 	.word	0x3fe00000
      --count;
 800a3a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800a3aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a3ac:	4b69      	ldr	r3, [pc, #420]	; (800a554 <_ftoa+0x4cc>)
 800a3ae:	fba3 2301 	umull	r2, r3, r3, r1
 800a3b2:	08da      	lsrs	r2, r3, #3
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	4413      	add	r3, r2
 800a3ba:	005b      	lsls	r3, r3, #1
 800a3bc:	1aca      	subs	r2, r1, r3
 800a3be:	b2d2      	uxtb	r2, r2
 800a3c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3c2:	1c59      	adds	r1, r3, #1
 800a3c4:	65f9      	str	r1, [r7, #92]	; 0x5c
 800a3c6:	3230      	adds	r2, #48	; 0x30
 800a3c8:	b2d2      	uxtb	r2, r2
 800a3ca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800a3ce:	440b      	add	r3, r1
 800a3d0:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800a3d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3d6:	4a5f      	ldr	r2, [pc, #380]	; (800a554 <_ftoa+0x4cc>)
 800a3d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a3dc:	08db      	lsrs	r3, r3, #3
 800a3de:	653b      	str	r3, [r7, #80]	; 0x50
 800a3e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d003      	beq.n	800a3ee <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a3e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3e8:	2b1f      	cmp	r3, #31
 800a3ea:	d9db      	bls.n	800a3a4 <_ftoa+0x31c>
 800a3ec:	e00a      	b.n	800a404 <_ftoa+0x37c>
        break;
 800a3ee:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800a3f0:	e008      	b.n	800a404 <_ftoa+0x37c>
      buf[len++] = '0';
 800a3f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3f4:	1c5a      	adds	r2, r3, #1
 800a3f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a3f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a3fc:	4413      	add	r3, r2
 800a3fe:	2230      	movs	r2, #48	; 0x30
 800a400:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800a404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a406:	2b1f      	cmp	r3, #31
 800a408:	d804      	bhi.n	800a414 <_ftoa+0x38c>
 800a40a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a40c:	1e5a      	subs	r2, r3, #1
 800a40e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a410:	2b00      	cmp	r3, #0
 800a412:	d1ee      	bne.n	800a3f2 <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a416:	2b1f      	cmp	r3, #31
 800a418:	d82b      	bhi.n	800a472 <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 800a41a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a41c:	1c5a      	adds	r2, r3, #1
 800a41e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a420:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a424:	4413      	add	r3, r2
 800a426:	222e      	movs	r2, #46	; 0x2e
 800a428:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a42c:	e021      	b.n	800a472 <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 800a42e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a430:	4b49      	ldr	r3, [pc, #292]	; (800a558 <_ftoa+0x4d0>)
 800a432:	fb83 1302 	smull	r1, r3, r3, r2
 800a436:	1099      	asrs	r1, r3, #2
 800a438:	17d3      	asrs	r3, r2, #31
 800a43a:	1ac9      	subs	r1, r1, r3
 800a43c:	460b      	mov	r3, r1
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	440b      	add	r3, r1
 800a442:	005b      	lsls	r3, r3, #1
 800a444:	1ad1      	subs	r1, r2, r3
 800a446:	b2ca      	uxtb	r2, r1
 800a448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a44a:	1c59      	adds	r1, r3, #1
 800a44c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800a44e:	3230      	adds	r2, #48	; 0x30
 800a450:	b2d2      	uxtb	r2, r2
 800a452:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800a456:	440b      	add	r3, r1
 800a458:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800a45c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a45e:	4a3e      	ldr	r2, [pc, #248]	; (800a558 <_ftoa+0x4d0>)
 800a460:	fb82 1203 	smull	r1, r2, r2, r3
 800a464:	1092      	asrs	r2, r2, #2
 800a466:	17db      	asrs	r3, r3, #31
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	657b      	str	r3, [r7, #84]	; 0x54
 800a46c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d003      	beq.n	800a47a <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a474:	2b1f      	cmp	r3, #31
 800a476:	d9da      	bls.n	800a42e <_ftoa+0x3a6>
 800a478:	e000      	b.n	800a47c <_ftoa+0x3f4>
      break;
 800a47a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800a47c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a47e:	f003 0302 	and.w	r3, r3, #2
 800a482:	2b00      	cmp	r3, #0
 800a484:	d124      	bne.n	800a4d0 <_ftoa+0x448>
 800a486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a488:	f003 0301 	and.w	r3, r3, #1
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d01f      	beq.n	800a4d0 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800a490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a492:	2b00      	cmp	r3, #0
 800a494:	d015      	beq.n	800a4c2 <_ftoa+0x43a>
 800a496:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d104      	bne.n	800a4a8 <_ftoa+0x420>
 800a49e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4a0:	f003 030c 	and.w	r3, r3, #12
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00c      	beq.n	800a4c2 <_ftoa+0x43a>
      width--;
 800a4a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800a4ae:	e008      	b.n	800a4c2 <_ftoa+0x43a>
      buf[len++] = '0';
 800a4b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4b2:	1c5a      	adds	r2, r3, #1
 800a4b4:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a4b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a4ba:	4413      	add	r3, r2
 800a4bc:	2230      	movs	r2, #48	; 0x30
 800a4be:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800a4c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a4c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d202      	bcs.n	800a4d0 <_ftoa+0x448>
 800a4ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4cc:	2b1f      	cmp	r3, #31
 800a4ce:	d9ef      	bls.n	800a4b0 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a4d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4d2:	2b1f      	cmp	r3, #31
 800a4d4:	d82a      	bhi.n	800a52c <_ftoa+0x4a4>
    if (negative) {
 800a4d6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d009      	beq.n	800a4f2 <_ftoa+0x46a>
      buf[len++] = '-';
 800a4de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4e0:	1c5a      	adds	r2, r3, #1
 800a4e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a4e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a4e8:	4413      	add	r3, r2
 800a4ea:	222d      	movs	r2, #45	; 0x2d
 800a4ec:	f803 2c48 	strb.w	r2, [r3, #-72]
 800a4f0:	e01c      	b.n	800a52c <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 800a4f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4f4:	f003 0304 	and.w	r3, r3, #4
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d009      	beq.n	800a510 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800a4fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a502:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a506:	4413      	add	r3, r2
 800a508:	222b      	movs	r2, #43	; 0x2b
 800a50a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800a50e:	e00d      	b.n	800a52c <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 800a510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a512:	f003 0308 	and.w	r3, r3, #8
 800a516:	2b00      	cmp	r3, #0
 800a518:	d008      	beq.n	800a52c <_ftoa+0x4a4>
      buf[len++] = ' ';
 800a51a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a520:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a524:	4413      	add	r3, r2
 800a526:	2220      	movs	r2, #32
 800a528:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800a52c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a52e:	9303      	str	r3, [sp, #12]
 800a530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a532:	9302      	str	r3, [sp, #8]
 800a534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	f107 0318 	add.w	r3, r7, #24
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	6939      	ldr	r1, [r7, #16]
 800a544:	6978      	ldr	r0, [r7, #20]
 800a546:	f7ff fb9c 	bl	8009c82 <_out_rev>
 800a54a:	4603      	mov	r3, r0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3764      	adds	r7, #100	; 0x64
 800a550:	46bd      	mov	sp, r7
 800a552:	bd90      	pop	{r4, r7, pc}
 800a554:	cccccccd 	.word	0xcccccccd
 800a558:	66666667 	.word	0x66666667
 800a55c:	00000000 	.word	0x00000000

0800a560 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	b09d      	sub	sp, #116	; 0x74
 800a566:	af06      	add	r7, sp, #24
 800a568:	61f8      	str	r0, [r7, #28]
 800a56a:	61b9      	str	r1, [r7, #24]
 800a56c:	617a      	str	r2, [r7, #20]
 800a56e:	613b      	str	r3, [r7, #16]
 800a570:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800a574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a578:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a57c:	f7f6 fad4 	bl	8000b28 <__aeabi_dcmpeq>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d014      	beq.n	800a5b0 <_etoa+0x50>
 800a586:	f04f 32ff 	mov.w	r2, #4294967295
 800a58a:	4bc9      	ldr	r3, [pc, #804]	; (800a8b0 <_etoa+0x350>)
 800a58c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a590:	f7f6 faf2 	bl	8000b78 <__aeabi_dcmpgt>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d10a      	bne.n	800a5b0 <_etoa+0x50>
 800a59a:	f04f 32ff 	mov.w	r2, #4294967295
 800a59e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800a5a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5a6:	f7f6 fac9 	bl	8000b3c <__aeabi_dcmplt>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d012      	beq.n	800a5d6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800a5b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5b4:	9302      	str	r3, [sp, #8]
 800a5b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5ba:	9301      	str	r3, [sp, #4]
 800a5bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	ed97 0b02 	vldr	d0, [r7, #8]
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	69b9      	ldr	r1, [r7, #24]
 800a5cc:	69f8      	ldr	r0, [r7, #28]
 800a5ce:	f7ff fd5b 	bl	800a088 <_ftoa>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	e24f      	b.n	800aa76 <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	461c      	mov	r4, r3
 800a5da:	f04f 0200 	mov.w	r2, #0
 800a5de:	f04f 0300 	mov.w	r3, #0
 800a5e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5e6:	f7f6 faa9 	bl	8000b3c <__aeabi_dcmplt>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <_etoa+0x94>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	461c      	mov	r4, r3
 800a5f4:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 800a5f8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d005      	beq.n	800a60c <_etoa+0xac>
    value = -value;
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	60bb      	str	r3, [r7, #8]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a60a:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800a60c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a614:	2b00      	cmp	r3, #0
 800a616:	d102      	bne.n	800a61e <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800a618:	2306      	movs	r3, #6
 800a61a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800a61e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a622:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800a626:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a62a:	f04f 0300 	mov.w	r3, #0
 800a62e:	f04f 0400 	mov.w	r4, #0
 800a632:	0d13      	lsrs	r3, r2, #20
 800a634:	2400      	movs	r4, #0
 800a636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a63a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a63e:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800a640:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a644:	f04f 31ff 	mov.w	r1, #4294967295
 800a648:	4a9a      	ldr	r2, [pc, #616]	; (800a8b4 <_etoa+0x354>)
 800a64a:	ea03 0801 	and.w	r8, r3, r1
 800a64e:	ea04 0902 	and.w	r9, r4, r2
 800a652:	f04f 0100 	mov.w	r1, #0
 800a656:	4a98      	ldr	r2, [pc, #608]	; (800a8b8 <_etoa+0x358>)
 800a658:	ea48 0301 	orr.w	r3, r8, r1
 800a65c:	ea49 0402 	orr.w	r4, r9, r2
 800a660:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800a664:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a666:	f7f5 ff8d 	bl	8000584 <__aeabi_i2d>
 800a66a:	a385      	add	r3, pc, #532	; (adr r3, 800a880 <_etoa+0x320>)
 800a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a670:	f7f5 fff2 	bl	8000658 <__aeabi_dmul>
 800a674:	4603      	mov	r3, r0
 800a676:	460c      	mov	r4, r1
 800a678:	4618      	mov	r0, r3
 800a67a:	4621      	mov	r1, r4
 800a67c:	a382      	add	r3, pc, #520	; (adr r3, 800a888 <_etoa+0x328>)
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	f7f5 fe33 	bl	80002ec <__adddf3>
 800a686:	4603      	mov	r3, r0
 800a688:	460c      	mov	r4, r1
 800a68a:	4698      	mov	r8, r3
 800a68c:	46a1      	mov	r9, r4
 800a68e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a692:	f04f 0200 	mov.w	r2, #0
 800a696:	4b89      	ldr	r3, [pc, #548]	; (800a8bc <_etoa+0x35c>)
 800a698:	f7f5 fe26 	bl	80002e8 <__aeabi_dsub>
 800a69c:	4603      	mov	r3, r0
 800a69e:	460c      	mov	r4, r1
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	a37a      	add	r3, pc, #488	; (adr r3, 800a890 <_etoa+0x330>)
 800a6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6aa:	f7f5 ffd5 	bl	8000658 <__aeabi_dmul>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	460c      	mov	r4, r1
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	4623      	mov	r3, r4
 800a6b6:	4640      	mov	r0, r8
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	f7f5 fe17 	bl	80002ec <__adddf3>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	4621      	mov	r1, r4
 800a6c6:	f7f6 fa77 	bl	8000bb8 <__aeabi_d2iz>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800a6ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a6d0:	f7f5 ff58 	bl	8000584 <__aeabi_i2d>
 800a6d4:	a370      	add	r3, pc, #448	; (adr r3, 800a898 <_etoa+0x338>)
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f7f5 ffbd 	bl	8000658 <__aeabi_dmul>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	f04f 0200 	mov.w	r2, #0
 800a6ea:	4b75      	ldr	r3, [pc, #468]	; (800a8c0 <_etoa+0x360>)
 800a6ec:	f7f5 fdfe 	bl	80002ec <__adddf3>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	f7f6 fa5e 	bl	8000bb8 <__aeabi_d2iz>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800a700:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a702:	f7f5 ff3f 	bl	8000584 <__aeabi_i2d>
 800a706:	a366      	add	r3, pc, #408	; (adr r3, 800a8a0 <_etoa+0x340>)
 800a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70c:	f7f5 ffa4 	bl	8000658 <__aeabi_dmul>
 800a710:	4603      	mov	r3, r0
 800a712:	460c      	mov	r4, r1
 800a714:	4698      	mov	r8, r3
 800a716:	46a1      	mov	r9, r4
 800a718:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a71a:	f7f5 ff33 	bl	8000584 <__aeabi_i2d>
 800a71e:	a362      	add	r3, pc, #392	; (adr r3, 800a8a8 <_etoa+0x348>)
 800a720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a724:	f7f5 ff98 	bl	8000658 <__aeabi_dmul>
 800a728:	4603      	mov	r3, r0
 800a72a:	460c      	mov	r4, r1
 800a72c:	461a      	mov	r2, r3
 800a72e:	4623      	mov	r3, r4
 800a730:	4640      	mov	r0, r8
 800a732:	4649      	mov	r1, r9
 800a734:	f7f5 fdd8 	bl	80002e8 <__aeabi_dsub>
 800a738:	4603      	mov	r3, r0
 800a73a:	460c      	mov	r4, r1
 800a73c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 800a740:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a744:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a748:	f7f5 ff86 	bl	8000658 <__aeabi_dmul>
 800a74c:	4603      	mov	r3, r0
 800a74e:	460c      	mov	r4, r1
 800a750:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800a754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a756:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a75a:	4619      	mov	r1, r3
 800a75c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800a760:	f04f 0300 	mov.w	r3, #0
 800a764:	f04f 0400 	mov.w	r4, #0
 800a768:	050c      	lsls	r4, r1, #20
 800a76a:	2300      	movs	r3, #0
 800a76c:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800a770:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a774:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a778:	4602      	mov	r2, r0
 800a77a:	460b      	mov	r3, r1
 800a77c:	f7f5 fdb6 	bl	80002ec <__adddf3>
 800a780:	4603      	mov	r3, r0
 800a782:	460c      	mov	r4, r1
 800a784:	469a      	mov	sl, r3
 800a786:	46a3      	mov	fp, r4
 800a788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a78c:	f04f 0000 	mov.w	r0, #0
 800a790:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a794:	f7f5 fda8 	bl	80002e8 <__aeabi_dsub>
 800a798:	4603      	mov	r3, r0
 800a79a:	460c      	mov	r4, r1
 800a79c:	e9c7 3400 	strd	r3, r4, [r7]
 800a7a0:	f04f 0200 	mov.w	r2, #0
 800a7a4:	4b47      	ldr	r3, [pc, #284]	; (800a8c4 <_etoa+0x364>)
 800a7a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a7aa:	f7f6 f87f 	bl	80008ac <__aeabi_ddiv>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	460c      	mov	r4, r1
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	f04f 0200 	mov.w	r2, #0
 800a7ba:	4b43      	ldr	r3, [pc, #268]	; (800a8c8 <_etoa+0x368>)
 800a7bc:	f7f5 fd96 	bl	80002ec <__adddf3>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	4623      	mov	r3, r4
 800a7c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a7cc:	f7f6 f86e 	bl	80008ac <__aeabi_ddiv>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	f04f 0200 	mov.w	r2, #0
 800a7dc:	4b3b      	ldr	r3, [pc, #236]	; (800a8cc <_etoa+0x36c>)
 800a7de:	f7f5 fd85 	bl	80002ec <__adddf3>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	4623      	mov	r3, r4
 800a7ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800a7ee:	f7f6 f85d 	bl	80008ac <__aeabi_ddiv>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	4623      	mov	r3, r4
 800a7fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a7fe:	f7f5 fd75 	bl	80002ec <__adddf3>
 800a802:	4603      	mov	r3, r0
 800a804:	460c      	mov	r4, r1
 800a806:	461a      	mov	r2, r3
 800a808:	4623      	mov	r3, r4
 800a80a:	4650      	mov	r0, sl
 800a80c:	4659      	mov	r1, fp
 800a80e:	f7f6 f84d 	bl	80008ac <__aeabi_ddiv>
 800a812:	4603      	mov	r3, r0
 800a814:	460c      	mov	r4, r1
 800a816:	4618      	mov	r0, r3
 800a818:	4621      	mov	r1, r4
 800a81a:	f04f 0200 	mov.w	r2, #0
 800a81e:	4b26      	ldr	r3, [pc, #152]	; (800a8b8 <_etoa+0x358>)
 800a820:	f7f5 fd64 	bl	80002ec <__adddf3>
 800a824:	4603      	mov	r3, r0
 800a826:	460c      	mov	r4, r1
 800a828:	461a      	mov	r2, r3
 800a82a:	4623      	mov	r3, r4
 800a82c:	4640      	mov	r0, r8
 800a82e:	4649      	mov	r1, r9
 800a830:	f7f5 ff12 	bl	8000658 <__aeabi_dmul>
 800a834:	4603      	mov	r3, r0
 800a836:	460c      	mov	r4, r1
 800a838:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 800a83c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a840:	461a      	mov	r2, r3
 800a842:	4623      	mov	r3, r4
 800a844:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a848:	f7f6 f978 	bl	8000b3c <__aeabi_dcmplt>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00d      	beq.n	800a86e <_etoa+0x30e>
    expval--;
 800a852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a854:	3b01      	subs	r3, #1
 800a856:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 800a858:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a85c:	f04f 0200 	mov.w	r2, #0
 800a860:	4b19      	ldr	r3, [pc, #100]	; (800a8c8 <_etoa+0x368>)
 800a862:	f7f6 f823 	bl	80008ac <__aeabi_ddiv>
 800a866:	4603      	mov	r3, r0
 800a868:	460c      	mov	r4, r1
 800a86a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800a86e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a870:	2b63      	cmp	r3, #99	; 0x63
 800a872:	dc2d      	bgt.n	800a8d0 <_etoa+0x370>
 800a874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a876:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800a87a:	db29      	blt.n	800a8d0 <_etoa+0x370>
 800a87c:	2304      	movs	r3, #4
 800a87e:	e028      	b.n	800a8d2 <_etoa+0x372>
 800a880:	509f79fb 	.word	0x509f79fb
 800a884:	3fd34413 	.word	0x3fd34413
 800a888:	8b60c8b3 	.word	0x8b60c8b3
 800a88c:	3fc68a28 	.word	0x3fc68a28
 800a890:	636f4361 	.word	0x636f4361
 800a894:	3fd287a7 	.word	0x3fd287a7
 800a898:	0979a371 	.word	0x0979a371
 800a89c:	400a934f 	.word	0x400a934f
 800a8a0:	bbb55516 	.word	0xbbb55516
 800a8a4:	40026bb1 	.word	0x40026bb1
 800a8a8:	fefa39ef 	.word	0xfefa39ef
 800a8ac:	3fe62e42 	.word	0x3fe62e42
 800a8b0:	7fefffff 	.word	0x7fefffff
 800a8b4:	000fffff 	.word	0x000fffff
 800a8b8:	3ff00000 	.word	0x3ff00000
 800a8bc:	3ff80000 	.word	0x3ff80000
 800a8c0:	3fe00000 	.word	0x3fe00000
 800a8c4:	402c0000 	.word	0x402c0000
 800a8c8:	40240000 	.word	0x40240000
 800a8cc:	40180000 	.word	0x40180000
 800a8d0:	2305      	movs	r3, #5
 800a8d2:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800a8d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d03d      	beq.n	800a95c <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800a8e0:	a367      	add	r3, pc, #412	; (adr r3, 800aa80 <_etoa+0x520>)
 800a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a8ea:	f7f6 f93b 	bl	8000b64 <__aeabi_dcmpge>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d024      	beq.n	800a93e <_etoa+0x3de>
 800a8f4:	a364      	add	r3, pc, #400	; (adr r3, 800aa88 <_etoa+0x528>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a8fe:	f7f6 f91d 	bl	8000b3c <__aeabi_dcmplt>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d01a      	beq.n	800a93e <_etoa+0x3de>
      if ((int)prec > expval) {
 800a908:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a90c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a90e:	429a      	cmp	r2, r3
 800a910:	da07      	bge.n	800a922 <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 800a912:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	3b01      	subs	r3, #1
 800a91c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a920:	e002      	b.n	800a928 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800a928:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a92c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	657b      	str	r3, [r7, #84]	; 0x54
 800a93c:	e00e      	b.n	800a95c <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800a93e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00a      	beq.n	800a95c <_etoa+0x3fc>
 800a946:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a94a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d004      	beq.n	800a95c <_etoa+0x3fc>
        --prec;
 800a952:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a956:	3b01      	subs	r3, #1
 800a958:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800a95c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a960:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 800a962:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a968:	429a      	cmp	r2, r3
 800a96a:	d904      	bls.n	800a976 <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800a96c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a96e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a974:	e001      	b.n	800a97a <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800a976:	2300      	movs	r3, #0
 800a978:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800a97a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a97e:	f003 0302 	and.w	r3, r3, #2
 800a982:	2b00      	cmp	r3, #0
 800a984:	d004      	beq.n	800a990 <_etoa+0x430>
 800a986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d001      	beq.n	800a990 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800a98c:	2300      	movs	r3, #0
 800a98e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 800a990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00b      	beq.n	800a9ae <_etoa+0x44e>
    value /= conv.F;
 800a996:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a99a:	461a      	mov	r2, r3
 800a99c:	4623      	mov	r3, r4
 800a99e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9a2:	f7f5 ff83 	bl	80008ac <__aeabi_ddiv>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800a9b2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d004      	beq.n	800a9c4 <_etoa+0x464>
 800a9ba:	68bd      	ldr	r5, [r7, #8]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800a9c2:	e001      	b.n	800a9c8 <_etoa+0x468>
 800a9c4:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800a9c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9d0:	9302      	str	r3, [sp, #8]
 800a9d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9d4:	9301      	str	r3, [sp, #4]
 800a9d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	ec46 5b10 	vmov	d0, r5, r6
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	69b9      	ldr	r1, [r7, #24]
 800a9e6:	69f8      	ldr	r0, [r7, #28]
 800a9e8:	f7ff fb4e 	bl	800a088 <_ftoa>
 800a9ec:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800a9ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d03f      	beq.n	800aa74 <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800a9f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9f8:	f003 0320 	and.w	r3, r3, #32
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <_etoa+0x4a4>
 800aa00:	2045      	movs	r0, #69	; 0x45
 800aa02:	e000      	b.n	800aa06 <_etoa+0x4a6>
 800aa04:	2065      	movs	r0, #101	; 0x65
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	1c53      	adds	r3, r2, #1
 800aa0a:	617b      	str	r3, [r7, #20]
 800aa0c:	69fc      	ldr	r4, [r7, #28]
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	69b9      	ldr	r1, [r7, #24]
 800aa12:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800aa14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	bfb8      	it	lt
 800aa1a:	425b      	neglt	r3, r3
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa20:	0fdb      	lsrs	r3, r3, #31
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa26:	3a01      	subs	r2, #1
 800aa28:	2105      	movs	r1, #5
 800aa2a:	9105      	str	r1, [sp, #20]
 800aa2c:	9204      	str	r2, [sp, #16]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	9203      	str	r2, [sp, #12]
 800aa32:	220a      	movs	r2, #10
 800aa34:	9202      	str	r2, [sp, #8]
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	9000      	str	r0, [sp, #0]
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	69b9      	ldr	r1, [r7, #24]
 800aa40:	69f8      	ldr	r0, [r7, #28]
 800aa42:	f7ff fa4a 	bl	8009eda <_ntoa_long>
 800aa46:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800aa48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa4c:	f003 0302 	and.w	r3, r3, #2
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00f      	beq.n	800aa74 <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800aa54:	e007      	b.n	800aa66 <_etoa+0x506>
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	1c53      	adds	r3, r2, #1
 800aa5a:	617b      	str	r3, [r7, #20]
 800aa5c:	69fc      	ldr	r4, [r7, #28]
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	69b9      	ldr	r1, [r7, #24]
 800aa62:	2020      	movs	r0, #32
 800aa64:	47a0      	blx	r4
 800aa66:	697a      	ldr	r2, [r7, #20]
 800aa68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d8f0      	bhi.n	800aa56 <_etoa+0x4f6>
    }
  }
  return idx;
 800aa74:	697b      	ldr	r3, [r7, #20]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	375c      	adds	r7, #92	; 0x5c
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa80:	eb1c432d 	.word	0xeb1c432d
 800aa84:	3f1a36e2 	.word	0x3f1a36e2
 800aa88:	00000000 	.word	0x00000000
 800aa8c:	412e8480 	.word	0x412e8480

0800aa90 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800aa90:	b5b0      	push	{r4, r5, r7, lr}
 800aa92:	b0a0      	sub	sp, #128	; 0x80
 800aa94:	af0a      	add	r7, sp, #40	; 0x28
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f040 8492 	bne.w	800b3ce <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 800aaaa:	4ba0      	ldr	r3, [pc, #640]	; (800ad2c <_vsnprintf+0x29c>)
 800aaac:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800aaae:	f000 bc8e 	b.w	800b3ce <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	2b25      	cmp	r3, #37	; 0x25
 800aab8:	d00d      	beq.n	800aad6 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	7818      	ldrb	r0, [r3, #0]
 800aabe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aac0:	1c53      	adds	r3, r2, #1
 800aac2:	647b      	str	r3, [r7, #68]	; 0x44
 800aac4:	68fc      	ldr	r4, [r7, #12]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	47a0      	blx	r4
      format++;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	3301      	adds	r3, #1
 800aad0:	603b      	str	r3, [r7, #0]
      continue;
 800aad2:	f000 bc7c 	b.w	800b3ce <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	3301      	adds	r3, #1
 800aada:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800aadc:	2300      	movs	r3, #0
 800aade:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	3b20      	subs	r3, #32
 800aae6:	2b10      	cmp	r3, #16
 800aae8:	d856      	bhi.n	800ab98 <_vsnprintf+0x108>
 800aaea:	a201      	add	r2, pc, #4	; (adr r2, 800aaf0 <_vsnprintf+0x60>)
 800aaec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf0:	0800ab71 	.word	0x0800ab71
 800aaf4:	0800ab99 	.word	0x0800ab99
 800aaf8:	0800ab99 	.word	0x0800ab99
 800aafc:	0800ab85 	.word	0x0800ab85
 800ab00:	0800ab99 	.word	0x0800ab99
 800ab04:	0800ab99 	.word	0x0800ab99
 800ab08:	0800ab99 	.word	0x0800ab99
 800ab0c:	0800ab99 	.word	0x0800ab99
 800ab10:	0800ab99 	.word	0x0800ab99
 800ab14:	0800ab99 	.word	0x0800ab99
 800ab18:	0800ab99 	.word	0x0800ab99
 800ab1c:	0800ab5d 	.word	0x0800ab5d
 800ab20:	0800ab99 	.word	0x0800ab99
 800ab24:	0800ab49 	.word	0x0800ab49
 800ab28:	0800ab99 	.word	0x0800ab99
 800ab2c:	0800ab99 	.word	0x0800ab99
 800ab30:	0800ab35 	.word	0x0800ab35
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800ab34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab36:	f043 0301 	orr.w	r3, r3, #1
 800ab3a:	657b      	str	r3, [r7, #84]	; 0x54
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	603b      	str	r3, [r7, #0]
 800ab42:	2301      	movs	r3, #1
 800ab44:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab46:	e02a      	b.n	800ab9e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800ab48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab4a:	f043 0302 	orr.w	r3, r3, #2
 800ab4e:	657b      	str	r3, [r7, #84]	; 0x54
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	3301      	adds	r3, #1
 800ab54:	603b      	str	r3, [r7, #0]
 800ab56:	2301      	movs	r3, #1
 800ab58:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab5a:	e020      	b.n	800ab9e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800ab5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab5e:	f043 0304 	orr.w	r3, r3, #4
 800ab62:	657b      	str	r3, [r7, #84]	; 0x54
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	3301      	adds	r3, #1
 800ab68:	603b      	str	r3, [r7, #0]
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab6e:	e016      	b.n	800ab9e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800ab70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab72:	f043 0308 	orr.w	r3, r3, #8
 800ab76:	657b      	str	r3, [r7, #84]	; 0x54
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	603b      	str	r3, [r7, #0]
 800ab7e:	2301      	movs	r3, #1
 800ab80:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab82:	e00c      	b.n	800ab9e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800ab84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab86:	f043 0310 	orr.w	r3, r3, #16
 800ab8a:	657b      	str	r3, [r7, #84]	; 0x54
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	603b      	str	r3, [r7, #0]
 800ab92:	2301      	movs	r3, #1
 800ab94:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab96:	e002      	b.n	800ab9e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab9c:	bf00      	nop
      }
    } while (n);
 800ab9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d19d      	bne.n	800aae0 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800aba4:	2300      	movs	r3, #0
 800aba6:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	4618      	mov	r0, r3
 800abae:	f7ff f82d 	bl	8009c0c <_is_digit>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d005      	beq.n	800abc4 <_vsnprintf+0x134>
      width = _atoi(&format);
 800abb8:	463b      	mov	r3, r7
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff f83d 	bl	8009c3a <_atoi>
 800abc0:	6538      	str	r0, [r7, #80]	; 0x50
 800abc2:	e018      	b.n	800abf6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	2b2a      	cmp	r3, #42	; 0x2a
 800abca:	d114      	bne.n	800abf6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800abcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abce:	1d1a      	adds	r2, r3, #4
 800abd0:	66ba      	str	r2, [r7, #104]	; 0x68
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800abd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd8:	2b00      	cmp	r3, #0
 800abda:	da07      	bge.n	800abec <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800abdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abde:	f043 0302 	orr.w	r3, r3, #2
 800abe2:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800abe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe6:	425b      	negs	r3, r3
 800abe8:	653b      	str	r3, [r7, #80]	; 0x50
 800abea:	e001      	b.n	800abf0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	3301      	adds	r3, #1
 800abf4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800abf6:	2300      	movs	r3, #0
 800abf8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	2b2e      	cmp	r3, #46	; 0x2e
 800ac00:	d124      	bne.n	800ac4c <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800ac02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac08:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fe fff9 	bl	8009c0c <_is_digit>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <_vsnprintf+0x19c>
        precision = _atoi(&format);
 800ac20:	463b      	mov	r3, r7
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7ff f809 	bl	8009c3a <_atoi>
 800ac28:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ac2a:	e00f      	b.n	800ac4c <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	2b2a      	cmp	r3, #42	; 0x2a
 800ac32:	d10b      	bne.n	800ac4c <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800ac34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac36:	1d1a      	adds	r2, r3, #4
 800ac38:	66ba      	str	r2, [r7, #104]	; 0x68
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800ac3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ac44:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	3b68      	subs	r3, #104	; 0x68
 800ac52:	2b12      	cmp	r3, #18
 800ac54:	d866      	bhi.n	800ad24 <_vsnprintf+0x294>
 800ac56:	a201      	add	r2, pc, #4	; (adr r2, 800ac5c <_vsnprintf+0x1cc>)
 800ac58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5c:	0800accf 	.word	0x0800accf
 800ac60:	0800ad25 	.word	0x0800ad25
 800ac64:	0800ad05 	.word	0x0800ad05
 800ac68:	0800ad25 	.word	0x0800ad25
 800ac6c:	0800aca9 	.word	0x0800aca9
 800ac70:	0800ad25 	.word	0x0800ad25
 800ac74:	0800ad25 	.word	0x0800ad25
 800ac78:	0800ad25 	.word	0x0800ad25
 800ac7c:	0800ad25 	.word	0x0800ad25
 800ac80:	0800ad25 	.word	0x0800ad25
 800ac84:	0800ad25 	.word	0x0800ad25
 800ac88:	0800ad25 	.word	0x0800ad25
 800ac8c:	0800acf5 	.word	0x0800acf5
 800ac90:	0800ad25 	.word	0x0800ad25
 800ac94:	0800ad25 	.word	0x0800ad25
 800ac98:	0800ad25 	.word	0x0800ad25
 800ac9c:	0800ad25 	.word	0x0800ad25
 800aca0:	0800ad25 	.word	0x0800ad25
 800aca4:	0800ad15 	.word	0x0800ad15
      case 'l' :
        flags |= FLAGS_LONG;
 800aca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acae:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	3301      	adds	r3, #1
 800acb4:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	2b6c      	cmp	r3, #108	; 0x6c
 800acbc:	d134      	bne.n	800ad28 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800acbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800acc4:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	3301      	adds	r3, #1
 800acca:	603b      	str	r3, [r7, #0]
        }
        break;
 800accc:	e02c      	b.n	800ad28 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800acce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acd4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	3301      	adds	r3, #1
 800acda:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	2b68      	cmp	r3, #104	; 0x68
 800ace2:	d125      	bne.n	800ad30 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800ace4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ace6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acea:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	3301      	adds	r3, #1
 800acf0:	603b      	str	r3, [r7, #0]
        }
        break;
 800acf2:	e01d      	b.n	800ad30 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800acf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acfa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	3301      	adds	r3, #1
 800ad00:	603b      	str	r3, [r7, #0]
        break;
 800ad02:	e016      	b.n	800ad32 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800ad04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad0a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	603b      	str	r3, [r7, #0]
        break;
 800ad12:	e00e      	b.n	800ad32 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800ad14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad1a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	603b      	str	r3, [r7, #0]
        break;
 800ad22:	e006      	b.n	800ad32 <_vsnprintf+0x2a2>
      default :
        break;
 800ad24:	bf00      	nop
 800ad26:	e004      	b.n	800ad32 <_vsnprintf+0x2a2>
        break;
 800ad28:	bf00      	nop
 800ad2a:	e002      	b.n	800ad32 <_vsnprintf+0x2a2>
 800ad2c:	08009bb7 	.word	0x08009bb7
        break;
 800ad30:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	3b25      	subs	r3, #37	; 0x25
 800ad38:	2b53      	cmp	r3, #83	; 0x53
 800ad3a:	f200 833b 	bhi.w	800b3b4 <_vsnprintf+0x924>
 800ad3e:	a201      	add	r2, pc, #4	; (adr r2, 800ad44 <_vsnprintf+0x2b4>)
 800ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad44:	0800b39d 	.word	0x0800b39d
 800ad48:	0800b3b5 	.word	0x0800b3b5
 800ad4c:	0800b3b5 	.word	0x0800b3b5
 800ad50:	0800b3b5 	.word	0x0800b3b5
 800ad54:	0800b3b5 	.word	0x0800b3b5
 800ad58:	0800b3b5 	.word	0x0800b3b5
 800ad5c:	0800b3b5 	.word	0x0800b3b5
 800ad60:	0800b3b5 	.word	0x0800b3b5
 800ad64:	0800b3b5 	.word	0x0800b3b5
 800ad68:	0800b3b5 	.word	0x0800b3b5
 800ad6c:	0800b3b5 	.word	0x0800b3b5
 800ad70:	0800b3b5 	.word	0x0800b3b5
 800ad74:	0800b3b5 	.word	0x0800b3b5
 800ad78:	0800b3b5 	.word	0x0800b3b5
 800ad7c:	0800b3b5 	.word	0x0800b3b5
 800ad80:	0800b3b5 	.word	0x0800b3b5
 800ad84:	0800b3b5 	.word	0x0800b3b5
 800ad88:	0800b3b5 	.word	0x0800b3b5
 800ad8c:	0800b3b5 	.word	0x0800b3b5
 800ad90:	0800b3b5 	.word	0x0800b3b5
 800ad94:	0800b3b5 	.word	0x0800b3b5
 800ad98:	0800b3b5 	.word	0x0800b3b5
 800ad9c:	0800b3b5 	.word	0x0800b3b5
 800ada0:	0800b3b5 	.word	0x0800b3b5
 800ada4:	0800b3b5 	.word	0x0800b3b5
 800ada8:	0800b3b5 	.word	0x0800b3b5
 800adac:	0800b3b5 	.word	0x0800b3b5
 800adb0:	0800b3b5 	.word	0x0800b3b5
 800adb4:	0800b3b5 	.word	0x0800b3b5
 800adb8:	0800b3b5 	.word	0x0800b3b5
 800adbc:	0800b3b5 	.word	0x0800b3b5
 800adc0:	0800b3b5 	.word	0x0800b3b5
 800adc4:	0800b16d 	.word	0x0800b16d
 800adc8:	0800b121 	.word	0x0800b121
 800adcc:	0800b16d 	.word	0x0800b16d
 800add0:	0800b3b5 	.word	0x0800b3b5
 800add4:	0800b3b5 	.word	0x0800b3b5
 800add8:	0800b3b5 	.word	0x0800b3b5
 800addc:	0800b3b5 	.word	0x0800b3b5
 800ade0:	0800b3b5 	.word	0x0800b3b5
 800ade4:	0800b3b5 	.word	0x0800b3b5
 800ade8:	0800b3b5 	.word	0x0800b3b5
 800adec:	0800b3b5 	.word	0x0800b3b5
 800adf0:	0800b3b5 	.word	0x0800b3b5
 800adf4:	0800b3b5 	.word	0x0800b3b5
 800adf8:	0800b3b5 	.word	0x0800b3b5
 800adfc:	0800b3b5 	.word	0x0800b3b5
 800ae00:	0800b3b5 	.word	0x0800b3b5
 800ae04:	0800b3b5 	.word	0x0800b3b5
 800ae08:	0800b3b5 	.word	0x0800b3b5
 800ae0c:	0800b3b5 	.word	0x0800b3b5
 800ae10:	0800ae95 	.word	0x0800ae95
 800ae14:	0800b3b5 	.word	0x0800b3b5
 800ae18:	0800b3b5 	.word	0x0800b3b5
 800ae1c:	0800b3b5 	.word	0x0800b3b5
 800ae20:	0800b3b5 	.word	0x0800b3b5
 800ae24:	0800b3b5 	.word	0x0800b3b5
 800ae28:	0800b3b5 	.word	0x0800b3b5
 800ae2c:	0800b3b5 	.word	0x0800b3b5
 800ae30:	0800b3b5 	.word	0x0800b3b5
 800ae34:	0800b3b5 	.word	0x0800b3b5
 800ae38:	0800ae95 	.word	0x0800ae95
 800ae3c:	0800b1d9 	.word	0x0800b1d9
 800ae40:	0800ae95 	.word	0x0800ae95
 800ae44:	0800b16d 	.word	0x0800b16d
 800ae48:	0800b121 	.word	0x0800b121
 800ae4c:	0800b16d 	.word	0x0800b16d
 800ae50:	0800b3b5 	.word	0x0800b3b5
 800ae54:	0800ae95 	.word	0x0800ae95
 800ae58:	0800b3b5 	.word	0x0800b3b5
 800ae5c:	0800b3b5 	.word	0x0800b3b5
 800ae60:	0800b3b5 	.word	0x0800b3b5
 800ae64:	0800b3b5 	.word	0x0800b3b5
 800ae68:	0800b3b5 	.word	0x0800b3b5
 800ae6c:	0800ae95 	.word	0x0800ae95
 800ae70:	0800b311 	.word	0x0800b311
 800ae74:	0800b3b5 	.word	0x0800b3b5
 800ae78:	0800b3b5 	.word	0x0800b3b5
 800ae7c:	0800b24d 	.word	0x0800b24d
 800ae80:	0800b3b5 	.word	0x0800b3b5
 800ae84:	0800ae95 	.word	0x0800ae95
 800ae88:	0800b3b5 	.word	0x0800b3b5
 800ae8c:	0800b3b5 	.word	0x0800b3b5
 800ae90:	0800ae95 	.word	0x0800ae95
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b78      	cmp	r3, #120	; 0x78
 800ae9a:	d003      	beq.n	800aea4 <_vsnprintf+0x414>
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	2b58      	cmp	r3, #88	; 0x58
 800aea2:	d102      	bne.n	800aeaa <_vsnprintf+0x41a>
          base = 16U;
 800aea4:	2310      	movs	r3, #16
 800aea6:	643b      	str	r3, [r7, #64]	; 0x40
 800aea8:	e013      	b.n	800aed2 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	2b6f      	cmp	r3, #111	; 0x6f
 800aeb0:	d102      	bne.n	800aeb8 <_vsnprintf+0x428>
          base =  8U;
 800aeb2:	2308      	movs	r3, #8
 800aeb4:	643b      	str	r3, [r7, #64]	; 0x40
 800aeb6:	e00c      	b.n	800aed2 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	2b62      	cmp	r3, #98	; 0x62
 800aebe:	d102      	bne.n	800aec6 <_vsnprintf+0x436>
          base =  2U;
 800aec0:	2302      	movs	r3, #2
 800aec2:	643b      	str	r3, [r7, #64]	; 0x40
 800aec4:	e005      	b.n	800aed2 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800aec6:	230a      	movs	r3, #10
 800aec8:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800aeca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aecc:	f023 0310 	bic.w	r3, r3, #16
 800aed0:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	2b58      	cmp	r3, #88	; 0x58
 800aed8:	d103      	bne.n	800aee2 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800aeda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aedc:	f043 0320 	orr.w	r3, r3, #32
 800aee0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	2b69      	cmp	r3, #105	; 0x69
 800aee8:	d007      	beq.n	800aefa <_vsnprintf+0x46a>
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2b64      	cmp	r3, #100	; 0x64
 800aef0:	d003      	beq.n	800aefa <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800aef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aef4:	f023 030c 	bic.w	r3, r3, #12
 800aef8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800aefa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aefc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af00:	2b00      	cmp	r3, #0
 800af02:	d003      	beq.n	800af0c <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800af04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af06:	f023 0301 	bic.w	r3, r3, #1
 800af0a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	2b69      	cmp	r3, #105	; 0x69
 800af12:	d004      	beq.n	800af1e <_vsnprintf+0x48e>
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	2b64      	cmp	r3, #100	; 0x64
 800af1a:	f040 808d 	bne.w	800b038 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800af1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800af24:	2b00      	cmp	r3, #0
 800af26:	d02e      	beq.n	800af86 <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800af28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af2a:	3307      	adds	r3, #7
 800af2c:	f023 0307 	bic.w	r3, r3, #7
 800af30:	f103 0208 	add.w	r2, r3, #8
 800af34:	66ba      	str	r2, [r7, #104]	; 0x68
 800af36:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af3a:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800af3e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800af42:	2b00      	cmp	r3, #0
 800af44:	f174 0200 	sbcs.w	r2, r4, #0
 800af48:	da02      	bge.n	800af50 <_vsnprintf+0x4c0>
 800af4a:	425b      	negs	r3, r3
 800af4c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800af50:	4619      	mov	r1, r3
 800af52:	4622      	mov	r2, r4
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	0fdb      	lsrs	r3, r3, #31
 800af58:	b2d8      	uxtb	r0, r3
 800af5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af5c:	f04f 0400 	mov.w	r4, #0
 800af60:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800af62:	9508      	str	r5, [sp, #32]
 800af64:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800af66:	9507      	str	r5, [sp, #28]
 800af68:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800af6a:	9506      	str	r5, [sp, #24]
 800af6c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af70:	9002      	str	r0, [sp, #8]
 800af72:	e9cd 1200 	strd	r1, r2, [sp]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af7a:	68b9      	ldr	r1, [r7, #8]
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f7ff f813 	bl	8009fa8 <_ntoa_long_long>
 800af82:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800af84:	e0c8      	b.n	800b118 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800af86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d01e      	beq.n	800afce <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 800af90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af92:	1d1a      	adds	r2, r3, #4
 800af94:	66ba      	str	r2, [r7, #104]	; 0x68
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	bfb8      	it	lt
 800afa0:	425b      	neglt	r3, r3
 800afa2:	4619      	mov	r1, r3
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	0fdb      	lsrs	r3, r3, #31
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afac:	9205      	str	r2, [sp, #20]
 800afae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afb0:	9204      	str	r2, [sp, #16]
 800afb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afb4:	9203      	str	r2, [sp, #12]
 800afb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afb8:	9202      	str	r2, [sp, #8]
 800afba:	9301      	str	r3, [sp, #4]
 800afbc:	9100      	str	r1, [sp, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afc2:	68b9      	ldr	r1, [r7, #8]
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f7fe ff88 	bl	8009eda <_ntoa_long>
 800afca:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800afcc:	e0a4      	b.n	800b118 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800afce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d005      	beq.n	800afe4 <_vsnprintf+0x554>
 800afd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afda:	1d1a      	adds	r2, r3, #4
 800afdc:	66ba      	str	r2, [r7, #104]	; 0x68
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	e00e      	b.n	800b002 <_vsnprintf+0x572>
 800afe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afea:	2b00      	cmp	r3, #0
 800afec:	d005      	beq.n	800affa <_vsnprintf+0x56a>
 800afee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aff0:	1d1a      	adds	r2, r3, #4
 800aff2:	66ba      	str	r2, [r7, #104]	; 0x68
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	b21b      	sxth	r3, r3
 800aff8:	e003      	b.n	800b002 <_vsnprintf+0x572>
 800affa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800affc:	1d1a      	adds	r2, r3, #4
 800affe:	66ba      	str	r2, [r7, #104]	; 0x68
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800b004:	6a3b      	ldr	r3, [r7, #32]
 800b006:	2b00      	cmp	r3, #0
 800b008:	bfb8      	it	lt
 800b00a:	425b      	neglt	r3, r3
 800b00c:	4619      	mov	r1, r3
 800b00e:	6a3b      	ldr	r3, [r7, #32]
 800b010:	0fdb      	lsrs	r3, r3, #31
 800b012:	b2db      	uxtb	r3, r3
 800b014:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b016:	9205      	str	r2, [sp, #20]
 800b018:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b01a:	9204      	str	r2, [sp, #16]
 800b01c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b01e:	9203      	str	r2, [sp, #12]
 800b020:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b022:	9202      	str	r2, [sp, #8]
 800b024:	9301      	str	r3, [sp, #4]
 800b026:	9100      	str	r1, [sp, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b02c:	68b9      	ldr	r1, [r7, #8]
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f7fe ff53 	bl	8009eda <_ntoa_long>
 800b034:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800b036:	e06f      	b.n	800b118 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800b038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b03a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d020      	beq.n	800b084 <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800b042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b044:	3307      	adds	r3, #7
 800b046:	f023 0307 	bic.w	r3, r3, #7
 800b04a:	f103 0208 	add.w	r2, r3, #8
 800b04e:	66ba      	str	r2, [r7, #104]	; 0x68
 800b050:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b054:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b056:	4611      	mov	r1, r2
 800b058:	f04f 0200 	mov.w	r2, #0
 800b05c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b05e:	9008      	str	r0, [sp, #32]
 800b060:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b062:	9007      	str	r0, [sp, #28]
 800b064:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b066:	9006      	str	r0, [sp, #24]
 800b068:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800b06c:	2200      	movs	r2, #0
 800b06e:	9202      	str	r2, [sp, #8]
 800b070:	e9cd 3400 	strd	r3, r4, [sp]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b078:	68b9      	ldr	r1, [r7, #8]
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f7fe ff94 	bl	8009fa8 <_ntoa_long_long>
 800b080:	6478      	str	r0, [r7, #68]	; 0x44
 800b082:	e049      	b.n	800b118 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800b084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d016      	beq.n	800b0bc <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800b08e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b090:	1d1a      	adds	r2, r3, #4
 800b092:	66ba      	str	r2, [r7, #104]	; 0x68
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b098:	9205      	str	r2, [sp, #20]
 800b09a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b09c:	9204      	str	r2, [sp, #16]
 800b09e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0a0:	9203      	str	r2, [sp, #12]
 800b0a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0a4:	9202      	str	r2, [sp, #8]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	9201      	str	r2, [sp, #4]
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0b0:	68b9      	ldr	r1, [r7, #8]
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f7fe ff11 	bl	8009eda <_ntoa_long>
 800b0b8:	6478      	str	r0, [r7, #68]	; 0x44
 800b0ba:	e02d      	b.n	800b118 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800b0bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d005      	beq.n	800b0d2 <_vsnprintf+0x642>
 800b0c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0c8:	1d1a      	adds	r2, r3, #4
 800b0ca:	66ba      	str	r2, [r7, #104]	; 0x68
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	e00e      	b.n	800b0f0 <_vsnprintf+0x660>
 800b0d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d005      	beq.n	800b0e8 <_vsnprintf+0x658>
 800b0dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0de:	1d1a      	adds	r2, r3, #4
 800b0e0:	66ba      	str	r2, [r7, #104]	; 0x68
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	e003      	b.n	800b0f0 <_vsnprintf+0x660>
 800b0e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0ea:	1d1a      	adds	r2, r3, #4
 800b0ec:	66ba      	str	r2, [r7, #104]	; 0x68
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800b0f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0f4:	9305      	str	r3, [sp, #20]
 800b0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0f8:	9304      	str	r3, [sp, #16]
 800b0fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0fc:	9303      	str	r3, [sp, #12]
 800b0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b100:	9302      	str	r3, [sp, #8]
 800b102:	2300      	movs	r3, #0
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b10e:	68b9      	ldr	r1, [r7, #8]
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f7fe fee2 	bl	8009eda <_ntoa_long>
 800b116:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	3301      	adds	r3, #1
 800b11c:	603b      	str	r3, [r7, #0]
        break;
 800b11e:	e156      	b.n	800b3ce <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	2b46      	cmp	r3, #70	; 0x46
 800b126:	d103      	bne.n	800b130 <_vsnprintf+0x6a0>
 800b128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b12a:	f043 0320 	orr.w	r3, r3, #32
 800b12e:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800b130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b132:	3307      	adds	r3, #7
 800b134:	f023 0307 	bic.w	r3, r3, #7
 800b138:	f103 0208 	add.w	r2, r3, #8
 800b13c:	66ba      	str	r2, [r7, #104]	; 0x68
 800b13e:	ed93 7b00 	vldr	d7, [r3]
 800b142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b144:	9302      	str	r3, [sp, #8]
 800b146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b148:	9301      	str	r3, [sp, #4]
 800b14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	eeb0 0a47 	vmov.f32	s0, s14
 800b152:	eef0 0a67 	vmov.f32	s1, s15
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b15a:	68b9      	ldr	r1, [r7, #8]
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f7fe ff93 	bl	800a088 <_ftoa>
 800b162:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	3301      	adds	r3, #1
 800b168:	603b      	str	r3, [r7, #0]
        break;
 800b16a:	e130      	b.n	800b3ce <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	2b67      	cmp	r3, #103	; 0x67
 800b172:	d003      	beq.n	800b17c <_vsnprintf+0x6ec>
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	2b47      	cmp	r3, #71	; 0x47
 800b17a:	d103      	bne.n	800b184 <_vsnprintf+0x6f4>
 800b17c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b17e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b182:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	2b45      	cmp	r3, #69	; 0x45
 800b18a:	d003      	beq.n	800b194 <_vsnprintf+0x704>
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	2b47      	cmp	r3, #71	; 0x47
 800b192:	d103      	bne.n	800b19c <_vsnprintf+0x70c>
 800b194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b196:	f043 0320 	orr.w	r3, r3, #32
 800b19a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800b19c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b19e:	3307      	adds	r3, #7
 800b1a0:	f023 0307 	bic.w	r3, r3, #7
 800b1a4:	f103 0208 	add.w	r2, r3, #8
 800b1a8:	66ba      	str	r2, [r7, #104]	; 0x68
 800b1aa:	ed93 7b00 	vldr	d7, [r3]
 800b1ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1b0:	9302      	str	r3, [sp, #8]
 800b1b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1b4:	9301      	str	r3, [sp, #4]
 800b1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	eeb0 0a47 	vmov.f32	s0, s14
 800b1be:	eef0 0a67 	vmov.f32	s1, s15
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1c6:	68b9      	ldr	r1, [r7, #8]
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f7ff f9c9 	bl	800a560 <_etoa>
 800b1ce:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	603b      	str	r3, [r7, #0]
        break;
 800b1d6:	e0fa      	b.n	800b3ce <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800b1dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1de:	f003 0302 	and.w	r3, r3, #2
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10e      	bne.n	800b204 <_vsnprintf+0x774>
          while (l++ < width) {
 800b1e6:	e007      	b.n	800b1f8 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 800b1e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1ea:	1c53      	adds	r3, r2, #1
 800b1ec:	647b      	str	r3, [r7, #68]	; 0x44
 800b1ee:	68fc      	ldr	r4, [r7, #12]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	68b9      	ldr	r1, [r7, #8]
 800b1f4:	2020      	movs	r0, #32
 800b1f6:	47a0      	blx	r4
          while (l++ < width) {
 800b1f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1fa:	1c5a      	adds	r2, r3, #1
 800b1fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b1fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b200:	429a      	cmp	r2, r3
 800b202:	d8f1      	bhi.n	800b1e8 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800b204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b206:	1d1a      	adds	r2, r3, #4
 800b208:	66ba      	str	r2, [r7, #104]	; 0x68
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	b2d8      	uxtb	r0, r3
 800b20e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b210:	1c53      	adds	r3, r2, #1
 800b212:	647b      	str	r3, [r7, #68]	; 0x44
 800b214:	68fc      	ldr	r4, [r7, #12]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	68b9      	ldr	r1, [r7, #8]
 800b21a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800b21c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b21e:	f003 0302 	and.w	r3, r3, #2
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00e      	beq.n	800b244 <_vsnprintf+0x7b4>
          while (l++ < width) {
 800b226:	e007      	b.n	800b238 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 800b228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b22a:	1c53      	adds	r3, r2, #1
 800b22c:	647b      	str	r3, [r7, #68]	; 0x44
 800b22e:	68fc      	ldr	r4, [r7, #12]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68b9      	ldr	r1, [r7, #8]
 800b234:	2020      	movs	r0, #32
 800b236:	47a0      	blx	r4
          while (l++ < width) {
 800b238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b23a:	1c5a      	adds	r2, r3, #1
 800b23c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b23e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b240:	429a      	cmp	r2, r3
 800b242:	d8f1      	bhi.n	800b228 <_vsnprintf+0x798>
          }
        }
        format++;
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	3301      	adds	r3, #1
 800b248:	603b      	str	r3, [r7, #0]
        break;
 800b24a:	e0c0      	b.n	800b3ce <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800b24c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b24e:	1d1a      	adds	r2, r3, #4
 800b250:	66ba      	str	r2, [r7, #104]	; 0x68
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800b256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <_vsnprintf+0x7d0>
 800b25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b25e:	e001      	b.n	800b264 <_vsnprintf+0x7d4>
 800b260:	f04f 33ff 	mov.w	r3, #4294967295
 800b264:	4619      	mov	r1, r3
 800b266:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b268:	f7fe fcb3 	bl	8009bd2 <_strnlen_s>
 800b26c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800b26e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b274:	2b00      	cmp	r3, #0
 800b276:	d005      	beq.n	800b284 <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 800b278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27c:	4293      	cmp	r3, r2
 800b27e:	bf28      	it	cs
 800b280:	4613      	movcs	r3, r2
 800b282:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800b284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b286:	f003 0302 	and.w	r3, r3, #2
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d11a      	bne.n	800b2c4 <_vsnprintf+0x834>
          while (l++ < width) {
 800b28e:	e007      	b.n	800b2a0 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 800b290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b292:	1c53      	adds	r3, r2, #1
 800b294:	647b      	str	r3, [r7, #68]	; 0x44
 800b296:	68fc      	ldr	r4, [r7, #12]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68b9      	ldr	r1, [r7, #8]
 800b29c:	2020      	movs	r0, #32
 800b29e:	47a0      	blx	r4
          while (l++ < width) {
 800b2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a2:	1c5a      	adds	r2, r3, #1
 800b2a4:	637a      	str	r2, [r7, #52]	; 0x34
 800b2a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d8f1      	bhi.n	800b290 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800b2ac:	e00a      	b.n	800b2c4 <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 800b2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b0:	1c5a      	adds	r2, r3, #1
 800b2b2:	63ba      	str	r2, [r7, #56]	; 0x38
 800b2b4:	7818      	ldrb	r0, [r3, #0]
 800b2b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2b8:	1c53      	adds	r3, r2, #1
 800b2ba:	647b      	str	r3, [r7, #68]	; 0x44
 800b2bc:	68fc      	ldr	r4, [r7, #12]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	68b9      	ldr	r1, [r7, #8]
 800b2c2:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d009      	beq.n	800b2e0 <_vsnprintf+0x850>
 800b2cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d0eb      	beq.n	800b2ae <_vsnprintf+0x81e>
 800b2d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2d8:	1e5a      	subs	r2, r3, #1
 800b2da:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e6      	bne.n	800b2ae <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800b2e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2e2:	f003 0302 	and.w	r3, r3, #2
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00e      	beq.n	800b308 <_vsnprintf+0x878>
          while (l++ < width) {
 800b2ea:	e007      	b.n	800b2fc <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 800b2ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2ee:	1c53      	adds	r3, r2, #1
 800b2f0:	647b      	str	r3, [r7, #68]	; 0x44
 800b2f2:	68fc      	ldr	r4, [r7, #12]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	68b9      	ldr	r1, [r7, #8]
 800b2f8:	2020      	movs	r0, #32
 800b2fa:	47a0      	blx	r4
          while (l++ < width) {
 800b2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fe:	1c5a      	adds	r2, r3, #1
 800b300:	637a      	str	r2, [r7, #52]	; 0x34
 800b302:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b304:	429a      	cmp	r2, r3
 800b306:	d8f1      	bhi.n	800b2ec <_vsnprintf+0x85c>
          }
        }
        format++;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	3301      	adds	r3, #1
 800b30c:	603b      	str	r3, [r7, #0]
        break;
 800b30e:	e05e      	b.n	800b3ce <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800b310:	2308      	movs	r3, #8
 800b312:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800b314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b316:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800b31a:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800b31c:	2300      	movs	r3, #0
 800b31e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800b322:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b326:	2b00      	cmp	r3, #0
 800b328:	d01d      	beq.n	800b366 <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800b32a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b32c:	1d1a      	adds	r2, r3, #4
 800b32e:	66ba      	str	r2, [r7, #104]	; 0x68
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f04f 0400 	mov.w	r4, #0
 800b336:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b338:	9208      	str	r2, [sp, #32]
 800b33a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b33c:	9207      	str	r2, [sp, #28]
 800b33e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b340:	9206      	str	r2, [sp, #24]
 800b342:	f04f 0110 	mov.w	r1, #16
 800b346:	f04f 0200 	mov.w	r2, #0
 800b34a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800b34e:	2200      	movs	r2, #0
 800b350:	9202      	str	r2, [sp, #8]
 800b352:	e9cd 3400 	strd	r3, r4, [sp]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b35a:	68b9      	ldr	r1, [r7, #8]
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f7fe fe23 	bl	8009fa8 <_ntoa_long_long>
 800b362:	6478      	str	r0, [r7, #68]	; 0x44
 800b364:	e016      	b.n	800b394 <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800b366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b368:	1d1a      	adds	r2, r3, #4
 800b36a:	66ba      	str	r2, [r7, #104]	; 0x68
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	461a      	mov	r2, r3
 800b370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b372:	9305      	str	r3, [sp, #20]
 800b374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b376:	9304      	str	r3, [sp, #16]
 800b378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b37a:	9303      	str	r3, [sp, #12]
 800b37c:	2310      	movs	r3, #16
 800b37e:	9302      	str	r3, [sp, #8]
 800b380:	2300      	movs	r3, #0
 800b382:	9301      	str	r3, [sp, #4]
 800b384:	9200      	str	r2, [sp, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b38a:	68b9      	ldr	r1, [r7, #8]
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f7fe fda4 	bl	8009eda <_ntoa_long>
 800b392:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	3301      	adds	r3, #1
 800b398:	603b      	str	r3, [r7, #0]
        break;
 800b39a:	e018      	b.n	800b3ce <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800b39c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b39e:	1c53      	adds	r3, r2, #1
 800b3a0:	647b      	str	r3, [r7, #68]	; 0x44
 800b3a2:	68fc      	ldr	r4, [r7, #12]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	68b9      	ldr	r1, [r7, #8]
 800b3a8:	2025      	movs	r0, #37	; 0x25
 800b3aa:	47a0      	blx	r4
        format++;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	603b      	str	r3, [r7, #0]
        break;
 800b3b2:	e00c      	b.n	800b3ce <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	7818      	ldrb	r0, [r3, #0]
 800b3b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3ba:	1c53      	adds	r3, r2, #1
 800b3bc:	647b      	str	r3, [r7, #68]	; 0x44
 800b3be:	68fc      	ldr	r4, [r7, #12]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	68b9      	ldr	r1, [r7, #8]
 800b3c4:	47a0      	blx	r4
        format++;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	603b      	str	r3, [r7, #0]
        break;
 800b3cc:	bf00      	nop
  while (*format)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f47f ab6d 	bne.w	800aab2 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800b3d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d302      	bcc.n	800b3e6 <_vsnprintf+0x956>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	1e5a      	subs	r2, r3, #1
 800b3e4:	e000      	b.n	800b3e8 <_vsnprintf+0x958>
 800b3e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3e8:	68fc      	ldr	r4, [r7, #12]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68b9      	ldr	r1, [r7, #8]
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800b3f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3758      	adds	r7, #88	; 0x58
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bdb0      	pop	{r4, r5, r7, pc}

0800b3fc <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 800b3fc:	b40e      	push	{r1, r2, r3}
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b087      	sub	sp, #28
 800b402:	af02      	add	r7, sp, #8
 800b404:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800b406:	f107 0320 	add.w	r3, r7, #32
 800b40a:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	9300      	str	r3, [sp, #0]
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	f04f 32ff 	mov.w	r2, #4294967295
 800b416:	6879      	ldr	r1, [r7, #4]
 800b418:	4805      	ldr	r0, [pc, #20]	; (800b430 <sprintf_+0x34>)
 800b41a:	f7ff fb39 	bl	800aa90 <_vsnprintf>
 800b41e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800b420:	68fb      	ldr	r3, [r7, #12]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3714      	adds	r7, #20
 800b426:	46bd      	mov	sp, r7
 800b428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b42c:	b003      	add	sp, #12
 800b42e:	4770      	bx	lr
 800b430:	08009b89 	.word	0x08009b89

0800b434 <vsnprintf_>:
{
  return _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
}

int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af02      	add	r7, sp, #8
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	603b      	str	r3, [r7, #0]
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	68f9      	ldr	r1, [r7, #12]
 800b44c:	4803      	ldr	r0, [pc, #12]	; (800b45c <vsnprintf_+0x28>)
 800b44e:	f7ff fb1f 	bl	800aa90 <_vsnprintf>
 800b452:	4603      	mov	r3, r0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	08009b89 	.word	0x08009b89

0800b460 <RingBuffer_DMA_Count>:
#include "ringbuffer_dma.h"

uint32_t RingBuffer_DMA_Count(RingBuffer_DMA * buffer) {
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
	// get counter returns the number of remaining data units in the current DMA Stream transfer (total size - received count)
	//current head = start + (size - received count);
	uint8_t const * head = buffer->data + buffer->size - __HAL_DMA_GET_COUNTER(buffer->hdma);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6859      	ldr	r1, [r3, #4]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	1acb      	subs	r3, r1, r3
 800b47a:	4413      	add	r3, r2
 800b47c:	60fb      	str	r3, [r7, #12]
	uint8_t const * tail = buffer->tail_ptr;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	60bb      	str	r3, [r7, #8]
	if (head >= tail)
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d303      	bcc.n	800b494 <RingBuffer_DMA_Count+0x34>
		return head - tail;
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	1ad3      	subs	r3, r2, r3
 800b492:	e006      	b.n	800b4a2 <RingBuffer_DMA_Count+0x42>
	else
		return head - tail + buffer->size;
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	461a      	mov	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	4413      	add	r3, r2
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <RingBuffer_DMA_GetByte>:

uint8_t RingBuffer_DMA_GetByte(RingBuffer_DMA * buffer) {
 800b4ae:	b480      	push	{r7}
 800b4b0:	b087      	sub	sp, #28
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
	// get counter returns the number of remaining data units in the current DMA Stream transfer (total size - received count)
	//current head = start + (size - received count);
	uint8_t const * head = buffer->data + buffer->size - __HAL_DMA_GET_COUNTER(buffer->hdma);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6859      	ldr	r1, [r3, #4]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	1acb      	subs	r3, r1, r3
 800b4c8:	4413      	add	r3, r2
 800b4ca:	617b      	str	r3, [r7, #20]
	uint8_t const * tail = buffer->tail_ptr;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	613b      	str	r3, [r7, #16]

	if (head != tail) {
 800b4d2:	697a      	ldr	r2, [r7, #20]
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d019      	beq.n	800b50e <RingBuffer_DMA_GetByte+0x60>
		uint8_t c = *buffer->tail_ptr++;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	1c59      	adds	r1, r3, #1
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	60d1      	str	r1, [r2, #12]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	73fb      	strb	r3, [r7, #15]
		if (buffer->tail_ptr >= buffer->data + buffer->size) {
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	68da      	ldr	r2, [r3, #12]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6819      	ldr	r1, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	440b      	add	r3, r1
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d307      	bcc.n	800b50a <RingBuffer_DMA_GetByte+0x5c>
			buffer->tail_ptr -= buffer->size;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68da      	ldr	r2, [r3, #12]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	425b      	negs	r3, r3
 800b504:	441a      	add	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	60da      	str	r2, [r3, #12]
		}
		return c;
 800b50a:	7bfb      	ldrb	r3, [r7, #15]
 800b50c:	e000      	b.n	800b510 <RingBuffer_DMA_GetByte+0x62>
	}

	return 0;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	371c      	adds	r7, #28
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <RingBuffer_DMA_Init>:

void RingBuffer_DMA_Init(RingBuffer_DMA * buffer, DMA_HandleTypeDef * hdma, uint8_t * data, uint32_t size){
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
 800b528:	603b      	str	r3, [r7, #0]
	buffer->data = data; // set array
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	601a      	str	r2, [r3, #0]
	buffer->size = size; // and its size
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	605a      	str	r2, [r3, #4]
	buffer->hdma = hdma; // initialized DMA
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	609a      	str	r2, [r3, #8]
	buffer->tail_ptr = data; // tail == head == start of array
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	60da      	str	r2, [r3, #12]
}
 800b542:	bf00      	nop
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b54e:	b480      	push	{r7}
 800b550:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b552:	bf00      	nop
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b562:	f3ef 8305 	mrs	r3, IPSR
 800b566:	60bb      	str	r3, [r7, #8]
  return(result);
 800b568:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d10f      	bne.n	800b58e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b56e:	f3ef 8310 	mrs	r3, PRIMASK
 800b572:	607b      	str	r3, [r7, #4]
  return(result);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d105      	bne.n	800b586 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b57a:	f3ef 8311 	mrs	r3, BASEPRI
 800b57e:	603b      	str	r3, [r7, #0]
  return(result);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d007      	beq.n	800b596 <osKernelInitialize+0x3a>
 800b586:	4b0e      	ldr	r3, [pc, #56]	; (800b5c0 <osKernelInitialize+0x64>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d103      	bne.n	800b596 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b58e:	f06f 0305 	mvn.w	r3, #5
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	e00c      	b.n	800b5b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b596:	4b0a      	ldr	r3, [pc, #40]	; (800b5c0 <osKernelInitialize+0x64>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d105      	bne.n	800b5aa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b59e:	4b08      	ldr	r3, [pc, #32]	; (800b5c0 <osKernelInitialize+0x64>)
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	60fb      	str	r3, [r7, #12]
 800b5a8:	e002      	b.n	800b5b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b5aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	20000f70 	.word	0x20000f70

0800b5c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5ca:	f3ef 8305 	mrs	r3, IPSR
 800b5ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10f      	bne.n	800b5f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5d6:	f3ef 8310 	mrs	r3, PRIMASK
 800b5da:	607b      	str	r3, [r7, #4]
  return(result);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d105      	bne.n	800b5ee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b5e2:	f3ef 8311 	mrs	r3, BASEPRI
 800b5e6:	603b      	str	r3, [r7, #0]
  return(result);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d007      	beq.n	800b5fe <osKernelStart+0x3a>
 800b5ee:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <osKernelStart+0x68>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d103      	bne.n	800b5fe <osKernelStart+0x3a>
    stat = osErrorISR;
 800b5f6:	f06f 0305 	mvn.w	r3, #5
 800b5fa:	60fb      	str	r3, [r7, #12]
 800b5fc:	e010      	b.n	800b620 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b5fe:	4b0b      	ldr	r3, [pc, #44]	; (800b62c <osKernelStart+0x68>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d109      	bne.n	800b61a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b606:	f7ff ffa2 	bl	800b54e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b60a:	4b08      	ldr	r3, [pc, #32]	; (800b62c <osKernelStart+0x68>)
 800b60c:	2202      	movs	r2, #2
 800b60e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b610:	f001 fee8 	bl	800d3e4 <vTaskStartScheduler>
      stat = osOK;
 800b614:	2300      	movs	r3, #0
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	e002      	b.n	800b620 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b61a:	f04f 33ff 	mov.w	r3, #4294967295
 800b61e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b620:	68fb      	ldr	r3, [r7, #12]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	20000f70 	.word	0x20000f70

0800b630 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b630:	b580      	push	{r7, lr}
 800b632:	b090      	sub	sp, #64	; 0x40
 800b634:	af04      	add	r7, sp, #16
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b63c:	2300      	movs	r3, #0
 800b63e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b640:	f3ef 8305 	mrs	r3, IPSR
 800b644:	61fb      	str	r3, [r7, #28]
  return(result);
 800b646:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f040 808f 	bne.w	800b76c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b64e:	f3ef 8310 	mrs	r3, PRIMASK
 800b652:	61bb      	str	r3, [r7, #24]
  return(result);
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d105      	bne.n	800b666 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b65a:	f3ef 8311 	mrs	r3, BASEPRI
 800b65e:	617b      	str	r3, [r7, #20]
  return(result);
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d003      	beq.n	800b66e <osThreadNew+0x3e>
 800b666:	4b44      	ldr	r3, [pc, #272]	; (800b778 <osThreadNew+0x148>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d07e      	beq.n	800b76c <osThreadNew+0x13c>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d07b      	beq.n	800b76c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800b674:	2380      	movs	r3, #128	; 0x80
 800b676:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b678:	2318      	movs	r3, #24
 800b67a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b67c:	2300      	movs	r3, #0
 800b67e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b680:	f04f 33ff 	mov.w	r3, #4294967295
 800b684:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d045      	beq.n	800b718 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d002      	beq.n	800b69a <osThreadNew+0x6a>
        name = attr->name;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	699b      	ldr	r3, [r3, #24]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d002      	beq.n	800b6a8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	699b      	ldr	r3, [r3, #24]
 800b6a6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d008      	beq.n	800b6c0 <osThreadNew+0x90>
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	2b38      	cmp	r3, #56	; 0x38
 800b6b2:	d805      	bhi.n	800b6c0 <osThreadNew+0x90>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	f003 0301 	and.w	r3, r3, #1
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d001      	beq.n	800b6c4 <osThreadNew+0x94>
        return (NULL);
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	e054      	b.n	800b76e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d003      	beq.n	800b6d4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	695b      	ldr	r3, [r3, #20]
 800b6d0:	089b      	lsrs	r3, r3, #2
 800b6d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00e      	beq.n	800b6fa <osThreadNew+0xca>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	2bbf      	cmp	r3, #191	; 0xbf
 800b6e2:	d90a      	bls.n	800b6fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d006      	beq.n	800b6fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	695b      	ldr	r3, [r3, #20]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d002      	beq.n	800b6fa <osThreadNew+0xca>
        mem = 1;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	623b      	str	r3, [r7, #32]
 800b6f8:	e010      	b.n	800b71c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10c      	bne.n	800b71c <osThreadNew+0xec>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d108      	bne.n	800b71c <osThreadNew+0xec>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d104      	bne.n	800b71c <osThreadNew+0xec>
          mem = 0;
 800b712:	2300      	movs	r3, #0
 800b714:	623b      	str	r3, [r7, #32]
 800b716:	e001      	b.n	800b71c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800b718:	2300      	movs	r3, #0
 800b71a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d110      	bne.n	800b744 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b72a:	9202      	str	r2, [sp, #8]
 800b72c:	9301      	str	r3, [sp, #4]
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f001 fb8f 	bl	800ce5c <xTaskCreateStatic>
 800b73e:	4603      	mov	r3, r0
 800b740:	613b      	str	r3, [r7, #16]
 800b742:	e013      	b.n	800b76c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800b744:	6a3b      	ldr	r3, [r7, #32]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d110      	bne.n	800b76c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	f107 0310 	add.w	r3, r7, #16
 800b752:	9301      	str	r3, [sp, #4]
 800b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f001 fbd7 	bl	800cf10 <xTaskCreate>
 800b762:	4603      	mov	r3, r0
 800b764:	2b01      	cmp	r3, #1
 800b766:	d001      	beq.n	800b76c <osThreadNew+0x13c>
          hTask = NULL;
 800b768:	2300      	movs	r3, #0
 800b76a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b76c:	693b      	ldr	r3, [r7, #16]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3730      	adds	r7, #48	; 0x30
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	20000f70 	.word	0x20000f70

0800b77c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b088      	sub	sp, #32
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b788:	f3ef 8305 	mrs	r3, IPSR
 800b78c:	613b      	str	r3, [r7, #16]
  return(result);
 800b78e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800b790:	2b00      	cmp	r3, #0
 800b792:	d10f      	bne.n	800b7b4 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b794:	f3ef 8310 	mrs	r3, PRIMASK
 800b798:	60fb      	str	r3, [r7, #12]
  return(result);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d105      	bne.n	800b7ac <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b7a0:	f3ef 8311 	mrs	r3, BASEPRI
 800b7a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d007      	beq.n	800b7bc <osThreadTerminate+0x40>
 800b7ac:	4b12      	ldr	r3, [pc, #72]	; (800b7f8 <osThreadTerminate+0x7c>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d103      	bne.n	800b7bc <osThreadTerminate+0x40>
    stat = osErrorISR;
 800b7b4:	f06f 0305 	mvn.w	r3, #5
 800b7b8:	61fb      	str	r3, [r7, #28]
 800b7ba:	e017      	b.n	800b7ec <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d103      	bne.n	800b7ca <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 800b7c2:	f06f 0303 	mvn.w	r3, #3
 800b7c6:	61fb      	str	r3, [r7, #28]
 800b7c8:	e010      	b.n	800b7ec <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 800b7ca:	69b8      	ldr	r0, [r7, #24]
 800b7cc:	f001 fda4 	bl	800d318 <eTaskGetState>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 800b7d4:	7dfb      	ldrb	r3, [r7, #23]
 800b7d6:	2b04      	cmp	r3, #4
 800b7d8:	d005      	beq.n	800b7e6 <osThreadTerminate+0x6a>
      stat = osOK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 800b7de:	69b8      	ldr	r0, [r7, #24]
 800b7e0:	f001 fcf4 	bl	800d1cc <vTaskDelete>
 800b7e4:	e002      	b.n	800b7ec <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 800b7e6:	f06f 0302 	mvn.w	r3, #2
 800b7ea:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 800b7ec:	69fb      	ldr	r3, [r7, #28]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3720      	adds	r7, #32
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20000f70 	.word	0x20000f70

0800b7fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b804:	f3ef 8305 	mrs	r3, IPSR
 800b808:	613b      	str	r3, [r7, #16]
  return(result);
 800b80a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10f      	bne.n	800b830 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b810:	f3ef 8310 	mrs	r3, PRIMASK
 800b814:	60fb      	str	r3, [r7, #12]
  return(result);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d105      	bne.n	800b828 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b81c:	f3ef 8311 	mrs	r3, BASEPRI
 800b820:	60bb      	str	r3, [r7, #8]
  return(result);
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d007      	beq.n	800b838 <osDelay+0x3c>
 800b828:	4b0a      	ldr	r3, [pc, #40]	; (800b854 <osDelay+0x58>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d103      	bne.n	800b838 <osDelay+0x3c>
    stat = osErrorISR;
 800b830:	f06f 0305 	mvn.w	r3, #5
 800b834:	617b      	str	r3, [r7, #20]
 800b836:	e007      	b.n	800b848 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b838:	2300      	movs	r3, #0
 800b83a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d002      	beq.n	800b848 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f001 fd34 	bl	800d2b0 <vTaskDelay>
    }
  }

  return (stat);
 800b848:	697b      	ldr	r3, [r7, #20]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	20000f70 	.word	0x20000f70

0800b858 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b858:	b580      	push	{r7, lr}
 800b85a:	b08a      	sub	sp, #40	; 0x28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b860:	2300      	movs	r3, #0
 800b862:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b864:	f3ef 8305 	mrs	r3, IPSR
 800b868:	613b      	str	r3, [r7, #16]
  return(result);
 800b86a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f040 8085 	bne.w	800b97c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b872:	f3ef 8310 	mrs	r3, PRIMASK
 800b876:	60fb      	str	r3, [r7, #12]
  return(result);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d105      	bne.n	800b88a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b87e:	f3ef 8311 	mrs	r3, BASEPRI
 800b882:	60bb      	str	r3, [r7, #8]
  return(result);
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d003      	beq.n	800b892 <osMutexNew+0x3a>
 800b88a:	4b3f      	ldr	r3, [pc, #252]	; (800b988 <osMutexNew+0x130>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d074      	beq.n	800b97c <osMutexNew+0x124>
    if (attr != NULL) {
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d003      	beq.n	800b8a0 <osMutexNew+0x48>
      type = attr->attr_bits;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	623b      	str	r3, [r7, #32]
 800b89e:	e001      	b.n	800b8a4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	f003 0301 	and.w	r3, r3, #1
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d002      	beq.n	800b8b4 <osMutexNew+0x5c>
      rmtx = 1U;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	61fb      	str	r3, [r7, #28]
 800b8b2:	e001      	b.n	800b8b8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b8b8:	6a3b      	ldr	r3, [r7, #32]
 800b8ba:	f003 0308 	and.w	r3, r3, #8
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d15c      	bne.n	800b97c <osMutexNew+0x124>
      mem = -1;
 800b8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b8c6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d015      	beq.n	800b8fa <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d006      	beq.n	800b8e4 <osMutexNew+0x8c>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	2b4f      	cmp	r3, #79	; 0x4f
 800b8dc:	d902      	bls.n	800b8e4 <osMutexNew+0x8c>
          mem = 1;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	61bb      	str	r3, [r7, #24]
 800b8e2:	e00c      	b.n	800b8fe <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d108      	bne.n	800b8fe <osMutexNew+0xa6>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d104      	bne.n	800b8fe <osMutexNew+0xa6>
            mem = 0;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	61bb      	str	r3, [r7, #24]
 800b8f8:	e001      	b.n	800b8fe <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d112      	bne.n	800b92a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d007      	beq.n	800b91a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	4619      	mov	r1, r3
 800b910:	2004      	movs	r0, #4
 800b912:	f000 fcac 	bl	800c26e <xQueueCreateMutexStatic>
 800b916:	6278      	str	r0, [r7, #36]	; 0x24
 800b918:	e016      	b.n	800b948 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	4619      	mov	r1, r3
 800b920:	2001      	movs	r0, #1
 800b922:	f000 fca4 	bl	800c26e <xQueueCreateMutexStatic>
 800b926:	6278      	str	r0, [r7, #36]	; 0x24
 800b928:	e00e      	b.n	800b948 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10b      	bne.n	800b948 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d004      	beq.n	800b940 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800b936:	2004      	movs	r0, #4
 800b938:	f000 fc81 	bl	800c23e <xQueueCreateMutex>
 800b93c:	6278      	str	r0, [r7, #36]	; 0x24
 800b93e:	e003      	b.n	800b948 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800b940:	2001      	movs	r0, #1
 800b942:	f000 fc7c 	bl	800c23e <xQueueCreateMutex>
 800b946:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d00c      	beq.n	800b968 <osMutexNew+0x110>
        if (attr != NULL) {
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d003      	beq.n	800b95c <osMutexNew+0x104>
          name = attr->name;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	617b      	str	r3, [r7, #20]
 800b95a:	e001      	b.n	800b960 <osMutexNew+0x108>
        } else {
          name = NULL;
 800b95c:	2300      	movs	r3, #0
 800b95e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800b960:	6979      	ldr	r1, [r7, #20]
 800b962:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b964:	f001 fa1e 	bl	800cda4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d006      	beq.n	800b97c <osMutexNew+0x124>
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d003      	beq.n	800b97c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	f043 0301 	orr.w	r3, r3, #1
 800b97a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3728      	adds	r7, #40	; 0x28
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	20000f70 	.word	0x20000f70

0800b98c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b088      	sub	sp, #32
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f023 0301 	bic.w	r3, r3, #1
 800b99c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f003 0301 	and.w	r3, r3, #1
 800b9a4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9aa:	f3ef 8305 	mrs	r3, IPSR
 800b9ae:	613b      	str	r3, [r7, #16]
  return(result);
 800b9b0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d10f      	bne.n	800b9d6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b9ba:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d105      	bne.n	800b9ce <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b9c2:	f3ef 8311 	mrs	r3, BASEPRI
 800b9c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d007      	beq.n	800b9de <osMutexAcquire+0x52>
 800b9ce:	4b1d      	ldr	r3, [pc, #116]	; (800ba44 <osMutexAcquire+0xb8>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d103      	bne.n	800b9de <osMutexAcquire+0x52>
    stat = osErrorISR;
 800b9d6:	f06f 0305 	mvn.w	r3, #5
 800b9da:	61fb      	str	r3, [r7, #28]
 800b9dc:	e02c      	b.n	800ba38 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d103      	bne.n	800b9ec <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800b9e4:	f06f 0303 	mvn.w	r3, #3
 800b9e8:	61fb      	str	r3, [r7, #28]
 800b9ea:	e025      	b.n	800ba38 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d011      	beq.n	800ba16 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b9f2:	6839      	ldr	r1, [r7, #0]
 800b9f4:	69b8      	ldr	r0, [r7, #24]
 800b9f6:	f000 fc88 	bl	800c30a <xQueueTakeMutexRecursive>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d01b      	beq.n	800ba38 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ba06:	f06f 0301 	mvn.w	r3, #1
 800ba0a:	61fb      	str	r3, [r7, #28]
 800ba0c:	e014      	b.n	800ba38 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ba0e:	f06f 0302 	mvn.w	r3, #2
 800ba12:	61fb      	str	r3, [r7, #28]
 800ba14:	e010      	b.n	800ba38 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ba16:	6839      	ldr	r1, [r7, #0]
 800ba18:	69b8      	ldr	r0, [r7, #24]
 800ba1a:	f000 ff15 	bl	800c848 <xQueueSemaphoreTake>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d009      	beq.n	800ba38 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d003      	beq.n	800ba32 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800ba2a:	f06f 0301 	mvn.w	r3, #1
 800ba2e:	61fb      	str	r3, [r7, #28]
 800ba30:	e002      	b.n	800ba38 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ba32:	f06f 0302 	mvn.w	r3, #2
 800ba36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ba38:	69fb      	ldr	r3, [r7, #28]
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3720      	adds	r7, #32
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20000f70 	.word	0x20000f70

0800ba48 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b088      	sub	sp, #32
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f023 0301 	bic.w	r3, r3, #1
 800ba56:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f003 0301 	and.w	r3, r3, #1
 800ba5e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba64:	f3ef 8305 	mrs	r3, IPSR
 800ba68:	613b      	str	r3, [r7, #16]
  return(result);
 800ba6a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10f      	bne.n	800ba90 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba70:	f3ef 8310 	mrs	r3, PRIMASK
 800ba74:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d105      	bne.n	800ba88 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ba7c:	f3ef 8311 	mrs	r3, BASEPRI
 800ba80:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d007      	beq.n	800ba98 <osMutexRelease+0x50>
 800ba88:	4b16      	ldr	r3, [pc, #88]	; (800bae4 <osMutexRelease+0x9c>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d103      	bne.n	800ba98 <osMutexRelease+0x50>
    stat = osErrorISR;
 800ba90:	f06f 0305 	mvn.w	r3, #5
 800ba94:	61fb      	str	r3, [r7, #28]
 800ba96:	e01f      	b.n	800bad8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d103      	bne.n	800baa6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800ba9e:	f06f 0303 	mvn.w	r3, #3
 800baa2:	61fb      	str	r3, [r7, #28]
 800baa4:	e018      	b.n	800bad8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d009      	beq.n	800bac0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800baac:	69b8      	ldr	r0, [r7, #24]
 800baae:	f000 fbf9 	bl	800c2a4 <xQueueGiveMutexRecursive>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d00f      	beq.n	800bad8 <osMutexRelease+0x90>
        stat = osErrorResource;
 800bab8:	f06f 0302 	mvn.w	r3, #2
 800babc:	61fb      	str	r3, [r7, #28]
 800babe:	e00b      	b.n	800bad8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800bac0:	2300      	movs	r3, #0
 800bac2:	2200      	movs	r2, #0
 800bac4:	2100      	movs	r1, #0
 800bac6:	69b8      	ldr	r0, [r7, #24]
 800bac8:	f000 fc54 	bl	800c374 <xQueueGenericSend>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d002      	beq.n	800bad8 <osMutexRelease+0x90>
        stat = osErrorResource;
 800bad2:	f06f 0302 	mvn.w	r3, #2
 800bad6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800bad8:	69fb      	ldr	r3, [r7, #28]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3720      	adds	r7, #32
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20000f70 	.word	0x20000f70

0800bae8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bae8:	b580      	push	{r7, lr}
 800baea:	b08c      	sub	sp, #48	; 0x30
 800baec:	af02      	add	r7, sp, #8
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800baf4:	2300      	movs	r3, #0
 800baf6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800baf8:	f3ef 8305 	mrs	r3, IPSR
 800bafc:	61bb      	str	r3, [r7, #24]
  return(result);
 800bafe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d170      	bne.n	800bbe6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb04:	f3ef 8310 	mrs	r3, PRIMASK
 800bb08:	617b      	str	r3, [r7, #20]
  return(result);
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d105      	bne.n	800bb1c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bb10:	f3ef 8311 	mrs	r3, BASEPRI
 800bb14:	613b      	str	r3, [r7, #16]
  return(result);
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d003      	beq.n	800bb24 <osMessageQueueNew+0x3c>
 800bb1c:	4b34      	ldr	r3, [pc, #208]	; (800bbf0 <osMessageQueueNew+0x108>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b02      	cmp	r3, #2
 800bb22:	d060      	beq.n	800bbe6 <osMessageQueueNew+0xfe>
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d05d      	beq.n	800bbe6 <osMessageQueueNew+0xfe>
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d05a      	beq.n	800bbe6 <osMessageQueueNew+0xfe>
    mem = -1;
 800bb30:	f04f 33ff 	mov.w	r3, #4294967295
 800bb34:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d029      	beq.n	800bb90 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d012      	beq.n	800bb6a <osMessageQueueNew+0x82>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	2b4f      	cmp	r3, #79	; 0x4f
 800bb4a:	d90e      	bls.n	800bb6a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00a      	beq.n	800bb6a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	695a      	ldr	r2, [r3, #20]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	68b9      	ldr	r1, [r7, #8]
 800bb5c:	fb01 f303 	mul.w	r3, r1, r3
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d302      	bcc.n	800bb6a <osMessageQueueNew+0x82>
        mem = 1;
 800bb64:	2301      	movs	r3, #1
 800bb66:	623b      	str	r3, [r7, #32]
 800bb68:	e014      	b.n	800bb94 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d110      	bne.n	800bb94 <osMessageQueueNew+0xac>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10c      	bne.n	800bb94 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d108      	bne.n	800bb94 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	695b      	ldr	r3, [r3, #20]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d104      	bne.n	800bb94 <osMessageQueueNew+0xac>
          mem = 0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	623b      	str	r3, [r7, #32]
 800bb8e:	e001      	b.n	800bb94 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800bb90:	2300      	movs	r3, #0
 800bb92:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d10c      	bne.n	800bbb4 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	691a      	ldr	r2, [r3, #16]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6899      	ldr	r1, [r3, #8]
 800bba2:	2300      	movs	r3, #0
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	460b      	mov	r3, r1
 800bba8:	68b9      	ldr	r1, [r7, #8]
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f000 fa58 	bl	800c060 <xQueueGenericCreateStatic>
 800bbb0:	6278      	str	r0, [r7, #36]	; 0x24
 800bbb2:	e008      	b.n	800bbc6 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800bbb4:	6a3b      	ldr	r3, [r7, #32]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d105      	bne.n	800bbc6 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800bbba:	2200      	movs	r2, #0
 800bbbc:	68b9      	ldr	r1, [r7, #8]
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f000 fac1 	bl	800c146 <xQueueGenericCreate>
 800bbc4:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00c      	beq.n	800bbe6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d003      	beq.n	800bbda <osMessageQueueNew+0xf2>
        name = attr->name;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	61fb      	str	r3, [r7, #28]
 800bbd8:	e001      	b.n	800bbde <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800bbde:	69f9      	ldr	r1, [r7, #28]
 800bbe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbe2:	f001 f8df 	bl	800cda4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3728      	adds	r7, #40	; 0x28
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	20000f70 	.word	0x20000f70

0800bbf4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08a      	sub	sp, #40	; 0x28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	603b      	str	r3, [r7, #0]
 800bc00:	4613      	mov	r3, r2
 800bc02:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc0c:	f3ef 8305 	mrs	r3, IPSR
 800bc10:	61fb      	str	r3, [r7, #28]
  return(result);
 800bc12:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10f      	bne.n	800bc38 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc18:	f3ef 8310 	mrs	r3, PRIMASK
 800bc1c:	61bb      	str	r3, [r7, #24]
  return(result);
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d105      	bne.n	800bc30 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bc24:	f3ef 8311 	mrs	r3, BASEPRI
 800bc28:	617b      	str	r3, [r7, #20]
  return(result);
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d02c      	beq.n	800bc8a <osMessageQueuePut+0x96>
 800bc30:	4b28      	ldr	r3, [pc, #160]	; (800bcd4 <osMessageQueuePut+0xe0>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d128      	bne.n	800bc8a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc38:	6a3b      	ldr	r3, [r7, #32]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d005      	beq.n	800bc4a <osMessageQueuePut+0x56>
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d002      	beq.n	800bc4a <osMessageQueuePut+0x56>
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800bc4a:	f06f 0303 	mvn.w	r3, #3
 800bc4e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc50:	e039      	b.n	800bcc6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800bc52:	2300      	movs	r3, #0
 800bc54:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bc56:	f107 0210 	add.w	r2, r7, #16
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	68b9      	ldr	r1, [r7, #8]
 800bc5e:	6a38      	ldr	r0, [r7, #32]
 800bc60:	f000 fc82 	bl	800c568 <xQueueGenericSendFromISR>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d003      	beq.n	800bc72 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800bc6a:	f06f 0302 	mvn.w	r3, #2
 800bc6e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc70:	e029      	b.n	800bcc6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d026      	beq.n	800bcc6 <osMessageQueuePut+0xd2>
 800bc78:	4b17      	ldr	r3, [pc, #92]	; (800bcd8 <osMessageQueuePut+0xe4>)
 800bc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc88:	e01d      	b.n	800bcc6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bc8a:	6a3b      	ldr	r3, [r7, #32]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <osMessageQueuePut+0xa2>
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d103      	bne.n	800bc9e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800bc96:	f06f 0303 	mvn.w	r3, #3
 800bc9a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc9c:	e014      	b.n	800bcc8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bc9e:	2300      	movs	r3, #0
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	68b9      	ldr	r1, [r7, #8]
 800bca4:	6a38      	ldr	r0, [r7, #32]
 800bca6:	f000 fb65 	bl	800c374 <xQueueGenericSend>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d00b      	beq.n	800bcc8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d003      	beq.n	800bcbe <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800bcb6:	f06f 0301 	mvn.w	r3, #1
 800bcba:	627b      	str	r3, [r7, #36]	; 0x24
 800bcbc:	e004      	b.n	800bcc8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800bcbe:	f06f 0302 	mvn.w	r3, #2
 800bcc2:	627b      	str	r3, [r7, #36]	; 0x24
 800bcc4:	e000      	b.n	800bcc8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bcc6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3728      	adds	r7, #40	; 0x28
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20000f70 	.word	0x20000f70
 800bcd8:	e000ed04 	.word	0xe000ed04

0800bcdc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08a      	sub	sp, #40	; 0x28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcf2:	f3ef 8305 	mrs	r3, IPSR
 800bcf6:	61fb      	str	r3, [r7, #28]
  return(result);
 800bcf8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10f      	bne.n	800bd1e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcfe:	f3ef 8310 	mrs	r3, PRIMASK
 800bd02:	61bb      	str	r3, [r7, #24]
  return(result);
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d105      	bne.n	800bd16 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bd0a:	f3ef 8311 	mrs	r3, BASEPRI
 800bd0e:	617b      	str	r3, [r7, #20]
  return(result);
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d02c      	beq.n	800bd70 <osMessageQueueGet+0x94>
 800bd16:	4b28      	ldr	r3, [pc, #160]	; (800bdb8 <osMessageQueueGet+0xdc>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d128      	bne.n	800bd70 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd1e:	6a3b      	ldr	r3, [r7, #32]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d005      	beq.n	800bd30 <osMessageQueueGet+0x54>
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d002      	beq.n	800bd30 <osMessageQueueGet+0x54>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d003      	beq.n	800bd38 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800bd30:	f06f 0303 	mvn.w	r3, #3
 800bd34:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd36:	e038      	b.n	800bdaa <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bd3c:	f107 0310 	add.w	r3, r7, #16
 800bd40:	461a      	mov	r2, r3
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	6a38      	ldr	r0, [r7, #32]
 800bd46:	f000 fe87 	bl	800ca58 <xQueueReceiveFromISR>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d003      	beq.n	800bd58 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800bd50:	f06f 0302 	mvn.w	r3, #2
 800bd54:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd56:	e028      	b.n	800bdaa <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d025      	beq.n	800bdaa <osMessageQueueGet+0xce>
 800bd5e:	4b17      	ldr	r3, [pc, #92]	; (800bdbc <osMessageQueueGet+0xe0>)
 800bd60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd64:	601a      	str	r2, [r3, #0]
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd6e:	e01c      	b.n	800bdaa <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d002      	beq.n	800bd7c <osMessageQueueGet+0xa0>
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d103      	bne.n	800bd84 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800bd7c:	f06f 0303 	mvn.w	r3, #3
 800bd80:	627b      	str	r3, [r7, #36]	; 0x24
 800bd82:	e013      	b.n	800bdac <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bd84:	683a      	ldr	r2, [r7, #0]
 800bd86:	68b9      	ldr	r1, [r7, #8]
 800bd88:	6a38      	ldr	r0, [r7, #32]
 800bd8a:	f000 fc81 	bl	800c690 <xQueueReceive>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d00b      	beq.n	800bdac <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d003      	beq.n	800bda2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800bd9a:	f06f 0301 	mvn.w	r3, #1
 800bd9e:	627b      	str	r3, [r7, #36]	; 0x24
 800bda0:	e004      	b.n	800bdac <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800bda2:	f06f 0302 	mvn.w	r3, #2
 800bda6:	627b      	str	r3, [r7, #36]	; 0x24
 800bda8:	e000      	b.n	800bdac <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bdaa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800bdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3728      	adds	r7, #40	; 0x28
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20000f70 	.word	0x20000f70
 800bdbc:	e000ed04 	.word	0xe000ed04

0800bdc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	60b9      	str	r1, [r7, #8]
 800bdca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	4a07      	ldr	r2, [pc, #28]	; (800bdec <vApplicationGetIdleTaskMemory+0x2c>)
 800bdd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	4a06      	ldr	r2, [pc, #24]	; (800bdf0 <vApplicationGetIdleTaskMemory+0x30>)
 800bdd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2280      	movs	r2, #128	; 0x80
 800bddc:	601a      	str	r2, [r3, #0]
}
 800bdde:	bf00      	nop
 800bde0:	3714      	adds	r7, #20
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	20000f74 	.word	0x20000f74
 800bdf0:	20001034 	.word	0x20001034

0800bdf4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4a07      	ldr	r2, [pc, #28]	; (800be20 <vApplicationGetTimerTaskMemory+0x2c>)
 800be04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	4a06      	ldr	r2, [pc, #24]	; (800be24 <vApplicationGetTimerTaskMemory+0x30>)
 800be0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be12:	601a      	str	r2, [r3, #0]
}
 800be14:	bf00      	nop
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr
 800be20:	20001234 	.word	0x20001234
 800be24:	200012f4 	.word	0x200012f4

0800be28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f103 0208 	add.w	r2, r3, #8
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f04f 32ff 	mov.w	r2, #4294967295
 800be40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f103 0208 	add.w	r2, r3, #8
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f103 0208 	add.w	r2, r3, #8
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be76:	bf00      	nop
 800be78:	370c      	adds	r7, #12
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be82:	b480      	push	{r7}
 800be84:	b085      	sub	sp, #20
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	689a      	ldr	r2, [r3, #8]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	683a      	ldr	r2, [r7, #0]
 800bea6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	1c5a      	adds	r2, r3, #1
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	601a      	str	r2, [r3, #0]
}
 800bebe:	bf00      	nop
 800bec0:	3714      	adds	r7, #20
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800beca:	b480      	push	{r7}
 800becc:	b085      	sub	sp, #20
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
 800bed2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee0:	d103      	bne.n	800beea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	60fb      	str	r3, [r7, #12]
 800bee8:	e00c      	b.n	800bf04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	3308      	adds	r3, #8
 800beee:	60fb      	str	r3, [r7, #12]
 800bef0:	e002      	b.n	800bef8 <vListInsert+0x2e>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	60fb      	str	r3, [r7, #12]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d2f6      	bcs.n	800bef2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	683a      	ldr	r2, [r7, #0]
 800bf12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	683a      	ldr	r2, [r7, #0]
 800bf1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	1c5a      	adds	r2, r3, #1
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	601a      	str	r2, [r3, #0]
}
 800bf30:	bf00      	nop
 800bf32:	3714      	adds	r7, #20
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	691b      	ldr	r3, [r3, #16]
 800bf48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	6892      	ldr	r2, [r2, #8]
 800bf52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	6852      	ldr	r2, [r2, #4]
 800bf5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d103      	bne.n	800bf70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	689a      	ldr	r2, [r3, #8]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	1e5a      	subs	r2, r3, #1
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3714      	adds	r7, #20
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d109      	bne.n	800bfb8 <xQueueGenericReset+0x28>
 800bfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa8:	f383 8811 	msr	BASEPRI, r3
 800bfac:	f3bf 8f6f 	isb	sy
 800bfb0:	f3bf 8f4f 	dsb	sy
 800bfb4:	60bb      	str	r3, [r7, #8]
 800bfb6:	e7fe      	b.n	800bfb6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800bfb8:	f002 fce8 	bl	800e98c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfc4:	68f9      	ldr	r1, [r7, #12]
 800bfc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bfc8:	fb01 f303 	mul.w	r3, r1, r3
 800bfcc:	441a      	add	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	68f9      	ldr	r1, [r7, #12]
 800bfec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bfee:	fb01 f303 	mul.w	r3, r1, r3
 800bff2:	441a      	add	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	22ff      	movs	r2, #255	; 0xff
 800bffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	22ff      	movs	r2, #255	; 0xff
 800c004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d114      	bne.n	800c038 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d01a      	beq.n	800c04c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3310      	adds	r3, #16
 800c01a:	4618      	mov	r0, r3
 800c01c:	f001 fca2 	bl	800d964 <xTaskRemoveFromEventList>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d012      	beq.n	800c04c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c026:	4b0d      	ldr	r3, [pc, #52]	; (800c05c <xQueueGenericReset+0xcc>)
 800c028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	e009      	b.n	800c04c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	3310      	adds	r3, #16
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7ff fef3 	bl	800be28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	3324      	adds	r3, #36	; 0x24
 800c046:	4618      	mov	r0, r3
 800c048:	f7ff feee 	bl	800be28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c04c:	f002 fccc 	bl	800e9e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c050:	2301      	movs	r3, #1
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	e000ed04 	.word	0xe000ed04

0800c060 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c060:	b580      	push	{r7, lr}
 800c062:	b08e      	sub	sp, #56	; 0x38
 800c064:	af02      	add	r7, sp, #8
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
 800c06c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d109      	bne.n	800c088 <xQueueGenericCreateStatic+0x28>
 800c074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c078:	f383 8811 	msr	BASEPRI, r3
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	62bb      	str	r3, [r7, #40]	; 0x28
 800c086:	e7fe      	b.n	800c086 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d109      	bne.n	800c0a2 <xQueueGenericCreateStatic+0x42>
 800c08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	627b      	str	r3, [r7, #36]	; 0x24
 800c0a0:	e7fe      	b.n	800c0a0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d002      	beq.n	800c0ae <xQueueGenericCreateStatic+0x4e>
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <xQueueGenericCreateStatic+0x52>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e000      	b.n	800c0b4 <xQueueGenericCreateStatic+0x54>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d109      	bne.n	800c0cc <xQueueGenericCreateStatic+0x6c>
 800c0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0bc:	f383 8811 	msr	BASEPRI, r3
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	623b      	str	r3, [r7, #32]
 800c0ca:	e7fe      	b.n	800c0ca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d102      	bne.n	800c0d8 <xQueueGenericCreateStatic+0x78>
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d101      	bne.n	800c0dc <xQueueGenericCreateStatic+0x7c>
 800c0d8:	2301      	movs	r3, #1
 800c0da:	e000      	b.n	800c0de <xQueueGenericCreateStatic+0x7e>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d109      	bne.n	800c0f6 <xQueueGenericCreateStatic+0x96>
 800c0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	61fb      	str	r3, [r7, #28]
 800c0f4:	e7fe      	b.n	800c0f4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c0f6:	2350      	movs	r3, #80	; 0x50
 800c0f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	2b50      	cmp	r3, #80	; 0x50
 800c0fe:	d009      	beq.n	800c114 <xQueueGenericCreateStatic+0xb4>
 800c100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	61bb      	str	r3, [r7, #24]
 800c112:	e7fe      	b.n	800c112 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c114:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00d      	beq.n	800c13c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c122:	2201      	movs	r2, #1
 800c124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c128:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	4613      	mov	r3, r2
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	68b9      	ldr	r1, [r7, #8]
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f000 f844 	bl	800c1c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c13e:	4618      	mov	r0, r3
 800c140:	3730      	adds	r7, #48	; 0x30
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c146:	b580      	push	{r7, lr}
 800c148:	b08a      	sub	sp, #40	; 0x28
 800c14a:	af02      	add	r7, sp, #8
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	60b9      	str	r1, [r7, #8]
 800c150:	4613      	mov	r3, r2
 800c152:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d109      	bne.n	800c16e <xQueueGenericCreate+0x28>
 800c15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	613b      	str	r3, [r7, #16]
 800c16c:	e7fe      	b.n	800c16c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d102      	bne.n	800c17a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c174:	2300      	movs	r3, #0
 800c176:	61fb      	str	r3, [r7, #28]
 800c178:	e004      	b.n	800c184 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	fb02 f303 	mul.w	r3, r2, r3
 800c182:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	3350      	adds	r3, #80	; 0x50
 800c188:	4618      	mov	r0, r3
 800c18a:	f7f6 ff4f 	bl	800302c <pvPortMalloc>
 800c18e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d011      	beq.n	800c1ba <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	3350      	adds	r3, #80	; 0x50
 800c19e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c1a8:	79fa      	ldrb	r2, [r7, #7]
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	697a      	ldr	r2, [r7, #20]
 800c1b2:	68b9      	ldr	r1, [r7, #8]
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f000 f805 	bl	800c1c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1ba:	69bb      	ldr	r3, [r7, #24]
	}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3720      	adds	r7, #32
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d103      	bne.n	800c1e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	69ba      	ldr	r2, [r7, #24]
 800c1dc:	601a      	str	r2, [r3, #0]
 800c1de:	e002      	b.n	800c1e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	68ba      	ldr	r2, [r7, #8]
 800c1f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c1f2:	2101      	movs	r1, #1
 800c1f4:	69b8      	ldr	r0, [r7, #24]
 800c1f6:	f7ff fecb 	bl	800bf90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	78fa      	ldrb	r2, [r7, #3]
 800c1fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c202:	bf00      	nop
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b082      	sub	sp, #8
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00e      	beq.n	800c236 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c22a:	2300      	movs	r3, #0
 800c22c:	2200      	movs	r2, #0
 800c22e:	2100      	movs	r1, #0
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 f89f 	bl	800c374 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c236:	bf00      	nop
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b086      	sub	sp, #24
 800c242:	af00      	add	r7, sp, #0
 800c244:	4603      	mov	r3, r0
 800c246:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c248:	2301      	movs	r3, #1
 800c24a:	617b      	str	r3, [r7, #20]
 800c24c:	2300      	movs	r3, #0
 800c24e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c250:	79fb      	ldrb	r3, [r7, #7]
 800c252:	461a      	mov	r2, r3
 800c254:	6939      	ldr	r1, [r7, #16]
 800c256:	6978      	ldr	r0, [r7, #20]
 800c258:	f7ff ff75 	bl	800c146 <xQueueGenericCreate>
 800c25c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	f7ff ffd3 	bl	800c20a <prvInitialiseMutex>

		return xNewQueue;
 800c264:	68fb      	ldr	r3, [r7, #12]
	}
 800c266:	4618      	mov	r0, r3
 800c268:	3718      	adds	r7, #24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b088      	sub	sp, #32
 800c272:	af02      	add	r7, sp, #8
 800c274:	4603      	mov	r3, r0
 800c276:	6039      	str	r1, [r7, #0]
 800c278:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c27a:	2301      	movs	r3, #1
 800c27c:	617b      	str	r3, [r7, #20]
 800c27e:	2300      	movs	r3, #0
 800c280:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c282:	79fb      	ldrb	r3, [r7, #7]
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	2200      	movs	r2, #0
 800c28a:	6939      	ldr	r1, [r7, #16]
 800c28c:	6978      	ldr	r0, [r7, #20]
 800c28e:	f7ff fee7 	bl	800c060 <xQueueGenericCreateStatic>
 800c292:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f7ff ffb8 	bl	800c20a <prvInitialiseMutex>

		return xNewQueue;
 800c29a:	68fb      	ldr	r3, [r7, #12]
	}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3718      	adds	r7, #24
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c2a4:	b590      	push	{r4, r7, lr}
 800c2a6:	b087      	sub	sp, #28
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d109      	bne.n	800c2ca <xQueueGiveMutexRecursive+0x26>
 800c2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ba:	f383 8811 	msr	BASEPRI, r3
 800c2be:	f3bf 8f6f 	isb	sy
 800c2c2:	f3bf 8f4f 	dsb	sy
 800c2c6:	60fb      	str	r3, [r7, #12]
 800c2c8:	e7fe      	b.n	800c2c8 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	689c      	ldr	r4, [r3, #8]
 800c2ce:	f001 fd05 	bl	800dcdc <xTaskGetCurrentTaskHandle>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	429c      	cmp	r4, r3
 800c2d6:	d111      	bne.n	800c2fc <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	1e5a      	subs	r2, r3, #1
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d105      	bne.n	800c2f6 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	6938      	ldr	r0, [r7, #16]
 800c2f2:	f000 f83f 	bl	800c374 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	617b      	str	r3, [r7, #20]
 800c2fa:	e001      	b.n	800c300 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c300:	697b      	ldr	r3, [r7, #20]
	}
 800c302:	4618      	mov	r0, r3
 800c304:	371c      	adds	r7, #28
 800c306:	46bd      	mov	sp, r7
 800c308:	bd90      	pop	{r4, r7, pc}

0800c30a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c30a:	b590      	push	{r4, r7, lr}
 800c30c:	b087      	sub	sp, #28
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d109      	bne.n	800c332 <xQueueTakeMutexRecursive+0x28>
 800c31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	60fb      	str	r3, [r7, #12]
 800c330:	e7fe      	b.n	800c330 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	689c      	ldr	r4, [r3, #8]
 800c336:	f001 fcd1 	bl	800dcdc <xTaskGetCurrentTaskHandle>
 800c33a:	4603      	mov	r3, r0
 800c33c:	429c      	cmp	r4, r3
 800c33e:	d107      	bne.n	800c350 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	1c5a      	adds	r2, r3, #1
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c34a:	2301      	movs	r3, #1
 800c34c:	617b      	str	r3, [r7, #20]
 800c34e:	e00c      	b.n	800c36a <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	6938      	ldr	r0, [r7, #16]
 800c354:	f000 fa78 	bl	800c848 <xQueueSemaphoreTake>
 800c358:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d004      	beq.n	800c36a <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	1c5a      	adds	r2, r3, #1
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c36a:	697b      	ldr	r3, [r7, #20]
	}
 800c36c:	4618      	mov	r0, r3
 800c36e:	371c      	adds	r7, #28
 800c370:	46bd      	mov	sp, r7
 800c372:	bd90      	pop	{r4, r7, pc}

0800c374 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b08e      	sub	sp, #56	; 0x38
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
 800c380:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c382:	2300      	movs	r3, #0
 800c384:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d109      	bne.n	800c3a4 <xQueueGenericSend+0x30>
 800c390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c394:	f383 8811 	msr	BASEPRI, r3
 800c398:	f3bf 8f6f 	isb	sy
 800c39c:	f3bf 8f4f 	dsb	sy
 800c3a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3a2:	e7fe      	b.n	800c3a2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d103      	bne.n	800c3b2 <xQueueGenericSend+0x3e>
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d101      	bne.n	800c3b6 <xQueueGenericSend+0x42>
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e000      	b.n	800c3b8 <xQueueGenericSend+0x44>
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d109      	bne.n	800c3d0 <xQueueGenericSend+0x5c>
 800c3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c0:	f383 8811 	msr	BASEPRI, r3
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c3ce:	e7fe      	b.n	800c3ce <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2b02      	cmp	r3, #2
 800c3d4:	d103      	bne.n	800c3de <xQueueGenericSend+0x6a>
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d101      	bne.n	800c3e2 <xQueueGenericSend+0x6e>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	e000      	b.n	800c3e4 <xQueueGenericSend+0x70>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d109      	bne.n	800c3fc <xQueueGenericSend+0x88>
 800c3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ec:	f383 8811 	msr	BASEPRI, r3
 800c3f0:	f3bf 8f6f 	isb	sy
 800c3f4:	f3bf 8f4f 	dsb	sy
 800c3f8:	623b      	str	r3, [r7, #32]
 800c3fa:	e7fe      	b.n	800c3fa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3fc:	f001 fc7e 	bl	800dcfc <xTaskGetSchedulerState>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d102      	bne.n	800c40c <xQueueGenericSend+0x98>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <xQueueGenericSend+0x9c>
 800c40c:	2301      	movs	r3, #1
 800c40e:	e000      	b.n	800c412 <xQueueGenericSend+0x9e>
 800c410:	2300      	movs	r3, #0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d109      	bne.n	800c42a <xQueueGenericSend+0xb6>
 800c416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41a:	f383 8811 	msr	BASEPRI, r3
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	61fb      	str	r3, [r7, #28]
 800c428:	e7fe      	b.n	800c428 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c42a:	f002 faaf 	bl	800e98c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c436:	429a      	cmp	r2, r3
 800c438:	d302      	bcc.n	800c440 <xQueueGenericSend+0xcc>
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	d129      	bne.n	800c494 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c440:	683a      	ldr	r2, [r7, #0]
 800c442:	68b9      	ldr	r1, [r7, #8]
 800c444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c446:	f000 fb9c 	bl	800cb82 <prvCopyDataToQueue>
 800c44a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c450:	2b00      	cmp	r3, #0
 800c452:	d010      	beq.n	800c476 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c456:	3324      	adds	r3, #36	; 0x24
 800c458:	4618      	mov	r0, r3
 800c45a:	f001 fa83 	bl	800d964 <xTaskRemoveFromEventList>
 800c45e:	4603      	mov	r3, r0
 800c460:	2b00      	cmp	r3, #0
 800c462:	d013      	beq.n	800c48c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c464:	4b3f      	ldr	r3, [pc, #252]	; (800c564 <xQueueGenericSend+0x1f0>)
 800c466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c46a:	601a      	str	r2, [r3, #0]
 800c46c:	f3bf 8f4f 	dsb	sy
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	e00a      	b.n	800c48c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d007      	beq.n	800c48c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c47c:	4b39      	ldr	r3, [pc, #228]	; (800c564 <xQueueGenericSend+0x1f0>)
 800c47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c482:	601a      	str	r2, [r3, #0]
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c48c:	f002 faac 	bl	800e9e8 <vPortExitCritical>
				return pdPASS;
 800c490:	2301      	movs	r3, #1
 800c492:	e063      	b.n	800c55c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d103      	bne.n	800c4a2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c49a:	f002 faa5 	bl	800e9e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	e05c      	b.n	800c55c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d106      	bne.n	800c4b6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4a8:	f107 0314 	add.w	r3, r7, #20
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f001 fabb 	bl	800da28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4b6:	f002 fa97 	bl	800e9e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4ba:	f001 f803 	bl	800d4c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4be:	f002 fa65 	bl	800e98c <vPortEnterCritical>
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4c8:	b25b      	sxtb	r3, r3
 800c4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ce:	d103      	bne.n	800c4d8 <xQueueGenericSend+0x164>
 800c4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4de:	b25b      	sxtb	r3, r3
 800c4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e4:	d103      	bne.n	800c4ee <xQueueGenericSend+0x17a>
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4ee:	f002 fa7b 	bl	800e9e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4f2:	1d3a      	adds	r2, r7, #4
 800c4f4:	f107 0314 	add.w	r3, r7, #20
 800c4f8:	4611      	mov	r1, r2
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f001 faaa 	bl	800da54 <xTaskCheckForTimeOut>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d124      	bne.n	800c550 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c508:	f000 fc33 	bl	800cd72 <prvIsQueueFull>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d018      	beq.n	800c544 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c514:	3310      	adds	r3, #16
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	4611      	mov	r1, r2
 800c51a:	4618      	mov	r0, r3
 800c51c:	f001 f9d4 	bl	800d8c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c522:	f000 fbbe 	bl	800cca2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c526:	f000 ffdb 	bl	800d4e0 <xTaskResumeAll>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f47f af7c 	bne.w	800c42a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800c532:	4b0c      	ldr	r3, [pc, #48]	; (800c564 <xQueueGenericSend+0x1f0>)
 800c534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c538:	601a      	str	r2, [r3, #0]
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	e772      	b.n	800c42a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c546:	f000 fbac 	bl	800cca2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c54a:	f000 ffc9 	bl	800d4e0 <xTaskResumeAll>
 800c54e:	e76c      	b.n	800c42a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c552:	f000 fba6 	bl	800cca2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c556:	f000 ffc3 	bl	800d4e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c55a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3738      	adds	r7, #56	; 0x38
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	e000ed04 	.word	0xe000ed04

0800c568 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b08e      	sub	sp, #56	; 0x38
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
 800c574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d109      	bne.n	800c594 <xQueueGenericSendFromISR+0x2c>
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	627b      	str	r3, [r7, #36]	; 0x24
 800c592:	e7fe      	b.n	800c592 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d103      	bne.n	800c5a2 <xQueueGenericSendFromISR+0x3a>
 800c59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d101      	bne.n	800c5a6 <xQueueGenericSendFromISR+0x3e>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e000      	b.n	800c5a8 <xQueueGenericSendFromISR+0x40>
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d109      	bne.n	800c5c0 <xQueueGenericSendFromISR+0x58>
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	623b      	str	r3, [r7, #32]
 800c5be:	e7fe      	b.n	800c5be <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d103      	bne.n	800c5ce <xQueueGenericSendFromISR+0x66>
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d101      	bne.n	800c5d2 <xQueueGenericSendFromISR+0x6a>
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e000      	b.n	800c5d4 <xQueueGenericSendFromISR+0x6c>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d109      	bne.n	800c5ec <xQueueGenericSendFromISR+0x84>
 800c5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5dc:	f383 8811 	msr	BASEPRI, r3
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	61fb      	str	r3, [r7, #28]
 800c5ea:	e7fe      	b.n	800c5ea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5ec:	f002 faaa 	bl	800eb44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c5f0:	f3ef 8211 	mrs	r2, BASEPRI
 800c5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	61ba      	str	r2, [r7, #24]
 800c606:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c608:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c60a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c614:	429a      	cmp	r2, r3
 800c616:	d302      	bcc.n	800c61e <xQueueGenericSendFromISR+0xb6>
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	d12c      	bne.n	800c678 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	68b9      	ldr	r1, [r7, #8]
 800c62c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c62e:	f000 faa8 	bl	800cb82 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c632:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c63a:	d112      	bne.n	800c662 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c640:	2b00      	cmp	r3, #0
 800c642:	d016      	beq.n	800c672 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c646:	3324      	adds	r3, #36	; 0x24
 800c648:	4618      	mov	r0, r3
 800c64a:	f001 f98b 	bl	800d964 <xTaskRemoveFromEventList>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00e      	beq.n	800c672 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00b      	beq.n	800c672 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2201      	movs	r2, #1
 800c65e:	601a      	str	r2, [r3, #0]
 800c660:	e007      	b.n	800c672 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c662:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c666:	3301      	adds	r3, #1
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	b25a      	sxtb	r2, r3
 800c66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c672:	2301      	movs	r3, #1
 800c674:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c676:	e001      	b.n	800c67c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c678:	2300      	movs	r3, #0
 800c67a:	637b      	str	r3, [r7, #52]	; 0x34
 800c67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3738      	adds	r7, #56	; 0x38
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b08c      	sub	sp, #48	; 0x30
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c69c:	2300      	movs	r3, #0
 800c69e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d109      	bne.n	800c6be <xQueueReceive+0x2e>
	__asm volatile
 800c6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ae:	f383 8811 	msr	BASEPRI, r3
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	f3bf 8f4f 	dsb	sy
 800c6ba:	623b      	str	r3, [r7, #32]
 800c6bc:	e7fe      	b.n	800c6bc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d103      	bne.n	800c6cc <xQueueReceive+0x3c>
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d101      	bne.n	800c6d0 <xQueueReceive+0x40>
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e000      	b.n	800c6d2 <xQueueReceive+0x42>
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d109      	bne.n	800c6ea <xQueueReceive+0x5a>
 800c6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	61fb      	str	r3, [r7, #28]
 800c6e8:	e7fe      	b.n	800c6e8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6ea:	f001 fb07 	bl	800dcfc <xTaskGetSchedulerState>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d102      	bne.n	800c6fa <xQueueReceive+0x6a>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d101      	bne.n	800c6fe <xQueueReceive+0x6e>
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e000      	b.n	800c700 <xQueueReceive+0x70>
 800c6fe:	2300      	movs	r3, #0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d109      	bne.n	800c718 <xQueueReceive+0x88>
 800c704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c708:	f383 8811 	msr	BASEPRI, r3
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	61bb      	str	r3, [r7, #24]
 800c716:	e7fe      	b.n	800c716 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c718:	f002 f938 	bl	800e98c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c720:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c724:	2b00      	cmp	r3, #0
 800c726:	d01f      	beq.n	800c768 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c728:	68b9      	ldr	r1, [r7, #8]
 800c72a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c72c:	f000 fa93 	bl	800cc56 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c732:	1e5a      	subs	r2, r3, #1
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00f      	beq.n	800c760 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c742:	3310      	adds	r3, #16
 800c744:	4618      	mov	r0, r3
 800c746:	f001 f90d 	bl	800d964 <xTaskRemoveFromEventList>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d007      	beq.n	800c760 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c750:	4b3c      	ldr	r3, [pc, #240]	; (800c844 <xQueueReceive+0x1b4>)
 800c752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c756:	601a      	str	r2, [r3, #0]
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c760:	f002 f942 	bl	800e9e8 <vPortExitCritical>
				return pdPASS;
 800c764:	2301      	movs	r3, #1
 800c766:	e069      	b.n	800c83c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d103      	bne.n	800c776 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c76e:	f002 f93b 	bl	800e9e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c772:	2300      	movs	r3, #0
 800c774:	e062      	b.n	800c83c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d106      	bne.n	800c78a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c77c:	f107 0310 	add.w	r3, r7, #16
 800c780:	4618      	mov	r0, r3
 800c782:	f001 f951 	bl	800da28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c786:	2301      	movs	r3, #1
 800c788:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c78a:	f002 f92d 	bl	800e9e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c78e:	f000 fe99 	bl	800d4c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c792:	f002 f8fb 	bl	800e98c <vPortEnterCritical>
 800c796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c79c:	b25b      	sxtb	r3, r3
 800c79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a2:	d103      	bne.n	800c7ac <xQueueReceive+0x11c>
 800c7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7b2:	b25b      	sxtb	r3, r3
 800c7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b8:	d103      	bne.n	800c7c2 <xQueueReceive+0x132>
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7c2:	f002 f911 	bl	800e9e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7c6:	1d3a      	adds	r2, r7, #4
 800c7c8:	f107 0310 	add.w	r3, r7, #16
 800c7cc:	4611      	mov	r1, r2
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f001 f940 	bl	800da54 <xTaskCheckForTimeOut>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d123      	bne.n	800c822 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7dc:	f000 fab3 	bl	800cd46 <prvIsQueueEmpty>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d017      	beq.n	800c816 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e8:	3324      	adds	r3, #36	; 0x24
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	4611      	mov	r1, r2
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f001 f86a 	bl	800d8c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7f6:	f000 fa54 	bl	800cca2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7fa:	f000 fe71 	bl	800d4e0 <xTaskResumeAll>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	d189      	bne.n	800c718 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c804:	4b0f      	ldr	r3, [pc, #60]	; (800c844 <xQueueReceive+0x1b4>)
 800c806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c80a:	601a      	str	r2, [r3, #0]
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	f3bf 8f6f 	isb	sy
 800c814:	e780      	b.n	800c718 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c818:	f000 fa43 	bl	800cca2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c81c:	f000 fe60 	bl	800d4e0 <xTaskResumeAll>
 800c820:	e77a      	b.n	800c718 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c824:	f000 fa3d 	bl	800cca2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c828:	f000 fe5a 	bl	800d4e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c82c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c82e:	f000 fa8a 	bl	800cd46 <prvIsQueueEmpty>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	f43f af6f 	beq.w	800c718 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c83a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3730      	adds	r7, #48	; 0x30
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	e000ed04 	.word	0xe000ed04

0800c848 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08e      	sub	sp, #56	; 0x38
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c852:	2300      	movs	r3, #0
 800c854:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c85a:	2300      	movs	r3, #0
 800c85c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c860:	2b00      	cmp	r3, #0
 800c862:	d109      	bne.n	800c878 <xQueueSemaphoreTake+0x30>
 800c864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	623b      	str	r3, [r7, #32]
 800c876:	e7fe      	b.n	800c876 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d009      	beq.n	800c894 <xQueueSemaphoreTake+0x4c>
 800c880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	61fb      	str	r3, [r7, #28]
 800c892:	e7fe      	b.n	800c892 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c894:	f001 fa32 	bl	800dcfc <xTaskGetSchedulerState>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d102      	bne.n	800c8a4 <xQueueSemaphoreTake+0x5c>
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d101      	bne.n	800c8a8 <xQueueSemaphoreTake+0x60>
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e000      	b.n	800c8aa <xQueueSemaphoreTake+0x62>
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d109      	bne.n	800c8c2 <xQueueSemaphoreTake+0x7a>
 800c8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b2:	f383 8811 	msr	BASEPRI, r3
 800c8b6:	f3bf 8f6f 	isb	sy
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	61bb      	str	r3, [r7, #24]
 800c8c0:	e7fe      	b.n	800c8c0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8c2:	f002 f863 	bl	800e98c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d024      	beq.n	800c91c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d4:	1e5a      	subs	r2, r3, #1
 800c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d104      	bne.n	800c8ec <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c8e2:	f001 fb7d 	bl	800dfe0 <pvTaskIncrementMutexHeldCount>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	691b      	ldr	r3, [r3, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00f      	beq.n	800c914 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f6:	3310      	adds	r3, #16
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f001 f833 	bl	800d964 <xTaskRemoveFromEventList>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d007      	beq.n	800c914 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c904:	4b53      	ldr	r3, [pc, #332]	; (800ca54 <xQueueSemaphoreTake+0x20c>)
 800c906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c914:	f002 f868 	bl	800e9e8 <vPortExitCritical>
				return pdPASS;
 800c918:	2301      	movs	r3, #1
 800c91a:	e096      	b.n	800ca4a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d110      	bne.n	800c944 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c924:	2b00      	cmp	r3, #0
 800c926:	d009      	beq.n	800c93c <xQueueSemaphoreTake+0xf4>
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	617b      	str	r3, [r7, #20]
 800c93a:	e7fe      	b.n	800c93a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c93c:	f002 f854 	bl	800e9e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c940:	2300      	movs	r3, #0
 800c942:	e082      	b.n	800ca4a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c946:	2b00      	cmp	r3, #0
 800c948:	d106      	bne.n	800c958 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c94a:	f107 030c 	add.w	r3, r7, #12
 800c94e:	4618      	mov	r0, r3
 800c950:	f001 f86a 	bl	800da28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c954:	2301      	movs	r3, #1
 800c956:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c958:	f002 f846 	bl	800e9e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c95c:	f000 fdb2 	bl	800d4c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c960:	f002 f814 	bl	800e98c <vPortEnterCritical>
 800c964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c96a:	b25b      	sxtb	r3, r3
 800c96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c970:	d103      	bne.n	800c97a <xQueueSemaphoreTake+0x132>
 800c972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c974:	2200      	movs	r2, #0
 800c976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c980:	b25b      	sxtb	r3, r3
 800c982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c986:	d103      	bne.n	800c990 <xQueueSemaphoreTake+0x148>
 800c988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98a:	2200      	movs	r2, #0
 800c98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c990:	f002 f82a 	bl	800e9e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c994:	463a      	mov	r2, r7
 800c996:	f107 030c 	add.w	r3, r7, #12
 800c99a:	4611      	mov	r1, r2
 800c99c:	4618      	mov	r0, r3
 800c99e:	f001 f859 	bl	800da54 <xTaskCheckForTimeOut>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d132      	bne.n	800ca0e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9aa:	f000 f9cc 	bl	800cd46 <prvIsQueueEmpty>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d026      	beq.n	800ca02 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d109      	bne.n	800c9d0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800c9bc:	f001 ffe6 	bl	800e98c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f001 f9b7 	bl	800dd38 <xTaskPriorityInherit>
 800c9ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c9cc:	f002 f80c 	bl	800e9e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d2:	3324      	adds	r3, #36	; 0x24
 800c9d4:	683a      	ldr	r2, [r7, #0]
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f000 ff75 	bl	800d8c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c9de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9e0:	f000 f95f 	bl	800cca2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c9e4:	f000 fd7c 	bl	800d4e0 <xTaskResumeAll>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	f47f af69 	bne.w	800c8c2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800c9f0:	4b18      	ldr	r3, [pc, #96]	; (800ca54 <xQueueSemaphoreTake+0x20c>)
 800c9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9f6:	601a      	str	r2, [r3, #0]
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	e75f      	b.n	800c8c2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ca02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca04:	f000 f94d 	bl	800cca2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca08:	f000 fd6a 	bl	800d4e0 <xTaskResumeAll>
 800ca0c:	e759      	b.n	800c8c2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ca0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca10:	f000 f947 	bl	800cca2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca14:	f000 fd64 	bl	800d4e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca1a:	f000 f994 	bl	800cd46 <prvIsQueueEmpty>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f43f af4e 	beq.w	800c8c2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00d      	beq.n	800ca48 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800ca2c:	f001 ffae 	bl	800e98c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ca30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca32:	f000 f88e 	bl	800cb52 <prvGetDisinheritPriorityAfterTimeout>
 800ca36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ca38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f001 fa4e 	bl	800dee0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ca44:	f001 ffd0 	bl	800e9e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3738      	adds	r7, #56	; 0x38
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	e000ed04 	.word	0xe000ed04

0800ca58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b08e      	sub	sp, #56	; 0x38
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d109      	bne.n	800ca82 <xQueueReceiveFromISR+0x2a>
 800ca6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca72:	f383 8811 	msr	BASEPRI, r3
 800ca76:	f3bf 8f6f 	isb	sy
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	623b      	str	r3, [r7, #32]
 800ca80:	e7fe      	b.n	800ca80 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d103      	bne.n	800ca90 <xQueueReceiveFromISR+0x38>
 800ca88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d101      	bne.n	800ca94 <xQueueReceiveFromISR+0x3c>
 800ca90:	2301      	movs	r3, #1
 800ca92:	e000      	b.n	800ca96 <xQueueReceiveFromISR+0x3e>
 800ca94:	2300      	movs	r3, #0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d109      	bne.n	800caae <xQueueReceiveFromISR+0x56>
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	61fb      	str	r3, [r7, #28]
 800caac:	e7fe      	b.n	800caac <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800caae:	f002 f849 	bl	800eb44 <vPortValidateInterruptPriority>
	__asm volatile
 800cab2:	f3ef 8211 	mrs	r2, BASEPRI
 800cab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caba:	f383 8811 	msr	BASEPRI, r3
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	f3bf 8f4f 	dsb	sy
 800cac6:	61ba      	str	r2, [r7, #24]
 800cac8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800caca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cacc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d02f      	beq.n	800cb3a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cae4:	68b9      	ldr	r1, [r7, #8]
 800cae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cae8:	f000 f8b5 	bl	800cc56 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	1e5a      	subs	r2, r3, #1
 800caf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800caf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800caf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafc:	d112      	bne.n	800cb24 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	691b      	ldr	r3, [r3, #16]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d016      	beq.n	800cb34 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb08:	3310      	adds	r3, #16
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 ff2a 	bl	800d964 <xTaskRemoveFromEventList>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00e      	beq.n	800cb34 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00b      	beq.n	800cb34 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	601a      	str	r2, [r3, #0]
 800cb22:	e007      	b.n	800cb34 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cb24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb28:	3301      	adds	r3, #1
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	b25a      	sxtb	r2, r3
 800cb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cb34:	2301      	movs	r3, #1
 800cb36:	637b      	str	r3, [r7, #52]	; 0x34
 800cb38:	e001      	b.n	800cb3e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb40:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3738      	adds	r7, #56	; 0x38
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cb52:	b480      	push	{r7}
 800cb54:	b085      	sub	sp, #20
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d006      	beq.n	800cb70 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cb6c:	60fb      	str	r3, [r7, #12]
 800cb6e:	e001      	b.n	800cb74 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cb70:	2300      	movs	r3, #0
 800cb72:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cb74:	68fb      	ldr	r3, [r7, #12]
	}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3714      	adds	r7, #20
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr

0800cb82 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b086      	sub	sp, #24
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	60f8      	str	r0, [r7, #12]
 800cb8a:	60b9      	str	r1, [r7, #8]
 800cb8c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb96:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10d      	bne.n	800cbbc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d14d      	bne.n	800cc44 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	4618      	mov	r0, r3
 800cbae:	f001 f92b 	bl	800de08 <xTaskPriorityDisinherit>
 800cbb2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	609a      	str	r2, [r3, #8]
 800cbba:	e043      	b.n	800cc44 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d119      	bne.n	800cbf6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	6858      	ldr	r0, [r3, #4]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbca:	461a      	mov	r2, r3
 800cbcc:	68b9      	ldr	r1, [r7, #8]
 800cbce:	f002 f855 	bl	800ec7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbda:	441a      	add	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	685a      	ldr	r2, [r3, #4]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d32b      	bcc.n	800cc44 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	605a      	str	r2, [r3, #4]
 800cbf4:	e026      	b.n	800cc44 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	68d8      	ldr	r0, [r3, #12]
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbfe:	461a      	mov	r2, r3
 800cc00:	68b9      	ldr	r1, [r7, #8]
 800cc02:	f002 f83b 	bl	800ec7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	68da      	ldr	r2, [r3, #12]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0e:	425b      	negs	r3, r3
 800cc10:	441a      	add	r2, r3
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	68da      	ldr	r2, [r3, #12]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d207      	bcs.n	800cc32 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	689a      	ldr	r2, [r3, #8]
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc2a:	425b      	negs	r3, r3
 800cc2c:	441a      	add	r2, r3
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d105      	bne.n	800cc44 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d002      	beq.n	800cc44 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	3b01      	subs	r3, #1
 800cc42:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	1c5a      	adds	r2, r3, #1
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cc4c:	697b      	ldr	r3, [r7, #20]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3718      	adds	r7, #24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b082      	sub	sp, #8
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d018      	beq.n	800cc9a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	68da      	ldr	r2, [r3, #12]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc70:	441a      	add	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	68da      	ldr	r2, [r3, #12]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d303      	bcc.n	800cc8a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	68d9      	ldr	r1, [r3, #12]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc92:	461a      	mov	r2, r3
 800cc94:	6838      	ldr	r0, [r7, #0]
 800cc96:	f001 fff1 	bl	800ec7c <memcpy>
	}
}
 800cc9a:	bf00      	nop
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cca2:	b580      	push	{r7, lr}
 800cca4:	b084      	sub	sp, #16
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ccaa:	f001 fe6f 	bl	800e98c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccb4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ccb6:	e011      	b.n	800ccdc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d012      	beq.n	800cce6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	3324      	adds	r3, #36	; 0x24
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f000 fe4d 	bl	800d964 <xTaskRemoveFromEventList>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d001      	beq.n	800ccd4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ccd0:	f000 ff20 	bl	800db14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ccdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	dce9      	bgt.n	800ccb8 <prvUnlockQueue+0x16>
 800cce4:	e000      	b.n	800cce8 <prvUnlockQueue+0x46>
					break;
 800cce6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	22ff      	movs	r2, #255	; 0xff
 800ccec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ccf0:	f001 fe7a 	bl	800e9e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ccf4:	f001 fe4a 	bl	800e98c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccfe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd00:	e011      	b.n	800cd26 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	691b      	ldr	r3, [r3, #16]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d012      	beq.n	800cd30 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	3310      	adds	r3, #16
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f000 fe28 	bl	800d964 <xTaskRemoveFromEventList>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cd1a:	f000 fefb 	bl	800db14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cd1e:	7bbb      	ldrb	r3, [r7, #14]
 800cd20:	3b01      	subs	r3, #1
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	dce9      	bgt.n	800cd02 <prvUnlockQueue+0x60>
 800cd2e:	e000      	b.n	800cd32 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cd30:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	22ff      	movs	r2, #255	; 0xff
 800cd36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cd3a:	f001 fe55 	bl	800e9e8 <vPortExitCritical>
}
 800cd3e:	bf00      	nop
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b084      	sub	sp, #16
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd4e:	f001 fe1d 	bl	800e98c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d102      	bne.n	800cd60 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	60fb      	str	r3, [r7, #12]
 800cd5e:	e001      	b.n	800cd64 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd60:	2300      	movs	r3, #0
 800cd62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd64:	f001 fe40 	bl	800e9e8 <vPortExitCritical>

	return xReturn;
 800cd68:	68fb      	ldr	r3, [r7, #12]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3710      	adds	r7, #16
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b084      	sub	sp, #16
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd7a:	f001 fe07 	bl	800e98c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d102      	bne.n	800cd90 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	60fb      	str	r3, [r7, #12]
 800cd8e:	e001      	b.n	800cd94 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cd90:	2300      	movs	r3, #0
 800cd92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd94:	f001 fe28 	bl	800e9e8 <vPortExitCritical>

	return xReturn;
 800cd98:	68fb      	ldr	r3, [r7, #12]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
	...

0800cda4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cda4:	b480      	push	{r7}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdae:	2300      	movs	r3, #0
 800cdb0:	60fb      	str	r3, [r7, #12]
 800cdb2:	e014      	b.n	800cdde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cdb4:	4a0e      	ldr	r2, [pc, #56]	; (800cdf0 <vQueueAddToRegistry+0x4c>)
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10b      	bne.n	800cdd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cdc0:	490b      	ldr	r1, [pc, #44]	; (800cdf0 <vQueueAddToRegistry+0x4c>)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	683a      	ldr	r2, [r7, #0]
 800cdc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cdca:	4a09      	ldr	r2, [pc, #36]	; (800cdf0 <vQueueAddToRegistry+0x4c>)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	00db      	lsls	r3, r3, #3
 800cdd0:	4413      	add	r3, r2
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cdd6:	e005      	b.n	800cde4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	3301      	adds	r3, #1
 800cddc:	60fb      	str	r3, [r7, #12]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2b07      	cmp	r3, #7
 800cde2:	d9e7      	bls.n	800cdb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cde4:	bf00      	nop
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr
 800cdf0:	20006314 	.word	0x20006314

0800cdf4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b086      	sub	sp, #24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce04:	f001 fdc2 	bl	800e98c <vPortEnterCritical>
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce0e:	b25b      	sxtb	r3, r3
 800ce10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce14:	d103      	bne.n	800ce1e <vQueueWaitForMessageRestricted+0x2a>
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce24:	b25b      	sxtb	r3, r3
 800ce26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2a:	d103      	bne.n	800ce34 <vQueueWaitForMessageRestricted+0x40>
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce34:	f001 fdd8 	bl	800e9e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d106      	bne.n	800ce4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	3324      	adds	r3, #36	; 0x24
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	68b9      	ldr	r1, [r7, #8]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f000 fd61 	bl	800d910 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce4e:	6978      	ldr	r0, [r7, #20]
 800ce50:	f7ff ff27 	bl	800cca2 <prvUnlockQueue>
	}
 800ce54:	bf00      	nop
 800ce56:	3718      	adds	r7, #24
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b08e      	sub	sp, #56	; 0x38
 800ce60:	af04      	add	r7, sp, #16
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	607a      	str	r2, [r7, #4]
 800ce68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ce6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d109      	bne.n	800ce84 <xTaskCreateStatic+0x28>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	623b      	str	r3, [r7, #32]
 800ce82:	e7fe      	b.n	800ce82 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ce84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d109      	bne.n	800ce9e <xTaskCreateStatic+0x42>
 800ce8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8e:	f383 8811 	msr	BASEPRI, r3
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	61fb      	str	r3, [r7, #28]
 800ce9c:	e7fe      	b.n	800ce9c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ce9e:	23c0      	movs	r3, #192	; 0xc0
 800cea0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	2bc0      	cmp	r3, #192	; 0xc0
 800cea6:	d009      	beq.n	800cebc <xTaskCreateStatic+0x60>
 800cea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceac:	f383 8811 	msr	BASEPRI, r3
 800ceb0:	f3bf 8f6f 	isb	sy
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	61bb      	str	r3, [r7, #24]
 800ceba:	e7fe      	b.n	800ceba <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cebc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d01e      	beq.n	800cf02 <xTaskCreateStatic+0xa6>
 800cec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d01b      	beq.n	800cf02 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ceca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cecc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ced2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ced4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced6:	2202      	movs	r2, #2
 800ced8:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cedc:	2300      	movs	r3, #0
 800cede:	9303      	str	r3, [sp, #12]
 800cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee2:	9302      	str	r3, [sp, #8]
 800cee4:	f107 0314 	add.w	r3, r7, #20
 800cee8:	9301      	str	r3, [sp, #4]
 800ceea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceec:	9300      	str	r3, [sp, #0]
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	68b9      	ldr	r1, [r7, #8]
 800cef4:	68f8      	ldr	r0, [r7, #12]
 800cef6:	f000 f851 	bl	800cf9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cefa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cefc:	f000 f8f6 	bl	800d0ec <prvAddNewTaskToReadyList>
 800cf00:	e001      	b.n	800cf06 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800cf02:	2300      	movs	r3, #0
 800cf04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf06:	697b      	ldr	r3, [r7, #20]
	}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3728      	adds	r7, #40	; 0x28
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b08c      	sub	sp, #48	; 0x30
 800cf14:	af04      	add	r7, sp, #16
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	603b      	str	r3, [r7, #0]
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf20:	88fb      	ldrh	r3, [r7, #6]
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7f6 f881 	bl	800302c <pvPortMalloc>
 800cf2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d00e      	beq.n	800cf50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf32:	20c0      	movs	r0, #192	; 0xc0
 800cf34:	f7f6 f87a 	bl	800302c <pvPortMalloc>
 800cf38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d003      	beq.n	800cf48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	697a      	ldr	r2, [r7, #20]
 800cf44:	631a      	str	r2, [r3, #48]	; 0x30
 800cf46:	e005      	b.n	800cf54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf48:	6978      	ldr	r0, [r7, #20]
 800cf4a:	f7f6 f87d 	bl	8003048 <vPortFree>
 800cf4e:	e001      	b.n	800cf54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf50:	2300      	movs	r3, #0
 800cf52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf54:	69fb      	ldr	r3, [r7, #28]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d017      	beq.n	800cf8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cf62:	88fa      	ldrh	r2, [r7, #6]
 800cf64:	2300      	movs	r3, #0
 800cf66:	9303      	str	r3, [sp, #12]
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	9302      	str	r3, [sp, #8]
 800cf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6e:	9301      	str	r3, [sp, #4]
 800cf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	68b9      	ldr	r1, [r7, #8]
 800cf78:	68f8      	ldr	r0, [r7, #12]
 800cf7a:	f000 f80f 	bl	800cf9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf7e:	69f8      	ldr	r0, [r7, #28]
 800cf80:	f000 f8b4 	bl	800d0ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cf84:	2301      	movs	r3, #1
 800cf86:	61bb      	str	r3, [r7, #24]
 800cf88:	e002      	b.n	800cf90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cf8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cf90:	69bb      	ldr	r3, [r7, #24]
	}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3720      	adds	r7, #32
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
	...

0800cf9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b088      	sub	sp, #32
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	607a      	str	r2, [r7, #4]
 800cfa8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	21a5      	movs	r1, #165	; 0xa5
 800cfb6:	f001 fe6c 	bl	800ec92 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4413      	add	r3, r2
 800cfca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	f023 0307 	bic.w	r3, r3, #7
 800cfd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	f003 0307 	and.w	r3, r3, #7
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d009      	beq.n	800cff2 <prvInitialiseNewTask+0x56>
 800cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	617b      	str	r3, [r7, #20]
 800cff0:	e7fe      	b.n	800cff0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d01f      	beq.n	800d038 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cff8:	2300      	movs	r3, #0
 800cffa:	61fb      	str	r3, [r7, #28]
 800cffc:	e012      	b.n	800d024 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cffe:	68ba      	ldr	r2, [r7, #8]
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	4413      	add	r3, r2
 800d004:	7819      	ldrb	r1, [r3, #0]
 800d006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	4413      	add	r3, r2
 800d00c:	3334      	adds	r3, #52	; 0x34
 800d00e:	460a      	mov	r2, r1
 800d010:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d012:	68ba      	ldr	r2, [r7, #8]
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	4413      	add	r3, r2
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d006      	beq.n	800d02c <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	3301      	adds	r3, #1
 800d022:	61fb      	str	r3, [r7, #28]
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	2b0f      	cmp	r3, #15
 800d028:	d9e9      	bls.n	800cffe <prvInitialiseNewTask+0x62>
 800d02a:	e000      	b.n	800d02e <prvInitialiseNewTask+0x92>
			{
				break;
 800d02c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d030:	2200      	movs	r2, #0
 800d032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d036:	e003      	b.n	800d040 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03a:	2200      	movs	r2, #0
 800d03c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d042:	2b37      	cmp	r3, #55	; 0x37
 800d044:	d901      	bls.n	800d04a <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d046:	2337      	movs	r3, #55	; 0x37
 800d048:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d04e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d054:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d058:	2200      	movs	r2, #0
 800d05a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05e:	3304      	adds	r3, #4
 800d060:	4618      	mov	r0, r3
 800d062:	f7fe ff01 	bl	800be68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d068:	3318      	adds	r3, #24
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fefc 	bl	800be68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d074:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d078:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d084:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d088:	2200      	movs	r2, #0
 800d08a:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08e:	2200      	movs	r2, #0
 800d090:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d096:	2200      	movs	r2, #0
 800d098:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09e:	3358      	adds	r3, #88	; 0x58
 800d0a0:	2260      	movs	r2, #96	; 0x60
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f001 fdf4 	bl	800ec92 <memset>
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	4a0c      	ldr	r2, [pc, #48]	; (800d0e0 <prvInitialiseNewTask+0x144>)
 800d0ae:	65da      	str	r2, [r3, #92]	; 0x5c
 800d0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b2:	4a0c      	ldr	r2, [pc, #48]	; (800d0e4 <prvInitialiseNewTask+0x148>)
 800d0b4:	661a      	str	r2, [r3, #96]	; 0x60
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b8:	4a0b      	ldr	r2, [pc, #44]	; (800d0e8 <prvInitialiseNewTask+0x14c>)
 800d0ba:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0bc:	683a      	ldr	r2, [r7, #0]
 800d0be:	68f9      	ldr	r1, [r7, #12]
 800d0c0:	69b8      	ldr	r0, [r7, #24]
 800d0c2:	f001 fb3b 	bl	800e73c <pxPortInitialiseStack>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d002      	beq.n	800d0d8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0d8:	bf00      	nop
 800d0da:	3720      	adds	r7, #32
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	08015138 	.word	0x08015138
 800d0e4:	08015158 	.word	0x08015158
 800d0e8:	08015118 	.word	0x08015118

0800d0ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d0f4:	f001 fc4a 	bl	800e98c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d0f8:	4b2d      	ldr	r3, [pc, #180]	; (800d1b0 <prvAddNewTaskToReadyList+0xc4>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	4a2c      	ldr	r2, [pc, #176]	; (800d1b0 <prvAddNewTaskToReadyList+0xc4>)
 800d100:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d102:	4b2c      	ldr	r3, [pc, #176]	; (800d1b4 <prvAddNewTaskToReadyList+0xc8>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d109      	bne.n	800d11e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d10a:	4a2a      	ldr	r2, [pc, #168]	; (800d1b4 <prvAddNewTaskToReadyList+0xc8>)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d110:	4b27      	ldr	r3, [pc, #156]	; (800d1b0 <prvAddNewTaskToReadyList+0xc4>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2b01      	cmp	r3, #1
 800d116:	d110      	bne.n	800d13a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d118:	f000 fd20 	bl	800db5c <prvInitialiseTaskLists>
 800d11c:	e00d      	b.n	800d13a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d11e:	4b26      	ldr	r3, [pc, #152]	; (800d1b8 <prvAddNewTaskToReadyList+0xcc>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d109      	bne.n	800d13a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d126:	4b23      	ldr	r3, [pc, #140]	; (800d1b4 <prvAddNewTaskToReadyList+0xc8>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d130:	429a      	cmp	r2, r3
 800d132:	d802      	bhi.n	800d13a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d134:	4a1f      	ldr	r2, [pc, #124]	; (800d1b4 <prvAddNewTaskToReadyList+0xc8>)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d13a:	4b20      	ldr	r3, [pc, #128]	; (800d1bc <prvAddNewTaskToReadyList+0xd0>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	3301      	adds	r3, #1
 800d140:	4a1e      	ldr	r2, [pc, #120]	; (800d1bc <prvAddNewTaskToReadyList+0xd0>)
 800d142:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d144:	4b1d      	ldr	r3, [pc, #116]	; (800d1bc <prvAddNewTaskToReadyList+0xd0>)
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d150:	4b1b      	ldr	r3, [pc, #108]	; (800d1c0 <prvAddNewTaskToReadyList+0xd4>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	429a      	cmp	r2, r3
 800d156:	d903      	bls.n	800d160 <prvAddNewTaskToReadyList+0x74>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15c:	4a18      	ldr	r2, [pc, #96]	; (800d1c0 <prvAddNewTaskToReadyList+0xd4>)
 800d15e:	6013      	str	r3, [r2, #0]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d164:	4613      	mov	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	4413      	add	r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	4a15      	ldr	r2, [pc, #84]	; (800d1c4 <prvAddNewTaskToReadyList+0xd8>)
 800d16e:	441a      	add	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	3304      	adds	r3, #4
 800d174:	4619      	mov	r1, r3
 800d176:	4610      	mov	r0, r2
 800d178:	f7fe fe83 	bl	800be82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d17c:	f001 fc34 	bl	800e9e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d180:	4b0d      	ldr	r3, [pc, #52]	; (800d1b8 <prvAddNewTaskToReadyList+0xcc>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00e      	beq.n	800d1a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d188:	4b0a      	ldr	r3, [pc, #40]	; (800d1b4 <prvAddNewTaskToReadyList+0xc8>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d192:	429a      	cmp	r2, r3
 800d194:	d207      	bcs.n	800d1a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d196:	4b0c      	ldr	r3, [pc, #48]	; (800d1c8 <prvAddNewTaskToReadyList+0xdc>)
 800d198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d19c:	601a      	str	r2, [r3, #0]
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1a6:	bf00      	nop
 800d1a8:	3708      	adds	r7, #8
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	20001bc8 	.word	0x20001bc8
 800d1b4:	200016f4 	.word	0x200016f4
 800d1b8:	20001bd4 	.word	0x20001bd4
 800d1bc:	20001be4 	.word	0x20001be4
 800d1c0:	20001bd0 	.word	0x20001bd0
 800d1c4:	200016f8 	.word	0x200016f8
 800d1c8:	e000ed04 	.word	0xe000ed04

0800d1cc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d1d4:	f001 fbda 	bl	800e98c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d102      	bne.n	800d1e4 <vTaskDelete+0x18>
 800d1de:	4b2c      	ldr	r3, [pc, #176]	; (800d290 <vTaskDelete+0xc4>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	e000      	b.n	800d1e6 <vTaskDelete+0x1a>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	3304      	adds	r3, #4
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fe fea5 	bl	800bf3c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d004      	beq.n	800d204 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	3318      	adds	r3, #24
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7fe fe9c 	bl	800bf3c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d204:	4b23      	ldr	r3, [pc, #140]	; (800d294 <vTaskDelete+0xc8>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	3301      	adds	r3, #1
 800d20a:	4a22      	ldr	r2, [pc, #136]	; (800d294 <vTaskDelete+0xc8>)
 800d20c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d20e:	4b20      	ldr	r3, [pc, #128]	; (800d290 <vTaskDelete+0xc4>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	429a      	cmp	r2, r3
 800d216:	d10b      	bne.n	800d230 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	3304      	adds	r3, #4
 800d21c:	4619      	mov	r1, r3
 800d21e:	481e      	ldr	r0, [pc, #120]	; (800d298 <vTaskDelete+0xcc>)
 800d220:	f7fe fe2f 	bl	800be82 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d224:	4b1d      	ldr	r3, [pc, #116]	; (800d29c <vTaskDelete+0xd0>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	3301      	adds	r3, #1
 800d22a:	4a1c      	ldr	r2, [pc, #112]	; (800d29c <vTaskDelete+0xd0>)
 800d22c:	6013      	str	r3, [r2, #0]
 800d22e:	e009      	b.n	800d244 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d230:	4b1b      	ldr	r3, [pc, #108]	; (800d2a0 <vTaskDelete+0xd4>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	3b01      	subs	r3, #1
 800d236:	4a1a      	ldr	r2, [pc, #104]	; (800d2a0 <vTaskDelete+0xd4>)
 800d238:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800d23a:	68f8      	ldr	r0, [r7, #12]
 800d23c:	f000 fcfa 	bl	800dc34 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d240:	f000 fd2c 	bl	800dc9c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800d244:	f001 fbd0 	bl	800e9e8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d248:	4b16      	ldr	r3, [pc, #88]	; (800d2a4 <vTaskDelete+0xd8>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d01a      	beq.n	800d286 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 800d250:	4b0f      	ldr	r3, [pc, #60]	; (800d290 <vTaskDelete+0xc4>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	429a      	cmp	r2, r3
 800d258:	d115      	bne.n	800d286 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d25a:	4b13      	ldr	r3, [pc, #76]	; (800d2a8 <vTaskDelete+0xdc>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d009      	beq.n	800d276 <vTaskDelete+0xaa>
 800d262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d266:	f383 8811 	msr	BASEPRI, r3
 800d26a:	f3bf 8f6f 	isb	sy
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	60bb      	str	r3, [r7, #8]
 800d274:	e7fe      	b.n	800d274 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 800d276:	4b0d      	ldr	r3, [pc, #52]	; (800d2ac <vTaskDelete+0xe0>)
 800d278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d27c:	601a      	str	r2, [r3, #0]
 800d27e:	f3bf 8f4f 	dsb	sy
 800d282:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d286:	bf00      	nop
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	200016f4 	.word	0x200016f4
 800d294:	20001be4 	.word	0x20001be4
 800d298:	20001b9c 	.word	0x20001b9c
 800d29c:	20001bb0 	.word	0x20001bb0
 800d2a0:	20001bc8 	.word	0x20001bc8
 800d2a4:	20001bd4 	.word	0x20001bd4
 800d2a8:	20001bf0 	.word	0x20001bf0
 800d2ac:	e000ed04 	.word	0xe000ed04

0800d2b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d016      	beq.n	800d2f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d2c2:	4b13      	ldr	r3, [pc, #76]	; (800d310 <vTaskDelay+0x60>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d009      	beq.n	800d2de <vTaskDelay+0x2e>
 800d2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ce:	f383 8811 	msr	BASEPRI, r3
 800d2d2:	f3bf 8f6f 	isb	sy
 800d2d6:	f3bf 8f4f 	dsb	sy
 800d2da:	60bb      	str	r3, [r7, #8]
 800d2dc:	e7fe      	b.n	800d2dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800d2de:	f000 f8f1 	bl	800d4c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 fe8f 	bl	800e008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d2ea:	f000 f8f9 	bl	800d4e0 <xTaskResumeAll>
 800d2ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d107      	bne.n	800d306 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800d2f6:	4b07      	ldr	r3, [pc, #28]	; (800d314 <vTaskDelay+0x64>)
 800d2f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2fc:	601a      	str	r2, [r3, #0]
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d306:	bf00      	nop
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	20001bf0 	.word	0x20001bf0
 800d314:	e000ed04 	.word	0xe000ed04

0800d318 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b088      	sub	sp, #32
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d109      	bne.n	800d33e <eTaskGetState+0x26>
 800d32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	60bb      	str	r3, [r7, #8]
 800d33c:	e7fe      	b.n	800d33c <eTaskGetState+0x24>

		if( pxTCB == pxCurrentTCB )
 800d33e:	4b24      	ldr	r3, [pc, #144]	; (800d3d0 <eTaskGetState+0xb8>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	69ba      	ldr	r2, [r7, #24]
 800d344:	429a      	cmp	r2, r3
 800d346:	d102      	bne.n	800d34e <eTaskGetState+0x36>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800d348:	2300      	movs	r3, #0
 800d34a:	77fb      	strb	r3, [r7, #31]
 800d34c:	e03a      	b.n	800d3c4 <eTaskGetState+0xac>
		}
		else
		{
			taskENTER_CRITICAL();
 800d34e:	f001 fb1d 	bl	800e98c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	695b      	ldr	r3, [r3, #20]
 800d356:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800d358:	4b1e      	ldr	r3, [pc, #120]	; (800d3d4 <eTaskGetState+0xbc>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800d35e:	4b1e      	ldr	r3, [pc, #120]	; (800d3d8 <eTaskGetState+0xc0>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800d364:	f001 fb40 	bl	800e9e8 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800d368:	697a      	ldr	r2, [r7, #20]
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d003      	beq.n	800d378 <eTaskGetState+0x60>
 800d370:	697a      	ldr	r2, [r7, #20]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	429a      	cmp	r2, r3
 800d376:	d102      	bne.n	800d37e <eTaskGetState+0x66>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800d378:	2302      	movs	r3, #2
 800d37a:	77fb      	strb	r3, [r7, #31]
 800d37c:	e022      	b.n	800d3c4 <eTaskGetState+0xac>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	4a16      	ldr	r2, [pc, #88]	; (800d3dc <eTaskGetState+0xc4>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d112      	bne.n	800d3ac <eTaskGetState+0x94>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800d386:	69bb      	ldr	r3, [r7, #24]
 800d388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d10b      	bne.n	800d3a6 <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800d394:	b2db      	uxtb	r3, r3
 800d396:	2b01      	cmp	r3, #1
 800d398:	d102      	bne.n	800d3a0 <eTaskGetState+0x88>
							{
								eReturn = eBlocked;
 800d39a:	2302      	movs	r3, #2
 800d39c:	77fb      	strb	r3, [r7, #31]
 800d39e:	e011      	b.n	800d3c4 <eTaskGetState+0xac>
							}
							else
							{
								eReturn = eSuspended;
 800d3a0:	2303      	movs	r3, #3
 800d3a2:	77fb      	strb	r3, [r7, #31]
 800d3a4:	e00e      	b.n	800d3c4 <eTaskGetState+0xac>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800d3a6:	2302      	movs	r3, #2
 800d3a8:	77fb      	strb	r3, [r7, #31]
 800d3aa:	e00b      	b.n	800d3c4 <eTaskGetState+0xac>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	4a0c      	ldr	r2, [pc, #48]	; (800d3e0 <eTaskGetState+0xc8>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d002      	beq.n	800d3ba <eTaskGetState+0xa2>
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d102      	bne.n	800d3c0 <eTaskGetState+0xa8>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800d3ba:	2304      	movs	r3, #4
 800d3bc:	77fb      	strb	r3, [r7, #31]
 800d3be:	e001      	b.n	800d3c4 <eTaskGetState+0xac>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800d3c4:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3720      	adds	r7, #32
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	200016f4 	.word	0x200016f4
 800d3d4:	20001b80 	.word	0x20001b80
 800d3d8:	20001b84 	.word	0x20001b84
 800d3dc:	20001bb4 	.word	0x20001bb4
 800d3e0:	20001b9c 	.word	0x20001b9c

0800d3e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b08a      	sub	sp, #40	; 0x28
 800d3e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d3f2:	463a      	mov	r2, r7
 800d3f4:	1d39      	adds	r1, r7, #4
 800d3f6:	f107 0308 	add.w	r3, r7, #8
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fe fce0 	bl	800bdc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d400:	6839      	ldr	r1, [r7, #0]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	68ba      	ldr	r2, [r7, #8]
 800d406:	9202      	str	r2, [sp, #8]
 800d408:	9301      	str	r3, [sp, #4]
 800d40a:	2300      	movs	r3, #0
 800d40c:	9300      	str	r3, [sp, #0]
 800d40e:	2300      	movs	r3, #0
 800d410:	460a      	mov	r2, r1
 800d412:	4924      	ldr	r1, [pc, #144]	; (800d4a4 <vTaskStartScheduler+0xc0>)
 800d414:	4824      	ldr	r0, [pc, #144]	; (800d4a8 <vTaskStartScheduler+0xc4>)
 800d416:	f7ff fd21 	bl	800ce5c <xTaskCreateStatic>
 800d41a:	4602      	mov	r2, r0
 800d41c:	4b23      	ldr	r3, [pc, #140]	; (800d4ac <vTaskStartScheduler+0xc8>)
 800d41e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d420:	4b22      	ldr	r3, [pc, #136]	; (800d4ac <vTaskStartScheduler+0xc8>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d002      	beq.n	800d42e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d428:	2301      	movs	r3, #1
 800d42a:	617b      	str	r3, [r7, #20]
 800d42c:	e001      	b.n	800d432 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d42e:	2300      	movs	r3, #0
 800d430:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d102      	bne.n	800d43e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d438:	f000 fe3a 	bl	800e0b0 <xTimerCreateTimerTask>
 800d43c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	2b01      	cmp	r3, #1
 800d442:	d11c      	bne.n	800d47e <vTaskStartScheduler+0x9a>
 800d444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d456:	4b16      	ldr	r3, [pc, #88]	; (800d4b0 <vTaskStartScheduler+0xcc>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3358      	adds	r3, #88	; 0x58
 800d45c:	4a15      	ldr	r2, [pc, #84]	; (800d4b4 <vTaskStartScheduler+0xd0>)
 800d45e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d460:	4b15      	ldr	r3, [pc, #84]	; (800d4b8 <vTaskStartScheduler+0xd4>)
 800d462:	f04f 32ff 	mov.w	r2, #4294967295
 800d466:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d468:	4b14      	ldr	r3, [pc, #80]	; (800d4bc <vTaskStartScheduler+0xd8>)
 800d46a:	2201      	movs	r2, #1
 800d46c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d46e:	4b14      	ldr	r3, [pc, #80]	; (800d4c0 <vTaskStartScheduler+0xdc>)
 800d470:	2200      	movs	r2, #0
 800d472:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d474:	f7f5 fb12 	bl	8002a9c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d478:	f001 f9ea 	bl	800e850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d47c:	e00d      	b.n	800d49a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d484:	d109      	bne.n	800d49a <vTaskStartScheduler+0xb6>
 800d486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48a:	f383 8811 	msr	BASEPRI, r3
 800d48e:	f3bf 8f6f 	isb	sy
 800d492:	f3bf 8f4f 	dsb	sy
 800d496:	60fb      	str	r3, [r7, #12]
 800d498:	e7fe      	b.n	800d498 <vTaskStartScheduler+0xb4>
}
 800d49a:	bf00      	nop
 800d49c:	3718      	adds	r7, #24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	080149a0 	.word	0x080149a0
 800d4a8:	0800db2d 	.word	0x0800db2d
 800d4ac:	20001bec 	.word	0x20001bec
 800d4b0:	200016f4 	.word	0x200016f4
 800d4b4:	2000002c 	.word	0x2000002c
 800d4b8:	20001be8 	.word	0x20001be8
 800d4bc:	20001bd4 	.word	0x20001bd4
 800d4c0:	20001bcc 	.word	0x20001bcc

0800d4c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d4c8:	4b04      	ldr	r3, [pc, #16]	; (800d4dc <vTaskSuspendAll+0x18>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	4a03      	ldr	r2, [pc, #12]	; (800d4dc <vTaskSuspendAll+0x18>)
 800d4d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d4d2:	bf00      	nop
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	20001bf0 	.word	0x20001bf0

0800d4e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d4ee:	4b41      	ldr	r3, [pc, #260]	; (800d5f4 <xTaskResumeAll+0x114>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d109      	bne.n	800d50a <xTaskResumeAll+0x2a>
 800d4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fa:	f383 8811 	msr	BASEPRI, r3
 800d4fe:	f3bf 8f6f 	isb	sy
 800d502:	f3bf 8f4f 	dsb	sy
 800d506:	603b      	str	r3, [r7, #0]
 800d508:	e7fe      	b.n	800d508 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d50a:	f001 fa3f 	bl	800e98c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d50e:	4b39      	ldr	r3, [pc, #228]	; (800d5f4 <xTaskResumeAll+0x114>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	3b01      	subs	r3, #1
 800d514:	4a37      	ldr	r2, [pc, #220]	; (800d5f4 <xTaskResumeAll+0x114>)
 800d516:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d518:	4b36      	ldr	r3, [pc, #216]	; (800d5f4 <xTaskResumeAll+0x114>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d162      	bne.n	800d5e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d520:	4b35      	ldr	r3, [pc, #212]	; (800d5f8 <xTaskResumeAll+0x118>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d05e      	beq.n	800d5e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d528:	e02f      	b.n	800d58a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d52a:	4b34      	ldr	r3, [pc, #208]	; (800d5fc <xTaskResumeAll+0x11c>)
 800d52c:	68db      	ldr	r3, [r3, #12]
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	3318      	adds	r3, #24
 800d536:	4618      	mov	r0, r3
 800d538:	f7fe fd00 	bl	800bf3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	3304      	adds	r3, #4
 800d540:	4618      	mov	r0, r3
 800d542:	f7fe fcfb 	bl	800bf3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d54a:	4b2d      	ldr	r3, [pc, #180]	; (800d600 <xTaskResumeAll+0x120>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d903      	bls.n	800d55a <xTaskResumeAll+0x7a>
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d556:	4a2a      	ldr	r2, [pc, #168]	; (800d600 <xTaskResumeAll+0x120>)
 800d558:	6013      	str	r3, [r2, #0]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d55e:	4613      	mov	r3, r2
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	4413      	add	r3, r2
 800d564:	009b      	lsls	r3, r3, #2
 800d566:	4a27      	ldr	r2, [pc, #156]	; (800d604 <xTaskResumeAll+0x124>)
 800d568:	441a      	add	r2, r3
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	3304      	adds	r3, #4
 800d56e:	4619      	mov	r1, r3
 800d570:	4610      	mov	r0, r2
 800d572:	f7fe fc86 	bl	800be82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d57a:	4b23      	ldr	r3, [pc, #140]	; (800d608 <xTaskResumeAll+0x128>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d580:	429a      	cmp	r2, r3
 800d582:	d302      	bcc.n	800d58a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d584:	4b21      	ldr	r3, [pc, #132]	; (800d60c <xTaskResumeAll+0x12c>)
 800d586:	2201      	movs	r2, #1
 800d588:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d58a:	4b1c      	ldr	r3, [pc, #112]	; (800d5fc <xTaskResumeAll+0x11c>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1cb      	bne.n	800d52a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d001      	beq.n	800d59c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d598:	f000 fb80 	bl	800dc9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d59c:	4b1c      	ldr	r3, [pc, #112]	; (800d610 <xTaskResumeAll+0x130>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d010      	beq.n	800d5ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d5a8:	f000 f846 	bl	800d638 <xTaskIncrementTick>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d002      	beq.n	800d5b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d5b2:	4b16      	ldr	r3, [pc, #88]	; (800d60c <xTaskResumeAll+0x12c>)
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1f1      	bne.n	800d5a8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800d5c4:	4b12      	ldr	r3, [pc, #72]	; (800d610 <xTaskResumeAll+0x130>)
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d5ca:	4b10      	ldr	r3, [pc, #64]	; (800d60c <xTaskResumeAll+0x12c>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d009      	beq.n	800d5e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d5d6:	4b0f      	ldr	r3, [pc, #60]	; (800d614 <xTaskResumeAll+0x134>)
 800d5d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5dc:	601a      	str	r2, [r3, #0]
 800d5de:	f3bf 8f4f 	dsb	sy
 800d5e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d5e6:	f001 f9ff 	bl	800e9e8 <vPortExitCritical>

	return xAlreadyYielded;
 800d5ea:	68bb      	ldr	r3, [r7, #8]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	20001bf0 	.word	0x20001bf0
 800d5f8:	20001bc8 	.word	0x20001bc8
 800d5fc:	20001b88 	.word	0x20001b88
 800d600:	20001bd0 	.word	0x20001bd0
 800d604:	200016f8 	.word	0x200016f8
 800d608:	200016f4 	.word	0x200016f4
 800d60c:	20001bdc 	.word	0x20001bdc
 800d610:	20001bd8 	.word	0x20001bd8
 800d614:	e000ed04 	.word	0xe000ed04

0800d618 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d61e:	4b05      	ldr	r3, [pc, #20]	; (800d634 <xTaskGetTickCount+0x1c>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d624:	687b      	ldr	r3, [r7, #4]
}
 800d626:	4618      	mov	r0, r3
 800d628:	370c      	adds	r7, #12
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr
 800d632:	bf00      	nop
 800d634:	20001bcc 	.word	0x20001bcc

0800d638 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b086      	sub	sp, #24
 800d63c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d63e:	2300      	movs	r3, #0
 800d640:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d642:	4b4e      	ldr	r3, [pc, #312]	; (800d77c <xTaskIncrementTick+0x144>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	f040 8088 	bne.w	800d75c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d64c:	4b4c      	ldr	r3, [pc, #304]	; (800d780 <xTaskIncrementTick+0x148>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	3301      	adds	r3, #1
 800d652:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d654:	4a4a      	ldr	r2, [pc, #296]	; (800d780 <xTaskIncrementTick+0x148>)
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d11f      	bne.n	800d6a0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d660:	4b48      	ldr	r3, [pc, #288]	; (800d784 <xTaskIncrementTick+0x14c>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d009      	beq.n	800d67e <xTaskIncrementTick+0x46>
 800d66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	603b      	str	r3, [r7, #0]
 800d67c:	e7fe      	b.n	800d67c <xTaskIncrementTick+0x44>
 800d67e:	4b41      	ldr	r3, [pc, #260]	; (800d784 <xTaskIncrementTick+0x14c>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	60fb      	str	r3, [r7, #12]
 800d684:	4b40      	ldr	r3, [pc, #256]	; (800d788 <xTaskIncrementTick+0x150>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a3e      	ldr	r2, [pc, #248]	; (800d784 <xTaskIncrementTick+0x14c>)
 800d68a:	6013      	str	r3, [r2, #0]
 800d68c:	4a3e      	ldr	r2, [pc, #248]	; (800d788 <xTaskIncrementTick+0x150>)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6013      	str	r3, [r2, #0]
 800d692:	4b3e      	ldr	r3, [pc, #248]	; (800d78c <xTaskIncrementTick+0x154>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	3301      	adds	r3, #1
 800d698:	4a3c      	ldr	r2, [pc, #240]	; (800d78c <xTaskIncrementTick+0x154>)
 800d69a:	6013      	str	r3, [r2, #0]
 800d69c:	f000 fafe 	bl	800dc9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d6a0:	4b3b      	ldr	r3, [pc, #236]	; (800d790 <xTaskIncrementTick+0x158>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	693a      	ldr	r2, [r7, #16]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d349      	bcc.n	800d73e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6aa:	4b36      	ldr	r3, [pc, #216]	; (800d784 <xTaskIncrementTick+0x14c>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d104      	bne.n	800d6be <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6b4:	4b36      	ldr	r3, [pc, #216]	; (800d790 <xTaskIncrementTick+0x158>)
 800d6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ba:	601a      	str	r2, [r3, #0]
					break;
 800d6bc:	e03f      	b.n	800d73e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6be:	4b31      	ldr	r3, [pc, #196]	; (800d784 <xTaskIncrementTick+0x14c>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d6ce:	693a      	ldr	r2, [r7, #16]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d203      	bcs.n	800d6de <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d6d6:	4a2e      	ldr	r2, [pc, #184]	; (800d790 <xTaskIncrementTick+0x158>)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d6dc:	e02f      	b.n	800d73e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	3304      	adds	r3, #4
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7fe fc2a 	bl	800bf3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d004      	beq.n	800d6fa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	3318      	adds	r3, #24
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fe fc21 	bl	800bf3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fe:	4b25      	ldr	r3, [pc, #148]	; (800d794 <xTaskIncrementTick+0x15c>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	429a      	cmp	r2, r3
 800d704:	d903      	bls.n	800d70e <xTaskIncrementTick+0xd6>
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d70a:	4a22      	ldr	r2, [pc, #136]	; (800d794 <xTaskIncrementTick+0x15c>)
 800d70c:	6013      	str	r3, [r2, #0]
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d712:	4613      	mov	r3, r2
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4413      	add	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4a1f      	ldr	r2, [pc, #124]	; (800d798 <xTaskIncrementTick+0x160>)
 800d71c:	441a      	add	r2, r3
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	3304      	adds	r3, #4
 800d722:	4619      	mov	r1, r3
 800d724:	4610      	mov	r0, r2
 800d726:	f7fe fbac 	bl	800be82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d72e:	4b1b      	ldr	r3, [pc, #108]	; (800d79c <xTaskIncrementTick+0x164>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d734:	429a      	cmp	r2, r3
 800d736:	d3b8      	bcc.n	800d6aa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d738:	2301      	movs	r3, #1
 800d73a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d73c:	e7b5      	b.n	800d6aa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d73e:	4b17      	ldr	r3, [pc, #92]	; (800d79c <xTaskIncrementTick+0x164>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d744:	4914      	ldr	r1, [pc, #80]	; (800d798 <xTaskIncrementTick+0x160>)
 800d746:	4613      	mov	r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4413      	add	r3, r2
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	440b      	add	r3, r1
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2b01      	cmp	r3, #1
 800d754:	d907      	bls.n	800d766 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800d756:	2301      	movs	r3, #1
 800d758:	617b      	str	r3, [r7, #20]
 800d75a:	e004      	b.n	800d766 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d75c:	4b10      	ldr	r3, [pc, #64]	; (800d7a0 <xTaskIncrementTick+0x168>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	3301      	adds	r3, #1
 800d762:	4a0f      	ldr	r2, [pc, #60]	; (800d7a0 <xTaskIncrementTick+0x168>)
 800d764:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d766:	4b0f      	ldr	r3, [pc, #60]	; (800d7a4 <xTaskIncrementTick+0x16c>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d001      	beq.n	800d772 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800d76e:	2301      	movs	r3, #1
 800d770:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d772:	697b      	ldr	r3, [r7, #20]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3718      	adds	r7, #24
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	20001bf0 	.word	0x20001bf0
 800d780:	20001bcc 	.word	0x20001bcc
 800d784:	20001b80 	.word	0x20001b80
 800d788:	20001b84 	.word	0x20001b84
 800d78c:	20001be0 	.word	0x20001be0
 800d790:	20001be8 	.word	0x20001be8
 800d794:	20001bd0 	.word	0x20001bd0
 800d798:	200016f8 	.word	0x200016f8
 800d79c:	200016f4 	.word	0x200016f4
 800d7a0:	20001bd8 	.word	0x20001bd8
 800d7a4:	20001bdc 	.word	0x20001bdc

0800d7a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d7ae:	4b3e      	ldr	r3, [pc, #248]	; (800d8a8 <vTaskSwitchContext+0x100>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d003      	beq.n	800d7be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d7b6:	4b3d      	ldr	r3, [pc, #244]	; (800d8ac <vTaskSwitchContext+0x104>)
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d7bc:	e06f      	b.n	800d89e <vTaskSwitchContext+0xf6>
		xYieldPending = pdFALSE;
 800d7be:	4b3b      	ldr	r3, [pc, #236]	; (800d8ac <vTaskSwitchContext+0x104>)
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800d7c4:	f7f5 f97c 	bl	8002ac0 <getRunTimeCounterValue>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	4b39      	ldr	r3, [pc, #228]	; (800d8b0 <vTaskSwitchContext+0x108>)
 800d7cc:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800d7ce:	4b38      	ldr	r3, [pc, #224]	; (800d8b0 <vTaskSwitchContext+0x108>)
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	4b38      	ldr	r3, [pc, #224]	; (800d8b4 <vTaskSwitchContext+0x10c>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d909      	bls.n	800d7ee <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800d7da:	4b37      	ldr	r3, [pc, #220]	; (800d8b8 <vTaskSwitchContext+0x110>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d7e0:	4a33      	ldr	r2, [pc, #204]	; (800d8b0 <vTaskSwitchContext+0x108>)
 800d7e2:	6810      	ldr	r0, [r2, #0]
 800d7e4:	4a33      	ldr	r2, [pc, #204]	; (800d8b4 <vTaskSwitchContext+0x10c>)
 800d7e6:	6812      	ldr	r2, [r2, #0]
 800d7e8:	1a82      	subs	r2, r0, r2
 800d7ea:	440a      	add	r2, r1
 800d7ec:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800d7ee:	4b30      	ldr	r3, [pc, #192]	; (800d8b0 <vTaskSwitchContext+0x108>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a30      	ldr	r2, [pc, #192]	; (800d8b4 <vTaskSwitchContext+0x10c>)
 800d7f4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d7f6:	4b30      	ldr	r3, [pc, #192]	; (800d8b8 <vTaskSwitchContext+0x110>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	4b2e      	ldr	r3, [pc, #184]	; (800d8b8 <vTaskSwitchContext+0x110>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d802:	429a      	cmp	r2, r3
 800d804:	d808      	bhi.n	800d818 <vTaskSwitchContext+0x70>
 800d806:	4b2c      	ldr	r3, [pc, #176]	; (800d8b8 <vTaskSwitchContext+0x110>)
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	4b2b      	ldr	r3, [pc, #172]	; (800d8b8 <vTaskSwitchContext+0x110>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	3334      	adds	r3, #52	; 0x34
 800d810:	4619      	mov	r1, r3
 800d812:	4610      	mov	r0, r2
 800d814:	f7f5 f960 	bl	8002ad8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d818:	4b28      	ldr	r3, [pc, #160]	; (800d8bc <vTaskSwitchContext+0x114>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	60fb      	str	r3, [r7, #12]
 800d81e:	e00f      	b.n	800d840 <vTaskSwitchContext+0x98>
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d109      	bne.n	800d83a <vTaskSwitchContext+0x92>
 800d826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82a:	f383 8811 	msr	BASEPRI, r3
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	607b      	str	r3, [r7, #4]
 800d838:	e7fe      	b.n	800d838 <vTaskSwitchContext+0x90>
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	3b01      	subs	r3, #1
 800d83e:	60fb      	str	r3, [r7, #12]
 800d840:	491f      	ldr	r1, [pc, #124]	; (800d8c0 <vTaskSwitchContext+0x118>)
 800d842:	68fa      	ldr	r2, [r7, #12]
 800d844:	4613      	mov	r3, r2
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	4413      	add	r3, r2
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	440b      	add	r3, r1
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d0e5      	beq.n	800d820 <vTaskSwitchContext+0x78>
 800d854:	68fa      	ldr	r2, [r7, #12]
 800d856:	4613      	mov	r3, r2
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	4413      	add	r3, r2
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	4a18      	ldr	r2, [pc, #96]	; (800d8c0 <vTaskSwitchContext+0x118>)
 800d860:	4413      	add	r3, r2
 800d862:	60bb      	str	r3, [r7, #8]
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	685a      	ldr	r2, [r3, #4]
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	605a      	str	r2, [r3, #4]
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	685a      	ldr	r2, [r3, #4]
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	3308      	adds	r3, #8
 800d876:	429a      	cmp	r2, r3
 800d878:	d104      	bne.n	800d884 <vTaskSwitchContext+0xdc>
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	685a      	ldr	r2, [r3, #4]
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	605a      	str	r2, [r3, #4]
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	4a0b      	ldr	r2, [pc, #44]	; (800d8b8 <vTaskSwitchContext+0x110>)
 800d88c:	6013      	str	r3, [r2, #0]
 800d88e:	4a0b      	ldr	r2, [pc, #44]	; (800d8bc <vTaskSwitchContext+0x114>)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d894:	4b08      	ldr	r3, [pc, #32]	; (800d8b8 <vTaskSwitchContext+0x110>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	3358      	adds	r3, #88	; 0x58
 800d89a:	4a0a      	ldr	r2, [pc, #40]	; (800d8c4 <vTaskSwitchContext+0x11c>)
 800d89c:	6013      	str	r3, [r2, #0]
}
 800d89e:	bf00      	nop
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	20001bf0 	.word	0x20001bf0
 800d8ac:	20001bdc 	.word	0x20001bdc
 800d8b0:	20001bf8 	.word	0x20001bf8
 800d8b4:	20001bf4 	.word	0x20001bf4
 800d8b8:	200016f4 	.word	0x200016f4
 800d8bc:	20001bd0 	.word	0x20001bd0
 800d8c0:	200016f8 	.word	0x200016f8
 800d8c4:	2000002c 	.word	0x2000002c

0800d8c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d109      	bne.n	800d8ec <vTaskPlaceOnEventList+0x24>
 800d8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8dc:	f383 8811 	msr	BASEPRI, r3
 800d8e0:	f3bf 8f6f 	isb	sy
 800d8e4:	f3bf 8f4f 	dsb	sy
 800d8e8:	60fb      	str	r3, [r7, #12]
 800d8ea:	e7fe      	b.n	800d8ea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8ec:	4b07      	ldr	r3, [pc, #28]	; (800d90c <vTaskPlaceOnEventList+0x44>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	3318      	adds	r3, #24
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7fe fae8 	bl	800beca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d8fa:	2101      	movs	r1, #1
 800d8fc:	6838      	ldr	r0, [r7, #0]
 800d8fe:	f000 fb83 	bl	800e008 <prvAddCurrentTaskToDelayedList>
}
 800d902:	bf00      	nop
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	200016f4 	.word	0x200016f4

0800d910 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d910:	b580      	push	{r7, lr}
 800d912:	b086      	sub	sp, #24
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d109      	bne.n	800d936 <vTaskPlaceOnEventListRestricted+0x26>
 800d922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d926:	f383 8811 	msr	BASEPRI, r3
 800d92a:	f3bf 8f6f 	isb	sy
 800d92e:	f3bf 8f4f 	dsb	sy
 800d932:	617b      	str	r3, [r7, #20]
 800d934:	e7fe      	b.n	800d934 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d936:	4b0a      	ldr	r3, [pc, #40]	; (800d960 <vTaskPlaceOnEventListRestricted+0x50>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	3318      	adds	r3, #24
 800d93c:	4619      	mov	r1, r3
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f7fe fa9f 	bl	800be82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d002      	beq.n	800d950 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800d94a:	f04f 33ff 	mov.w	r3, #4294967295
 800d94e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d950:	6879      	ldr	r1, [r7, #4]
 800d952:	68b8      	ldr	r0, [r7, #8]
 800d954:	f000 fb58 	bl	800e008 <prvAddCurrentTaskToDelayedList>
	}
 800d958:	bf00      	nop
 800d95a:	3718      	adds	r7, #24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	200016f4 	.word	0x200016f4

0800d964 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b086      	sub	sp, #24
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d109      	bne.n	800d98e <xTaskRemoveFromEventList+0x2a>
 800d97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97e:	f383 8811 	msr	BASEPRI, r3
 800d982:	f3bf 8f6f 	isb	sy
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	60fb      	str	r3, [r7, #12]
 800d98c:	e7fe      	b.n	800d98c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	3318      	adds	r3, #24
 800d992:	4618      	mov	r0, r3
 800d994:	f7fe fad2 	bl	800bf3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d998:	4b1d      	ldr	r3, [pc, #116]	; (800da10 <xTaskRemoveFromEventList+0xac>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d11d      	bne.n	800d9dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	3304      	adds	r3, #4
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7fe fac9 	bl	800bf3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ae:	4b19      	ldr	r3, [pc, #100]	; (800da14 <xTaskRemoveFromEventList+0xb0>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d903      	bls.n	800d9be <xTaskRemoveFromEventList+0x5a>
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ba:	4a16      	ldr	r2, [pc, #88]	; (800da14 <xTaskRemoveFromEventList+0xb0>)
 800d9bc:	6013      	str	r3, [r2, #0]
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	4413      	add	r3, r2
 800d9c8:	009b      	lsls	r3, r3, #2
 800d9ca:	4a13      	ldr	r2, [pc, #76]	; (800da18 <xTaskRemoveFromEventList+0xb4>)
 800d9cc:	441a      	add	r2, r3
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	4610      	mov	r0, r2
 800d9d6:	f7fe fa54 	bl	800be82 <vListInsertEnd>
 800d9da:	e005      	b.n	800d9e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	3318      	adds	r3, #24
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	480e      	ldr	r0, [pc, #56]	; (800da1c <xTaskRemoveFromEventList+0xb8>)
 800d9e4:	f7fe fa4d 	bl	800be82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ec:	4b0c      	ldr	r3, [pc, #48]	; (800da20 <xTaskRemoveFromEventList+0xbc>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d905      	bls.n	800da02 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d9fa:	4b0a      	ldr	r3, [pc, #40]	; (800da24 <xTaskRemoveFromEventList+0xc0>)
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	601a      	str	r2, [r3, #0]
 800da00:	e001      	b.n	800da06 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800da02:	2300      	movs	r3, #0
 800da04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800da06:	697b      	ldr	r3, [r7, #20]
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3718      	adds	r7, #24
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	20001bf0 	.word	0x20001bf0
 800da14:	20001bd0 	.word	0x20001bd0
 800da18:	200016f8 	.word	0x200016f8
 800da1c:	20001b88 	.word	0x20001b88
 800da20:	200016f4 	.word	0x200016f4
 800da24:	20001bdc 	.word	0x20001bdc

0800da28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800da30:	4b06      	ldr	r3, [pc, #24]	; (800da4c <vTaskInternalSetTimeOutState+0x24>)
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800da38:	4b05      	ldr	r3, [pc, #20]	; (800da50 <vTaskInternalSetTimeOutState+0x28>)
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	605a      	str	r2, [r3, #4]
}
 800da40:	bf00      	nop
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr
 800da4c:	20001be0 	.word	0x20001be0
 800da50:	20001bcc 	.word	0x20001bcc

0800da54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b088      	sub	sp, #32
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d109      	bne.n	800da78 <xTaskCheckForTimeOut+0x24>
 800da64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da68:	f383 8811 	msr	BASEPRI, r3
 800da6c:	f3bf 8f6f 	isb	sy
 800da70:	f3bf 8f4f 	dsb	sy
 800da74:	613b      	str	r3, [r7, #16]
 800da76:	e7fe      	b.n	800da76 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d109      	bne.n	800da92 <xTaskCheckForTimeOut+0x3e>
 800da7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da82:	f383 8811 	msr	BASEPRI, r3
 800da86:	f3bf 8f6f 	isb	sy
 800da8a:	f3bf 8f4f 	dsb	sy
 800da8e:	60fb      	str	r3, [r7, #12]
 800da90:	e7fe      	b.n	800da90 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800da92:	f000 ff7b 	bl	800e98c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800da96:	4b1d      	ldr	r3, [pc, #116]	; (800db0c <xTaskCheckForTimeOut+0xb8>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	69ba      	ldr	r2, [r7, #24]
 800daa2:	1ad3      	subs	r3, r2, r3
 800daa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daae:	d102      	bne.n	800dab6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dab0:	2300      	movs	r3, #0
 800dab2:	61fb      	str	r3, [r7, #28]
 800dab4:	e023      	b.n	800dafe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	4b15      	ldr	r3, [pc, #84]	; (800db10 <xTaskCheckForTimeOut+0xbc>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d007      	beq.n	800dad2 <xTaskCheckForTimeOut+0x7e>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	69ba      	ldr	r2, [r7, #24]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d302      	bcc.n	800dad2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dacc:	2301      	movs	r3, #1
 800dace:	61fb      	str	r3, [r7, #28]
 800dad0:	e015      	b.n	800dafe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	697a      	ldr	r2, [r7, #20]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d20b      	bcs.n	800daf4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	1ad2      	subs	r2, r2, r3
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f7ff ff9d 	bl	800da28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800daee:	2300      	movs	r3, #0
 800daf0:	61fb      	str	r3, [r7, #28]
 800daf2:	e004      	b.n	800dafe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	2200      	movs	r2, #0
 800daf8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dafa:	2301      	movs	r3, #1
 800dafc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dafe:	f000 ff73 	bl	800e9e8 <vPortExitCritical>

	return xReturn;
 800db02:	69fb      	ldr	r3, [r7, #28]
}
 800db04:	4618      	mov	r0, r3
 800db06:	3720      	adds	r7, #32
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	20001bcc 	.word	0x20001bcc
 800db10:	20001be0 	.word	0x20001be0

0800db14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800db14:	b480      	push	{r7}
 800db16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800db18:	4b03      	ldr	r3, [pc, #12]	; (800db28 <vTaskMissedYield+0x14>)
 800db1a:	2201      	movs	r2, #1
 800db1c:	601a      	str	r2, [r3, #0]
}
 800db1e:	bf00      	nop
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr
 800db28:	20001bdc 	.word	0x20001bdc

0800db2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800db34:	f000 f852 	bl	800dbdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800db38:	4b06      	ldr	r3, [pc, #24]	; (800db54 <prvIdleTask+0x28>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d9f9      	bls.n	800db34 <prvIdleTask+0x8>
			{
				taskYIELD();
 800db40:	4b05      	ldr	r3, [pc, #20]	; (800db58 <prvIdleTask+0x2c>)
 800db42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800db50:	e7f0      	b.n	800db34 <prvIdleTask+0x8>
 800db52:	bf00      	nop
 800db54:	200016f8 	.word	0x200016f8
 800db58:	e000ed04 	.word	0xe000ed04

0800db5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db62:	2300      	movs	r3, #0
 800db64:	607b      	str	r3, [r7, #4]
 800db66:	e00c      	b.n	800db82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	4613      	mov	r3, r2
 800db6c:	009b      	lsls	r3, r3, #2
 800db6e:	4413      	add	r3, r2
 800db70:	009b      	lsls	r3, r3, #2
 800db72:	4a12      	ldr	r2, [pc, #72]	; (800dbbc <prvInitialiseTaskLists+0x60>)
 800db74:	4413      	add	r3, r2
 800db76:	4618      	mov	r0, r3
 800db78:	f7fe f956 	bl	800be28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	3301      	adds	r3, #1
 800db80:	607b      	str	r3, [r7, #4]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b37      	cmp	r3, #55	; 0x37
 800db86:	d9ef      	bls.n	800db68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800db88:	480d      	ldr	r0, [pc, #52]	; (800dbc0 <prvInitialiseTaskLists+0x64>)
 800db8a:	f7fe f94d 	bl	800be28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800db8e:	480d      	ldr	r0, [pc, #52]	; (800dbc4 <prvInitialiseTaskLists+0x68>)
 800db90:	f7fe f94a 	bl	800be28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800db94:	480c      	ldr	r0, [pc, #48]	; (800dbc8 <prvInitialiseTaskLists+0x6c>)
 800db96:	f7fe f947 	bl	800be28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800db9a:	480c      	ldr	r0, [pc, #48]	; (800dbcc <prvInitialiseTaskLists+0x70>)
 800db9c:	f7fe f944 	bl	800be28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dba0:	480b      	ldr	r0, [pc, #44]	; (800dbd0 <prvInitialiseTaskLists+0x74>)
 800dba2:	f7fe f941 	bl	800be28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dba6:	4b0b      	ldr	r3, [pc, #44]	; (800dbd4 <prvInitialiseTaskLists+0x78>)
 800dba8:	4a05      	ldr	r2, [pc, #20]	; (800dbc0 <prvInitialiseTaskLists+0x64>)
 800dbaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dbac:	4b0a      	ldr	r3, [pc, #40]	; (800dbd8 <prvInitialiseTaskLists+0x7c>)
 800dbae:	4a05      	ldr	r2, [pc, #20]	; (800dbc4 <prvInitialiseTaskLists+0x68>)
 800dbb0:	601a      	str	r2, [r3, #0]
}
 800dbb2:	bf00      	nop
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	200016f8 	.word	0x200016f8
 800dbc0:	20001b58 	.word	0x20001b58
 800dbc4:	20001b6c 	.word	0x20001b6c
 800dbc8:	20001b88 	.word	0x20001b88
 800dbcc:	20001b9c 	.word	0x20001b9c
 800dbd0:	20001bb4 	.word	0x20001bb4
 800dbd4:	20001b80 	.word	0x20001b80
 800dbd8:	20001b84 	.word	0x20001b84

0800dbdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dbe2:	e019      	b.n	800dc18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dbe4:	f000 fed2 	bl	800e98c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbe8:	4b0f      	ldr	r3, [pc, #60]	; (800dc28 <prvCheckTasksWaitingTermination+0x4c>)
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	3304      	adds	r3, #4
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fe f9a1 	bl	800bf3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dbfa:	4b0c      	ldr	r3, [pc, #48]	; (800dc2c <prvCheckTasksWaitingTermination+0x50>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	3b01      	subs	r3, #1
 800dc00:	4a0a      	ldr	r2, [pc, #40]	; (800dc2c <prvCheckTasksWaitingTermination+0x50>)
 800dc02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dc04:	4b0a      	ldr	r3, [pc, #40]	; (800dc30 <prvCheckTasksWaitingTermination+0x54>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	4a09      	ldr	r2, [pc, #36]	; (800dc30 <prvCheckTasksWaitingTermination+0x54>)
 800dc0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dc0e:	f000 feeb 	bl	800e9e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 f80e 	bl	800dc34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dc18:	4b05      	ldr	r3, [pc, #20]	; (800dc30 <prvCheckTasksWaitingTermination+0x54>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d1e1      	bne.n	800dbe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dc20:	bf00      	nop
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	20001b9c 	.word	0x20001b9c
 800dc2c:	20001bc8 	.word	0x20001bc8
 800dc30:	20001bb0 	.word	0x20001bb0

0800dc34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	3358      	adds	r3, #88	; 0x58
 800dc40:	4618      	mov	r0, r3
 800dc42:	f001 fd49 	bl	800f6d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d108      	bne.n	800dc62 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7f5 f9f7 	bl	8003048 <vPortFree>
				vPortFree( pxTCB );
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f7f5 f9f4 	bl	8003048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dc60:	e017      	b.n	800dc92 <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d103      	bne.n	800dc74 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f7f5 f9eb 	bl	8003048 <vPortFree>
	}
 800dc72:	e00e      	b.n	800dc92 <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800dc7a:	2b02      	cmp	r3, #2
 800dc7c:	d009      	beq.n	800dc92 <prvDeleteTCB+0x5e>
 800dc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc82:	f383 8811 	msr	BASEPRI, r3
 800dc86:	f3bf 8f6f 	isb	sy
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	60fb      	str	r3, [r7, #12]
 800dc90:	e7fe      	b.n	800dc90 <prvDeleteTCB+0x5c>
	}
 800dc92:	bf00      	nop
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}
	...

0800dc9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dca2:	4b0c      	ldr	r3, [pc, #48]	; (800dcd4 <prvResetNextTaskUnblockTime+0x38>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d104      	bne.n	800dcb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dcac:	4b0a      	ldr	r3, [pc, #40]	; (800dcd8 <prvResetNextTaskUnblockTime+0x3c>)
 800dcae:	f04f 32ff 	mov.w	r2, #4294967295
 800dcb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dcb4:	e008      	b.n	800dcc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcb6:	4b07      	ldr	r3, [pc, #28]	; (800dcd4 <prvResetNextTaskUnblockTime+0x38>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	4a04      	ldr	r2, [pc, #16]	; (800dcd8 <prvResetNextTaskUnblockTime+0x3c>)
 800dcc6:	6013      	str	r3, [r2, #0]
}
 800dcc8:	bf00      	nop
 800dcca:	370c      	adds	r7, #12
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr
 800dcd4:	20001b80 	.word	0x20001b80
 800dcd8:	20001be8 	.word	0x20001be8

0800dcdc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800dcdc:	b480      	push	{r7}
 800dcde:	b083      	sub	sp, #12
 800dce0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800dce2:	4b05      	ldr	r3, [pc, #20]	; (800dcf8 <xTaskGetCurrentTaskHandle+0x1c>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800dce8:	687b      	ldr	r3, [r7, #4]
	}
 800dcea:	4618      	mov	r0, r3
 800dcec:	370c      	adds	r7, #12
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	200016f4 	.word	0x200016f4

0800dcfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dd02:	4b0b      	ldr	r3, [pc, #44]	; (800dd30 <xTaskGetSchedulerState+0x34>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d102      	bne.n	800dd10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	607b      	str	r3, [r7, #4]
 800dd0e:	e008      	b.n	800dd22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd10:	4b08      	ldr	r3, [pc, #32]	; (800dd34 <xTaskGetSchedulerState+0x38>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d102      	bne.n	800dd1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dd18:	2302      	movs	r3, #2
 800dd1a:	607b      	str	r3, [r7, #4]
 800dd1c:	e001      	b.n	800dd22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dd22:	687b      	ldr	r3, [r7, #4]
	}
 800dd24:	4618      	mov	r0, r3
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr
 800dd30:	20001bd4 	.word	0x20001bd4
 800dd34:	20001bf0 	.word	0x20001bf0

0800dd38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dd44:	2300      	movs	r3, #0
 800dd46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d051      	beq.n	800ddf2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd52:	4b2a      	ldr	r3, [pc, #168]	; (800ddfc <xTaskPriorityInherit+0xc4>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d241      	bcs.n	800dde0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	699b      	ldr	r3, [r3, #24]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	db06      	blt.n	800dd72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd64:	4b25      	ldr	r3, [pc, #148]	; (800ddfc <xTaskPriorityInherit+0xc4>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	6959      	ldr	r1, [r3, #20]
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	4413      	add	r3, r2
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	4a1f      	ldr	r2, [pc, #124]	; (800de00 <xTaskPriorityInherit+0xc8>)
 800dd84:	4413      	add	r3, r2
 800dd86:	4299      	cmp	r1, r3
 800dd88:	d122      	bne.n	800ddd0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	3304      	adds	r3, #4
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fe f8d4 	bl	800bf3c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dd94:	4b19      	ldr	r3, [pc, #100]	; (800ddfc <xTaskPriorityInherit+0xc4>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda2:	4b18      	ldr	r3, [pc, #96]	; (800de04 <xTaskPriorityInherit+0xcc>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d903      	bls.n	800ddb2 <xTaskPriorityInherit+0x7a>
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddae:	4a15      	ldr	r2, [pc, #84]	; (800de04 <xTaskPriorityInherit+0xcc>)
 800ddb0:	6013      	str	r3, [r2, #0]
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	4a10      	ldr	r2, [pc, #64]	; (800de00 <xTaskPriorityInherit+0xc8>)
 800ddc0:	441a      	add	r2, r3
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	4610      	mov	r0, r2
 800ddca:	f7fe f85a 	bl	800be82 <vListInsertEnd>
 800ddce:	e004      	b.n	800ddda <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ddd0:	4b0a      	ldr	r3, [pc, #40]	; (800ddfc <xTaskPriorityInherit+0xc4>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ddda:	2301      	movs	r3, #1
 800dddc:	60fb      	str	r3, [r7, #12]
 800ddde:	e008      	b.n	800ddf2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dde4:	4b05      	ldr	r3, [pc, #20]	; (800ddfc <xTaskPriorityInherit+0xc4>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d201      	bcs.n	800ddf2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
	}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3710      	adds	r7, #16
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	200016f4 	.word	0x200016f4
 800de00:	200016f8 	.word	0x200016f8
 800de04:	20001bd0 	.word	0x20001bd0

0800de08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b086      	sub	sp, #24
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800de14:	2300      	movs	r3, #0
 800de16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d054      	beq.n	800dec8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800de1e:	4b2d      	ldr	r3, [pc, #180]	; (800ded4 <xTaskPriorityDisinherit+0xcc>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	693a      	ldr	r2, [r7, #16]
 800de24:	429a      	cmp	r2, r3
 800de26:	d009      	beq.n	800de3c <xTaskPriorityDisinherit+0x34>
 800de28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2c:	f383 8811 	msr	BASEPRI, r3
 800de30:	f3bf 8f6f 	isb	sy
 800de34:	f3bf 8f4f 	dsb	sy
 800de38:	60fb      	str	r3, [r7, #12]
 800de3a:	e7fe      	b.n	800de3a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de40:	2b00      	cmp	r3, #0
 800de42:	d109      	bne.n	800de58 <xTaskPriorityDisinherit+0x50>
 800de44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de48:	f383 8811 	msr	BASEPRI, r3
 800de4c:	f3bf 8f6f 	isb	sy
 800de50:	f3bf 8f4f 	dsb	sy
 800de54:	60bb      	str	r3, [r7, #8]
 800de56:	e7fe      	b.n	800de56 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de5c:	1e5a      	subs	r2, r3, #1
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d02c      	beq.n	800dec8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de72:	2b00      	cmp	r3, #0
 800de74:	d128      	bne.n	800dec8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	3304      	adds	r3, #4
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fe f85e 	bl	800bf3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de98:	4b0f      	ldr	r3, [pc, #60]	; (800ded8 <xTaskPriorityDisinherit+0xd0>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d903      	bls.n	800dea8 <xTaskPriorityDisinherit+0xa0>
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea4:	4a0c      	ldr	r2, [pc, #48]	; (800ded8 <xTaskPriorityDisinherit+0xd0>)
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deac:	4613      	mov	r3, r2
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	4413      	add	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	4a09      	ldr	r2, [pc, #36]	; (800dedc <xTaskPriorityDisinherit+0xd4>)
 800deb6:	441a      	add	r2, r3
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	3304      	adds	r3, #4
 800debc:	4619      	mov	r1, r3
 800debe:	4610      	mov	r0, r2
 800dec0:	f7fd ffdf 	bl	800be82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dec4:	2301      	movs	r3, #1
 800dec6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dec8:	697b      	ldr	r3, [r7, #20]
	}
 800deca:	4618      	mov	r0, r3
 800decc:	3718      	adds	r7, #24
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	200016f4 	.word	0x200016f4
 800ded8:	20001bd0 	.word	0x20001bd0
 800dedc:	200016f8 	.word	0x200016f8

0800dee0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b088      	sub	sp, #32
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800deee:	2301      	movs	r3, #1
 800def0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d068      	beq.n	800dfca <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800defc:	2b00      	cmp	r3, #0
 800defe:	d109      	bne.n	800df14 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800df00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df04:	f383 8811 	msr	BASEPRI, r3
 800df08:	f3bf 8f6f 	isb	sy
 800df0c:	f3bf 8f4f 	dsb	sy
 800df10:	60fb      	str	r3, [r7, #12]
 800df12:	e7fe      	b.n	800df12 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d902      	bls.n	800df24 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	61fb      	str	r3, [r7, #28]
 800df22:	e002      	b.n	800df2a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df28:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df2e:	69fa      	ldr	r2, [r7, #28]
 800df30:	429a      	cmp	r2, r3
 800df32:	d04a      	beq.n	800dfca <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800df34:	69bb      	ldr	r3, [r7, #24]
 800df36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df38:	697a      	ldr	r2, [r7, #20]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d145      	bne.n	800dfca <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800df3e:	4b25      	ldr	r3, [pc, #148]	; (800dfd4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	69ba      	ldr	r2, [r7, #24]
 800df44:	429a      	cmp	r2, r3
 800df46:	d109      	bne.n	800df5c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800df48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	60bb      	str	r3, [r7, #8]
 800df5a:	e7fe      	b.n	800df5a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	69fa      	ldr	r2, [r7, #28]
 800df66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	699b      	ldr	r3, [r3, #24]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	db04      	blt.n	800df7a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	6959      	ldr	r1, [r3, #20]
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	4613      	mov	r3, r2
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	4413      	add	r3, r2
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	4a13      	ldr	r2, [pc, #76]	; (800dfd8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800df8a:	4413      	add	r3, r2
 800df8c:	4299      	cmp	r1, r3
 800df8e:	d11c      	bne.n	800dfca <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df90:	69bb      	ldr	r3, [r7, #24]
 800df92:	3304      	adds	r3, #4
 800df94:	4618      	mov	r0, r3
 800df96:	f7fd ffd1 	bl	800bf3c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800df9a:	69bb      	ldr	r3, [r7, #24]
 800df9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df9e:	4b0f      	ldr	r3, [pc, #60]	; (800dfdc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d903      	bls.n	800dfae <vTaskPriorityDisinheritAfterTimeout+0xce>
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfaa:	4a0c      	ldr	r2, [pc, #48]	; (800dfdc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dfac:	6013      	str	r3, [r2, #0]
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	4413      	add	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4a07      	ldr	r2, [pc, #28]	; (800dfd8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800dfbc:	441a      	add	r2, r3
 800dfbe:	69bb      	ldr	r3, [r7, #24]
 800dfc0:	3304      	adds	r3, #4
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	4610      	mov	r0, r2
 800dfc6:	f7fd ff5c 	bl	800be82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfca:	bf00      	nop
 800dfcc:	3720      	adds	r7, #32
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	200016f4 	.word	0x200016f4
 800dfd8:	200016f8 	.word	0x200016f8
 800dfdc:	20001bd0 	.word	0x20001bd0

0800dfe0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dfe0:	b480      	push	{r7}
 800dfe2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dfe4:	4b07      	ldr	r3, [pc, #28]	; (800e004 <pvTaskIncrementMutexHeldCount+0x24>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d004      	beq.n	800dff6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dfec:	4b05      	ldr	r3, [pc, #20]	; (800e004 <pvTaskIncrementMutexHeldCount+0x24>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dff2:	3201      	adds	r2, #1
 800dff4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800dff6:	4b03      	ldr	r3, [pc, #12]	; (800e004 <pvTaskIncrementMutexHeldCount+0x24>)
 800dff8:	681b      	ldr	r3, [r3, #0]
	}
 800dffa:	4618      	mov	r0, r3
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr
 800e004:	200016f4 	.word	0x200016f4

0800e008 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e012:	4b21      	ldr	r3, [pc, #132]	; (800e098 <prvAddCurrentTaskToDelayedList+0x90>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e018:	4b20      	ldr	r3, [pc, #128]	; (800e09c <prvAddCurrentTaskToDelayedList+0x94>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fd ff8c 	bl	800bf3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e02a:	d10a      	bne.n	800e042 <prvAddCurrentTaskToDelayedList+0x3a>
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d007      	beq.n	800e042 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e032:	4b1a      	ldr	r3, [pc, #104]	; (800e09c <prvAddCurrentTaskToDelayedList+0x94>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	3304      	adds	r3, #4
 800e038:	4619      	mov	r1, r3
 800e03a:	4819      	ldr	r0, [pc, #100]	; (800e0a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800e03c:	f7fd ff21 	bl	800be82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e040:	e026      	b.n	800e090 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e042:	68fa      	ldr	r2, [r7, #12]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	4413      	add	r3, r2
 800e048:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e04a:	4b14      	ldr	r3, [pc, #80]	; (800e09c <prvAddCurrentTaskToDelayedList+0x94>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	429a      	cmp	r2, r3
 800e058:	d209      	bcs.n	800e06e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e05a:	4b12      	ldr	r3, [pc, #72]	; (800e0a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	4b0f      	ldr	r3, [pc, #60]	; (800e09c <prvAddCurrentTaskToDelayedList+0x94>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	3304      	adds	r3, #4
 800e064:	4619      	mov	r1, r3
 800e066:	4610      	mov	r0, r2
 800e068:	f7fd ff2f 	bl	800beca <vListInsert>
}
 800e06c:	e010      	b.n	800e090 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e06e:	4b0e      	ldr	r3, [pc, #56]	; (800e0a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	4b0a      	ldr	r3, [pc, #40]	; (800e09c <prvAddCurrentTaskToDelayedList+0x94>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	3304      	adds	r3, #4
 800e078:	4619      	mov	r1, r3
 800e07a:	4610      	mov	r0, r2
 800e07c:	f7fd ff25 	bl	800beca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e080:	4b0a      	ldr	r3, [pc, #40]	; (800e0ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	68ba      	ldr	r2, [r7, #8]
 800e086:	429a      	cmp	r2, r3
 800e088:	d202      	bcs.n	800e090 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e08a:	4a08      	ldr	r2, [pc, #32]	; (800e0ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	6013      	str	r3, [r2, #0]
}
 800e090:	bf00      	nop
 800e092:	3710      	adds	r7, #16
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	20001bcc 	.word	0x20001bcc
 800e09c:	200016f4 	.word	0x200016f4
 800e0a0:	20001bb4 	.word	0x20001bb4
 800e0a4:	20001b84 	.word	0x20001b84
 800e0a8:	20001b80 	.word	0x20001b80
 800e0ac:	20001be8 	.word	0x20001be8

0800e0b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b08a      	sub	sp, #40	; 0x28
 800e0b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e0ba:	f000 faff 	bl	800e6bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e0be:	4b1c      	ldr	r3, [pc, #112]	; (800e130 <xTimerCreateTimerTask+0x80>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d021      	beq.n	800e10a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e0ce:	1d3a      	adds	r2, r7, #4
 800e0d0:	f107 0108 	add.w	r1, r7, #8
 800e0d4:	f107 030c 	add.w	r3, r7, #12
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7fd fe8b 	bl	800bdf4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e0de:	6879      	ldr	r1, [r7, #4]
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	9202      	str	r2, [sp, #8]
 800e0e6:	9301      	str	r3, [sp, #4]
 800e0e8:	2302      	movs	r3, #2
 800e0ea:	9300      	str	r3, [sp, #0]
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	460a      	mov	r2, r1
 800e0f0:	4910      	ldr	r1, [pc, #64]	; (800e134 <xTimerCreateTimerTask+0x84>)
 800e0f2:	4811      	ldr	r0, [pc, #68]	; (800e138 <xTimerCreateTimerTask+0x88>)
 800e0f4:	f7fe feb2 	bl	800ce5c <xTaskCreateStatic>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	4b10      	ldr	r3, [pc, #64]	; (800e13c <xTimerCreateTimerTask+0x8c>)
 800e0fc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e0fe:	4b0f      	ldr	r3, [pc, #60]	; (800e13c <xTimerCreateTimerTask+0x8c>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d001      	beq.n	800e10a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e106:	2301      	movs	r3, #1
 800e108:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d109      	bne.n	800e124 <xTimerCreateTimerTask+0x74>
 800e110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e114:	f383 8811 	msr	BASEPRI, r3
 800e118:	f3bf 8f6f 	isb	sy
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	613b      	str	r3, [r7, #16]
 800e122:	e7fe      	b.n	800e122 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800e124:	697b      	ldr	r3, [r7, #20]
}
 800e126:	4618      	mov	r0, r3
 800e128:	3718      	adds	r7, #24
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	20001c2c 	.word	0x20001c2c
 800e134:	080149d0 	.word	0x080149d0
 800e138:	0800e271 	.word	0x0800e271
 800e13c:	20001c30 	.word	0x20001c30

0800e140 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b08a      	sub	sp, #40	; 0x28
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	607a      	str	r2, [r7, #4]
 800e14c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e14e:	2300      	movs	r3, #0
 800e150:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d109      	bne.n	800e16c <xTimerGenericCommand+0x2c>
 800e158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15c:	f383 8811 	msr	BASEPRI, r3
 800e160:	f3bf 8f6f 	isb	sy
 800e164:	f3bf 8f4f 	dsb	sy
 800e168:	623b      	str	r3, [r7, #32]
 800e16a:	e7fe      	b.n	800e16a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e16c:	4b19      	ldr	r3, [pc, #100]	; (800e1d4 <xTimerGenericCommand+0x94>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d02a      	beq.n	800e1ca <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	2b05      	cmp	r3, #5
 800e184:	dc18      	bgt.n	800e1b8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e186:	f7ff fdb9 	bl	800dcfc <xTaskGetSchedulerState>
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b02      	cmp	r3, #2
 800e18e:	d109      	bne.n	800e1a4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e190:	4b10      	ldr	r3, [pc, #64]	; (800e1d4 <xTimerGenericCommand+0x94>)
 800e192:	6818      	ldr	r0, [r3, #0]
 800e194:	f107 0110 	add.w	r1, r7, #16
 800e198:	2300      	movs	r3, #0
 800e19a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e19c:	f7fe f8ea 	bl	800c374 <xQueueGenericSend>
 800e1a0:	6278      	str	r0, [r7, #36]	; 0x24
 800e1a2:	e012      	b.n	800e1ca <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e1a4:	4b0b      	ldr	r3, [pc, #44]	; (800e1d4 <xTimerGenericCommand+0x94>)
 800e1a6:	6818      	ldr	r0, [r3, #0]
 800e1a8:	f107 0110 	add.w	r1, r7, #16
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	f7fe f8e0 	bl	800c374 <xQueueGenericSend>
 800e1b4:	6278      	str	r0, [r7, #36]	; 0x24
 800e1b6:	e008      	b.n	800e1ca <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e1b8:	4b06      	ldr	r3, [pc, #24]	; (800e1d4 <xTimerGenericCommand+0x94>)
 800e1ba:	6818      	ldr	r0, [r3, #0]
 800e1bc:	f107 0110 	add.w	r1, r7, #16
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	683a      	ldr	r2, [r7, #0]
 800e1c4:	f7fe f9d0 	bl	800c568 <xQueueGenericSendFromISR>
 800e1c8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3728      	adds	r7, #40	; 0x28
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	20001c2c 	.word	0x20001c2c

0800e1d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b088      	sub	sp, #32
 800e1dc:	af02      	add	r7, sp, #8
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1e2:	4b22      	ldr	r3, [pc, #136]	; (800e26c <prvProcessExpiredTimer+0x94>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	3304      	adds	r3, #4
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7fd fea3 	bl	800bf3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1fc:	f003 0304 	and.w	r3, r3, #4
 800e200:	2b00      	cmp	r3, #0
 800e202:	d021      	beq.n	800e248 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	699a      	ldr	r2, [r3, #24]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	18d1      	adds	r1, r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	6978      	ldr	r0, [r7, #20]
 800e212:	f000 f8d1 	bl	800e3b8 <prvInsertTimerInActiveList>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d01e      	beq.n	800e25a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e21c:	2300      	movs	r3, #0
 800e21e:	9300      	str	r3, [sp, #0]
 800e220:	2300      	movs	r3, #0
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	2100      	movs	r1, #0
 800e226:	6978      	ldr	r0, [r7, #20]
 800e228:	f7ff ff8a 	bl	800e140 <xTimerGenericCommand>
 800e22c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d112      	bne.n	800e25a <prvProcessExpiredTimer+0x82>
 800e234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	60fb      	str	r3, [r7, #12]
 800e246:	e7fe      	b.n	800e246 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e24e:	f023 0301 	bic.w	r3, r3, #1
 800e252:	b2da      	uxtb	r2, r3
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	6a1b      	ldr	r3, [r3, #32]
 800e25e:	6978      	ldr	r0, [r7, #20]
 800e260:	4798      	blx	r3
}
 800e262:	bf00      	nop
 800e264:	3718      	adds	r7, #24
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	20001c24 	.word	0x20001c24

0800e270 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e278:	f107 0308 	add.w	r3, r7, #8
 800e27c:	4618      	mov	r0, r3
 800e27e:	f000 f857 	bl	800e330 <prvGetNextExpireTime>
 800e282:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	4619      	mov	r1, r3
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f000 f803 	bl	800e294 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e28e:	f000 f8d5 	bl	800e43c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e292:	e7f1      	b.n	800e278 <prvTimerTask+0x8>

0800e294 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e29e:	f7ff f911 	bl	800d4c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e2a2:	f107 0308 	add.w	r3, r7, #8
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f000 f866 	bl	800e378 <prvSampleTimeNow>
 800e2ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d130      	bne.n	800e316 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d10a      	bne.n	800e2d0 <prvProcessTimerOrBlockTask+0x3c>
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d806      	bhi.n	800e2d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e2c2:	f7ff f90d 	bl	800d4e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e2c6:	68f9      	ldr	r1, [r7, #12]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f7ff ff85 	bl	800e1d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e2ce:	e024      	b.n	800e31a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d008      	beq.n	800e2e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e2d6:	4b13      	ldr	r3, [pc, #76]	; (800e324 <prvProcessTimerOrBlockTask+0x90>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d101      	bne.n	800e2e4 <prvProcessTimerOrBlockTask+0x50>
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	e000      	b.n	800e2e6 <prvProcessTimerOrBlockTask+0x52>
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e2e8:	4b0f      	ldr	r3, [pc, #60]	; (800e328 <prvProcessTimerOrBlockTask+0x94>)
 800e2ea:	6818      	ldr	r0, [r3, #0]
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	1ad3      	subs	r3, r2, r3
 800e2f2:	683a      	ldr	r2, [r7, #0]
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	f7fe fd7d 	bl	800cdf4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e2fa:	f7ff f8f1 	bl	800d4e0 <xTaskResumeAll>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d10a      	bne.n	800e31a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e304:	4b09      	ldr	r3, [pc, #36]	; (800e32c <prvProcessTimerOrBlockTask+0x98>)
 800e306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e30a:	601a      	str	r2, [r3, #0]
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	f3bf 8f6f 	isb	sy
}
 800e314:	e001      	b.n	800e31a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e316:	f7ff f8e3 	bl	800d4e0 <xTaskResumeAll>
}
 800e31a:	bf00      	nop
 800e31c:	3710      	adds	r7, #16
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	20001c28 	.word	0x20001c28
 800e328:	20001c2c 	.word	0x20001c2c
 800e32c:	e000ed04 	.word	0xe000ed04

0800e330 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e330:	b480      	push	{r7}
 800e332:	b085      	sub	sp, #20
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e338:	4b0e      	ldr	r3, [pc, #56]	; (800e374 <prvGetNextExpireTime+0x44>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d101      	bne.n	800e346 <prvGetNextExpireTime+0x16>
 800e342:	2201      	movs	r2, #1
 800e344:	e000      	b.n	800e348 <prvGetNextExpireTime+0x18>
 800e346:	2200      	movs	r2, #0
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d105      	bne.n	800e360 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e354:	4b07      	ldr	r3, [pc, #28]	; (800e374 <prvGetNextExpireTime+0x44>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	60fb      	str	r3, [r7, #12]
 800e35e:	e001      	b.n	800e364 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e360:	2300      	movs	r3, #0
 800e362:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e364:	68fb      	ldr	r3, [r7, #12]
}
 800e366:	4618      	mov	r0, r3
 800e368:	3714      	adds	r7, #20
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop
 800e374:	20001c24 	.word	0x20001c24

0800e378 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e380:	f7ff f94a 	bl	800d618 <xTaskGetTickCount>
 800e384:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e386:	4b0b      	ldr	r3, [pc, #44]	; (800e3b4 <prvSampleTimeNow+0x3c>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68fa      	ldr	r2, [r7, #12]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d205      	bcs.n	800e39c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e390:	f000 f930 	bl	800e5f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2201      	movs	r2, #1
 800e398:	601a      	str	r2, [r3, #0]
 800e39a:	e002      	b.n	800e3a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e3a2:	4a04      	ldr	r2, [pc, #16]	; (800e3b4 <prvSampleTimeNow+0x3c>)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	20001c34 	.word	0x20001c34

0800e3b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
 800e3c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	68ba      	ldr	r2, [r7, #8]
 800e3ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e3d6:	68ba      	ldr	r2, [r7, #8]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d812      	bhi.n	800e404 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	1ad2      	subs	r2, r2, r3
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	699b      	ldr	r3, [r3, #24]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d302      	bcc.n	800e3f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	617b      	str	r3, [r7, #20]
 800e3f0:	e01b      	b.n	800e42a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e3f2:	4b10      	ldr	r3, [pc, #64]	; (800e434 <prvInsertTimerInActiveList+0x7c>)
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	4610      	mov	r0, r2
 800e3fe:	f7fd fd64 	bl	800beca <vListInsert>
 800e402:	e012      	b.n	800e42a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	429a      	cmp	r2, r3
 800e40a:	d206      	bcs.n	800e41a <prvInsertTimerInActiveList+0x62>
 800e40c:	68ba      	ldr	r2, [r7, #8]
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	429a      	cmp	r2, r3
 800e412:	d302      	bcc.n	800e41a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e414:	2301      	movs	r3, #1
 800e416:	617b      	str	r3, [r7, #20]
 800e418:	e007      	b.n	800e42a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e41a:	4b07      	ldr	r3, [pc, #28]	; (800e438 <prvInsertTimerInActiveList+0x80>)
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	3304      	adds	r3, #4
 800e422:	4619      	mov	r1, r3
 800e424:	4610      	mov	r0, r2
 800e426:	f7fd fd50 	bl	800beca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e42a:	697b      	ldr	r3, [r7, #20]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3718      	adds	r7, #24
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	20001c28 	.word	0x20001c28
 800e438:	20001c24 	.word	0x20001c24

0800e43c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b08e      	sub	sp, #56	; 0x38
 800e440:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e442:	e0c6      	b.n	800e5d2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	da17      	bge.n	800e47a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e44a:	1d3b      	adds	r3, r7, #4
 800e44c:	3304      	adds	r3, #4
 800e44e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e452:	2b00      	cmp	r3, #0
 800e454:	d109      	bne.n	800e46a <prvProcessReceivedCommands+0x2e>
 800e456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45a:	f383 8811 	msr	BASEPRI, r3
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f3bf 8f4f 	dsb	sy
 800e466:	61fb      	str	r3, [r7, #28]
 800e468:	e7fe      	b.n	800e468 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e470:	6850      	ldr	r0, [r2, #4]
 800e472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e474:	6892      	ldr	r2, [r2, #8]
 800e476:	4611      	mov	r1, r2
 800e478:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f2c0 80a7 	blt.w	800e5d0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e488:	695b      	ldr	r3, [r3, #20]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d004      	beq.n	800e498 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e490:	3304      	adds	r3, #4
 800e492:	4618      	mov	r0, r3
 800e494:	f7fd fd52 	bl	800bf3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e498:	463b      	mov	r3, r7
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7ff ff6c 	bl	800e378 <prvSampleTimeNow>
 800e4a0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2b09      	cmp	r3, #9
 800e4a6:	f200 8094 	bhi.w	800e5d2 <prvProcessReceivedCommands+0x196>
 800e4aa:	a201      	add	r2, pc, #4	; (adr r2, 800e4b0 <prvProcessReceivedCommands+0x74>)
 800e4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b0:	0800e4d9 	.word	0x0800e4d9
 800e4b4:	0800e4d9 	.word	0x0800e4d9
 800e4b8:	0800e4d9 	.word	0x0800e4d9
 800e4bc:	0800e54b 	.word	0x0800e54b
 800e4c0:	0800e55f 	.word	0x0800e55f
 800e4c4:	0800e5a7 	.word	0x0800e5a7
 800e4c8:	0800e4d9 	.word	0x0800e4d9
 800e4cc:	0800e4d9 	.word	0x0800e4d9
 800e4d0:	0800e54b 	.word	0x0800e54b
 800e4d4:	0800e55f 	.word	0x0800e55f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4de:	f043 0301 	orr.w	r3, r3, #1
 800e4e2:	b2da      	uxtb	r2, r3
 800e4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ee:	699b      	ldr	r3, [r3, #24]
 800e4f0:	18d1      	adds	r1, r2, r3
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4f8:	f7ff ff5e 	bl	800e3b8 <prvInsertTimerInActiveList>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d067      	beq.n	800e5d2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e504:	6a1b      	ldr	r3, [r3, #32]
 800e506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e508:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e510:	f003 0304 	and.w	r3, r3, #4
 800e514:	2b00      	cmp	r3, #0
 800e516:	d05c      	beq.n	800e5d2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51c:	699b      	ldr	r3, [r3, #24]
 800e51e:	441a      	add	r2, r3
 800e520:	2300      	movs	r3, #0
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	2300      	movs	r3, #0
 800e526:	2100      	movs	r1, #0
 800e528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e52a:	f7ff fe09 	bl	800e140 <xTimerGenericCommand>
 800e52e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e530:	6a3b      	ldr	r3, [r7, #32]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d14d      	bne.n	800e5d2 <prvProcessReceivedCommands+0x196>
 800e536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53a:	f383 8811 	msr	BASEPRI, r3
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f3bf 8f4f 	dsb	sy
 800e546:	61bb      	str	r3, [r7, #24]
 800e548:	e7fe      	b.n	800e548 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e550:	f023 0301 	bic.w	r3, r3, #1
 800e554:	b2da      	uxtb	r2, r3
 800e556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e558:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e55c:	e039      	b.n	800e5d2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e564:	f043 0301 	orr.w	r3, r3, #1
 800e568:	b2da      	uxtb	r2, r3
 800e56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e570:	68ba      	ldr	r2, [r7, #8]
 800e572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e574:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e578:	699b      	ldr	r3, [r3, #24]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d109      	bne.n	800e592 <prvProcessReceivedCommands+0x156>
 800e57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e582:	f383 8811 	msr	BASEPRI, r3
 800e586:	f3bf 8f6f 	isb	sy
 800e58a:	f3bf 8f4f 	dsb	sy
 800e58e:	617b      	str	r3, [r7, #20]
 800e590:	e7fe      	b.n	800e590 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e594:	699a      	ldr	r2, [r3, #24]
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e598:	18d1      	adds	r1, r2, r3
 800e59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e59e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5a0:	f7ff ff0a 	bl	800e3b8 <prvInsertTimerInActiveList>
					break;
 800e5a4:	e015      	b.n	800e5d2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5ac:	f003 0302 	and.w	r3, r3, #2
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d103      	bne.n	800e5bc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800e5b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5b6:	f7f4 fd47 	bl	8003048 <vPortFree>
 800e5ba:	e00a      	b.n	800e5d2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5c2:	f023 0301 	bic.w	r3, r3, #1
 800e5c6:	b2da      	uxtb	r2, r3
 800e5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e5ce:	e000      	b.n	800e5d2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e5d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e5d2:	4b07      	ldr	r3, [pc, #28]	; (800e5f0 <prvProcessReceivedCommands+0x1b4>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	1d39      	adds	r1, r7, #4
 800e5d8:	2200      	movs	r2, #0
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fe f858 	bl	800c690 <xQueueReceive>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f47f af2e 	bne.w	800e444 <prvProcessReceivedCommands+0x8>
	}
}
 800e5e8:	bf00      	nop
 800e5ea:	3730      	adds	r7, #48	; 0x30
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	20001c2c 	.word	0x20001c2c

0800e5f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b088      	sub	sp, #32
 800e5f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e5fa:	e047      	b.n	800e68c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5fc:	4b2d      	ldr	r3, [pc, #180]	; (800e6b4 <prvSwitchTimerLists+0xc0>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e606:	4b2b      	ldr	r3, [pc, #172]	; (800e6b4 <prvSwitchTimerLists+0xc0>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	68db      	ldr	r3, [r3, #12]
 800e60c:	68db      	ldr	r3, [r3, #12]
 800e60e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	3304      	adds	r3, #4
 800e614:	4618      	mov	r0, r3
 800e616:	f7fd fc91 	bl	800bf3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6a1b      	ldr	r3, [r3, #32]
 800e61e:	68f8      	ldr	r0, [r7, #12]
 800e620:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e628:	f003 0304 	and.w	r3, r3, #4
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d02d      	beq.n	800e68c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	699b      	ldr	r3, [r3, #24]
 800e634:	693a      	ldr	r2, [r7, #16]
 800e636:	4413      	add	r3, r2
 800e638:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e63a:	68ba      	ldr	r2, [r7, #8]
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d90e      	bls.n	800e660 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	68ba      	ldr	r2, [r7, #8]
 800e646:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	68fa      	ldr	r2, [r7, #12]
 800e64c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e64e:	4b19      	ldr	r3, [pc, #100]	; (800e6b4 <prvSwitchTimerLists+0xc0>)
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3304      	adds	r3, #4
 800e656:	4619      	mov	r1, r3
 800e658:	4610      	mov	r0, r2
 800e65a:	f7fd fc36 	bl	800beca <vListInsert>
 800e65e:	e015      	b.n	800e68c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e660:	2300      	movs	r3, #0
 800e662:	9300      	str	r3, [sp, #0]
 800e664:	2300      	movs	r3, #0
 800e666:	693a      	ldr	r2, [r7, #16]
 800e668:	2100      	movs	r1, #0
 800e66a:	68f8      	ldr	r0, [r7, #12]
 800e66c:	f7ff fd68 	bl	800e140 <xTimerGenericCommand>
 800e670:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d109      	bne.n	800e68c <prvSwitchTimerLists+0x98>
 800e678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e67c:	f383 8811 	msr	BASEPRI, r3
 800e680:	f3bf 8f6f 	isb	sy
 800e684:	f3bf 8f4f 	dsb	sy
 800e688:	603b      	str	r3, [r7, #0]
 800e68a:	e7fe      	b.n	800e68a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e68c:	4b09      	ldr	r3, [pc, #36]	; (800e6b4 <prvSwitchTimerLists+0xc0>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d1b2      	bne.n	800e5fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e696:	4b07      	ldr	r3, [pc, #28]	; (800e6b4 <prvSwitchTimerLists+0xc0>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e69c:	4b06      	ldr	r3, [pc, #24]	; (800e6b8 <prvSwitchTimerLists+0xc4>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a04      	ldr	r2, [pc, #16]	; (800e6b4 <prvSwitchTimerLists+0xc0>)
 800e6a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e6a4:	4a04      	ldr	r2, [pc, #16]	; (800e6b8 <prvSwitchTimerLists+0xc4>)
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	6013      	str	r3, [r2, #0]
}
 800e6aa:	bf00      	nop
 800e6ac:	3718      	adds	r7, #24
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	20001c24 	.word	0x20001c24
 800e6b8:	20001c28 	.word	0x20001c28

0800e6bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e6c2:	f000 f963 	bl	800e98c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e6c6:	4b15      	ldr	r3, [pc, #84]	; (800e71c <prvCheckForValidListAndQueue+0x60>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d120      	bne.n	800e710 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e6ce:	4814      	ldr	r0, [pc, #80]	; (800e720 <prvCheckForValidListAndQueue+0x64>)
 800e6d0:	f7fd fbaa 	bl	800be28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e6d4:	4813      	ldr	r0, [pc, #76]	; (800e724 <prvCheckForValidListAndQueue+0x68>)
 800e6d6:	f7fd fba7 	bl	800be28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e6da:	4b13      	ldr	r3, [pc, #76]	; (800e728 <prvCheckForValidListAndQueue+0x6c>)
 800e6dc:	4a10      	ldr	r2, [pc, #64]	; (800e720 <prvCheckForValidListAndQueue+0x64>)
 800e6de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e6e0:	4b12      	ldr	r3, [pc, #72]	; (800e72c <prvCheckForValidListAndQueue+0x70>)
 800e6e2:	4a10      	ldr	r2, [pc, #64]	; (800e724 <prvCheckForValidListAndQueue+0x68>)
 800e6e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	9300      	str	r3, [sp, #0]
 800e6ea:	4b11      	ldr	r3, [pc, #68]	; (800e730 <prvCheckForValidListAndQueue+0x74>)
 800e6ec:	4a11      	ldr	r2, [pc, #68]	; (800e734 <prvCheckForValidListAndQueue+0x78>)
 800e6ee:	2110      	movs	r1, #16
 800e6f0:	200a      	movs	r0, #10
 800e6f2:	f7fd fcb5 	bl	800c060 <xQueueGenericCreateStatic>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	4b08      	ldr	r3, [pc, #32]	; (800e71c <prvCheckForValidListAndQueue+0x60>)
 800e6fa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e6fc:	4b07      	ldr	r3, [pc, #28]	; (800e71c <prvCheckForValidListAndQueue+0x60>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d005      	beq.n	800e710 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e704:	4b05      	ldr	r3, [pc, #20]	; (800e71c <prvCheckForValidListAndQueue+0x60>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	490b      	ldr	r1, [pc, #44]	; (800e738 <prvCheckForValidListAndQueue+0x7c>)
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7fe fb4a 	bl	800cda4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e710:	f000 f96a 	bl	800e9e8 <vPortExitCritical>
}
 800e714:	bf00      	nop
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	20001c2c 	.word	0x20001c2c
 800e720:	20001bfc 	.word	0x20001bfc
 800e724:	20001c10 	.word	0x20001c10
 800e728:	20001c24 	.word	0x20001c24
 800e72c:	20001c28 	.word	0x20001c28
 800e730:	20001cd8 	.word	0x20001cd8
 800e734:	20001c38 	.word	0x20001c38
 800e738:	080149d8 	.word	0x080149d8

0800e73c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e73c:	b480      	push	{r7}
 800e73e:	b085      	sub	sp, #20
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	3b04      	subs	r3, #4
 800e74c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	3b04      	subs	r3, #4
 800e75a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	f023 0201 	bic.w	r2, r3, #1
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	3b04      	subs	r3, #4
 800e76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e76c:	4a0c      	ldr	r2, [pc, #48]	; (800e7a0 <pxPortInitialiseStack+0x64>)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	3b14      	subs	r3, #20
 800e776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	3b04      	subs	r3, #4
 800e782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f06f 0202 	mvn.w	r2, #2
 800e78a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	3b20      	subs	r3, #32
 800e790:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e792:	68fb      	ldr	r3, [r7, #12]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3714      	adds	r7, #20
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr
 800e7a0:	0800e7a5 	.word	0x0800e7a5

0800e7a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b085      	sub	sp, #20
 800e7a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e7ae:	4b11      	ldr	r3, [pc, #68]	; (800e7f4 <prvTaskExitError+0x50>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7b6:	d009      	beq.n	800e7cc <prvTaskExitError+0x28>
 800e7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7bc:	f383 8811 	msr	BASEPRI, r3
 800e7c0:	f3bf 8f6f 	isb	sy
 800e7c4:	f3bf 8f4f 	dsb	sy
 800e7c8:	60fb      	str	r3, [r7, #12]
 800e7ca:	e7fe      	b.n	800e7ca <prvTaskExitError+0x26>
 800e7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d0:	f383 8811 	msr	BASEPRI, r3
 800e7d4:	f3bf 8f6f 	isb	sy
 800e7d8:	f3bf 8f4f 	dsb	sy
 800e7dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e7de:	bf00      	nop
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d0fc      	beq.n	800e7e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e7e6:	bf00      	nop
 800e7e8:	3714      	adds	r7, #20
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop
 800e7f4:	20000028 	.word	0x20000028
	...

0800e800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e800:	4b07      	ldr	r3, [pc, #28]	; (800e820 <pxCurrentTCBConst2>)
 800e802:	6819      	ldr	r1, [r3, #0]
 800e804:	6808      	ldr	r0, [r1, #0]
 800e806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e80a:	f380 8809 	msr	PSP, r0
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f04f 0000 	mov.w	r0, #0
 800e816:	f380 8811 	msr	BASEPRI, r0
 800e81a:	4770      	bx	lr
 800e81c:	f3af 8000 	nop.w

0800e820 <pxCurrentTCBConst2>:
 800e820:	200016f4 	.word	0x200016f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e824:	bf00      	nop
 800e826:	bf00      	nop

0800e828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e828:	4808      	ldr	r0, [pc, #32]	; (800e84c <prvPortStartFirstTask+0x24>)
 800e82a:	6800      	ldr	r0, [r0, #0]
 800e82c:	6800      	ldr	r0, [r0, #0]
 800e82e:	f380 8808 	msr	MSP, r0
 800e832:	f04f 0000 	mov.w	r0, #0
 800e836:	f380 8814 	msr	CONTROL, r0
 800e83a:	b662      	cpsie	i
 800e83c:	b661      	cpsie	f
 800e83e:	f3bf 8f4f 	dsb	sy
 800e842:	f3bf 8f6f 	isb	sy
 800e846:	df00      	svc	0
 800e848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e84a:	bf00      	nop
 800e84c:	e000ed08 	.word	0xe000ed08

0800e850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b086      	sub	sp, #24
 800e854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e856:	4b44      	ldr	r3, [pc, #272]	; (800e968 <xPortStartScheduler+0x118>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a44      	ldr	r2, [pc, #272]	; (800e96c <xPortStartScheduler+0x11c>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d109      	bne.n	800e874 <xPortStartScheduler+0x24>
 800e860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e864:	f383 8811 	msr	BASEPRI, r3
 800e868:	f3bf 8f6f 	isb	sy
 800e86c:	f3bf 8f4f 	dsb	sy
 800e870:	613b      	str	r3, [r7, #16]
 800e872:	e7fe      	b.n	800e872 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e874:	4b3c      	ldr	r3, [pc, #240]	; (800e968 <xPortStartScheduler+0x118>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4a3d      	ldr	r2, [pc, #244]	; (800e970 <xPortStartScheduler+0x120>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d109      	bne.n	800e892 <xPortStartScheduler+0x42>
 800e87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	60fb      	str	r3, [r7, #12]
 800e890:	e7fe      	b.n	800e890 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e892:	4b38      	ldr	r3, [pc, #224]	; (800e974 <xPortStartScheduler+0x124>)
 800e894:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	22ff      	movs	r2, #255	; 0xff
 800e8a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e8ac:	78fb      	ldrb	r3, [r7, #3]
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e8b4:	b2da      	uxtb	r2, r3
 800e8b6:	4b30      	ldr	r3, [pc, #192]	; (800e978 <xPortStartScheduler+0x128>)
 800e8b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e8ba:	4b30      	ldr	r3, [pc, #192]	; (800e97c <xPortStartScheduler+0x12c>)
 800e8bc:	2207      	movs	r2, #7
 800e8be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8c0:	e009      	b.n	800e8d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e8c2:	4b2e      	ldr	r3, [pc, #184]	; (800e97c <xPortStartScheduler+0x12c>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	4a2c      	ldr	r2, [pc, #176]	; (800e97c <xPortStartScheduler+0x12c>)
 800e8ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e8cc:	78fb      	ldrb	r3, [r7, #3]
 800e8ce:	b2db      	uxtb	r3, r3
 800e8d0:	005b      	lsls	r3, r3, #1
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e8d6:	78fb      	ldrb	r3, [r7, #3]
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8de:	2b80      	cmp	r3, #128	; 0x80
 800e8e0:	d0ef      	beq.n	800e8c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e8e2:	4b26      	ldr	r3, [pc, #152]	; (800e97c <xPortStartScheduler+0x12c>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f1c3 0307 	rsb	r3, r3, #7
 800e8ea:	2b04      	cmp	r3, #4
 800e8ec:	d009      	beq.n	800e902 <xPortStartScheduler+0xb2>
 800e8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f2:	f383 8811 	msr	BASEPRI, r3
 800e8f6:	f3bf 8f6f 	isb	sy
 800e8fa:	f3bf 8f4f 	dsb	sy
 800e8fe:	60bb      	str	r3, [r7, #8]
 800e900:	e7fe      	b.n	800e900 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e902:	4b1e      	ldr	r3, [pc, #120]	; (800e97c <xPortStartScheduler+0x12c>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	021b      	lsls	r3, r3, #8
 800e908:	4a1c      	ldr	r2, [pc, #112]	; (800e97c <xPortStartScheduler+0x12c>)
 800e90a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e90c:	4b1b      	ldr	r3, [pc, #108]	; (800e97c <xPortStartScheduler+0x12c>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e914:	4a19      	ldr	r2, [pc, #100]	; (800e97c <xPortStartScheduler+0x12c>)
 800e916:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	b2da      	uxtb	r2, r3
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e920:	4b17      	ldr	r3, [pc, #92]	; (800e980 <xPortStartScheduler+0x130>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4a16      	ldr	r2, [pc, #88]	; (800e980 <xPortStartScheduler+0x130>)
 800e926:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e92a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e92c:	4b14      	ldr	r3, [pc, #80]	; (800e980 <xPortStartScheduler+0x130>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a13      	ldr	r2, [pc, #76]	; (800e980 <xPortStartScheduler+0x130>)
 800e932:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e936:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e938:	f000 f8d6 	bl	800eae8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e93c:	4b11      	ldr	r3, [pc, #68]	; (800e984 <xPortStartScheduler+0x134>)
 800e93e:	2200      	movs	r2, #0
 800e940:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e942:	f000 f8f5 	bl	800eb30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e946:	4b10      	ldr	r3, [pc, #64]	; (800e988 <xPortStartScheduler+0x138>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a0f      	ldr	r2, [pc, #60]	; (800e988 <xPortStartScheduler+0x138>)
 800e94c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e950:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e952:	f7ff ff69 	bl	800e828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e956:	f7fe ff27 	bl	800d7a8 <vTaskSwitchContext>
	prvTaskExitError();
 800e95a:	f7ff ff23 	bl	800e7a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e95e:	2300      	movs	r3, #0
}
 800e960:	4618      	mov	r0, r3
 800e962:	3718      	adds	r7, #24
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	e000ed00 	.word	0xe000ed00
 800e96c:	410fc271 	.word	0x410fc271
 800e970:	410fc270 	.word	0x410fc270
 800e974:	e000e400 	.word	0xe000e400
 800e978:	20001d28 	.word	0x20001d28
 800e97c:	20001d2c 	.word	0x20001d2c
 800e980:	e000ed20 	.word	0xe000ed20
 800e984:	20000028 	.word	0x20000028
 800e988:	e000ef34 	.word	0xe000ef34

0800e98c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e996:	f383 8811 	msr	BASEPRI, r3
 800e99a:	f3bf 8f6f 	isb	sy
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e9a4:	4b0e      	ldr	r3, [pc, #56]	; (800e9e0 <vPortEnterCritical+0x54>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	4a0d      	ldr	r2, [pc, #52]	; (800e9e0 <vPortEnterCritical+0x54>)
 800e9ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e9ae:	4b0c      	ldr	r3, [pc, #48]	; (800e9e0 <vPortEnterCritical+0x54>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d10e      	bne.n	800e9d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e9b6:	4b0b      	ldr	r3, [pc, #44]	; (800e9e4 <vPortEnterCritical+0x58>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d009      	beq.n	800e9d4 <vPortEnterCritical+0x48>
 800e9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c4:	f383 8811 	msr	BASEPRI, r3
 800e9c8:	f3bf 8f6f 	isb	sy
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	603b      	str	r3, [r7, #0]
 800e9d2:	e7fe      	b.n	800e9d2 <vPortEnterCritical+0x46>
	}
}
 800e9d4:	bf00      	nop
 800e9d6:	370c      	adds	r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr
 800e9e0:	20000028 	.word	0x20000028
 800e9e4:	e000ed04 	.word	0xe000ed04

0800e9e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e9ee:	4b11      	ldr	r3, [pc, #68]	; (800ea34 <vPortExitCritical+0x4c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d109      	bne.n	800ea0a <vPortExitCritical+0x22>
 800e9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9fa:	f383 8811 	msr	BASEPRI, r3
 800e9fe:	f3bf 8f6f 	isb	sy
 800ea02:	f3bf 8f4f 	dsb	sy
 800ea06:	607b      	str	r3, [r7, #4]
 800ea08:	e7fe      	b.n	800ea08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ea0a:	4b0a      	ldr	r3, [pc, #40]	; (800ea34 <vPortExitCritical+0x4c>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	3b01      	subs	r3, #1
 800ea10:	4a08      	ldr	r2, [pc, #32]	; (800ea34 <vPortExitCritical+0x4c>)
 800ea12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ea14:	4b07      	ldr	r3, [pc, #28]	; (800ea34 <vPortExitCritical+0x4c>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d104      	bne.n	800ea26 <vPortExitCritical+0x3e>
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ea26:	bf00      	nop
 800ea28:	370c      	adds	r7, #12
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop
 800ea34:	20000028 	.word	0x20000028
	...

0800ea40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ea40:	f3ef 8009 	mrs	r0, PSP
 800ea44:	f3bf 8f6f 	isb	sy
 800ea48:	4b15      	ldr	r3, [pc, #84]	; (800eaa0 <pxCurrentTCBConst>)
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	f01e 0f10 	tst.w	lr, #16
 800ea50:	bf08      	it	eq
 800ea52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ea56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea5a:	6010      	str	r0, [r2, #0]
 800ea5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea64:	f380 8811 	msr	BASEPRI, r0
 800ea68:	f3bf 8f4f 	dsb	sy
 800ea6c:	f3bf 8f6f 	isb	sy
 800ea70:	f7fe fe9a 	bl	800d7a8 <vTaskSwitchContext>
 800ea74:	f04f 0000 	mov.w	r0, #0
 800ea78:	f380 8811 	msr	BASEPRI, r0
 800ea7c:	bc09      	pop	{r0, r3}
 800ea7e:	6819      	ldr	r1, [r3, #0]
 800ea80:	6808      	ldr	r0, [r1, #0]
 800ea82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea86:	f01e 0f10 	tst.w	lr, #16
 800ea8a:	bf08      	it	eq
 800ea8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea90:	f380 8809 	msr	PSP, r0
 800ea94:	f3bf 8f6f 	isb	sy
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	f3af 8000 	nop.w

0800eaa0 <pxCurrentTCBConst>:
 800eaa0:	200016f4 	.word	0x200016f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eaa4:	bf00      	nop
 800eaa6:	bf00      	nop

0800eaa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
	__asm volatile
 800eaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab2:	f383 8811 	msr	BASEPRI, r3
 800eab6:	f3bf 8f6f 	isb	sy
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eac0:	f7fe fdba 	bl	800d638 <xTaskIncrementTick>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d003      	beq.n	800ead2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eaca:	4b06      	ldr	r3, [pc, #24]	; (800eae4 <SysTick_Handler+0x3c>)
 800eacc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ead0:	601a      	str	r2, [r3, #0]
 800ead2:	2300      	movs	r3, #0
 800ead4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800eadc:	bf00      	nop
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}
 800eae4:	e000ed04 	.word	0xe000ed04

0800eae8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eae8:	b480      	push	{r7}
 800eaea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eaec:	4b0b      	ldr	r3, [pc, #44]	; (800eb1c <vPortSetupTimerInterrupt+0x34>)
 800eaee:	2200      	movs	r2, #0
 800eaf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eaf2:	4b0b      	ldr	r3, [pc, #44]	; (800eb20 <vPortSetupTimerInterrupt+0x38>)
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800eaf8:	4b0a      	ldr	r3, [pc, #40]	; (800eb24 <vPortSetupTimerInterrupt+0x3c>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4a0a      	ldr	r2, [pc, #40]	; (800eb28 <vPortSetupTimerInterrupt+0x40>)
 800eafe:	fba2 2303 	umull	r2, r3, r2, r3
 800eb02:	099b      	lsrs	r3, r3, #6
 800eb04:	4a09      	ldr	r2, [pc, #36]	; (800eb2c <vPortSetupTimerInterrupt+0x44>)
 800eb06:	3b01      	subs	r3, #1
 800eb08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eb0a:	4b04      	ldr	r3, [pc, #16]	; (800eb1c <vPortSetupTimerInterrupt+0x34>)
 800eb0c:	2207      	movs	r2, #7
 800eb0e:	601a      	str	r2, [r3, #0]
}
 800eb10:	bf00      	nop
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr
 800eb1a:	bf00      	nop
 800eb1c:	e000e010 	.word	0xe000e010
 800eb20:	e000e018 	.word	0xe000e018
 800eb24:	20000010 	.word	0x20000010
 800eb28:	10624dd3 	.word	0x10624dd3
 800eb2c:	e000e014 	.word	0xe000e014

0800eb30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800eb30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eb40 <vPortEnableVFP+0x10>
 800eb34:	6801      	ldr	r1, [r0, #0]
 800eb36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eb3a:	6001      	str	r1, [r0, #0]
 800eb3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eb3e:	bf00      	nop
 800eb40:	e000ed88 	.word	0xe000ed88

0800eb44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eb44:	b480      	push	{r7}
 800eb46:	b085      	sub	sp, #20
 800eb48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eb4a:	f3ef 8305 	mrs	r3, IPSR
 800eb4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2b0f      	cmp	r3, #15
 800eb54:	d913      	bls.n	800eb7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eb56:	4a16      	ldr	r2, [pc, #88]	; (800ebb0 <vPortValidateInterruptPriority+0x6c>)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb60:	4b14      	ldr	r3, [pc, #80]	; (800ebb4 <vPortValidateInterruptPriority+0x70>)
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	7afa      	ldrb	r2, [r7, #11]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d209      	bcs.n	800eb7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800eb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb6e:	f383 8811 	msr	BASEPRI, r3
 800eb72:	f3bf 8f6f 	isb	sy
 800eb76:	f3bf 8f4f 	dsb	sy
 800eb7a:	607b      	str	r3, [r7, #4]
 800eb7c:	e7fe      	b.n	800eb7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb7e:	4b0e      	ldr	r3, [pc, #56]	; (800ebb8 <vPortValidateInterruptPriority+0x74>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb86:	4b0d      	ldr	r3, [pc, #52]	; (800ebbc <vPortValidateInterruptPriority+0x78>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d909      	bls.n	800eba2 <vPortValidateInterruptPriority+0x5e>
 800eb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb92:	f383 8811 	msr	BASEPRI, r3
 800eb96:	f3bf 8f6f 	isb	sy
 800eb9a:	f3bf 8f4f 	dsb	sy
 800eb9e:	603b      	str	r3, [r7, #0]
 800eba0:	e7fe      	b.n	800eba0 <vPortValidateInterruptPriority+0x5c>
	}
 800eba2:	bf00      	nop
 800eba4:	3714      	adds	r7, #20
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	e000e3f0 	.word	0xe000e3f0
 800ebb4:	20001d28 	.word	0x20001d28
 800ebb8:	e000ed0c 	.word	0xe000ed0c
 800ebbc:	20001d2c 	.word	0x20001d2c

0800ebc0 <__errno>:
 800ebc0:	4b01      	ldr	r3, [pc, #4]	; (800ebc8 <__errno+0x8>)
 800ebc2:	6818      	ldr	r0, [r3, #0]
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop
 800ebc8:	2000002c 	.word	0x2000002c

0800ebcc <__libc_init_array>:
 800ebcc:	b570      	push	{r4, r5, r6, lr}
 800ebce:	4e0d      	ldr	r6, [pc, #52]	; (800ec04 <__libc_init_array+0x38>)
 800ebd0:	4c0d      	ldr	r4, [pc, #52]	; (800ec08 <__libc_init_array+0x3c>)
 800ebd2:	1ba4      	subs	r4, r4, r6
 800ebd4:	10a4      	asrs	r4, r4, #2
 800ebd6:	2500      	movs	r5, #0
 800ebd8:	42a5      	cmp	r5, r4
 800ebda:	d109      	bne.n	800ebf0 <__libc_init_array+0x24>
 800ebdc:	4e0b      	ldr	r6, [pc, #44]	; (800ec0c <__libc_init_array+0x40>)
 800ebde:	4c0c      	ldr	r4, [pc, #48]	; (800ec10 <__libc_init_array+0x44>)
 800ebe0:	f005 f888 	bl	8013cf4 <_init>
 800ebe4:	1ba4      	subs	r4, r4, r6
 800ebe6:	10a4      	asrs	r4, r4, #2
 800ebe8:	2500      	movs	r5, #0
 800ebea:	42a5      	cmp	r5, r4
 800ebec:	d105      	bne.n	800ebfa <__libc_init_array+0x2e>
 800ebee:	bd70      	pop	{r4, r5, r6, pc}
 800ebf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ebf4:	4798      	blx	r3
 800ebf6:	3501      	adds	r5, #1
 800ebf8:	e7ee      	b.n	800ebd8 <__libc_init_array+0xc>
 800ebfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ebfe:	4798      	blx	r3
 800ec00:	3501      	adds	r5, #1
 800ec02:	e7f2      	b.n	800ebea <__libc_init_array+0x1e>
 800ec04:	08015490 	.word	0x08015490
 800ec08:	08015490 	.word	0x08015490
 800ec0c:	08015490 	.word	0x08015490
 800ec10:	08015494 	.word	0x08015494

0800ec14 <__locale_ctype_ptr_l>:
 800ec14:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ec18:	4770      	bx	lr
	...

0800ec1c <__locale_ctype_ptr>:
 800ec1c:	4b04      	ldr	r3, [pc, #16]	; (800ec30 <__locale_ctype_ptr+0x14>)
 800ec1e:	4a05      	ldr	r2, [pc, #20]	; (800ec34 <__locale_ctype_ptr+0x18>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	6a1b      	ldr	r3, [r3, #32]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	bf08      	it	eq
 800ec28:	4613      	moveq	r3, r2
 800ec2a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800ec2e:	4770      	bx	lr
 800ec30:	2000002c 	.word	0x2000002c
 800ec34:	20000090 	.word	0x20000090

0800ec38 <malloc>:
 800ec38:	4b02      	ldr	r3, [pc, #8]	; (800ec44 <malloc+0xc>)
 800ec3a:	4601      	mov	r1, r0
 800ec3c:	6818      	ldr	r0, [r3, #0]
 800ec3e:	f000 b87f 	b.w	800ed40 <_malloc_r>
 800ec42:	bf00      	nop
 800ec44:	2000002c 	.word	0x2000002c

0800ec48 <free>:
 800ec48:	4b02      	ldr	r3, [pc, #8]	; (800ec54 <free+0xc>)
 800ec4a:	4601      	mov	r1, r0
 800ec4c:	6818      	ldr	r0, [r3, #0]
 800ec4e:	f000 b829 	b.w	800eca4 <_free_r>
 800ec52:	bf00      	nop
 800ec54:	2000002c 	.word	0x2000002c

0800ec58 <__ascii_mbtowc>:
 800ec58:	b082      	sub	sp, #8
 800ec5a:	b901      	cbnz	r1, 800ec5e <__ascii_mbtowc+0x6>
 800ec5c:	a901      	add	r1, sp, #4
 800ec5e:	b142      	cbz	r2, 800ec72 <__ascii_mbtowc+0x1a>
 800ec60:	b14b      	cbz	r3, 800ec76 <__ascii_mbtowc+0x1e>
 800ec62:	7813      	ldrb	r3, [r2, #0]
 800ec64:	600b      	str	r3, [r1, #0]
 800ec66:	7812      	ldrb	r2, [r2, #0]
 800ec68:	1c10      	adds	r0, r2, #0
 800ec6a:	bf18      	it	ne
 800ec6c:	2001      	movne	r0, #1
 800ec6e:	b002      	add	sp, #8
 800ec70:	4770      	bx	lr
 800ec72:	4610      	mov	r0, r2
 800ec74:	e7fb      	b.n	800ec6e <__ascii_mbtowc+0x16>
 800ec76:	f06f 0001 	mvn.w	r0, #1
 800ec7a:	e7f8      	b.n	800ec6e <__ascii_mbtowc+0x16>

0800ec7c <memcpy>:
 800ec7c:	b510      	push	{r4, lr}
 800ec7e:	1e43      	subs	r3, r0, #1
 800ec80:	440a      	add	r2, r1
 800ec82:	4291      	cmp	r1, r2
 800ec84:	d100      	bne.n	800ec88 <memcpy+0xc>
 800ec86:	bd10      	pop	{r4, pc}
 800ec88:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec90:	e7f7      	b.n	800ec82 <memcpy+0x6>

0800ec92 <memset>:
 800ec92:	4402      	add	r2, r0
 800ec94:	4603      	mov	r3, r0
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d100      	bne.n	800ec9c <memset+0xa>
 800ec9a:	4770      	bx	lr
 800ec9c:	f803 1b01 	strb.w	r1, [r3], #1
 800eca0:	e7f9      	b.n	800ec96 <memset+0x4>
	...

0800eca4 <_free_r>:
 800eca4:	b538      	push	{r3, r4, r5, lr}
 800eca6:	4605      	mov	r5, r0
 800eca8:	2900      	cmp	r1, #0
 800ecaa:	d045      	beq.n	800ed38 <_free_r+0x94>
 800ecac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecb0:	1f0c      	subs	r4, r1, #4
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	bfb8      	it	lt
 800ecb6:	18e4      	addlt	r4, r4, r3
 800ecb8:	f7f4 f986 	bl	8002fc8 <__malloc_lock>
 800ecbc:	4a1f      	ldr	r2, [pc, #124]	; (800ed3c <_free_r+0x98>)
 800ecbe:	6813      	ldr	r3, [r2, #0]
 800ecc0:	4610      	mov	r0, r2
 800ecc2:	b933      	cbnz	r3, 800ecd2 <_free_r+0x2e>
 800ecc4:	6063      	str	r3, [r4, #4]
 800ecc6:	6014      	str	r4, [r2, #0]
 800ecc8:	4628      	mov	r0, r5
 800ecca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecce:	f7f4 b9a3 	b.w	8003018 <__malloc_unlock>
 800ecd2:	42a3      	cmp	r3, r4
 800ecd4:	d90c      	bls.n	800ecf0 <_free_r+0x4c>
 800ecd6:	6821      	ldr	r1, [r4, #0]
 800ecd8:	1862      	adds	r2, r4, r1
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	bf04      	itt	eq
 800ecde:	681a      	ldreq	r2, [r3, #0]
 800ece0:	685b      	ldreq	r3, [r3, #4]
 800ece2:	6063      	str	r3, [r4, #4]
 800ece4:	bf04      	itt	eq
 800ece6:	1852      	addeq	r2, r2, r1
 800ece8:	6022      	streq	r2, [r4, #0]
 800ecea:	6004      	str	r4, [r0, #0]
 800ecec:	e7ec      	b.n	800ecc8 <_free_r+0x24>
 800ecee:	4613      	mov	r3, r2
 800ecf0:	685a      	ldr	r2, [r3, #4]
 800ecf2:	b10a      	cbz	r2, 800ecf8 <_free_r+0x54>
 800ecf4:	42a2      	cmp	r2, r4
 800ecf6:	d9fa      	bls.n	800ecee <_free_r+0x4a>
 800ecf8:	6819      	ldr	r1, [r3, #0]
 800ecfa:	1858      	adds	r0, r3, r1
 800ecfc:	42a0      	cmp	r0, r4
 800ecfe:	d10b      	bne.n	800ed18 <_free_r+0x74>
 800ed00:	6820      	ldr	r0, [r4, #0]
 800ed02:	4401      	add	r1, r0
 800ed04:	1858      	adds	r0, r3, r1
 800ed06:	4282      	cmp	r2, r0
 800ed08:	6019      	str	r1, [r3, #0]
 800ed0a:	d1dd      	bne.n	800ecc8 <_free_r+0x24>
 800ed0c:	6810      	ldr	r0, [r2, #0]
 800ed0e:	6852      	ldr	r2, [r2, #4]
 800ed10:	605a      	str	r2, [r3, #4]
 800ed12:	4401      	add	r1, r0
 800ed14:	6019      	str	r1, [r3, #0]
 800ed16:	e7d7      	b.n	800ecc8 <_free_r+0x24>
 800ed18:	d902      	bls.n	800ed20 <_free_r+0x7c>
 800ed1a:	230c      	movs	r3, #12
 800ed1c:	602b      	str	r3, [r5, #0]
 800ed1e:	e7d3      	b.n	800ecc8 <_free_r+0x24>
 800ed20:	6820      	ldr	r0, [r4, #0]
 800ed22:	1821      	adds	r1, r4, r0
 800ed24:	428a      	cmp	r2, r1
 800ed26:	bf04      	itt	eq
 800ed28:	6811      	ldreq	r1, [r2, #0]
 800ed2a:	6852      	ldreq	r2, [r2, #4]
 800ed2c:	6062      	str	r2, [r4, #4]
 800ed2e:	bf04      	itt	eq
 800ed30:	1809      	addeq	r1, r1, r0
 800ed32:	6021      	streq	r1, [r4, #0]
 800ed34:	605c      	str	r4, [r3, #4]
 800ed36:	e7c7      	b.n	800ecc8 <_free_r+0x24>
 800ed38:	bd38      	pop	{r3, r4, r5, pc}
 800ed3a:	bf00      	nop
 800ed3c:	20001d30 	.word	0x20001d30

0800ed40 <_malloc_r>:
 800ed40:	b570      	push	{r4, r5, r6, lr}
 800ed42:	1ccd      	adds	r5, r1, #3
 800ed44:	f025 0503 	bic.w	r5, r5, #3
 800ed48:	3508      	adds	r5, #8
 800ed4a:	2d0c      	cmp	r5, #12
 800ed4c:	bf38      	it	cc
 800ed4e:	250c      	movcc	r5, #12
 800ed50:	2d00      	cmp	r5, #0
 800ed52:	4606      	mov	r6, r0
 800ed54:	db01      	blt.n	800ed5a <_malloc_r+0x1a>
 800ed56:	42a9      	cmp	r1, r5
 800ed58:	d903      	bls.n	800ed62 <_malloc_r+0x22>
 800ed5a:	230c      	movs	r3, #12
 800ed5c:	6033      	str	r3, [r6, #0]
 800ed5e:	2000      	movs	r0, #0
 800ed60:	bd70      	pop	{r4, r5, r6, pc}
 800ed62:	f7f4 f931 	bl	8002fc8 <__malloc_lock>
 800ed66:	4a21      	ldr	r2, [pc, #132]	; (800edec <_malloc_r+0xac>)
 800ed68:	6814      	ldr	r4, [r2, #0]
 800ed6a:	4621      	mov	r1, r4
 800ed6c:	b991      	cbnz	r1, 800ed94 <_malloc_r+0x54>
 800ed6e:	4c20      	ldr	r4, [pc, #128]	; (800edf0 <_malloc_r+0xb0>)
 800ed70:	6823      	ldr	r3, [r4, #0]
 800ed72:	b91b      	cbnz	r3, 800ed7c <_malloc_r+0x3c>
 800ed74:	4630      	mov	r0, r6
 800ed76:	f7f4 f8cb 	bl	8002f10 <_sbrk_r>
 800ed7a:	6020      	str	r0, [r4, #0]
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	4630      	mov	r0, r6
 800ed80:	f7f4 f8c6 	bl	8002f10 <_sbrk_r>
 800ed84:	1c43      	adds	r3, r0, #1
 800ed86:	d124      	bne.n	800edd2 <_malloc_r+0x92>
 800ed88:	230c      	movs	r3, #12
 800ed8a:	6033      	str	r3, [r6, #0]
 800ed8c:	4630      	mov	r0, r6
 800ed8e:	f7f4 f943 	bl	8003018 <__malloc_unlock>
 800ed92:	e7e4      	b.n	800ed5e <_malloc_r+0x1e>
 800ed94:	680b      	ldr	r3, [r1, #0]
 800ed96:	1b5b      	subs	r3, r3, r5
 800ed98:	d418      	bmi.n	800edcc <_malloc_r+0x8c>
 800ed9a:	2b0b      	cmp	r3, #11
 800ed9c:	d90f      	bls.n	800edbe <_malloc_r+0x7e>
 800ed9e:	600b      	str	r3, [r1, #0]
 800eda0:	50cd      	str	r5, [r1, r3]
 800eda2:	18cc      	adds	r4, r1, r3
 800eda4:	4630      	mov	r0, r6
 800eda6:	f7f4 f937 	bl	8003018 <__malloc_unlock>
 800edaa:	f104 000b 	add.w	r0, r4, #11
 800edae:	1d23      	adds	r3, r4, #4
 800edb0:	f020 0007 	bic.w	r0, r0, #7
 800edb4:	1ac3      	subs	r3, r0, r3
 800edb6:	d0d3      	beq.n	800ed60 <_malloc_r+0x20>
 800edb8:	425a      	negs	r2, r3
 800edba:	50e2      	str	r2, [r4, r3]
 800edbc:	e7d0      	b.n	800ed60 <_malloc_r+0x20>
 800edbe:	428c      	cmp	r4, r1
 800edc0:	684b      	ldr	r3, [r1, #4]
 800edc2:	bf16      	itet	ne
 800edc4:	6063      	strne	r3, [r4, #4]
 800edc6:	6013      	streq	r3, [r2, #0]
 800edc8:	460c      	movne	r4, r1
 800edca:	e7eb      	b.n	800eda4 <_malloc_r+0x64>
 800edcc:	460c      	mov	r4, r1
 800edce:	6849      	ldr	r1, [r1, #4]
 800edd0:	e7cc      	b.n	800ed6c <_malloc_r+0x2c>
 800edd2:	1cc4      	adds	r4, r0, #3
 800edd4:	f024 0403 	bic.w	r4, r4, #3
 800edd8:	42a0      	cmp	r0, r4
 800edda:	d005      	beq.n	800ede8 <_malloc_r+0xa8>
 800eddc:	1a21      	subs	r1, r4, r0
 800edde:	4630      	mov	r0, r6
 800ede0:	f7f4 f896 	bl	8002f10 <_sbrk_r>
 800ede4:	3001      	adds	r0, #1
 800ede6:	d0cf      	beq.n	800ed88 <_malloc_r+0x48>
 800ede8:	6025      	str	r5, [r4, #0]
 800edea:	e7db      	b.n	800eda4 <_malloc_r+0x64>
 800edec:	20001d30 	.word	0x20001d30
 800edf0:	20001d34 	.word	0x20001d34

0800edf4 <__cvt>:
 800edf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edf8:	ec55 4b10 	vmov	r4, r5, d0
 800edfc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800edfe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ee02:	2d00      	cmp	r5, #0
 800ee04:	460e      	mov	r6, r1
 800ee06:	4691      	mov	r9, r2
 800ee08:	4619      	mov	r1, r3
 800ee0a:	bfb8      	it	lt
 800ee0c:	4622      	movlt	r2, r4
 800ee0e:	462b      	mov	r3, r5
 800ee10:	f027 0720 	bic.w	r7, r7, #32
 800ee14:	bfbb      	ittet	lt
 800ee16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ee1a:	461d      	movlt	r5, r3
 800ee1c:	2300      	movge	r3, #0
 800ee1e:	232d      	movlt	r3, #45	; 0x2d
 800ee20:	bfb8      	it	lt
 800ee22:	4614      	movlt	r4, r2
 800ee24:	2f46      	cmp	r7, #70	; 0x46
 800ee26:	700b      	strb	r3, [r1, #0]
 800ee28:	d004      	beq.n	800ee34 <__cvt+0x40>
 800ee2a:	2f45      	cmp	r7, #69	; 0x45
 800ee2c:	d100      	bne.n	800ee30 <__cvt+0x3c>
 800ee2e:	3601      	adds	r6, #1
 800ee30:	2102      	movs	r1, #2
 800ee32:	e000      	b.n	800ee36 <__cvt+0x42>
 800ee34:	2103      	movs	r1, #3
 800ee36:	ab03      	add	r3, sp, #12
 800ee38:	9301      	str	r3, [sp, #4]
 800ee3a:	ab02      	add	r3, sp, #8
 800ee3c:	9300      	str	r3, [sp, #0]
 800ee3e:	4632      	mov	r2, r6
 800ee40:	4653      	mov	r3, sl
 800ee42:	ec45 4b10 	vmov	d0, r4, r5
 800ee46:	f001 fc6b 	bl	8010720 <_dtoa_r>
 800ee4a:	2f47      	cmp	r7, #71	; 0x47
 800ee4c:	4680      	mov	r8, r0
 800ee4e:	d102      	bne.n	800ee56 <__cvt+0x62>
 800ee50:	f019 0f01 	tst.w	r9, #1
 800ee54:	d026      	beq.n	800eea4 <__cvt+0xb0>
 800ee56:	2f46      	cmp	r7, #70	; 0x46
 800ee58:	eb08 0906 	add.w	r9, r8, r6
 800ee5c:	d111      	bne.n	800ee82 <__cvt+0x8e>
 800ee5e:	f898 3000 	ldrb.w	r3, [r8]
 800ee62:	2b30      	cmp	r3, #48	; 0x30
 800ee64:	d10a      	bne.n	800ee7c <__cvt+0x88>
 800ee66:	2200      	movs	r2, #0
 800ee68:	2300      	movs	r3, #0
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	4629      	mov	r1, r5
 800ee6e:	f7f1 fe5b 	bl	8000b28 <__aeabi_dcmpeq>
 800ee72:	b918      	cbnz	r0, 800ee7c <__cvt+0x88>
 800ee74:	f1c6 0601 	rsb	r6, r6, #1
 800ee78:	f8ca 6000 	str.w	r6, [sl]
 800ee7c:	f8da 3000 	ldr.w	r3, [sl]
 800ee80:	4499      	add	r9, r3
 800ee82:	2200      	movs	r2, #0
 800ee84:	2300      	movs	r3, #0
 800ee86:	4620      	mov	r0, r4
 800ee88:	4629      	mov	r1, r5
 800ee8a:	f7f1 fe4d 	bl	8000b28 <__aeabi_dcmpeq>
 800ee8e:	b938      	cbnz	r0, 800eea0 <__cvt+0xac>
 800ee90:	2230      	movs	r2, #48	; 0x30
 800ee92:	9b03      	ldr	r3, [sp, #12]
 800ee94:	454b      	cmp	r3, r9
 800ee96:	d205      	bcs.n	800eea4 <__cvt+0xb0>
 800ee98:	1c59      	adds	r1, r3, #1
 800ee9a:	9103      	str	r1, [sp, #12]
 800ee9c:	701a      	strb	r2, [r3, #0]
 800ee9e:	e7f8      	b.n	800ee92 <__cvt+0x9e>
 800eea0:	f8cd 900c 	str.w	r9, [sp, #12]
 800eea4:	9b03      	ldr	r3, [sp, #12]
 800eea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eea8:	eba3 0308 	sub.w	r3, r3, r8
 800eeac:	4640      	mov	r0, r8
 800eeae:	6013      	str	r3, [r2, #0]
 800eeb0:	b004      	add	sp, #16
 800eeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800eeb6 <__exponent>:
 800eeb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eeb8:	2900      	cmp	r1, #0
 800eeba:	4604      	mov	r4, r0
 800eebc:	bfba      	itte	lt
 800eebe:	4249      	neglt	r1, r1
 800eec0:	232d      	movlt	r3, #45	; 0x2d
 800eec2:	232b      	movge	r3, #43	; 0x2b
 800eec4:	2909      	cmp	r1, #9
 800eec6:	f804 2b02 	strb.w	r2, [r4], #2
 800eeca:	7043      	strb	r3, [r0, #1]
 800eecc:	dd20      	ble.n	800ef10 <__exponent+0x5a>
 800eece:	f10d 0307 	add.w	r3, sp, #7
 800eed2:	461f      	mov	r7, r3
 800eed4:	260a      	movs	r6, #10
 800eed6:	fb91 f5f6 	sdiv	r5, r1, r6
 800eeda:	fb06 1115 	mls	r1, r6, r5, r1
 800eede:	3130      	adds	r1, #48	; 0x30
 800eee0:	2d09      	cmp	r5, #9
 800eee2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eee6:	f103 32ff 	add.w	r2, r3, #4294967295
 800eeea:	4629      	mov	r1, r5
 800eeec:	dc09      	bgt.n	800ef02 <__exponent+0x4c>
 800eeee:	3130      	adds	r1, #48	; 0x30
 800eef0:	3b02      	subs	r3, #2
 800eef2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800eef6:	42bb      	cmp	r3, r7
 800eef8:	4622      	mov	r2, r4
 800eefa:	d304      	bcc.n	800ef06 <__exponent+0x50>
 800eefc:	1a10      	subs	r0, r2, r0
 800eefe:	b003      	add	sp, #12
 800ef00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef02:	4613      	mov	r3, r2
 800ef04:	e7e7      	b.n	800eed6 <__exponent+0x20>
 800ef06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef0a:	f804 2b01 	strb.w	r2, [r4], #1
 800ef0e:	e7f2      	b.n	800eef6 <__exponent+0x40>
 800ef10:	2330      	movs	r3, #48	; 0x30
 800ef12:	4419      	add	r1, r3
 800ef14:	7083      	strb	r3, [r0, #2]
 800ef16:	1d02      	adds	r2, r0, #4
 800ef18:	70c1      	strb	r1, [r0, #3]
 800ef1a:	e7ef      	b.n	800eefc <__exponent+0x46>

0800ef1c <_printf_float>:
 800ef1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef20:	b08d      	sub	sp, #52	; 0x34
 800ef22:	460c      	mov	r4, r1
 800ef24:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ef28:	4616      	mov	r6, r2
 800ef2a:	461f      	mov	r7, r3
 800ef2c:	4605      	mov	r5, r0
 800ef2e:	f002 fcd7 	bl	80118e0 <_localeconv_r>
 800ef32:	6803      	ldr	r3, [r0, #0]
 800ef34:	9304      	str	r3, [sp, #16]
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7f1 f974 	bl	8000224 <strlen>
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ef40:	f8d8 3000 	ldr.w	r3, [r8]
 800ef44:	9005      	str	r0, [sp, #20]
 800ef46:	3307      	adds	r3, #7
 800ef48:	f023 0307 	bic.w	r3, r3, #7
 800ef4c:	f103 0208 	add.w	r2, r3, #8
 800ef50:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ef54:	f8d4 b000 	ldr.w	fp, [r4]
 800ef58:	f8c8 2000 	str.w	r2, [r8]
 800ef5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef60:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ef64:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ef68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef6c:	9307      	str	r3, [sp, #28]
 800ef6e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef72:	f04f 32ff 	mov.w	r2, #4294967295
 800ef76:	4ba7      	ldr	r3, [pc, #668]	; (800f214 <_printf_float+0x2f8>)
 800ef78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef7c:	f7f1 fe06 	bl	8000b8c <__aeabi_dcmpun>
 800ef80:	bb70      	cbnz	r0, 800efe0 <_printf_float+0xc4>
 800ef82:	f04f 32ff 	mov.w	r2, #4294967295
 800ef86:	4ba3      	ldr	r3, [pc, #652]	; (800f214 <_printf_float+0x2f8>)
 800ef88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef8c:	f7f1 fde0 	bl	8000b50 <__aeabi_dcmple>
 800ef90:	bb30      	cbnz	r0, 800efe0 <_printf_float+0xc4>
 800ef92:	2200      	movs	r2, #0
 800ef94:	2300      	movs	r3, #0
 800ef96:	4640      	mov	r0, r8
 800ef98:	4649      	mov	r1, r9
 800ef9a:	f7f1 fdcf 	bl	8000b3c <__aeabi_dcmplt>
 800ef9e:	b110      	cbz	r0, 800efa6 <_printf_float+0x8a>
 800efa0:	232d      	movs	r3, #45	; 0x2d
 800efa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efa6:	4a9c      	ldr	r2, [pc, #624]	; (800f218 <_printf_float+0x2fc>)
 800efa8:	4b9c      	ldr	r3, [pc, #624]	; (800f21c <_printf_float+0x300>)
 800efaa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800efae:	bf8c      	ite	hi
 800efb0:	4690      	movhi	r8, r2
 800efb2:	4698      	movls	r8, r3
 800efb4:	2303      	movs	r3, #3
 800efb6:	f02b 0204 	bic.w	r2, fp, #4
 800efba:	6123      	str	r3, [r4, #16]
 800efbc:	6022      	str	r2, [r4, #0]
 800efbe:	f04f 0900 	mov.w	r9, #0
 800efc2:	9700      	str	r7, [sp, #0]
 800efc4:	4633      	mov	r3, r6
 800efc6:	aa0b      	add	r2, sp, #44	; 0x2c
 800efc8:	4621      	mov	r1, r4
 800efca:	4628      	mov	r0, r5
 800efcc:	f000 f9e6 	bl	800f39c <_printf_common>
 800efd0:	3001      	adds	r0, #1
 800efd2:	f040 808d 	bne.w	800f0f0 <_printf_float+0x1d4>
 800efd6:	f04f 30ff 	mov.w	r0, #4294967295
 800efda:	b00d      	add	sp, #52	; 0x34
 800efdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe0:	4642      	mov	r2, r8
 800efe2:	464b      	mov	r3, r9
 800efe4:	4640      	mov	r0, r8
 800efe6:	4649      	mov	r1, r9
 800efe8:	f7f1 fdd0 	bl	8000b8c <__aeabi_dcmpun>
 800efec:	b110      	cbz	r0, 800eff4 <_printf_float+0xd8>
 800efee:	4a8c      	ldr	r2, [pc, #560]	; (800f220 <_printf_float+0x304>)
 800eff0:	4b8c      	ldr	r3, [pc, #560]	; (800f224 <_printf_float+0x308>)
 800eff2:	e7da      	b.n	800efaa <_printf_float+0x8e>
 800eff4:	6861      	ldr	r1, [r4, #4]
 800eff6:	1c4b      	adds	r3, r1, #1
 800eff8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800effc:	a80a      	add	r0, sp, #40	; 0x28
 800effe:	d13e      	bne.n	800f07e <_printf_float+0x162>
 800f000:	2306      	movs	r3, #6
 800f002:	6063      	str	r3, [r4, #4]
 800f004:	2300      	movs	r3, #0
 800f006:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f00a:	ab09      	add	r3, sp, #36	; 0x24
 800f00c:	9300      	str	r3, [sp, #0]
 800f00e:	ec49 8b10 	vmov	d0, r8, r9
 800f012:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f016:	6022      	str	r2, [r4, #0]
 800f018:	f8cd a004 	str.w	sl, [sp, #4]
 800f01c:	6861      	ldr	r1, [r4, #4]
 800f01e:	4628      	mov	r0, r5
 800f020:	f7ff fee8 	bl	800edf4 <__cvt>
 800f024:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f028:	2b47      	cmp	r3, #71	; 0x47
 800f02a:	4680      	mov	r8, r0
 800f02c:	d109      	bne.n	800f042 <_printf_float+0x126>
 800f02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f030:	1cd8      	adds	r0, r3, #3
 800f032:	db02      	blt.n	800f03a <_printf_float+0x11e>
 800f034:	6862      	ldr	r2, [r4, #4]
 800f036:	4293      	cmp	r3, r2
 800f038:	dd47      	ble.n	800f0ca <_printf_float+0x1ae>
 800f03a:	f1aa 0a02 	sub.w	sl, sl, #2
 800f03e:	fa5f fa8a 	uxtb.w	sl, sl
 800f042:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f046:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f048:	d824      	bhi.n	800f094 <_printf_float+0x178>
 800f04a:	3901      	subs	r1, #1
 800f04c:	4652      	mov	r2, sl
 800f04e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f052:	9109      	str	r1, [sp, #36]	; 0x24
 800f054:	f7ff ff2f 	bl	800eeb6 <__exponent>
 800f058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f05a:	1813      	adds	r3, r2, r0
 800f05c:	2a01      	cmp	r2, #1
 800f05e:	4681      	mov	r9, r0
 800f060:	6123      	str	r3, [r4, #16]
 800f062:	dc02      	bgt.n	800f06a <_printf_float+0x14e>
 800f064:	6822      	ldr	r2, [r4, #0]
 800f066:	07d1      	lsls	r1, r2, #31
 800f068:	d501      	bpl.n	800f06e <_printf_float+0x152>
 800f06a:	3301      	adds	r3, #1
 800f06c:	6123      	str	r3, [r4, #16]
 800f06e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f072:	2b00      	cmp	r3, #0
 800f074:	d0a5      	beq.n	800efc2 <_printf_float+0xa6>
 800f076:	232d      	movs	r3, #45	; 0x2d
 800f078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f07c:	e7a1      	b.n	800efc2 <_printf_float+0xa6>
 800f07e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f082:	f000 8177 	beq.w	800f374 <_printf_float+0x458>
 800f086:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f08a:	d1bb      	bne.n	800f004 <_printf_float+0xe8>
 800f08c:	2900      	cmp	r1, #0
 800f08e:	d1b9      	bne.n	800f004 <_printf_float+0xe8>
 800f090:	2301      	movs	r3, #1
 800f092:	e7b6      	b.n	800f002 <_printf_float+0xe6>
 800f094:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f098:	d119      	bne.n	800f0ce <_printf_float+0x1b2>
 800f09a:	2900      	cmp	r1, #0
 800f09c:	6863      	ldr	r3, [r4, #4]
 800f09e:	dd0c      	ble.n	800f0ba <_printf_float+0x19e>
 800f0a0:	6121      	str	r1, [r4, #16]
 800f0a2:	b913      	cbnz	r3, 800f0aa <_printf_float+0x18e>
 800f0a4:	6822      	ldr	r2, [r4, #0]
 800f0a6:	07d2      	lsls	r2, r2, #31
 800f0a8:	d502      	bpl.n	800f0b0 <_printf_float+0x194>
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	440b      	add	r3, r1
 800f0ae:	6123      	str	r3, [r4, #16]
 800f0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0b2:	65a3      	str	r3, [r4, #88]	; 0x58
 800f0b4:	f04f 0900 	mov.w	r9, #0
 800f0b8:	e7d9      	b.n	800f06e <_printf_float+0x152>
 800f0ba:	b913      	cbnz	r3, 800f0c2 <_printf_float+0x1a6>
 800f0bc:	6822      	ldr	r2, [r4, #0]
 800f0be:	07d0      	lsls	r0, r2, #31
 800f0c0:	d501      	bpl.n	800f0c6 <_printf_float+0x1aa>
 800f0c2:	3302      	adds	r3, #2
 800f0c4:	e7f3      	b.n	800f0ae <_printf_float+0x192>
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	e7f1      	b.n	800f0ae <_printf_float+0x192>
 800f0ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f0ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	db05      	blt.n	800f0e2 <_printf_float+0x1c6>
 800f0d6:	6822      	ldr	r2, [r4, #0]
 800f0d8:	6123      	str	r3, [r4, #16]
 800f0da:	07d1      	lsls	r1, r2, #31
 800f0dc:	d5e8      	bpl.n	800f0b0 <_printf_float+0x194>
 800f0de:	3301      	adds	r3, #1
 800f0e0:	e7e5      	b.n	800f0ae <_printf_float+0x192>
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	bfd4      	ite	le
 800f0e6:	f1c3 0302 	rsble	r3, r3, #2
 800f0ea:	2301      	movgt	r3, #1
 800f0ec:	4413      	add	r3, r2
 800f0ee:	e7de      	b.n	800f0ae <_printf_float+0x192>
 800f0f0:	6823      	ldr	r3, [r4, #0]
 800f0f2:	055a      	lsls	r2, r3, #21
 800f0f4:	d407      	bmi.n	800f106 <_printf_float+0x1ea>
 800f0f6:	6923      	ldr	r3, [r4, #16]
 800f0f8:	4642      	mov	r2, r8
 800f0fa:	4631      	mov	r1, r6
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	47b8      	blx	r7
 800f100:	3001      	adds	r0, #1
 800f102:	d12b      	bne.n	800f15c <_printf_float+0x240>
 800f104:	e767      	b.n	800efd6 <_printf_float+0xba>
 800f106:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f10a:	f240 80dc 	bls.w	800f2c6 <_printf_float+0x3aa>
 800f10e:	2200      	movs	r2, #0
 800f110:	2300      	movs	r3, #0
 800f112:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f116:	f7f1 fd07 	bl	8000b28 <__aeabi_dcmpeq>
 800f11a:	2800      	cmp	r0, #0
 800f11c:	d033      	beq.n	800f186 <_printf_float+0x26a>
 800f11e:	2301      	movs	r3, #1
 800f120:	4a41      	ldr	r2, [pc, #260]	; (800f228 <_printf_float+0x30c>)
 800f122:	4631      	mov	r1, r6
 800f124:	4628      	mov	r0, r5
 800f126:	47b8      	blx	r7
 800f128:	3001      	adds	r0, #1
 800f12a:	f43f af54 	beq.w	800efd6 <_printf_float+0xba>
 800f12e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f132:	429a      	cmp	r2, r3
 800f134:	db02      	blt.n	800f13c <_printf_float+0x220>
 800f136:	6823      	ldr	r3, [r4, #0]
 800f138:	07d8      	lsls	r0, r3, #31
 800f13a:	d50f      	bpl.n	800f15c <_printf_float+0x240>
 800f13c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f140:	4631      	mov	r1, r6
 800f142:	4628      	mov	r0, r5
 800f144:	47b8      	blx	r7
 800f146:	3001      	adds	r0, #1
 800f148:	f43f af45 	beq.w	800efd6 <_printf_float+0xba>
 800f14c:	f04f 0800 	mov.w	r8, #0
 800f150:	f104 091a 	add.w	r9, r4, #26
 800f154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f156:	3b01      	subs	r3, #1
 800f158:	4543      	cmp	r3, r8
 800f15a:	dc09      	bgt.n	800f170 <_printf_float+0x254>
 800f15c:	6823      	ldr	r3, [r4, #0]
 800f15e:	079b      	lsls	r3, r3, #30
 800f160:	f100 8103 	bmi.w	800f36a <_printf_float+0x44e>
 800f164:	68e0      	ldr	r0, [r4, #12]
 800f166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f168:	4298      	cmp	r0, r3
 800f16a:	bfb8      	it	lt
 800f16c:	4618      	movlt	r0, r3
 800f16e:	e734      	b.n	800efda <_printf_float+0xbe>
 800f170:	2301      	movs	r3, #1
 800f172:	464a      	mov	r2, r9
 800f174:	4631      	mov	r1, r6
 800f176:	4628      	mov	r0, r5
 800f178:	47b8      	blx	r7
 800f17a:	3001      	adds	r0, #1
 800f17c:	f43f af2b 	beq.w	800efd6 <_printf_float+0xba>
 800f180:	f108 0801 	add.w	r8, r8, #1
 800f184:	e7e6      	b.n	800f154 <_printf_float+0x238>
 800f186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f188:	2b00      	cmp	r3, #0
 800f18a:	dc2b      	bgt.n	800f1e4 <_printf_float+0x2c8>
 800f18c:	2301      	movs	r3, #1
 800f18e:	4a26      	ldr	r2, [pc, #152]	; (800f228 <_printf_float+0x30c>)
 800f190:	4631      	mov	r1, r6
 800f192:	4628      	mov	r0, r5
 800f194:	47b8      	blx	r7
 800f196:	3001      	adds	r0, #1
 800f198:	f43f af1d 	beq.w	800efd6 <_printf_float+0xba>
 800f19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f19e:	b923      	cbnz	r3, 800f1aa <_printf_float+0x28e>
 800f1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1a2:	b913      	cbnz	r3, 800f1aa <_printf_float+0x28e>
 800f1a4:	6823      	ldr	r3, [r4, #0]
 800f1a6:	07d9      	lsls	r1, r3, #31
 800f1a8:	d5d8      	bpl.n	800f15c <_printf_float+0x240>
 800f1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1ae:	4631      	mov	r1, r6
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	47b8      	blx	r7
 800f1b4:	3001      	adds	r0, #1
 800f1b6:	f43f af0e 	beq.w	800efd6 <_printf_float+0xba>
 800f1ba:	f04f 0900 	mov.w	r9, #0
 800f1be:	f104 0a1a 	add.w	sl, r4, #26
 800f1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1c4:	425b      	negs	r3, r3
 800f1c6:	454b      	cmp	r3, r9
 800f1c8:	dc01      	bgt.n	800f1ce <_printf_float+0x2b2>
 800f1ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1cc:	e794      	b.n	800f0f8 <_printf_float+0x1dc>
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	4652      	mov	r2, sl
 800f1d2:	4631      	mov	r1, r6
 800f1d4:	4628      	mov	r0, r5
 800f1d6:	47b8      	blx	r7
 800f1d8:	3001      	adds	r0, #1
 800f1da:	f43f aefc 	beq.w	800efd6 <_printf_float+0xba>
 800f1de:	f109 0901 	add.w	r9, r9, #1
 800f1e2:	e7ee      	b.n	800f1c2 <_printf_float+0x2a6>
 800f1e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	bfa8      	it	ge
 800f1ec:	461a      	movge	r2, r3
 800f1ee:	2a00      	cmp	r2, #0
 800f1f0:	4691      	mov	r9, r2
 800f1f2:	dd07      	ble.n	800f204 <_printf_float+0x2e8>
 800f1f4:	4613      	mov	r3, r2
 800f1f6:	4631      	mov	r1, r6
 800f1f8:	4642      	mov	r2, r8
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	47b8      	blx	r7
 800f1fe:	3001      	adds	r0, #1
 800f200:	f43f aee9 	beq.w	800efd6 <_printf_float+0xba>
 800f204:	f104 031a 	add.w	r3, r4, #26
 800f208:	f04f 0b00 	mov.w	fp, #0
 800f20c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f210:	9306      	str	r3, [sp, #24]
 800f212:	e015      	b.n	800f240 <_printf_float+0x324>
 800f214:	7fefffff 	.word	0x7fefffff
 800f218:	08015186 	.word	0x08015186
 800f21c:	08015182 	.word	0x08015182
 800f220:	0801518e 	.word	0x0801518e
 800f224:	0801518a 	.word	0x0801518a
 800f228:	0801543b 	.word	0x0801543b
 800f22c:	2301      	movs	r3, #1
 800f22e:	9a06      	ldr	r2, [sp, #24]
 800f230:	4631      	mov	r1, r6
 800f232:	4628      	mov	r0, r5
 800f234:	47b8      	blx	r7
 800f236:	3001      	adds	r0, #1
 800f238:	f43f aecd 	beq.w	800efd6 <_printf_float+0xba>
 800f23c:	f10b 0b01 	add.w	fp, fp, #1
 800f240:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f244:	ebaa 0309 	sub.w	r3, sl, r9
 800f248:	455b      	cmp	r3, fp
 800f24a:	dcef      	bgt.n	800f22c <_printf_float+0x310>
 800f24c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f250:	429a      	cmp	r2, r3
 800f252:	44d0      	add	r8, sl
 800f254:	db15      	blt.n	800f282 <_printf_float+0x366>
 800f256:	6823      	ldr	r3, [r4, #0]
 800f258:	07da      	lsls	r2, r3, #31
 800f25a:	d412      	bmi.n	800f282 <_printf_float+0x366>
 800f25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f25e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f260:	eba3 020a 	sub.w	r2, r3, sl
 800f264:	eba3 0a01 	sub.w	sl, r3, r1
 800f268:	4592      	cmp	sl, r2
 800f26a:	bfa8      	it	ge
 800f26c:	4692      	movge	sl, r2
 800f26e:	f1ba 0f00 	cmp.w	sl, #0
 800f272:	dc0e      	bgt.n	800f292 <_printf_float+0x376>
 800f274:	f04f 0800 	mov.w	r8, #0
 800f278:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f27c:	f104 091a 	add.w	r9, r4, #26
 800f280:	e019      	b.n	800f2b6 <_printf_float+0x39a>
 800f282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f286:	4631      	mov	r1, r6
 800f288:	4628      	mov	r0, r5
 800f28a:	47b8      	blx	r7
 800f28c:	3001      	adds	r0, #1
 800f28e:	d1e5      	bne.n	800f25c <_printf_float+0x340>
 800f290:	e6a1      	b.n	800efd6 <_printf_float+0xba>
 800f292:	4653      	mov	r3, sl
 800f294:	4642      	mov	r2, r8
 800f296:	4631      	mov	r1, r6
 800f298:	4628      	mov	r0, r5
 800f29a:	47b8      	blx	r7
 800f29c:	3001      	adds	r0, #1
 800f29e:	d1e9      	bne.n	800f274 <_printf_float+0x358>
 800f2a0:	e699      	b.n	800efd6 <_printf_float+0xba>
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	464a      	mov	r2, r9
 800f2a6:	4631      	mov	r1, r6
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	47b8      	blx	r7
 800f2ac:	3001      	adds	r0, #1
 800f2ae:	f43f ae92 	beq.w	800efd6 <_printf_float+0xba>
 800f2b2:	f108 0801 	add.w	r8, r8, #1
 800f2b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f2ba:	1a9b      	subs	r3, r3, r2
 800f2bc:	eba3 030a 	sub.w	r3, r3, sl
 800f2c0:	4543      	cmp	r3, r8
 800f2c2:	dcee      	bgt.n	800f2a2 <_printf_float+0x386>
 800f2c4:	e74a      	b.n	800f15c <_printf_float+0x240>
 800f2c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2c8:	2a01      	cmp	r2, #1
 800f2ca:	dc01      	bgt.n	800f2d0 <_printf_float+0x3b4>
 800f2cc:	07db      	lsls	r3, r3, #31
 800f2ce:	d53a      	bpl.n	800f346 <_printf_float+0x42a>
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	4642      	mov	r2, r8
 800f2d4:	4631      	mov	r1, r6
 800f2d6:	4628      	mov	r0, r5
 800f2d8:	47b8      	blx	r7
 800f2da:	3001      	adds	r0, #1
 800f2dc:	f43f ae7b 	beq.w	800efd6 <_printf_float+0xba>
 800f2e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2e4:	4631      	mov	r1, r6
 800f2e6:	4628      	mov	r0, r5
 800f2e8:	47b8      	blx	r7
 800f2ea:	3001      	adds	r0, #1
 800f2ec:	f108 0801 	add.w	r8, r8, #1
 800f2f0:	f43f ae71 	beq.w	800efd6 <_printf_float+0xba>
 800f2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f103 3aff 	add.w	sl, r3, #4294967295
 800f2fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f300:	2300      	movs	r3, #0
 800f302:	f7f1 fc11 	bl	8000b28 <__aeabi_dcmpeq>
 800f306:	b9c8      	cbnz	r0, 800f33c <_printf_float+0x420>
 800f308:	4653      	mov	r3, sl
 800f30a:	4642      	mov	r2, r8
 800f30c:	4631      	mov	r1, r6
 800f30e:	4628      	mov	r0, r5
 800f310:	47b8      	blx	r7
 800f312:	3001      	adds	r0, #1
 800f314:	d10e      	bne.n	800f334 <_printf_float+0x418>
 800f316:	e65e      	b.n	800efd6 <_printf_float+0xba>
 800f318:	2301      	movs	r3, #1
 800f31a:	4652      	mov	r2, sl
 800f31c:	4631      	mov	r1, r6
 800f31e:	4628      	mov	r0, r5
 800f320:	47b8      	blx	r7
 800f322:	3001      	adds	r0, #1
 800f324:	f43f ae57 	beq.w	800efd6 <_printf_float+0xba>
 800f328:	f108 0801 	add.w	r8, r8, #1
 800f32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f32e:	3b01      	subs	r3, #1
 800f330:	4543      	cmp	r3, r8
 800f332:	dcf1      	bgt.n	800f318 <_printf_float+0x3fc>
 800f334:	464b      	mov	r3, r9
 800f336:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f33a:	e6de      	b.n	800f0fa <_printf_float+0x1de>
 800f33c:	f04f 0800 	mov.w	r8, #0
 800f340:	f104 0a1a 	add.w	sl, r4, #26
 800f344:	e7f2      	b.n	800f32c <_printf_float+0x410>
 800f346:	2301      	movs	r3, #1
 800f348:	e7df      	b.n	800f30a <_printf_float+0x3ee>
 800f34a:	2301      	movs	r3, #1
 800f34c:	464a      	mov	r2, r9
 800f34e:	4631      	mov	r1, r6
 800f350:	4628      	mov	r0, r5
 800f352:	47b8      	blx	r7
 800f354:	3001      	adds	r0, #1
 800f356:	f43f ae3e 	beq.w	800efd6 <_printf_float+0xba>
 800f35a:	f108 0801 	add.w	r8, r8, #1
 800f35e:	68e3      	ldr	r3, [r4, #12]
 800f360:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f362:	1a9b      	subs	r3, r3, r2
 800f364:	4543      	cmp	r3, r8
 800f366:	dcf0      	bgt.n	800f34a <_printf_float+0x42e>
 800f368:	e6fc      	b.n	800f164 <_printf_float+0x248>
 800f36a:	f04f 0800 	mov.w	r8, #0
 800f36e:	f104 0919 	add.w	r9, r4, #25
 800f372:	e7f4      	b.n	800f35e <_printf_float+0x442>
 800f374:	2900      	cmp	r1, #0
 800f376:	f43f ae8b 	beq.w	800f090 <_printf_float+0x174>
 800f37a:	2300      	movs	r3, #0
 800f37c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f380:	ab09      	add	r3, sp, #36	; 0x24
 800f382:	9300      	str	r3, [sp, #0]
 800f384:	ec49 8b10 	vmov	d0, r8, r9
 800f388:	6022      	str	r2, [r4, #0]
 800f38a:	f8cd a004 	str.w	sl, [sp, #4]
 800f38e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f392:	4628      	mov	r0, r5
 800f394:	f7ff fd2e 	bl	800edf4 <__cvt>
 800f398:	4680      	mov	r8, r0
 800f39a:	e648      	b.n	800f02e <_printf_float+0x112>

0800f39c <_printf_common>:
 800f39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a0:	4691      	mov	r9, r2
 800f3a2:	461f      	mov	r7, r3
 800f3a4:	688a      	ldr	r2, [r1, #8]
 800f3a6:	690b      	ldr	r3, [r1, #16]
 800f3a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	bfb8      	it	lt
 800f3b0:	4613      	movlt	r3, r2
 800f3b2:	f8c9 3000 	str.w	r3, [r9]
 800f3b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f3ba:	4606      	mov	r6, r0
 800f3bc:	460c      	mov	r4, r1
 800f3be:	b112      	cbz	r2, 800f3c6 <_printf_common+0x2a>
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	f8c9 3000 	str.w	r3, [r9]
 800f3c6:	6823      	ldr	r3, [r4, #0]
 800f3c8:	0699      	lsls	r1, r3, #26
 800f3ca:	bf42      	ittt	mi
 800f3cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f3d0:	3302      	addmi	r3, #2
 800f3d2:	f8c9 3000 	strmi.w	r3, [r9]
 800f3d6:	6825      	ldr	r5, [r4, #0]
 800f3d8:	f015 0506 	ands.w	r5, r5, #6
 800f3dc:	d107      	bne.n	800f3ee <_printf_common+0x52>
 800f3de:	f104 0a19 	add.w	sl, r4, #25
 800f3e2:	68e3      	ldr	r3, [r4, #12]
 800f3e4:	f8d9 2000 	ldr.w	r2, [r9]
 800f3e8:	1a9b      	subs	r3, r3, r2
 800f3ea:	42ab      	cmp	r3, r5
 800f3ec:	dc28      	bgt.n	800f440 <_printf_common+0xa4>
 800f3ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f3f2:	6822      	ldr	r2, [r4, #0]
 800f3f4:	3300      	adds	r3, #0
 800f3f6:	bf18      	it	ne
 800f3f8:	2301      	movne	r3, #1
 800f3fa:	0692      	lsls	r2, r2, #26
 800f3fc:	d42d      	bmi.n	800f45a <_printf_common+0xbe>
 800f3fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f402:	4639      	mov	r1, r7
 800f404:	4630      	mov	r0, r6
 800f406:	47c0      	blx	r8
 800f408:	3001      	adds	r0, #1
 800f40a:	d020      	beq.n	800f44e <_printf_common+0xb2>
 800f40c:	6823      	ldr	r3, [r4, #0]
 800f40e:	68e5      	ldr	r5, [r4, #12]
 800f410:	f8d9 2000 	ldr.w	r2, [r9]
 800f414:	f003 0306 	and.w	r3, r3, #6
 800f418:	2b04      	cmp	r3, #4
 800f41a:	bf08      	it	eq
 800f41c:	1aad      	subeq	r5, r5, r2
 800f41e:	68a3      	ldr	r3, [r4, #8]
 800f420:	6922      	ldr	r2, [r4, #16]
 800f422:	bf0c      	ite	eq
 800f424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f428:	2500      	movne	r5, #0
 800f42a:	4293      	cmp	r3, r2
 800f42c:	bfc4      	itt	gt
 800f42e:	1a9b      	subgt	r3, r3, r2
 800f430:	18ed      	addgt	r5, r5, r3
 800f432:	f04f 0900 	mov.w	r9, #0
 800f436:	341a      	adds	r4, #26
 800f438:	454d      	cmp	r5, r9
 800f43a:	d11a      	bne.n	800f472 <_printf_common+0xd6>
 800f43c:	2000      	movs	r0, #0
 800f43e:	e008      	b.n	800f452 <_printf_common+0xb6>
 800f440:	2301      	movs	r3, #1
 800f442:	4652      	mov	r2, sl
 800f444:	4639      	mov	r1, r7
 800f446:	4630      	mov	r0, r6
 800f448:	47c0      	blx	r8
 800f44a:	3001      	adds	r0, #1
 800f44c:	d103      	bne.n	800f456 <_printf_common+0xba>
 800f44e:	f04f 30ff 	mov.w	r0, #4294967295
 800f452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f456:	3501      	adds	r5, #1
 800f458:	e7c3      	b.n	800f3e2 <_printf_common+0x46>
 800f45a:	18e1      	adds	r1, r4, r3
 800f45c:	1c5a      	adds	r2, r3, #1
 800f45e:	2030      	movs	r0, #48	; 0x30
 800f460:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f464:	4422      	add	r2, r4
 800f466:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f46a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f46e:	3302      	adds	r3, #2
 800f470:	e7c5      	b.n	800f3fe <_printf_common+0x62>
 800f472:	2301      	movs	r3, #1
 800f474:	4622      	mov	r2, r4
 800f476:	4639      	mov	r1, r7
 800f478:	4630      	mov	r0, r6
 800f47a:	47c0      	blx	r8
 800f47c:	3001      	adds	r0, #1
 800f47e:	d0e6      	beq.n	800f44e <_printf_common+0xb2>
 800f480:	f109 0901 	add.w	r9, r9, #1
 800f484:	e7d8      	b.n	800f438 <_printf_common+0x9c>
	...

0800f488 <_printf_i>:
 800f488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f48c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f490:	460c      	mov	r4, r1
 800f492:	7e09      	ldrb	r1, [r1, #24]
 800f494:	b085      	sub	sp, #20
 800f496:	296e      	cmp	r1, #110	; 0x6e
 800f498:	4617      	mov	r7, r2
 800f49a:	4606      	mov	r6, r0
 800f49c:	4698      	mov	r8, r3
 800f49e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f4a0:	f000 80b3 	beq.w	800f60a <_printf_i+0x182>
 800f4a4:	d822      	bhi.n	800f4ec <_printf_i+0x64>
 800f4a6:	2963      	cmp	r1, #99	; 0x63
 800f4a8:	d036      	beq.n	800f518 <_printf_i+0x90>
 800f4aa:	d80a      	bhi.n	800f4c2 <_printf_i+0x3a>
 800f4ac:	2900      	cmp	r1, #0
 800f4ae:	f000 80b9 	beq.w	800f624 <_printf_i+0x19c>
 800f4b2:	2958      	cmp	r1, #88	; 0x58
 800f4b4:	f000 8083 	beq.w	800f5be <_printf_i+0x136>
 800f4b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f4c0:	e032      	b.n	800f528 <_printf_i+0xa0>
 800f4c2:	2964      	cmp	r1, #100	; 0x64
 800f4c4:	d001      	beq.n	800f4ca <_printf_i+0x42>
 800f4c6:	2969      	cmp	r1, #105	; 0x69
 800f4c8:	d1f6      	bne.n	800f4b8 <_printf_i+0x30>
 800f4ca:	6820      	ldr	r0, [r4, #0]
 800f4cc:	6813      	ldr	r3, [r2, #0]
 800f4ce:	0605      	lsls	r5, r0, #24
 800f4d0:	f103 0104 	add.w	r1, r3, #4
 800f4d4:	d52a      	bpl.n	800f52c <_printf_i+0xa4>
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	6011      	str	r1, [r2, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	da03      	bge.n	800f4e6 <_printf_i+0x5e>
 800f4de:	222d      	movs	r2, #45	; 0x2d
 800f4e0:	425b      	negs	r3, r3
 800f4e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f4e6:	486f      	ldr	r0, [pc, #444]	; (800f6a4 <_printf_i+0x21c>)
 800f4e8:	220a      	movs	r2, #10
 800f4ea:	e039      	b.n	800f560 <_printf_i+0xd8>
 800f4ec:	2973      	cmp	r1, #115	; 0x73
 800f4ee:	f000 809d 	beq.w	800f62c <_printf_i+0x1a4>
 800f4f2:	d808      	bhi.n	800f506 <_printf_i+0x7e>
 800f4f4:	296f      	cmp	r1, #111	; 0x6f
 800f4f6:	d020      	beq.n	800f53a <_printf_i+0xb2>
 800f4f8:	2970      	cmp	r1, #112	; 0x70
 800f4fa:	d1dd      	bne.n	800f4b8 <_printf_i+0x30>
 800f4fc:	6823      	ldr	r3, [r4, #0]
 800f4fe:	f043 0320 	orr.w	r3, r3, #32
 800f502:	6023      	str	r3, [r4, #0]
 800f504:	e003      	b.n	800f50e <_printf_i+0x86>
 800f506:	2975      	cmp	r1, #117	; 0x75
 800f508:	d017      	beq.n	800f53a <_printf_i+0xb2>
 800f50a:	2978      	cmp	r1, #120	; 0x78
 800f50c:	d1d4      	bne.n	800f4b8 <_printf_i+0x30>
 800f50e:	2378      	movs	r3, #120	; 0x78
 800f510:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f514:	4864      	ldr	r0, [pc, #400]	; (800f6a8 <_printf_i+0x220>)
 800f516:	e055      	b.n	800f5c4 <_printf_i+0x13c>
 800f518:	6813      	ldr	r3, [r2, #0]
 800f51a:	1d19      	adds	r1, r3, #4
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	6011      	str	r1, [r2, #0]
 800f520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f528:	2301      	movs	r3, #1
 800f52a:	e08c      	b.n	800f646 <_printf_i+0x1be>
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	6011      	str	r1, [r2, #0]
 800f530:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f534:	bf18      	it	ne
 800f536:	b21b      	sxthne	r3, r3
 800f538:	e7cf      	b.n	800f4da <_printf_i+0x52>
 800f53a:	6813      	ldr	r3, [r2, #0]
 800f53c:	6825      	ldr	r5, [r4, #0]
 800f53e:	1d18      	adds	r0, r3, #4
 800f540:	6010      	str	r0, [r2, #0]
 800f542:	0628      	lsls	r0, r5, #24
 800f544:	d501      	bpl.n	800f54a <_printf_i+0xc2>
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	e002      	b.n	800f550 <_printf_i+0xc8>
 800f54a:	0668      	lsls	r0, r5, #25
 800f54c:	d5fb      	bpl.n	800f546 <_printf_i+0xbe>
 800f54e:	881b      	ldrh	r3, [r3, #0]
 800f550:	4854      	ldr	r0, [pc, #336]	; (800f6a4 <_printf_i+0x21c>)
 800f552:	296f      	cmp	r1, #111	; 0x6f
 800f554:	bf14      	ite	ne
 800f556:	220a      	movne	r2, #10
 800f558:	2208      	moveq	r2, #8
 800f55a:	2100      	movs	r1, #0
 800f55c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f560:	6865      	ldr	r5, [r4, #4]
 800f562:	60a5      	str	r5, [r4, #8]
 800f564:	2d00      	cmp	r5, #0
 800f566:	f2c0 8095 	blt.w	800f694 <_printf_i+0x20c>
 800f56a:	6821      	ldr	r1, [r4, #0]
 800f56c:	f021 0104 	bic.w	r1, r1, #4
 800f570:	6021      	str	r1, [r4, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d13d      	bne.n	800f5f2 <_printf_i+0x16a>
 800f576:	2d00      	cmp	r5, #0
 800f578:	f040 808e 	bne.w	800f698 <_printf_i+0x210>
 800f57c:	4665      	mov	r5, ip
 800f57e:	2a08      	cmp	r2, #8
 800f580:	d10b      	bne.n	800f59a <_printf_i+0x112>
 800f582:	6823      	ldr	r3, [r4, #0]
 800f584:	07db      	lsls	r3, r3, #31
 800f586:	d508      	bpl.n	800f59a <_printf_i+0x112>
 800f588:	6923      	ldr	r3, [r4, #16]
 800f58a:	6862      	ldr	r2, [r4, #4]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	bfde      	ittt	le
 800f590:	2330      	movle	r3, #48	; 0x30
 800f592:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f596:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f59a:	ebac 0305 	sub.w	r3, ip, r5
 800f59e:	6123      	str	r3, [r4, #16]
 800f5a0:	f8cd 8000 	str.w	r8, [sp]
 800f5a4:	463b      	mov	r3, r7
 800f5a6:	aa03      	add	r2, sp, #12
 800f5a8:	4621      	mov	r1, r4
 800f5aa:	4630      	mov	r0, r6
 800f5ac:	f7ff fef6 	bl	800f39c <_printf_common>
 800f5b0:	3001      	adds	r0, #1
 800f5b2:	d14d      	bne.n	800f650 <_printf_i+0x1c8>
 800f5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b8:	b005      	add	sp, #20
 800f5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5be:	4839      	ldr	r0, [pc, #228]	; (800f6a4 <_printf_i+0x21c>)
 800f5c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f5c4:	6813      	ldr	r3, [r2, #0]
 800f5c6:	6821      	ldr	r1, [r4, #0]
 800f5c8:	1d1d      	adds	r5, r3, #4
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	6015      	str	r5, [r2, #0]
 800f5ce:	060a      	lsls	r2, r1, #24
 800f5d0:	d50b      	bpl.n	800f5ea <_printf_i+0x162>
 800f5d2:	07ca      	lsls	r2, r1, #31
 800f5d4:	bf44      	itt	mi
 800f5d6:	f041 0120 	orrmi.w	r1, r1, #32
 800f5da:	6021      	strmi	r1, [r4, #0]
 800f5dc:	b91b      	cbnz	r3, 800f5e6 <_printf_i+0x15e>
 800f5de:	6822      	ldr	r2, [r4, #0]
 800f5e0:	f022 0220 	bic.w	r2, r2, #32
 800f5e4:	6022      	str	r2, [r4, #0]
 800f5e6:	2210      	movs	r2, #16
 800f5e8:	e7b7      	b.n	800f55a <_printf_i+0xd2>
 800f5ea:	064d      	lsls	r5, r1, #25
 800f5ec:	bf48      	it	mi
 800f5ee:	b29b      	uxthmi	r3, r3
 800f5f0:	e7ef      	b.n	800f5d2 <_printf_i+0x14a>
 800f5f2:	4665      	mov	r5, ip
 800f5f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5f8:	fb02 3311 	mls	r3, r2, r1, r3
 800f5fc:	5cc3      	ldrb	r3, [r0, r3]
 800f5fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f602:	460b      	mov	r3, r1
 800f604:	2900      	cmp	r1, #0
 800f606:	d1f5      	bne.n	800f5f4 <_printf_i+0x16c>
 800f608:	e7b9      	b.n	800f57e <_printf_i+0xf6>
 800f60a:	6813      	ldr	r3, [r2, #0]
 800f60c:	6825      	ldr	r5, [r4, #0]
 800f60e:	6961      	ldr	r1, [r4, #20]
 800f610:	1d18      	adds	r0, r3, #4
 800f612:	6010      	str	r0, [r2, #0]
 800f614:	0628      	lsls	r0, r5, #24
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	d501      	bpl.n	800f61e <_printf_i+0x196>
 800f61a:	6019      	str	r1, [r3, #0]
 800f61c:	e002      	b.n	800f624 <_printf_i+0x19c>
 800f61e:	066a      	lsls	r2, r5, #25
 800f620:	d5fb      	bpl.n	800f61a <_printf_i+0x192>
 800f622:	8019      	strh	r1, [r3, #0]
 800f624:	2300      	movs	r3, #0
 800f626:	6123      	str	r3, [r4, #16]
 800f628:	4665      	mov	r5, ip
 800f62a:	e7b9      	b.n	800f5a0 <_printf_i+0x118>
 800f62c:	6813      	ldr	r3, [r2, #0]
 800f62e:	1d19      	adds	r1, r3, #4
 800f630:	6011      	str	r1, [r2, #0]
 800f632:	681d      	ldr	r5, [r3, #0]
 800f634:	6862      	ldr	r2, [r4, #4]
 800f636:	2100      	movs	r1, #0
 800f638:	4628      	mov	r0, r5
 800f63a:	f7f0 fe01 	bl	8000240 <memchr>
 800f63e:	b108      	cbz	r0, 800f644 <_printf_i+0x1bc>
 800f640:	1b40      	subs	r0, r0, r5
 800f642:	6060      	str	r0, [r4, #4]
 800f644:	6863      	ldr	r3, [r4, #4]
 800f646:	6123      	str	r3, [r4, #16]
 800f648:	2300      	movs	r3, #0
 800f64a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f64e:	e7a7      	b.n	800f5a0 <_printf_i+0x118>
 800f650:	6923      	ldr	r3, [r4, #16]
 800f652:	462a      	mov	r2, r5
 800f654:	4639      	mov	r1, r7
 800f656:	4630      	mov	r0, r6
 800f658:	47c0      	blx	r8
 800f65a:	3001      	adds	r0, #1
 800f65c:	d0aa      	beq.n	800f5b4 <_printf_i+0x12c>
 800f65e:	6823      	ldr	r3, [r4, #0]
 800f660:	079b      	lsls	r3, r3, #30
 800f662:	d413      	bmi.n	800f68c <_printf_i+0x204>
 800f664:	68e0      	ldr	r0, [r4, #12]
 800f666:	9b03      	ldr	r3, [sp, #12]
 800f668:	4298      	cmp	r0, r3
 800f66a:	bfb8      	it	lt
 800f66c:	4618      	movlt	r0, r3
 800f66e:	e7a3      	b.n	800f5b8 <_printf_i+0x130>
 800f670:	2301      	movs	r3, #1
 800f672:	464a      	mov	r2, r9
 800f674:	4639      	mov	r1, r7
 800f676:	4630      	mov	r0, r6
 800f678:	47c0      	blx	r8
 800f67a:	3001      	adds	r0, #1
 800f67c:	d09a      	beq.n	800f5b4 <_printf_i+0x12c>
 800f67e:	3501      	adds	r5, #1
 800f680:	68e3      	ldr	r3, [r4, #12]
 800f682:	9a03      	ldr	r2, [sp, #12]
 800f684:	1a9b      	subs	r3, r3, r2
 800f686:	42ab      	cmp	r3, r5
 800f688:	dcf2      	bgt.n	800f670 <_printf_i+0x1e8>
 800f68a:	e7eb      	b.n	800f664 <_printf_i+0x1dc>
 800f68c:	2500      	movs	r5, #0
 800f68e:	f104 0919 	add.w	r9, r4, #25
 800f692:	e7f5      	b.n	800f680 <_printf_i+0x1f8>
 800f694:	2b00      	cmp	r3, #0
 800f696:	d1ac      	bne.n	800f5f2 <_printf_i+0x16a>
 800f698:	7803      	ldrb	r3, [r0, #0]
 800f69a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f69e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6a2:	e76c      	b.n	800f57e <_printf_i+0xf6>
 800f6a4:	08015192 	.word	0x08015192
 800f6a8:	080151a3 	.word	0x080151a3

0800f6ac <realloc>:
 800f6ac:	4b02      	ldr	r3, [pc, #8]	; (800f6b8 <realloc+0xc>)
 800f6ae:	460a      	mov	r2, r1
 800f6b0:	4601      	mov	r1, r0
 800f6b2:	6818      	ldr	r0, [r3, #0]
 800f6b4:	f002 bd2f 	b.w	8012116 <_realloc_r>
 800f6b8:	2000002c 	.word	0x2000002c

0800f6bc <cleanup_glue>:
 800f6bc:	b538      	push	{r3, r4, r5, lr}
 800f6be:	460c      	mov	r4, r1
 800f6c0:	6809      	ldr	r1, [r1, #0]
 800f6c2:	4605      	mov	r5, r0
 800f6c4:	b109      	cbz	r1, 800f6ca <cleanup_glue+0xe>
 800f6c6:	f7ff fff9 	bl	800f6bc <cleanup_glue>
 800f6ca:	4621      	mov	r1, r4
 800f6cc:	4628      	mov	r0, r5
 800f6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6d2:	f7ff bae7 	b.w	800eca4 <_free_r>
	...

0800f6d8 <_reclaim_reent>:
 800f6d8:	4b2c      	ldr	r3, [pc, #176]	; (800f78c <_reclaim_reent+0xb4>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4283      	cmp	r3, r0
 800f6de:	b570      	push	{r4, r5, r6, lr}
 800f6e0:	4604      	mov	r4, r0
 800f6e2:	d051      	beq.n	800f788 <_reclaim_reent+0xb0>
 800f6e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f6e6:	b143      	cbz	r3, 800f6fa <_reclaim_reent+0x22>
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d14a      	bne.n	800f784 <_reclaim_reent+0xac>
 800f6ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6f0:	6819      	ldr	r1, [r3, #0]
 800f6f2:	b111      	cbz	r1, 800f6fa <_reclaim_reent+0x22>
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f7ff fad5 	bl	800eca4 <_free_r>
 800f6fa:	6961      	ldr	r1, [r4, #20]
 800f6fc:	b111      	cbz	r1, 800f704 <_reclaim_reent+0x2c>
 800f6fe:	4620      	mov	r0, r4
 800f700:	f7ff fad0 	bl	800eca4 <_free_r>
 800f704:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f706:	b111      	cbz	r1, 800f70e <_reclaim_reent+0x36>
 800f708:	4620      	mov	r0, r4
 800f70a:	f7ff facb 	bl	800eca4 <_free_r>
 800f70e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f710:	b111      	cbz	r1, 800f718 <_reclaim_reent+0x40>
 800f712:	4620      	mov	r0, r4
 800f714:	f7ff fac6 	bl	800eca4 <_free_r>
 800f718:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f71a:	b111      	cbz	r1, 800f722 <_reclaim_reent+0x4a>
 800f71c:	4620      	mov	r0, r4
 800f71e:	f7ff fac1 	bl	800eca4 <_free_r>
 800f722:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f724:	b111      	cbz	r1, 800f72c <_reclaim_reent+0x54>
 800f726:	4620      	mov	r0, r4
 800f728:	f7ff fabc 	bl	800eca4 <_free_r>
 800f72c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f72e:	b111      	cbz	r1, 800f736 <_reclaim_reent+0x5e>
 800f730:	4620      	mov	r0, r4
 800f732:	f7ff fab7 	bl	800eca4 <_free_r>
 800f736:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f738:	b111      	cbz	r1, 800f740 <_reclaim_reent+0x68>
 800f73a:	4620      	mov	r0, r4
 800f73c:	f7ff fab2 	bl	800eca4 <_free_r>
 800f740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f742:	b111      	cbz	r1, 800f74a <_reclaim_reent+0x72>
 800f744:	4620      	mov	r0, r4
 800f746:	f7ff faad 	bl	800eca4 <_free_r>
 800f74a:	69a3      	ldr	r3, [r4, #24]
 800f74c:	b1e3      	cbz	r3, 800f788 <_reclaim_reent+0xb0>
 800f74e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f750:	4620      	mov	r0, r4
 800f752:	4798      	blx	r3
 800f754:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f756:	b1b9      	cbz	r1, 800f788 <_reclaim_reent+0xb0>
 800f758:	4620      	mov	r0, r4
 800f75a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f75e:	f7ff bfad 	b.w	800f6bc <cleanup_glue>
 800f762:	5949      	ldr	r1, [r1, r5]
 800f764:	b941      	cbnz	r1, 800f778 <_reclaim_reent+0xa0>
 800f766:	3504      	adds	r5, #4
 800f768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f76a:	2d80      	cmp	r5, #128	; 0x80
 800f76c:	68d9      	ldr	r1, [r3, #12]
 800f76e:	d1f8      	bne.n	800f762 <_reclaim_reent+0x8a>
 800f770:	4620      	mov	r0, r4
 800f772:	f7ff fa97 	bl	800eca4 <_free_r>
 800f776:	e7ba      	b.n	800f6ee <_reclaim_reent+0x16>
 800f778:	680e      	ldr	r6, [r1, #0]
 800f77a:	4620      	mov	r0, r4
 800f77c:	f7ff fa92 	bl	800eca4 <_free_r>
 800f780:	4631      	mov	r1, r6
 800f782:	e7ef      	b.n	800f764 <_reclaim_reent+0x8c>
 800f784:	2500      	movs	r5, #0
 800f786:	e7ef      	b.n	800f768 <_reclaim_reent+0x90>
 800f788:	bd70      	pop	{r4, r5, r6, pc}
 800f78a:	bf00      	nop
 800f78c:	2000002c 	.word	0x2000002c

0800f790 <sniprintf>:
 800f790:	b40c      	push	{r2, r3}
 800f792:	b530      	push	{r4, r5, lr}
 800f794:	4b17      	ldr	r3, [pc, #92]	; (800f7f4 <sniprintf+0x64>)
 800f796:	1e0c      	subs	r4, r1, #0
 800f798:	b09d      	sub	sp, #116	; 0x74
 800f79a:	681d      	ldr	r5, [r3, #0]
 800f79c:	da08      	bge.n	800f7b0 <sniprintf+0x20>
 800f79e:	238b      	movs	r3, #139	; 0x8b
 800f7a0:	602b      	str	r3, [r5, #0]
 800f7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a6:	b01d      	add	sp, #116	; 0x74
 800f7a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7ac:	b002      	add	sp, #8
 800f7ae:	4770      	bx	lr
 800f7b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f7b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f7b8:	bf14      	ite	ne
 800f7ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f7be:	4623      	moveq	r3, r4
 800f7c0:	9304      	str	r3, [sp, #16]
 800f7c2:	9307      	str	r3, [sp, #28]
 800f7c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7c8:	9002      	str	r0, [sp, #8]
 800f7ca:	9006      	str	r0, [sp, #24]
 800f7cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f7d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f7d2:	ab21      	add	r3, sp, #132	; 0x84
 800f7d4:	a902      	add	r1, sp, #8
 800f7d6:	4628      	mov	r0, r5
 800f7d8:	9301      	str	r3, [sp, #4]
 800f7da:	f002 fd1d 	bl	8012218 <_svfiprintf_r>
 800f7de:	1c43      	adds	r3, r0, #1
 800f7e0:	bfbc      	itt	lt
 800f7e2:	238b      	movlt	r3, #139	; 0x8b
 800f7e4:	602b      	strlt	r3, [r5, #0]
 800f7e6:	2c00      	cmp	r4, #0
 800f7e8:	d0dd      	beq.n	800f7a6 <sniprintf+0x16>
 800f7ea:	9b02      	ldr	r3, [sp, #8]
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	701a      	strb	r2, [r3, #0]
 800f7f0:	e7d9      	b.n	800f7a6 <sniprintf+0x16>
 800f7f2:	bf00      	nop
 800f7f4:	2000002c 	.word	0x2000002c

0800f7f8 <siscanf>:
 800f7f8:	b40e      	push	{r1, r2, r3}
 800f7fa:	b530      	push	{r4, r5, lr}
 800f7fc:	b09c      	sub	sp, #112	; 0x70
 800f7fe:	ac1f      	add	r4, sp, #124	; 0x7c
 800f800:	f44f 7201 	mov.w	r2, #516	; 0x204
 800f804:	f854 5b04 	ldr.w	r5, [r4], #4
 800f808:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f80c:	9002      	str	r0, [sp, #8]
 800f80e:	9006      	str	r0, [sp, #24]
 800f810:	f7f0 fd08 	bl	8000224 <strlen>
 800f814:	4b0b      	ldr	r3, [pc, #44]	; (800f844 <siscanf+0x4c>)
 800f816:	9003      	str	r0, [sp, #12]
 800f818:	9007      	str	r0, [sp, #28]
 800f81a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f81c:	480a      	ldr	r0, [pc, #40]	; (800f848 <siscanf+0x50>)
 800f81e:	9401      	str	r4, [sp, #4]
 800f820:	2300      	movs	r3, #0
 800f822:	930f      	str	r3, [sp, #60]	; 0x3c
 800f824:	9314      	str	r3, [sp, #80]	; 0x50
 800f826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f82a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f82e:	462a      	mov	r2, r5
 800f830:	4623      	mov	r3, r4
 800f832:	a902      	add	r1, sp, #8
 800f834:	6800      	ldr	r0, [r0, #0]
 800f836:	f002 fe41 	bl	80124bc <__ssvfiscanf_r>
 800f83a:	b01c      	add	sp, #112	; 0x70
 800f83c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f840:	b003      	add	sp, #12
 800f842:	4770      	bx	lr
 800f844:	0800f84d 	.word	0x0800f84d
 800f848:	2000002c 	.word	0x2000002c

0800f84c <__seofread>:
 800f84c:	2000      	movs	r0, #0
 800f84e:	4770      	bx	lr

0800f850 <strcpy>:
 800f850:	4603      	mov	r3, r0
 800f852:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f856:	f803 2b01 	strb.w	r2, [r3], #1
 800f85a:	2a00      	cmp	r2, #0
 800f85c:	d1f9      	bne.n	800f852 <strcpy+0x2>
 800f85e:	4770      	bx	lr

0800f860 <strncmp>:
 800f860:	b510      	push	{r4, lr}
 800f862:	b16a      	cbz	r2, 800f880 <strncmp+0x20>
 800f864:	3901      	subs	r1, #1
 800f866:	1884      	adds	r4, r0, r2
 800f868:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f86c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f870:	4293      	cmp	r3, r2
 800f872:	d103      	bne.n	800f87c <strncmp+0x1c>
 800f874:	42a0      	cmp	r0, r4
 800f876:	d001      	beq.n	800f87c <strncmp+0x1c>
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d1f5      	bne.n	800f868 <strncmp+0x8>
 800f87c:	1a98      	subs	r0, r3, r2
 800f87e:	bd10      	pop	{r4, pc}
 800f880:	4610      	mov	r0, r2
 800f882:	e7fc      	b.n	800f87e <strncmp+0x1e>

0800f884 <sulp>:
 800f884:	b570      	push	{r4, r5, r6, lr}
 800f886:	4604      	mov	r4, r0
 800f888:	460d      	mov	r5, r1
 800f88a:	ec45 4b10 	vmov	d0, r4, r5
 800f88e:	4616      	mov	r6, r2
 800f890:	f002 fb00 	bl	8011e94 <__ulp>
 800f894:	ec51 0b10 	vmov	r0, r1, d0
 800f898:	b17e      	cbz	r6, 800f8ba <sulp+0x36>
 800f89a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f89e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	dd09      	ble.n	800f8ba <sulp+0x36>
 800f8a6:	051b      	lsls	r3, r3, #20
 800f8a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f8ac:	2400      	movs	r4, #0
 800f8ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f8b2:	4622      	mov	r2, r4
 800f8b4:	462b      	mov	r3, r5
 800f8b6:	f7f0 fecf 	bl	8000658 <__aeabi_dmul>
 800f8ba:	bd70      	pop	{r4, r5, r6, pc}
 800f8bc:	0000      	movs	r0, r0
	...

0800f8c0 <_strtod_l>:
 800f8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c4:	461f      	mov	r7, r3
 800f8c6:	b0a1      	sub	sp, #132	; 0x84
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	4681      	mov	r9, r0
 800f8cc:	4638      	mov	r0, r7
 800f8ce:	460e      	mov	r6, r1
 800f8d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800f8d2:	931c      	str	r3, [sp, #112]	; 0x70
 800f8d4:	f002 f802 	bl	80118dc <__localeconv_l>
 800f8d8:	4680      	mov	r8, r0
 800f8da:	6800      	ldr	r0, [r0, #0]
 800f8dc:	f7f0 fca2 	bl	8000224 <strlen>
 800f8e0:	f04f 0a00 	mov.w	sl, #0
 800f8e4:	4604      	mov	r4, r0
 800f8e6:	f04f 0b00 	mov.w	fp, #0
 800f8ea:	961b      	str	r6, [sp, #108]	; 0x6c
 800f8ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f8ee:	781a      	ldrb	r2, [r3, #0]
 800f8f0:	2a0d      	cmp	r2, #13
 800f8f2:	d832      	bhi.n	800f95a <_strtod_l+0x9a>
 800f8f4:	2a09      	cmp	r2, #9
 800f8f6:	d236      	bcs.n	800f966 <_strtod_l+0xa6>
 800f8f8:	2a00      	cmp	r2, #0
 800f8fa:	d03e      	beq.n	800f97a <_strtod_l+0xba>
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	930d      	str	r3, [sp, #52]	; 0x34
 800f900:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f902:	782b      	ldrb	r3, [r5, #0]
 800f904:	2b30      	cmp	r3, #48	; 0x30
 800f906:	f040 80ac 	bne.w	800fa62 <_strtod_l+0x1a2>
 800f90a:	786b      	ldrb	r3, [r5, #1]
 800f90c:	2b58      	cmp	r3, #88	; 0x58
 800f90e:	d001      	beq.n	800f914 <_strtod_l+0x54>
 800f910:	2b78      	cmp	r3, #120	; 0x78
 800f912:	d167      	bne.n	800f9e4 <_strtod_l+0x124>
 800f914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f916:	9301      	str	r3, [sp, #4]
 800f918:	ab1c      	add	r3, sp, #112	; 0x70
 800f91a:	9300      	str	r3, [sp, #0]
 800f91c:	9702      	str	r7, [sp, #8]
 800f91e:	ab1d      	add	r3, sp, #116	; 0x74
 800f920:	4a88      	ldr	r2, [pc, #544]	; (800fb44 <_strtod_l+0x284>)
 800f922:	a91b      	add	r1, sp, #108	; 0x6c
 800f924:	4648      	mov	r0, r9
 800f926:	f001 fd02 	bl	801132e <__gethex>
 800f92a:	f010 0407 	ands.w	r4, r0, #7
 800f92e:	4606      	mov	r6, r0
 800f930:	d005      	beq.n	800f93e <_strtod_l+0x7e>
 800f932:	2c06      	cmp	r4, #6
 800f934:	d12b      	bne.n	800f98e <_strtod_l+0xce>
 800f936:	3501      	adds	r5, #1
 800f938:	2300      	movs	r3, #0
 800f93a:	951b      	str	r5, [sp, #108]	; 0x6c
 800f93c:	930d      	str	r3, [sp, #52]	; 0x34
 800f93e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f940:	2b00      	cmp	r3, #0
 800f942:	f040 859a 	bne.w	801047a <_strtod_l+0xbba>
 800f946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f948:	b1e3      	cbz	r3, 800f984 <_strtod_l+0xc4>
 800f94a:	4652      	mov	r2, sl
 800f94c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f950:	ec43 2b10 	vmov	d0, r2, r3
 800f954:	b021      	add	sp, #132	; 0x84
 800f956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f95a:	2a2b      	cmp	r2, #43	; 0x2b
 800f95c:	d015      	beq.n	800f98a <_strtod_l+0xca>
 800f95e:	2a2d      	cmp	r2, #45	; 0x2d
 800f960:	d004      	beq.n	800f96c <_strtod_l+0xac>
 800f962:	2a20      	cmp	r2, #32
 800f964:	d1ca      	bne.n	800f8fc <_strtod_l+0x3c>
 800f966:	3301      	adds	r3, #1
 800f968:	931b      	str	r3, [sp, #108]	; 0x6c
 800f96a:	e7bf      	b.n	800f8ec <_strtod_l+0x2c>
 800f96c:	2201      	movs	r2, #1
 800f96e:	920d      	str	r2, [sp, #52]	; 0x34
 800f970:	1c5a      	adds	r2, r3, #1
 800f972:	921b      	str	r2, [sp, #108]	; 0x6c
 800f974:	785b      	ldrb	r3, [r3, #1]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d1c2      	bne.n	800f900 <_strtod_l+0x40>
 800f97a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f97c:	961b      	str	r6, [sp, #108]	; 0x6c
 800f97e:	2b00      	cmp	r3, #0
 800f980:	f040 8579 	bne.w	8010476 <_strtod_l+0xbb6>
 800f984:	4652      	mov	r2, sl
 800f986:	465b      	mov	r3, fp
 800f988:	e7e2      	b.n	800f950 <_strtod_l+0x90>
 800f98a:	2200      	movs	r2, #0
 800f98c:	e7ef      	b.n	800f96e <_strtod_l+0xae>
 800f98e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f990:	b13a      	cbz	r2, 800f9a2 <_strtod_l+0xe2>
 800f992:	2135      	movs	r1, #53	; 0x35
 800f994:	a81e      	add	r0, sp, #120	; 0x78
 800f996:	f002 fb75 	bl	8012084 <__copybits>
 800f99a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f99c:	4648      	mov	r0, r9
 800f99e:	f001 ffe1 	bl	8011964 <_Bfree>
 800f9a2:	3c01      	subs	r4, #1
 800f9a4:	2c04      	cmp	r4, #4
 800f9a6:	d806      	bhi.n	800f9b6 <_strtod_l+0xf6>
 800f9a8:	e8df f004 	tbb	[pc, r4]
 800f9ac:	1714030a 	.word	0x1714030a
 800f9b0:	0a          	.byte	0x0a
 800f9b1:	00          	.byte	0x00
 800f9b2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800f9b6:	0730      	lsls	r0, r6, #28
 800f9b8:	d5c1      	bpl.n	800f93e <_strtod_l+0x7e>
 800f9ba:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f9be:	e7be      	b.n	800f93e <_strtod_l+0x7e>
 800f9c0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800f9c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f9c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f9ca:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f9ce:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f9d2:	e7f0      	b.n	800f9b6 <_strtod_l+0xf6>
 800f9d4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800fb48 <_strtod_l+0x288>
 800f9d8:	e7ed      	b.n	800f9b6 <_strtod_l+0xf6>
 800f9da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f9de:	f04f 3aff 	mov.w	sl, #4294967295
 800f9e2:	e7e8      	b.n	800f9b6 <_strtod_l+0xf6>
 800f9e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f9e6:	1c5a      	adds	r2, r3, #1
 800f9e8:	921b      	str	r2, [sp, #108]	; 0x6c
 800f9ea:	785b      	ldrb	r3, [r3, #1]
 800f9ec:	2b30      	cmp	r3, #48	; 0x30
 800f9ee:	d0f9      	beq.n	800f9e4 <_strtod_l+0x124>
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d0a4      	beq.n	800f93e <_strtod_l+0x7e>
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	2500      	movs	r5, #0
 800f9f8:	9306      	str	r3, [sp, #24]
 800f9fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f9fc:	9308      	str	r3, [sp, #32]
 800f9fe:	9507      	str	r5, [sp, #28]
 800fa00:	9505      	str	r5, [sp, #20]
 800fa02:	220a      	movs	r2, #10
 800fa04:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800fa06:	7807      	ldrb	r7, [r0, #0]
 800fa08:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800fa0c:	b2d9      	uxtb	r1, r3
 800fa0e:	2909      	cmp	r1, #9
 800fa10:	d929      	bls.n	800fa66 <_strtod_l+0x1a6>
 800fa12:	4622      	mov	r2, r4
 800fa14:	f8d8 1000 	ldr.w	r1, [r8]
 800fa18:	f7ff ff22 	bl	800f860 <strncmp>
 800fa1c:	2800      	cmp	r0, #0
 800fa1e:	d031      	beq.n	800fa84 <_strtod_l+0x1c4>
 800fa20:	2000      	movs	r0, #0
 800fa22:	9c05      	ldr	r4, [sp, #20]
 800fa24:	9004      	str	r0, [sp, #16]
 800fa26:	463b      	mov	r3, r7
 800fa28:	4602      	mov	r2, r0
 800fa2a:	2b65      	cmp	r3, #101	; 0x65
 800fa2c:	d001      	beq.n	800fa32 <_strtod_l+0x172>
 800fa2e:	2b45      	cmp	r3, #69	; 0x45
 800fa30:	d114      	bne.n	800fa5c <_strtod_l+0x19c>
 800fa32:	b924      	cbnz	r4, 800fa3e <_strtod_l+0x17e>
 800fa34:	b910      	cbnz	r0, 800fa3c <_strtod_l+0x17c>
 800fa36:	9b06      	ldr	r3, [sp, #24]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d09e      	beq.n	800f97a <_strtod_l+0xba>
 800fa3c:	2400      	movs	r4, #0
 800fa3e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800fa40:	1c73      	adds	r3, r6, #1
 800fa42:	931b      	str	r3, [sp, #108]	; 0x6c
 800fa44:	7873      	ldrb	r3, [r6, #1]
 800fa46:	2b2b      	cmp	r3, #43	; 0x2b
 800fa48:	d078      	beq.n	800fb3c <_strtod_l+0x27c>
 800fa4a:	2b2d      	cmp	r3, #45	; 0x2d
 800fa4c:	d070      	beq.n	800fb30 <_strtod_l+0x270>
 800fa4e:	f04f 0c00 	mov.w	ip, #0
 800fa52:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800fa56:	2f09      	cmp	r7, #9
 800fa58:	d97c      	bls.n	800fb54 <_strtod_l+0x294>
 800fa5a:	961b      	str	r6, [sp, #108]	; 0x6c
 800fa5c:	f04f 0e00 	mov.w	lr, #0
 800fa60:	e09a      	b.n	800fb98 <_strtod_l+0x2d8>
 800fa62:	2300      	movs	r3, #0
 800fa64:	e7c7      	b.n	800f9f6 <_strtod_l+0x136>
 800fa66:	9905      	ldr	r1, [sp, #20]
 800fa68:	2908      	cmp	r1, #8
 800fa6a:	bfdd      	ittte	le
 800fa6c:	9907      	ldrle	r1, [sp, #28]
 800fa6e:	fb02 3301 	mlale	r3, r2, r1, r3
 800fa72:	9307      	strle	r3, [sp, #28]
 800fa74:	fb02 3505 	mlagt	r5, r2, r5, r3
 800fa78:	9b05      	ldr	r3, [sp, #20]
 800fa7a:	3001      	adds	r0, #1
 800fa7c:	3301      	adds	r3, #1
 800fa7e:	9305      	str	r3, [sp, #20]
 800fa80:	901b      	str	r0, [sp, #108]	; 0x6c
 800fa82:	e7bf      	b.n	800fa04 <_strtod_l+0x144>
 800fa84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fa86:	191a      	adds	r2, r3, r4
 800fa88:	921b      	str	r2, [sp, #108]	; 0x6c
 800fa8a:	9a05      	ldr	r2, [sp, #20]
 800fa8c:	5d1b      	ldrb	r3, [r3, r4]
 800fa8e:	2a00      	cmp	r2, #0
 800fa90:	d037      	beq.n	800fb02 <_strtod_l+0x242>
 800fa92:	9c05      	ldr	r4, [sp, #20]
 800fa94:	4602      	mov	r2, r0
 800fa96:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fa9a:	2909      	cmp	r1, #9
 800fa9c:	d913      	bls.n	800fac6 <_strtod_l+0x206>
 800fa9e:	2101      	movs	r1, #1
 800faa0:	9104      	str	r1, [sp, #16]
 800faa2:	e7c2      	b.n	800fa2a <_strtod_l+0x16a>
 800faa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800faa6:	1c5a      	adds	r2, r3, #1
 800faa8:	921b      	str	r2, [sp, #108]	; 0x6c
 800faaa:	785b      	ldrb	r3, [r3, #1]
 800faac:	3001      	adds	r0, #1
 800faae:	2b30      	cmp	r3, #48	; 0x30
 800fab0:	d0f8      	beq.n	800faa4 <_strtod_l+0x1e4>
 800fab2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800fab6:	2a08      	cmp	r2, #8
 800fab8:	f200 84e4 	bhi.w	8010484 <_strtod_l+0xbc4>
 800fabc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fabe:	9208      	str	r2, [sp, #32]
 800fac0:	4602      	mov	r2, r0
 800fac2:	2000      	movs	r0, #0
 800fac4:	4604      	mov	r4, r0
 800fac6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800faca:	f100 0101 	add.w	r1, r0, #1
 800face:	d012      	beq.n	800faf6 <_strtod_l+0x236>
 800fad0:	440a      	add	r2, r1
 800fad2:	eb00 0c04 	add.w	ip, r0, r4
 800fad6:	4621      	mov	r1, r4
 800fad8:	270a      	movs	r7, #10
 800fada:	458c      	cmp	ip, r1
 800fadc:	d113      	bne.n	800fb06 <_strtod_l+0x246>
 800fade:	1821      	adds	r1, r4, r0
 800fae0:	2908      	cmp	r1, #8
 800fae2:	f104 0401 	add.w	r4, r4, #1
 800fae6:	4404      	add	r4, r0
 800fae8:	dc19      	bgt.n	800fb1e <_strtod_l+0x25e>
 800faea:	9b07      	ldr	r3, [sp, #28]
 800faec:	210a      	movs	r1, #10
 800faee:	fb01 e303 	mla	r3, r1, r3, lr
 800faf2:	9307      	str	r3, [sp, #28]
 800faf4:	2100      	movs	r1, #0
 800faf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800faf8:	1c58      	adds	r0, r3, #1
 800fafa:	901b      	str	r0, [sp, #108]	; 0x6c
 800fafc:	785b      	ldrb	r3, [r3, #1]
 800fafe:	4608      	mov	r0, r1
 800fb00:	e7c9      	b.n	800fa96 <_strtod_l+0x1d6>
 800fb02:	9805      	ldr	r0, [sp, #20]
 800fb04:	e7d3      	b.n	800faae <_strtod_l+0x1ee>
 800fb06:	2908      	cmp	r1, #8
 800fb08:	f101 0101 	add.w	r1, r1, #1
 800fb0c:	dc03      	bgt.n	800fb16 <_strtod_l+0x256>
 800fb0e:	9b07      	ldr	r3, [sp, #28]
 800fb10:	437b      	muls	r3, r7
 800fb12:	9307      	str	r3, [sp, #28]
 800fb14:	e7e1      	b.n	800fada <_strtod_l+0x21a>
 800fb16:	2910      	cmp	r1, #16
 800fb18:	bfd8      	it	le
 800fb1a:	437d      	mulle	r5, r7
 800fb1c:	e7dd      	b.n	800fada <_strtod_l+0x21a>
 800fb1e:	2c10      	cmp	r4, #16
 800fb20:	bfdc      	itt	le
 800fb22:	210a      	movle	r1, #10
 800fb24:	fb01 e505 	mlale	r5, r1, r5, lr
 800fb28:	e7e4      	b.n	800faf4 <_strtod_l+0x234>
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	9304      	str	r3, [sp, #16]
 800fb2e:	e781      	b.n	800fa34 <_strtod_l+0x174>
 800fb30:	f04f 0c01 	mov.w	ip, #1
 800fb34:	1cb3      	adds	r3, r6, #2
 800fb36:	931b      	str	r3, [sp, #108]	; 0x6c
 800fb38:	78b3      	ldrb	r3, [r6, #2]
 800fb3a:	e78a      	b.n	800fa52 <_strtod_l+0x192>
 800fb3c:	f04f 0c00 	mov.w	ip, #0
 800fb40:	e7f8      	b.n	800fb34 <_strtod_l+0x274>
 800fb42:	bf00      	nop
 800fb44:	080151b4 	.word	0x080151b4
 800fb48:	7ff00000 	.word	0x7ff00000
 800fb4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb4e:	1c5f      	adds	r7, r3, #1
 800fb50:	971b      	str	r7, [sp, #108]	; 0x6c
 800fb52:	785b      	ldrb	r3, [r3, #1]
 800fb54:	2b30      	cmp	r3, #48	; 0x30
 800fb56:	d0f9      	beq.n	800fb4c <_strtod_l+0x28c>
 800fb58:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800fb5c:	2f08      	cmp	r7, #8
 800fb5e:	f63f af7d 	bhi.w	800fa5c <_strtod_l+0x19c>
 800fb62:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fb66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb68:	930a      	str	r3, [sp, #40]	; 0x28
 800fb6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb6c:	1c5f      	adds	r7, r3, #1
 800fb6e:	971b      	str	r7, [sp, #108]	; 0x6c
 800fb70:	785b      	ldrb	r3, [r3, #1]
 800fb72:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800fb76:	f1b8 0f09 	cmp.w	r8, #9
 800fb7a:	d937      	bls.n	800fbec <_strtod_l+0x32c>
 800fb7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fb7e:	1a7f      	subs	r7, r7, r1
 800fb80:	2f08      	cmp	r7, #8
 800fb82:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800fb86:	dc37      	bgt.n	800fbf8 <_strtod_l+0x338>
 800fb88:	45be      	cmp	lr, r7
 800fb8a:	bfa8      	it	ge
 800fb8c:	46be      	movge	lr, r7
 800fb8e:	f1bc 0f00 	cmp.w	ip, #0
 800fb92:	d001      	beq.n	800fb98 <_strtod_l+0x2d8>
 800fb94:	f1ce 0e00 	rsb	lr, lr, #0
 800fb98:	2c00      	cmp	r4, #0
 800fb9a:	d151      	bne.n	800fc40 <_strtod_l+0x380>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	f47f aece 	bne.w	800f93e <_strtod_l+0x7e>
 800fba2:	9a06      	ldr	r2, [sp, #24]
 800fba4:	2a00      	cmp	r2, #0
 800fba6:	f47f aeca 	bne.w	800f93e <_strtod_l+0x7e>
 800fbaa:	9a04      	ldr	r2, [sp, #16]
 800fbac:	2a00      	cmp	r2, #0
 800fbae:	f47f aee4 	bne.w	800f97a <_strtod_l+0xba>
 800fbb2:	2b4e      	cmp	r3, #78	; 0x4e
 800fbb4:	d027      	beq.n	800fc06 <_strtod_l+0x346>
 800fbb6:	dc21      	bgt.n	800fbfc <_strtod_l+0x33c>
 800fbb8:	2b49      	cmp	r3, #73	; 0x49
 800fbba:	f47f aede 	bne.w	800f97a <_strtod_l+0xba>
 800fbbe:	49a0      	ldr	r1, [pc, #640]	; (800fe40 <_strtod_l+0x580>)
 800fbc0:	a81b      	add	r0, sp, #108	; 0x6c
 800fbc2:	f001 fde7 	bl	8011794 <__match>
 800fbc6:	2800      	cmp	r0, #0
 800fbc8:	f43f aed7 	beq.w	800f97a <_strtod_l+0xba>
 800fbcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fbce:	499d      	ldr	r1, [pc, #628]	; (800fe44 <_strtod_l+0x584>)
 800fbd0:	3b01      	subs	r3, #1
 800fbd2:	a81b      	add	r0, sp, #108	; 0x6c
 800fbd4:	931b      	str	r3, [sp, #108]	; 0x6c
 800fbd6:	f001 fddd 	bl	8011794 <__match>
 800fbda:	b910      	cbnz	r0, 800fbe2 <_strtod_l+0x322>
 800fbdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fbde:	3301      	adds	r3, #1
 800fbe0:	931b      	str	r3, [sp, #108]	; 0x6c
 800fbe2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800fe58 <_strtod_l+0x598>
 800fbe6:	f04f 0a00 	mov.w	sl, #0
 800fbea:	e6a8      	b.n	800f93e <_strtod_l+0x7e>
 800fbec:	210a      	movs	r1, #10
 800fbee:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fbf2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fbf6:	e7b8      	b.n	800fb6a <_strtod_l+0x2aa>
 800fbf8:	46be      	mov	lr, r7
 800fbfa:	e7c8      	b.n	800fb8e <_strtod_l+0x2ce>
 800fbfc:	2b69      	cmp	r3, #105	; 0x69
 800fbfe:	d0de      	beq.n	800fbbe <_strtod_l+0x2fe>
 800fc00:	2b6e      	cmp	r3, #110	; 0x6e
 800fc02:	f47f aeba 	bne.w	800f97a <_strtod_l+0xba>
 800fc06:	4990      	ldr	r1, [pc, #576]	; (800fe48 <_strtod_l+0x588>)
 800fc08:	a81b      	add	r0, sp, #108	; 0x6c
 800fc0a:	f001 fdc3 	bl	8011794 <__match>
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	f43f aeb3 	beq.w	800f97a <_strtod_l+0xba>
 800fc14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	2b28      	cmp	r3, #40	; 0x28
 800fc1a:	d10e      	bne.n	800fc3a <_strtod_l+0x37a>
 800fc1c:	aa1e      	add	r2, sp, #120	; 0x78
 800fc1e:	498b      	ldr	r1, [pc, #556]	; (800fe4c <_strtod_l+0x58c>)
 800fc20:	a81b      	add	r0, sp, #108	; 0x6c
 800fc22:	f001 fdcb 	bl	80117bc <__hexnan>
 800fc26:	2805      	cmp	r0, #5
 800fc28:	d107      	bne.n	800fc3a <_strtod_l+0x37a>
 800fc2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fc2c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800fc30:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fc34:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fc38:	e681      	b.n	800f93e <_strtod_l+0x7e>
 800fc3a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800fe60 <_strtod_l+0x5a0>
 800fc3e:	e7d2      	b.n	800fbe6 <_strtod_l+0x326>
 800fc40:	ebae 0302 	sub.w	r3, lr, r2
 800fc44:	9306      	str	r3, [sp, #24]
 800fc46:	9b05      	ldr	r3, [sp, #20]
 800fc48:	9807      	ldr	r0, [sp, #28]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	bf08      	it	eq
 800fc4e:	4623      	moveq	r3, r4
 800fc50:	2c10      	cmp	r4, #16
 800fc52:	9305      	str	r3, [sp, #20]
 800fc54:	46a0      	mov	r8, r4
 800fc56:	bfa8      	it	ge
 800fc58:	f04f 0810 	movge.w	r8, #16
 800fc5c:	f7f0 fc82 	bl	8000564 <__aeabi_ui2d>
 800fc60:	2c09      	cmp	r4, #9
 800fc62:	4682      	mov	sl, r0
 800fc64:	468b      	mov	fp, r1
 800fc66:	dc13      	bgt.n	800fc90 <_strtod_l+0x3d0>
 800fc68:	9b06      	ldr	r3, [sp, #24]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f43f ae67 	beq.w	800f93e <_strtod_l+0x7e>
 800fc70:	9b06      	ldr	r3, [sp, #24]
 800fc72:	dd7a      	ble.n	800fd6a <_strtod_l+0x4aa>
 800fc74:	2b16      	cmp	r3, #22
 800fc76:	dc61      	bgt.n	800fd3c <_strtod_l+0x47c>
 800fc78:	4a75      	ldr	r2, [pc, #468]	; (800fe50 <_strtod_l+0x590>)
 800fc7a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800fc7e:	e9de 0100 	ldrd	r0, r1, [lr]
 800fc82:	4652      	mov	r2, sl
 800fc84:	465b      	mov	r3, fp
 800fc86:	f7f0 fce7 	bl	8000658 <__aeabi_dmul>
 800fc8a:	4682      	mov	sl, r0
 800fc8c:	468b      	mov	fp, r1
 800fc8e:	e656      	b.n	800f93e <_strtod_l+0x7e>
 800fc90:	4b6f      	ldr	r3, [pc, #444]	; (800fe50 <_strtod_l+0x590>)
 800fc92:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fc96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fc9a:	f7f0 fcdd 	bl	8000658 <__aeabi_dmul>
 800fc9e:	4606      	mov	r6, r0
 800fca0:	4628      	mov	r0, r5
 800fca2:	460f      	mov	r7, r1
 800fca4:	f7f0 fc5e 	bl	8000564 <__aeabi_ui2d>
 800fca8:	4602      	mov	r2, r0
 800fcaa:	460b      	mov	r3, r1
 800fcac:	4630      	mov	r0, r6
 800fcae:	4639      	mov	r1, r7
 800fcb0:	f7f0 fb1c 	bl	80002ec <__adddf3>
 800fcb4:	2c0f      	cmp	r4, #15
 800fcb6:	4682      	mov	sl, r0
 800fcb8:	468b      	mov	fp, r1
 800fcba:	ddd5      	ble.n	800fc68 <_strtod_l+0x3a8>
 800fcbc:	9b06      	ldr	r3, [sp, #24]
 800fcbe:	eba4 0808 	sub.w	r8, r4, r8
 800fcc2:	4498      	add	r8, r3
 800fcc4:	f1b8 0f00 	cmp.w	r8, #0
 800fcc8:	f340 8096 	ble.w	800fdf8 <_strtod_l+0x538>
 800fccc:	f018 030f 	ands.w	r3, r8, #15
 800fcd0:	d00a      	beq.n	800fce8 <_strtod_l+0x428>
 800fcd2:	495f      	ldr	r1, [pc, #380]	; (800fe50 <_strtod_l+0x590>)
 800fcd4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fcd8:	4652      	mov	r2, sl
 800fcda:	465b      	mov	r3, fp
 800fcdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fce0:	f7f0 fcba 	bl	8000658 <__aeabi_dmul>
 800fce4:	4682      	mov	sl, r0
 800fce6:	468b      	mov	fp, r1
 800fce8:	f038 080f 	bics.w	r8, r8, #15
 800fcec:	d073      	beq.n	800fdd6 <_strtod_l+0x516>
 800fcee:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fcf2:	dd47      	ble.n	800fd84 <_strtod_l+0x4c4>
 800fcf4:	2400      	movs	r4, #0
 800fcf6:	46a0      	mov	r8, r4
 800fcf8:	9407      	str	r4, [sp, #28]
 800fcfa:	9405      	str	r4, [sp, #20]
 800fcfc:	2322      	movs	r3, #34	; 0x22
 800fcfe:	f8df b158 	ldr.w	fp, [pc, #344]	; 800fe58 <_strtod_l+0x598>
 800fd02:	f8c9 3000 	str.w	r3, [r9]
 800fd06:	f04f 0a00 	mov.w	sl, #0
 800fd0a:	9b07      	ldr	r3, [sp, #28]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	f43f ae16 	beq.w	800f93e <_strtod_l+0x7e>
 800fd12:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fd14:	4648      	mov	r0, r9
 800fd16:	f001 fe25 	bl	8011964 <_Bfree>
 800fd1a:	9905      	ldr	r1, [sp, #20]
 800fd1c:	4648      	mov	r0, r9
 800fd1e:	f001 fe21 	bl	8011964 <_Bfree>
 800fd22:	4641      	mov	r1, r8
 800fd24:	4648      	mov	r0, r9
 800fd26:	f001 fe1d 	bl	8011964 <_Bfree>
 800fd2a:	9907      	ldr	r1, [sp, #28]
 800fd2c:	4648      	mov	r0, r9
 800fd2e:	f001 fe19 	bl	8011964 <_Bfree>
 800fd32:	4621      	mov	r1, r4
 800fd34:	4648      	mov	r0, r9
 800fd36:	f001 fe15 	bl	8011964 <_Bfree>
 800fd3a:	e600      	b.n	800f93e <_strtod_l+0x7e>
 800fd3c:	9a06      	ldr	r2, [sp, #24]
 800fd3e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800fd42:	4293      	cmp	r3, r2
 800fd44:	dbba      	blt.n	800fcbc <_strtod_l+0x3fc>
 800fd46:	4d42      	ldr	r5, [pc, #264]	; (800fe50 <_strtod_l+0x590>)
 800fd48:	f1c4 040f 	rsb	r4, r4, #15
 800fd4c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800fd50:	4652      	mov	r2, sl
 800fd52:	465b      	mov	r3, fp
 800fd54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd58:	f7f0 fc7e 	bl	8000658 <__aeabi_dmul>
 800fd5c:	9b06      	ldr	r3, [sp, #24]
 800fd5e:	1b1c      	subs	r4, r3, r4
 800fd60:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800fd64:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd68:	e78d      	b.n	800fc86 <_strtod_l+0x3c6>
 800fd6a:	f113 0f16 	cmn.w	r3, #22
 800fd6e:	dba5      	blt.n	800fcbc <_strtod_l+0x3fc>
 800fd70:	4a37      	ldr	r2, [pc, #220]	; (800fe50 <_strtod_l+0x590>)
 800fd72:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800fd76:	e9d2 2300 	ldrd	r2, r3, [r2]
 800fd7a:	4650      	mov	r0, sl
 800fd7c:	4659      	mov	r1, fp
 800fd7e:	f7f0 fd95 	bl	80008ac <__aeabi_ddiv>
 800fd82:	e782      	b.n	800fc8a <_strtod_l+0x3ca>
 800fd84:	2300      	movs	r3, #0
 800fd86:	4e33      	ldr	r6, [pc, #204]	; (800fe54 <_strtod_l+0x594>)
 800fd88:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fd8c:	4650      	mov	r0, sl
 800fd8e:	4659      	mov	r1, fp
 800fd90:	461d      	mov	r5, r3
 800fd92:	f1b8 0f01 	cmp.w	r8, #1
 800fd96:	dc21      	bgt.n	800fddc <_strtod_l+0x51c>
 800fd98:	b10b      	cbz	r3, 800fd9e <_strtod_l+0x4de>
 800fd9a:	4682      	mov	sl, r0
 800fd9c:	468b      	mov	fp, r1
 800fd9e:	4b2d      	ldr	r3, [pc, #180]	; (800fe54 <_strtod_l+0x594>)
 800fda0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fda4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800fda8:	4652      	mov	r2, sl
 800fdaa:	465b      	mov	r3, fp
 800fdac:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fdb0:	f7f0 fc52 	bl	8000658 <__aeabi_dmul>
 800fdb4:	4b28      	ldr	r3, [pc, #160]	; (800fe58 <_strtod_l+0x598>)
 800fdb6:	460a      	mov	r2, r1
 800fdb8:	400b      	ands	r3, r1
 800fdba:	4928      	ldr	r1, [pc, #160]	; (800fe5c <_strtod_l+0x59c>)
 800fdbc:	428b      	cmp	r3, r1
 800fdbe:	4682      	mov	sl, r0
 800fdc0:	d898      	bhi.n	800fcf4 <_strtod_l+0x434>
 800fdc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fdc6:	428b      	cmp	r3, r1
 800fdc8:	bf86      	itte	hi
 800fdca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800fe64 <_strtod_l+0x5a4>
 800fdce:	f04f 3aff 	movhi.w	sl, #4294967295
 800fdd2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	9304      	str	r3, [sp, #16]
 800fdda:	e077      	b.n	800fecc <_strtod_l+0x60c>
 800fddc:	f018 0f01 	tst.w	r8, #1
 800fde0:	d006      	beq.n	800fdf0 <_strtod_l+0x530>
 800fde2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800fde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdea:	f7f0 fc35 	bl	8000658 <__aeabi_dmul>
 800fdee:	2301      	movs	r3, #1
 800fdf0:	3501      	adds	r5, #1
 800fdf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fdf6:	e7cc      	b.n	800fd92 <_strtod_l+0x4d2>
 800fdf8:	d0ed      	beq.n	800fdd6 <_strtod_l+0x516>
 800fdfa:	f1c8 0800 	rsb	r8, r8, #0
 800fdfe:	f018 020f 	ands.w	r2, r8, #15
 800fe02:	d00a      	beq.n	800fe1a <_strtod_l+0x55a>
 800fe04:	4b12      	ldr	r3, [pc, #72]	; (800fe50 <_strtod_l+0x590>)
 800fe06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe0a:	4650      	mov	r0, sl
 800fe0c:	4659      	mov	r1, fp
 800fe0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe12:	f7f0 fd4b 	bl	80008ac <__aeabi_ddiv>
 800fe16:	4682      	mov	sl, r0
 800fe18:	468b      	mov	fp, r1
 800fe1a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fe1e:	d0da      	beq.n	800fdd6 <_strtod_l+0x516>
 800fe20:	f1b8 0f1f 	cmp.w	r8, #31
 800fe24:	dd20      	ble.n	800fe68 <_strtod_l+0x5a8>
 800fe26:	2400      	movs	r4, #0
 800fe28:	46a0      	mov	r8, r4
 800fe2a:	9407      	str	r4, [sp, #28]
 800fe2c:	9405      	str	r4, [sp, #20]
 800fe2e:	2322      	movs	r3, #34	; 0x22
 800fe30:	f04f 0a00 	mov.w	sl, #0
 800fe34:	f04f 0b00 	mov.w	fp, #0
 800fe38:	f8c9 3000 	str.w	r3, [r9]
 800fe3c:	e765      	b.n	800fd0a <_strtod_l+0x44a>
 800fe3e:	bf00      	nop
 800fe40:	08015187 	.word	0x08015187
 800fe44:	0801530c 	.word	0x0801530c
 800fe48:	0801518f 	.word	0x0801518f
 800fe4c:	080151c8 	.word	0x080151c8
 800fe50:	08015340 	.word	0x08015340
 800fe54:	08015318 	.word	0x08015318
 800fe58:	7ff00000 	.word	0x7ff00000
 800fe5c:	7ca00000 	.word	0x7ca00000
 800fe60:	fff80000 	.word	0xfff80000
 800fe64:	7fefffff 	.word	0x7fefffff
 800fe68:	f018 0310 	ands.w	r3, r8, #16
 800fe6c:	bf18      	it	ne
 800fe6e:	236a      	movne	r3, #106	; 0x6a
 800fe70:	4da0      	ldr	r5, [pc, #640]	; (80100f4 <_strtod_l+0x834>)
 800fe72:	9304      	str	r3, [sp, #16]
 800fe74:	4650      	mov	r0, sl
 800fe76:	4659      	mov	r1, fp
 800fe78:	2300      	movs	r3, #0
 800fe7a:	f1b8 0f00 	cmp.w	r8, #0
 800fe7e:	f300 810a 	bgt.w	8010096 <_strtod_l+0x7d6>
 800fe82:	b10b      	cbz	r3, 800fe88 <_strtod_l+0x5c8>
 800fe84:	4682      	mov	sl, r0
 800fe86:	468b      	mov	fp, r1
 800fe88:	9b04      	ldr	r3, [sp, #16]
 800fe8a:	b1bb      	cbz	r3, 800febc <_strtod_l+0x5fc>
 800fe8c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800fe90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	4659      	mov	r1, fp
 800fe98:	dd10      	ble.n	800febc <_strtod_l+0x5fc>
 800fe9a:	2b1f      	cmp	r3, #31
 800fe9c:	f340 8107 	ble.w	80100ae <_strtod_l+0x7ee>
 800fea0:	2b34      	cmp	r3, #52	; 0x34
 800fea2:	bfde      	ittt	le
 800fea4:	3b20      	suble	r3, #32
 800fea6:	f04f 32ff 	movle.w	r2, #4294967295
 800feaa:	fa02 f303 	lslle.w	r3, r2, r3
 800feae:	f04f 0a00 	mov.w	sl, #0
 800feb2:	bfcc      	ite	gt
 800feb4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800feb8:	ea03 0b01 	andle.w	fp, r3, r1
 800febc:	2200      	movs	r2, #0
 800febe:	2300      	movs	r3, #0
 800fec0:	4650      	mov	r0, sl
 800fec2:	4659      	mov	r1, fp
 800fec4:	f7f0 fe30 	bl	8000b28 <__aeabi_dcmpeq>
 800fec8:	2800      	cmp	r0, #0
 800feca:	d1ac      	bne.n	800fe26 <_strtod_l+0x566>
 800fecc:	9b07      	ldr	r3, [sp, #28]
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	9a05      	ldr	r2, [sp, #20]
 800fed2:	9908      	ldr	r1, [sp, #32]
 800fed4:	4623      	mov	r3, r4
 800fed6:	4648      	mov	r0, r9
 800fed8:	f001 fd96 	bl	8011a08 <__s2b>
 800fedc:	9007      	str	r0, [sp, #28]
 800fede:	2800      	cmp	r0, #0
 800fee0:	f43f af08 	beq.w	800fcf4 <_strtod_l+0x434>
 800fee4:	9a06      	ldr	r2, [sp, #24]
 800fee6:	9b06      	ldr	r3, [sp, #24]
 800fee8:	2a00      	cmp	r2, #0
 800feea:	f1c3 0300 	rsb	r3, r3, #0
 800feee:	bfa8      	it	ge
 800fef0:	2300      	movge	r3, #0
 800fef2:	930e      	str	r3, [sp, #56]	; 0x38
 800fef4:	2400      	movs	r4, #0
 800fef6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fefa:	9316      	str	r3, [sp, #88]	; 0x58
 800fefc:	46a0      	mov	r8, r4
 800fefe:	9b07      	ldr	r3, [sp, #28]
 800ff00:	4648      	mov	r0, r9
 800ff02:	6859      	ldr	r1, [r3, #4]
 800ff04:	f001 fcfa 	bl	80118fc <_Balloc>
 800ff08:	9005      	str	r0, [sp, #20]
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	f43f aef6 	beq.w	800fcfc <_strtod_l+0x43c>
 800ff10:	9b07      	ldr	r3, [sp, #28]
 800ff12:	691a      	ldr	r2, [r3, #16]
 800ff14:	3202      	adds	r2, #2
 800ff16:	f103 010c 	add.w	r1, r3, #12
 800ff1a:	0092      	lsls	r2, r2, #2
 800ff1c:	300c      	adds	r0, #12
 800ff1e:	f7fe fead 	bl	800ec7c <memcpy>
 800ff22:	aa1e      	add	r2, sp, #120	; 0x78
 800ff24:	a91d      	add	r1, sp, #116	; 0x74
 800ff26:	ec4b ab10 	vmov	d0, sl, fp
 800ff2a:	4648      	mov	r0, r9
 800ff2c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ff30:	f002 f826 	bl	8011f80 <__d2b>
 800ff34:	901c      	str	r0, [sp, #112]	; 0x70
 800ff36:	2800      	cmp	r0, #0
 800ff38:	f43f aee0 	beq.w	800fcfc <_strtod_l+0x43c>
 800ff3c:	2101      	movs	r1, #1
 800ff3e:	4648      	mov	r0, r9
 800ff40:	f001 fdee 	bl	8011b20 <__i2b>
 800ff44:	4680      	mov	r8, r0
 800ff46:	2800      	cmp	r0, #0
 800ff48:	f43f aed8 	beq.w	800fcfc <_strtod_l+0x43c>
 800ff4c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ff4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ff50:	2e00      	cmp	r6, #0
 800ff52:	bfab      	itete	ge
 800ff54:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ff56:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ff58:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800ff5a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800ff5c:	bfac      	ite	ge
 800ff5e:	18f7      	addge	r7, r6, r3
 800ff60:	1b9d      	sublt	r5, r3, r6
 800ff62:	9b04      	ldr	r3, [sp, #16]
 800ff64:	1af6      	subs	r6, r6, r3
 800ff66:	4416      	add	r6, r2
 800ff68:	4b63      	ldr	r3, [pc, #396]	; (80100f8 <_strtod_l+0x838>)
 800ff6a:	3e01      	subs	r6, #1
 800ff6c:	429e      	cmp	r6, r3
 800ff6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ff72:	f280 80af 	bge.w	80100d4 <_strtod_l+0x814>
 800ff76:	1b9b      	subs	r3, r3, r6
 800ff78:	2b1f      	cmp	r3, #31
 800ff7a:	eba2 0203 	sub.w	r2, r2, r3
 800ff7e:	f04f 0101 	mov.w	r1, #1
 800ff82:	f300 809b 	bgt.w	80100bc <_strtod_l+0x7fc>
 800ff86:	fa01 f303 	lsl.w	r3, r1, r3
 800ff8a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ff90:	18be      	adds	r6, r7, r2
 800ff92:	9b04      	ldr	r3, [sp, #16]
 800ff94:	42b7      	cmp	r7, r6
 800ff96:	4415      	add	r5, r2
 800ff98:	441d      	add	r5, r3
 800ff9a:	463b      	mov	r3, r7
 800ff9c:	bfa8      	it	ge
 800ff9e:	4633      	movge	r3, r6
 800ffa0:	42ab      	cmp	r3, r5
 800ffa2:	bfa8      	it	ge
 800ffa4:	462b      	movge	r3, r5
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	bfc2      	ittt	gt
 800ffaa:	1af6      	subgt	r6, r6, r3
 800ffac:	1aed      	subgt	r5, r5, r3
 800ffae:	1aff      	subgt	r7, r7, r3
 800ffb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffb2:	b1bb      	cbz	r3, 800ffe4 <_strtod_l+0x724>
 800ffb4:	4641      	mov	r1, r8
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	4648      	mov	r0, r9
 800ffba:	f001 fe51 	bl	8011c60 <__pow5mult>
 800ffbe:	4680      	mov	r8, r0
 800ffc0:	2800      	cmp	r0, #0
 800ffc2:	f43f ae9b 	beq.w	800fcfc <_strtod_l+0x43c>
 800ffc6:	4601      	mov	r1, r0
 800ffc8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ffca:	4648      	mov	r0, r9
 800ffcc:	f001 fdb1 	bl	8011b32 <__multiply>
 800ffd0:	900c      	str	r0, [sp, #48]	; 0x30
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	f43f ae92 	beq.w	800fcfc <_strtod_l+0x43c>
 800ffd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ffda:	4648      	mov	r0, r9
 800ffdc:	f001 fcc2 	bl	8011964 <_Bfree>
 800ffe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ffe2:	931c      	str	r3, [sp, #112]	; 0x70
 800ffe4:	2e00      	cmp	r6, #0
 800ffe6:	dc7a      	bgt.n	80100de <_strtod_l+0x81e>
 800ffe8:	9b06      	ldr	r3, [sp, #24]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	dd08      	ble.n	8010000 <_strtod_l+0x740>
 800ffee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fff0:	9905      	ldr	r1, [sp, #20]
 800fff2:	4648      	mov	r0, r9
 800fff4:	f001 fe34 	bl	8011c60 <__pow5mult>
 800fff8:	9005      	str	r0, [sp, #20]
 800fffa:	2800      	cmp	r0, #0
 800fffc:	f43f ae7e 	beq.w	800fcfc <_strtod_l+0x43c>
 8010000:	2d00      	cmp	r5, #0
 8010002:	dd08      	ble.n	8010016 <_strtod_l+0x756>
 8010004:	462a      	mov	r2, r5
 8010006:	9905      	ldr	r1, [sp, #20]
 8010008:	4648      	mov	r0, r9
 801000a:	f001 fe77 	bl	8011cfc <__lshift>
 801000e:	9005      	str	r0, [sp, #20]
 8010010:	2800      	cmp	r0, #0
 8010012:	f43f ae73 	beq.w	800fcfc <_strtod_l+0x43c>
 8010016:	2f00      	cmp	r7, #0
 8010018:	dd08      	ble.n	801002c <_strtod_l+0x76c>
 801001a:	4641      	mov	r1, r8
 801001c:	463a      	mov	r2, r7
 801001e:	4648      	mov	r0, r9
 8010020:	f001 fe6c 	bl	8011cfc <__lshift>
 8010024:	4680      	mov	r8, r0
 8010026:	2800      	cmp	r0, #0
 8010028:	f43f ae68 	beq.w	800fcfc <_strtod_l+0x43c>
 801002c:	9a05      	ldr	r2, [sp, #20]
 801002e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010030:	4648      	mov	r0, r9
 8010032:	f001 fed1 	bl	8011dd8 <__mdiff>
 8010036:	4604      	mov	r4, r0
 8010038:	2800      	cmp	r0, #0
 801003a:	f43f ae5f 	beq.w	800fcfc <_strtod_l+0x43c>
 801003e:	68c3      	ldr	r3, [r0, #12]
 8010040:	930c      	str	r3, [sp, #48]	; 0x30
 8010042:	2300      	movs	r3, #0
 8010044:	60c3      	str	r3, [r0, #12]
 8010046:	4641      	mov	r1, r8
 8010048:	f001 feac 	bl	8011da4 <__mcmp>
 801004c:	2800      	cmp	r0, #0
 801004e:	da55      	bge.n	80100fc <_strtod_l+0x83c>
 8010050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010052:	b9e3      	cbnz	r3, 801008e <_strtod_l+0x7ce>
 8010054:	f1ba 0f00 	cmp.w	sl, #0
 8010058:	d119      	bne.n	801008e <_strtod_l+0x7ce>
 801005a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801005e:	b9b3      	cbnz	r3, 801008e <_strtod_l+0x7ce>
 8010060:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010064:	0d1b      	lsrs	r3, r3, #20
 8010066:	051b      	lsls	r3, r3, #20
 8010068:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801006c:	d90f      	bls.n	801008e <_strtod_l+0x7ce>
 801006e:	6963      	ldr	r3, [r4, #20]
 8010070:	b913      	cbnz	r3, 8010078 <_strtod_l+0x7b8>
 8010072:	6923      	ldr	r3, [r4, #16]
 8010074:	2b01      	cmp	r3, #1
 8010076:	dd0a      	ble.n	801008e <_strtod_l+0x7ce>
 8010078:	4621      	mov	r1, r4
 801007a:	2201      	movs	r2, #1
 801007c:	4648      	mov	r0, r9
 801007e:	f001 fe3d 	bl	8011cfc <__lshift>
 8010082:	4641      	mov	r1, r8
 8010084:	4604      	mov	r4, r0
 8010086:	f001 fe8d 	bl	8011da4 <__mcmp>
 801008a:	2800      	cmp	r0, #0
 801008c:	dc67      	bgt.n	801015e <_strtod_l+0x89e>
 801008e:	9b04      	ldr	r3, [sp, #16]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d171      	bne.n	8010178 <_strtod_l+0x8b8>
 8010094:	e63d      	b.n	800fd12 <_strtod_l+0x452>
 8010096:	f018 0f01 	tst.w	r8, #1
 801009a:	d004      	beq.n	80100a6 <_strtod_l+0x7e6>
 801009c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80100a0:	f7f0 fada 	bl	8000658 <__aeabi_dmul>
 80100a4:	2301      	movs	r3, #1
 80100a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80100aa:	3508      	adds	r5, #8
 80100ac:	e6e5      	b.n	800fe7a <_strtod_l+0x5ba>
 80100ae:	f04f 32ff 	mov.w	r2, #4294967295
 80100b2:	fa02 f303 	lsl.w	r3, r2, r3
 80100b6:	ea03 0a0a 	and.w	sl, r3, sl
 80100ba:	e6ff      	b.n	800febc <_strtod_l+0x5fc>
 80100bc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80100c0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80100c4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80100c8:	36e2      	adds	r6, #226	; 0xe2
 80100ca:	fa01 f306 	lsl.w	r3, r1, r6
 80100ce:	930a      	str	r3, [sp, #40]	; 0x28
 80100d0:	910f      	str	r1, [sp, #60]	; 0x3c
 80100d2:	e75d      	b.n	800ff90 <_strtod_l+0x6d0>
 80100d4:	2300      	movs	r3, #0
 80100d6:	930a      	str	r3, [sp, #40]	; 0x28
 80100d8:	2301      	movs	r3, #1
 80100da:	930f      	str	r3, [sp, #60]	; 0x3c
 80100dc:	e758      	b.n	800ff90 <_strtod_l+0x6d0>
 80100de:	4632      	mov	r2, r6
 80100e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80100e2:	4648      	mov	r0, r9
 80100e4:	f001 fe0a 	bl	8011cfc <__lshift>
 80100e8:	901c      	str	r0, [sp, #112]	; 0x70
 80100ea:	2800      	cmp	r0, #0
 80100ec:	f47f af7c 	bne.w	800ffe8 <_strtod_l+0x728>
 80100f0:	e604      	b.n	800fcfc <_strtod_l+0x43c>
 80100f2:	bf00      	nop
 80100f4:	080151e0 	.word	0x080151e0
 80100f8:	fffffc02 	.word	0xfffffc02
 80100fc:	465d      	mov	r5, fp
 80100fe:	f040 8086 	bne.w	801020e <_strtod_l+0x94e>
 8010102:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010104:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010108:	b32a      	cbz	r2, 8010156 <_strtod_l+0x896>
 801010a:	4aaf      	ldr	r2, [pc, #700]	; (80103c8 <_strtod_l+0xb08>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d153      	bne.n	80101b8 <_strtod_l+0x8f8>
 8010110:	9b04      	ldr	r3, [sp, #16]
 8010112:	4650      	mov	r0, sl
 8010114:	b1d3      	cbz	r3, 801014c <_strtod_l+0x88c>
 8010116:	4aad      	ldr	r2, [pc, #692]	; (80103cc <_strtod_l+0xb0c>)
 8010118:	402a      	ands	r2, r5
 801011a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801011e:	f04f 31ff 	mov.w	r1, #4294967295
 8010122:	d816      	bhi.n	8010152 <_strtod_l+0x892>
 8010124:	0d12      	lsrs	r2, r2, #20
 8010126:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801012a:	fa01 f303 	lsl.w	r3, r1, r3
 801012e:	4298      	cmp	r0, r3
 8010130:	d142      	bne.n	80101b8 <_strtod_l+0x8f8>
 8010132:	4ba7      	ldr	r3, [pc, #668]	; (80103d0 <_strtod_l+0xb10>)
 8010134:	429d      	cmp	r5, r3
 8010136:	d102      	bne.n	801013e <_strtod_l+0x87e>
 8010138:	3001      	adds	r0, #1
 801013a:	f43f addf 	beq.w	800fcfc <_strtod_l+0x43c>
 801013e:	4ba3      	ldr	r3, [pc, #652]	; (80103cc <_strtod_l+0xb0c>)
 8010140:	402b      	ands	r3, r5
 8010142:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010146:	f04f 0a00 	mov.w	sl, #0
 801014a:	e7a0      	b.n	801008e <_strtod_l+0x7ce>
 801014c:	f04f 33ff 	mov.w	r3, #4294967295
 8010150:	e7ed      	b.n	801012e <_strtod_l+0x86e>
 8010152:	460b      	mov	r3, r1
 8010154:	e7eb      	b.n	801012e <_strtod_l+0x86e>
 8010156:	bb7b      	cbnz	r3, 80101b8 <_strtod_l+0x8f8>
 8010158:	f1ba 0f00 	cmp.w	sl, #0
 801015c:	d12c      	bne.n	80101b8 <_strtod_l+0x8f8>
 801015e:	9904      	ldr	r1, [sp, #16]
 8010160:	4a9a      	ldr	r2, [pc, #616]	; (80103cc <_strtod_l+0xb0c>)
 8010162:	465b      	mov	r3, fp
 8010164:	b1f1      	cbz	r1, 80101a4 <_strtod_l+0x8e4>
 8010166:	ea02 010b 	and.w	r1, r2, fp
 801016a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801016e:	dc19      	bgt.n	80101a4 <_strtod_l+0x8e4>
 8010170:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010174:	f77f ae5b 	ble.w	800fe2e <_strtod_l+0x56e>
 8010178:	4a96      	ldr	r2, [pc, #600]	; (80103d4 <_strtod_l+0xb14>)
 801017a:	2300      	movs	r3, #0
 801017c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8010180:	4650      	mov	r0, sl
 8010182:	4659      	mov	r1, fp
 8010184:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010188:	f7f0 fa66 	bl	8000658 <__aeabi_dmul>
 801018c:	4682      	mov	sl, r0
 801018e:	468b      	mov	fp, r1
 8010190:	2900      	cmp	r1, #0
 8010192:	f47f adbe 	bne.w	800fd12 <_strtod_l+0x452>
 8010196:	2800      	cmp	r0, #0
 8010198:	f47f adbb 	bne.w	800fd12 <_strtod_l+0x452>
 801019c:	2322      	movs	r3, #34	; 0x22
 801019e:	f8c9 3000 	str.w	r3, [r9]
 80101a2:	e5b6      	b.n	800fd12 <_strtod_l+0x452>
 80101a4:	4013      	ands	r3, r2
 80101a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80101aa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80101ae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80101b2:	f04f 3aff 	mov.w	sl, #4294967295
 80101b6:	e76a      	b.n	801008e <_strtod_l+0x7ce>
 80101b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101ba:	b193      	cbz	r3, 80101e2 <_strtod_l+0x922>
 80101bc:	422b      	tst	r3, r5
 80101be:	f43f af66 	beq.w	801008e <_strtod_l+0x7ce>
 80101c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101c4:	9a04      	ldr	r2, [sp, #16]
 80101c6:	4650      	mov	r0, sl
 80101c8:	4659      	mov	r1, fp
 80101ca:	b173      	cbz	r3, 80101ea <_strtod_l+0x92a>
 80101cc:	f7ff fb5a 	bl	800f884 <sulp>
 80101d0:	4602      	mov	r2, r0
 80101d2:	460b      	mov	r3, r1
 80101d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80101d8:	f7f0 f888 	bl	80002ec <__adddf3>
 80101dc:	4682      	mov	sl, r0
 80101de:	468b      	mov	fp, r1
 80101e0:	e755      	b.n	801008e <_strtod_l+0x7ce>
 80101e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80101e4:	ea13 0f0a 	tst.w	r3, sl
 80101e8:	e7e9      	b.n	80101be <_strtod_l+0x8fe>
 80101ea:	f7ff fb4b 	bl	800f884 <sulp>
 80101ee:	4602      	mov	r2, r0
 80101f0:	460b      	mov	r3, r1
 80101f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80101f6:	f7f0 f877 	bl	80002e8 <__aeabi_dsub>
 80101fa:	2200      	movs	r2, #0
 80101fc:	2300      	movs	r3, #0
 80101fe:	4682      	mov	sl, r0
 8010200:	468b      	mov	fp, r1
 8010202:	f7f0 fc91 	bl	8000b28 <__aeabi_dcmpeq>
 8010206:	2800      	cmp	r0, #0
 8010208:	f47f ae11 	bne.w	800fe2e <_strtod_l+0x56e>
 801020c:	e73f      	b.n	801008e <_strtod_l+0x7ce>
 801020e:	4641      	mov	r1, r8
 8010210:	4620      	mov	r0, r4
 8010212:	f001 ff04 	bl	801201e <__ratio>
 8010216:	ec57 6b10 	vmov	r6, r7, d0
 801021a:	2200      	movs	r2, #0
 801021c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010220:	ee10 0a10 	vmov	r0, s0
 8010224:	4639      	mov	r1, r7
 8010226:	f7f0 fc93 	bl	8000b50 <__aeabi_dcmple>
 801022a:	2800      	cmp	r0, #0
 801022c:	d077      	beq.n	801031e <_strtod_l+0xa5e>
 801022e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010230:	2b00      	cmp	r3, #0
 8010232:	d04a      	beq.n	80102ca <_strtod_l+0xa0a>
 8010234:	4b68      	ldr	r3, [pc, #416]	; (80103d8 <_strtod_l+0xb18>)
 8010236:	2200      	movs	r2, #0
 8010238:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801023c:	4f66      	ldr	r7, [pc, #408]	; (80103d8 <_strtod_l+0xb18>)
 801023e:	2600      	movs	r6, #0
 8010240:	4b62      	ldr	r3, [pc, #392]	; (80103cc <_strtod_l+0xb0c>)
 8010242:	402b      	ands	r3, r5
 8010244:	930f      	str	r3, [sp, #60]	; 0x3c
 8010246:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010248:	4b64      	ldr	r3, [pc, #400]	; (80103dc <_strtod_l+0xb1c>)
 801024a:	429a      	cmp	r2, r3
 801024c:	f040 80ce 	bne.w	80103ec <_strtod_l+0xb2c>
 8010250:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010254:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010258:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801025c:	ec4b ab10 	vmov	d0, sl, fp
 8010260:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8010264:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010268:	f001 fe14 	bl	8011e94 <__ulp>
 801026c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010270:	ec53 2b10 	vmov	r2, r3, d0
 8010274:	f7f0 f9f0 	bl	8000658 <__aeabi_dmul>
 8010278:	4652      	mov	r2, sl
 801027a:	465b      	mov	r3, fp
 801027c:	f7f0 f836 	bl	80002ec <__adddf3>
 8010280:	460b      	mov	r3, r1
 8010282:	4952      	ldr	r1, [pc, #328]	; (80103cc <_strtod_l+0xb0c>)
 8010284:	4a56      	ldr	r2, [pc, #344]	; (80103e0 <_strtod_l+0xb20>)
 8010286:	4019      	ands	r1, r3
 8010288:	4291      	cmp	r1, r2
 801028a:	4682      	mov	sl, r0
 801028c:	d95b      	bls.n	8010346 <_strtod_l+0xa86>
 801028e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010290:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010294:	4293      	cmp	r3, r2
 8010296:	d103      	bne.n	80102a0 <_strtod_l+0x9e0>
 8010298:	9b08      	ldr	r3, [sp, #32]
 801029a:	3301      	adds	r3, #1
 801029c:	f43f ad2e 	beq.w	800fcfc <_strtod_l+0x43c>
 80102a0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80103d0 <_strtod_l+0xb10>
 80102a4:	f04f 3aff 	mov.w	sl, #4294967295
 80102a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80102aa:	4648      	mov	r0, r9
 80102ac:	f001 fb5a 	bl	8011964 <_Bfree>
 80102b0:	9905      	ldr	r1, [sp, #20]
 80102b2:	4648      	mov	r0, r9
 80102b4:	f001 fb56 	bl	8011964 <_Bfree>
 80102b8:	4641      	mov	r1, r8
 80102ba:	4648      	mov	r0, r9
 80102bc:	f001 fb52 	bl	8011964 <_Bfree>
 80102c0:	4621      	mov	r1, r4
 80102c2:	4648      	mov	r0, r9
 80102c4:	f001 fb4e 	bl	8011964 <_Bfree>
 80102c8:	e619      	b.n	800fefe <_strtod_l+0x63e>
 80102ca:	f1ba 0f00 	cmp.w	sl, #0
 80102ce:	d11a      	bne.n	8010306 <_strtod_l+0xa46>
 80102d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80102d4:	b9eb      	cbnz	r3, 8010312 <_strtod_l+0xa52>
 80102d6:	2200      	movs	r2, #0
 80102d8:	4b3f      	ldr	r3, [pc, #252]	; (80103d8 <_strtod_l+0xb18>)
 80102da:	4630      	mov	r0, r6
 80102dc:	4639      	mov	r1, r7
 80102de:	f7f0 fc2d 	bl	8000b3c <__aeabi_dcmplt>
 80102e2:	b9c8      	cbnz	r0, 8010318 <_strtod_l+0xa58>
 80102e4:	4630      	mov	r0, r6
 80102e6:	4639      	mov	r1, r7
 80102e8:	2200      	movs	r2, #0
 80102ea:	4b3e      	ldr	r3, [pc, #248]	; (80103e4 <_strtod_l+0xb24>)
 80102ec:	f7f0 f9b4 	bl	8000658 <__aeabi_dmul>
 80102f0:	4606      	mov	r6, r0
 80102f2:	460f      	mov	r7, r1
 80102f4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80102f8:	9618      	str	r6, [sp, #96]	; 0x60
 80102fa:	9319      	str	r3, [sp, #100]	; 0x64
 80102fc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8010300:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010304:	e79c      	b.n	8010240 <_strtod_l+0x980>
 8010306:	f1ba 0f01 	cmp.w	sl, #1
 801030a:	d102      	bne.n	8010312 <_strtod_l+0xa52>
 801030c:	2d00      	cmp	r5, #0
 801030e:	f43f ad8e 	beq.w	800fe2e <_strtod_l+0x56e>
 8010312:	2200      	movs	r2, #0
 8010314:	4b34      	ldr	r3, [pc, #208]	; (80103e8 <_strtod_l+0xb28>)
 8010316:	e78f      	b.n	8010238 <_strtod_l+0x978>
 8010318:	2600      	movs	r6, #0
 801031a:	4f32      	ldr	r7, [pc, #200]	; (80103e4 <_strtod_l+0xb24>)
 801031c:	e7ea      	b.n	80102f4 <_strtod_l+0xa34>
 801031e:	4b31      	ldr	r3, [pc, #196]	; (80103e4 <_strtod_l+0xb24>)
 8010320:	4630      	mov	r0, r6
 8010322:	4639      	mov	r1, r7
 8010324:	2200      	movs	r2, #0
 8010326:	f7f0 f997 	bl	8000658 <__aeabi_dmul>
 801032a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801032c:	4606      	mov	r6, r0
 801032e:	460f      	mov	r7, r1
 8010330:	b933      	cbnz	r3, 8010340 <_strtod_l+0xa80>
 8010332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010336:	9010      	str	r0, [sp, #64]	; 0x40
 8010338:	9311      	str	r3, [sp, #68]	; 0x44
 801033a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801033e:	e7df      	b.n	8010300 <_strtod_l+0xa40>
 8010340:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8010344:	e7f9      	b.n	801033a <_strtod_l+0xa7a>
 8010346:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801034a:	9b04      	ldr	r3, [sp, #16]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1ab      	bne.n	80102a8 <_strtod_l+0x9e8>
 8010350:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010354:	0d1b      	lsrs	r3, r3, #20
 8010356:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010358:	051b      	lsls	r3, r3, #20
 801035a:	429a      	cmp	r2, r3
 801035c:	465d      	mov	r5, fp
 801035e:	d1a3      	bne.n	80102a8 <_strtod_l+0x9e8>
 8010360:	4639      	mov	r1, r7
 8010362:	4630      	mov	r0, r6
 8010364:	f7f0 fc28 	bl	8000bb8 <__aeabi_d2iz>
 8010368:	f7f0 f90c 	bl	8000584 <__aeabi_i2d>
 801036c:	460b      	mov	r3, r1
 801036e:	4602      	mov	r2, r0
 8010370:	4639      	mov	r1, r7
 8010372:	4630      	mov	r0, r6
 8010374:	f7ef ffb8 	bl	80002e8 <__aeabi_dsub>
 8010378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801037a:	4606      	mov	r6, r0
 801037c:	460f      	mov	r7, r1
 801037e:	b933      	cbnz	r3, 801038e <_strtod_l+0xace>
 8010380:	f1ba 0f00 	cmp.w	sl, #0
 8010384:	d103      	bne.n	801038e <_strtod_l+0xace>
 8010386:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801038a:	2d00      	cmp	r5, #0
 801038c:	d06d      	beq.n	801046a <_strtod_l+0xbaa>
 801038e:	a30a      	add	r3, pc, #40	; (adr r3, 80103b8 <_strtod_l+0xaf8>)
 8010390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010394:	4630      	mov	r0, r6
 8010396:	4639      	mov	r1, r7
 8010398:	f7f0 fbd0 	bl	8000b3c <__aeabi_dcmplt>
 801039c:	2800      	cmp	r0, #0
 801039e:	f47f acb8 	bne.w	800fd12 <_strtod_l+0x452>
 80103a2:	a307      	add	r3, pc, #28	; (adr r3, 80103c0 <_strtod_l+0xb00>)
 80103a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a8:	4630      	mov	r0, r6
 80103aa:	4639      	mov	r1, r7
 80103ac:	f7f0 fbe4 	bl	8000b78 <__aeabi_dcmpgt>
 80103b0:	2800      	cmp	r0, #0
 80103b2:	f43f af79 	beq.w	80102a8 <_strtod_l+0x9e8>
 80103b6:	e4ac      	b.n	800fd12 <_strtod_l+0x452>
 80103b8:	94a03595 	.word	0x94a03595
 80103bc:	3fdfffff 	.word	0x3fdfffff
 80103c0:	35afe535 	.word	0x35afe535
 80103c4:	3fe00000 	.word	0x3fe00000
 80103c8:	000fffff 	.word	0x000fffff
 80103cc:	7ff00000 	.word	0x7ff00000
 80103d0:	7fefffff 	.word	0x7fefffff
 80103d4:	39500000 	.word	0x39500000
 80103d8:	3ff00000 	.word	0x3ff00000
 80103dc:	7fe00000 	.word	0x7fe00000
 80103e0:	7c9fffff 	.word	0x7c9fffff
 80103e4:	3fe00000 	.word	0x3fe00000
 80103e8:	bff00000 	.word	0xbff00000
 80103ec:	9b04      	ldr	r3, [sp, #16]
 80103ee:	b333      	cbz	r3, 801043e <_strtod_l+0xb7e>
 80103f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103f2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80103f6:	d822      	bhi.n	801043e <_strtod_l+0xb7e>
 80103f8:	a327      	add	r3, pc, #156	; (adr r3, 8010498 <_strtod_l+0xbd8>)
 80103fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fe:	4630      	mov	r0, r6
 8010400:	4639      	mov	r1, r7
 8010402:	f7f0 fba5 	bl	8000b50 <__aeabi_dcmple>
 8010406:	b1a0      	cbz	r0, 8010432 <_strtod_l+0xb72>
 8010408:	4639      	mov	r1, r7
 801040a:	4630      	mov	r0, r6
 801040c:	f7f0 fbfc 	bl	8000c08 <__aeabi_d2uiz>
 8010410:	2800      	cmp	r0, #0
 8010412:	bf08      	it	eq
 8010414:	2001      	moveq	r0, #1
 8010416:	f7f0 f8a5 	bl	8000564 <__aeabi_ui2d>
 801041a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801041c:	4606      	mov	r6, r0
 801041e:	460f      	mov	r7, r1
 8010420:	bb03      	cbnz	r3, 8010464 <_strtod_l+0xba4>
 8010422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010426:	9012      	str	r0, [sp, #72]	; 0x48
 8010428:	9313      	str	r3, [sp, #76]	; 0x4c
 801042a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801042e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010434:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010436:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801043a:	1a9b      	subs	r3, r3, r2
 801043c:	930b      	str	r3, [sp, #44]	; 0x2c
 801043e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8010442:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8010446:	f001 fd25 	bl	8011e94 <__ulp>
 801044a:	4650      	mov	r0, sl
 801044c:	ec53 2b10 	vmov	r2, r3, d0
 8010450:	4659      	mov	r1, fp
 8010452:	f7f0 f901 	bl	8000658 <__aeabi_dmul>
 8010456:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801045a:	f7ef ff47 	bl	80002ec <__adddf3>
 801045e:	4682      	mov	sl, r0
 8010460:	468b      	mov	fp, r1
 8010462:	e772      	b.n	801034a <_strtod_l+0xa8a>
 8010464:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8010468:	e7df      	b.n	801042a <_strtod_l+0xb6a>
 801046a:	a30d      	add	r3, pc, #52	; (adr r3, 80104a0 <_strtod_l+0xbe0>)
 801046c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010470:	f7f0 fb64 	bl	8000b3c <__aeabi_dcmplt>
 8010474:	e79c      	b.n	80103b0 <_strtod_l+0xaf0>
 8010476:	2300      	movs	r3, #0
 8010478:	930d      	str	r3, [sp, #52]	; 0x34
 801047a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801047c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801047e:	6013      	str	r3, [r2, #0]
 8010480:	f7ff ba61 	b.w	800f946 <_strtod_l+0x86>
 8010484:	2b65      	cmp	r3, #101	; 0x65
 8010486:	f04f 0200 	mov.w	r2, #0
 801048a:	f43f ab4e 	beq.w	800fb2a <_strtod_l+0x26a>
 801048e:	2101      	movs	r1, #1
 8010490:	4614      	mov	r4, r2
 8010492:	9104      	str	r1, [sp, #16]
 8010494:	f7ff bacb 	b.w	800fa2e <_strtod_l+0x16e>
 8010498:	ffc00000 	.word	0xffc00000
 801049c:	41dfffff 	.word	0x41dfffff
 80104a0:	94a03595 	.word	0x94a03595
 80104a4:	3fcfffff 	.word	0x3fcfffff

080104a8 <strtod>:
 80104a8:	4b07      	ldr	r3, [pc, #28]	; (80104c8 <strtod+0x20>)
 80104aa:	4a08      	ldr	r2, [pc, #32]	; (80104cc <strtod+0x24>)
 80104ac:	b410      	push	{r4}
 80104ae:	681c      	ldr	r4, [r3, #0]
 80104b0:	6a23      	ldr	r3, [r4, #32]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	bf08      	it	eq
 80104b6:	4613      	moveq	r3, r2
 80104b8:	460a      	mov	r2, r1
 80104ba:	4601      	mov	r1, r0
 80104bc:	4620      	mov	r0, r4
 80104be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104c2:	f7ff b9fd 	b.w	800f8c0 <_strtod_l>
 80104c6:	bf00      	nop
 80104c8:	2000002c 	.word	0x2000002c
 80104cc:	20000090 	.word	0x20000090

080104d0 <_strtoul_l.isra.0>:
 80104d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104d4:	4680      	mov	r8, r0
 80104d6:	4689      	mov	r9, r1
 80104d8:	4692      	mov	sl, r2
 80104da:	461e      	mov	r6, r3
 80104dc:	460f      	mov	r7, r1
 80104de:	463d      	mov	r5, r7
 80104e0:	9808      	ldr	r0, [sp, #32]
 80104e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80104e6:	f7fe fb95 	bl	800ec14 <__locale_ctype_ptr_l>
 80104ea:	4420      	add	r0, r4
 80104ec:	7843      	ldrb	r3, [r0, #1]
 80104ee:	f013 0308 	ands.w	r3, r3, #8
 80104f2:	d130      	bne.n	8010556 <_strtoul_l.isra.0+0x86>
 80104f4:	2c2d      	cmp	r4, #45	; 0x2d
 80104f6:	d130      	bne.n	801055a <_strtoul_l.isra.0+0x8a>
 80104f8:	787c      	ldrb	r4, [r7, #1]
 80104fa:	1cbd      	adds	r5, r7, #2
 80104fc:	2101      	movs	r1, #1
 80104fe:	2e00      	cmp	r6, #0
 8010500:	d05c      	beq.n	80105bc <_strtoul_l.isra.0+0xec>
 8010502:	2e10      	cmp	r6, #16
 8010504:	d109      	bne.n	801051a <_strtoul_l.isra.0+0x4a>
 8010506:	2c30      	cmp	r4, #48	; 0x30
 8010508:	d107      	bne.n	801051a <_strtoul_l.isra.0+0x4a>
 801050a:	782b      	ldrb	r3, [r5, #0]
 801050c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010510:	2b58      	cmp	r3, #88	; 0x58
 8010512:	d14e      	bne.n	80105b2 <_strtoul_l.isra.0+0xe2>
 8010514:	786c      	ldrb	r4, [r5, #1]
 8010516:	2610      	movs	r6, #16
 8010518:	3502      	adds	r5, #2
 801051a:	f04f 32ff 	mov.w	r2, #4294967295
 801051e:	2300      	movs	r3, #0
 8010520:	fbb2 f2f6 	udiv	r2, r2, r6
 8010524:	fb06 fc02 	mul.w	ip, r6, r2
 8010528:	ea6f 0c0c 	mvn.w	ip, ip
 801052c:	4618      	mov	r0, r3
 801052e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8010532:	2f09      	cmp	r7, #9
 8010534:	d817      	bhi.n	8010566 <_strtoul_l.isra.0+0x96>
 8010536:	463c      	mov	r4, r7
 8010538:	42a6      	cmp	r6, r4
 801053a:	dd23      	ble.n	8010584 <_strtoul_l.isra.0+0xb4>
 801053c:	2b00      	cmp	r3, #0
 801053e:	db1e      	blt.n	801057e <_strtoul_l.isra.0+0xae>
 8010540:	4282      	cmp	r2, r0
 8010542:	d31c      	bcc.n	801057e <_strtoul_l.isra.0+0xae>
 8010544:	d101      	bne.n	801054a <_strtoul_l.isra.0+0x7a>
 8010546:	45a4      	cmp	ip, r4
 8010548:	db19      	blt.n	801057e <_strtoul_l.isra.0+0xae>
 801054a:	fb00 4006 	mla	r0, r0, r6, r4
 801054e:	2301      	movs	r3, #1
 8010550:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010554:	e7eb      	b.n	801052e <_strtoul_l.isra.0+0x5e>
 8010556:	462f      	mov	r7, r5
 8010558:	e7c1      	b.n	80104de <_strtoul_l.isra.0+0xe>
 801055a:	2c2b      	cmp	r4, #43	; 0x2b
 801055c:	bf04      	itt	eq
 801055e:	1cbd      	addeq	r5, r7, #2
 8010560:	787c      	ldrbeq	r4, [r7, #1]
 8010562:	4619      	mov	r1, r3
 8010564:	e7cb      	b.n	80104fe <_strtoul_l.isra.0+0x2e>
 8010566:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801056a:	2f19      	cmp	r7, #25
 801056c:	d801      	bhi.n	8010572 <_strtoul_l.isra.0+0xa2>
 801056e:	3c37      	subs	r4, #55	; 0x37
 8010570:	e7e2      	b.n	8010538 <_strtoul_l.isra.0+0x68>
 8010572:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8010576:	2f19      	cmp	r7, #25
 8010578:	d804      	bhi.n	8010584 <_strtoul_l.isra.0+0xb4>
 801057a:	3c57      	subs	r4, #87	; 0x57
 801057c:	e7dc      	b.n	8010538 <_strtoul_l.isra.0+0x68>
 801057e:	f04f 33ff 	mov.w	r3, #4294967295
 8010582:	e7e5      	b.n	8010550 <_strtoul_l.isra.0+0x80>
 8010584:	2b00      	cmp	r3, #0
 8010586:	da09      	bge.n	801059c <_strtoul_l.isra.0+0xcc>
 8010588:	2322      	movs	r3, #34	; 0x22
 801058a:	f8c8 3000 	str.w	r3, [r8]
 801058e:	f04f 30ff 	mov.w	r0, #4294967295
 8010592:	f1ba 0f00 	cmp.w	sl, #0
 8010596:	d107      	bne.n	80105a8 <_strtoul_l.isra.0+0xd8>
 8010598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801059c:	b101      	cbz	r1, 80105a0 <_strtoul_l.isra.0+0xd0>
 801059e:	4240      	negs	r0, r0
 80105a0:	f1ba 0f00 	cmp.w	sl, #0
 80105a4:	d0f8      	beq.n	8010598 <_strtoul_l.isra.0+0xc8>
 80105a6:	b10b      	cbz	r3, 80105ac <_strtoul_l.isra.0+0xdc>
 80105a8:	f105 39ff 	add.w	r9, r5, #4294967295
 80105ac:	f8ca 9000 	str.w	r9, [sl]
 80105b0:	e7f2      	b.n	8010598 <_strtoul_l.isra.0+0xc8>
 80105b2:	2430      	movs	r4, #48	; 0x30
 80105b4:	2e00      	cmp	r6, #0
 80105b6:	d1b0      	bne.n	801051a <_strtoul_l.isra.0+0x4a>
 80105b8:	2608      	movs	r6, #8
 80105ba:	e7ae      	b.n	801051a <_strtoul_l.isra.0+0x4a>
 80105bc:	2c30      	cmp	r4, #48	; 0x30
 80105be:	d0a4      	beq.n	801050a <_strtoul_l.isra.0+0x3a>
 80105c0:	260a      	movs	r6, #10
 80105c2:	e7aa      	b.n	801051a <_strtoul_l.isra.0+0x4a>

080105c4 <_strtoul_r>:
 80105c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105c6:	4c06      	ldr	r4, [pc, #24]	; (80105e0 <_strtoul_r+0x1c>)
 80105c8:	4d06      	ldr	r5, [pc, #24]	; (80105e4 <_strtoul_r+0x20>)
 80105ca:	6824      	ldr	r4, [r4, #0]
 80105cc:	6a24      	ldr	r4, [r4, #32]
 80105ce:	2c00      	cmp	r4, #0
 80105d0:	bf08      	it	eq
 80105d2:	462c      	moveq	r4, r5
 80105d4:	9400      	str	r4, [sp, #0]
 80105d6:	f7ff ff7b 	bl	80104d0 <_strtoul_l.isra.0>
 80105da:	b003      	add	sp, #12
 80105dc:	bd30      	pop	{r4, r5, pc}
 80105de:	bf00      	nop
 80105e0:	2000002c 	.word	0x2000002c
 80105e4:	20000090 	.word	0x20000090

080105e8 <__ascii_wctomb>:
 80105e8:	b149      	cbz	r1, 80105fe <__ascii_wctomb+0x16>
 80105ea:	2aff      	cmp	r2, #255	; 0xff
 80105ec:	bf85      	ittet	hi
 80105ee:	238a      	movhi	r3, #138	; 0x8a
 80105f0:	6003      	strhi	r3, [r0, #0]
 80105f2:	700a      	strbls	r2, [r1, #0]
 80105f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80105f8:	bf98      	it	ls
 80105fa:	2001      	movls	r0, #1
 80105fc:	4770      	bx	lr
 80105fe:	4608      	mov	r0, r1
 8010600:	4770      	bx	lr

08010602 <quorem>:
 8010602:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010606:	6903      	ldr	r3, [r0, #16]
 8010608:	690c      	ldr	r4, [r1, #16]
 801060a:	42a3      	cmp	r3, r4
 801060c:	4680      	mov	r8, r0
 801060e:	f2c0 8082 	blt.w	8010716 <quorem+0x114>
 8010612:	3c01      	subs	r4, #1
 8010614:	f101 0714 	add.w	r7, r1, #20
 8010618:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801061c:	f100 0614 	add.w	r6, r0, #20
 8010620:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8010624:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8010628:	eb06 030c 	add.w	r3, r6, ip
 801062c:	3501      	adds	r5, #1
 801062e:	eb07 090c 	add.w	r9, r7, ip
 8010632:	9301      	str	r3, [sp, #4]
 8010634:	fbb0 f5f5 	udiv	r5, r0, r5
 8010638:	b395      	cbz	r5, 80106a0 <quorem+0x9e>
 801063a:	f04f 0a00 	mov.w	sl, #0
 801063e:	4638      	mov	r0, r7
 8010640:	46b6      	mov	lr, r6
 8010642:	46d3      	mov	fp, sl
 8010644:	f850 2b04 	ldr.w	r2, [r0], #4
 8010648:	b293      	uxth	r3, r2
 801064a:	fb05 a303 	mla	r3, r5, r3, sl
 801064e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010652:	b29b      	uxth	r3, r3
 8010654:	ebab 0303 	sub.w	r3, fp, r3
 8010658:	0c12      	lsrs	r2, r2, #16
 801065a:	f8de b000 	ldr.w	fp, [lr]
 801065e:	fb05 a202 	mla	r2, r5, r2, sl
 8010662:	fa13 f38b 	uxtah	r3, r3, fp
 8010666:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801066a:	fa1f fb82 	uxth.w	fp, r2
 801066e:	f8de 2000 	ldr.w	r2, [lr]
 8010672:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8010676:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801067a:	b29b      	uxth	r3, r3
 801067c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010680:	4581      	cmp	r9, r0
 8010682:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010686:	f84e 3b04 	str.w	r3, [lr], #4
 801068a:	d2db      	bcs.n	8010644 <quorem+0x42>
 801068c:	f856 300c 	ldr.w	r3, [r6, ip]
 8010690:	b933      	cbnz	r3, 80106a0 <quorem+0x9e>
 8010692:	9b01      	ldr	r3, [sp, #4]
 8010694:	3b04      	subs	r3, #4
 8010696:	429e      	cmp	r6, r3
 8010698:	461a      	mov	r2, r3
 801069a:	d330      	bcc.n	80106fe <quorem+0xfc>
 801069c:	f8c8 4010 	str.w	r4, [r8, #16]
 80106a0:	4640      	mov	r0, r8
 80106a2:	f001 fb7f 	bl	8011da4 <__mcmp>
 80106a6:	2800      	cmp	r0, #0
 80106a8:	db25      	blt.n	80106f6 <quorem+0xf4>
 80106aa:	3501      	adds	r5, #1
 80106ac:	4630      	mov	r0, r6
 80106ae:	f04f 0c00 	mov.w	ip, #0
 80106b2:	f857 2b04 	ldr.w	r2, [r7], #4
 80106b6:	f8d0 e000 	ldr.w	lr, [r0]
 80106ba:	b293      	uxth	r3, r2
 80106bc:	ebac 0303 	sub.w	r3, ip, r3
 80106c0:	0c12      	lsrs	r2, r2, #16
 80106c2:	fa13 f38e 	uxtah	r3, r3, lr
 80106c6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80106ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106d4:	45b9      	cmp	r9, r7
 80106d6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80106da:	f840 3b04 	str.w	r3, [r0], #4
 80106de:	d2e8      	bcs.n	80106b2 <quorem+0xb0>
 80106e0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80106e4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80106e8:	b92a      	cbnz	r2, 80106f6 <quorem+0xf4>
 80106ea:	3b04      	subs	r3, #4
 80106ec:	429e      	cmp	r6, r3
 80106ee:	461a      	mov	r2, r3
 80106f0:	d30b      	bcc.n	801070a <quorem+0x108>
 80106f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80106f6:	4628      	mov	r0, r5
 80106f8:	b003      	add	sp, #12
 80106fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106fe:	6812      	ldr	r2, [r2, #0]
 8010700:	3b04      	subs	r3, #4
 8010702:	2a00      	cmp	r2, #0
 8010704:	d1ca      	bne.n	801069c <quorem+0x9a>
 8010706:	3c01      	subs	r4, #1
 8010708:	e7c5      	b.n	8010696 <quorem+0x94>
 801070a:	6812      	ldr	r2, [r2, #0]
 801070c:	3b04      	subs	r3, #4
 801070e:	2a00      	cmp	r2, #0
 8010710:	d1ef      	bne.n	80106f2 <quorem+0xf0>
 8010712:	3c01      	subs	r4, #1
 8010714:	e7ea      	b.n	80106ec <quorem+0xea>
 8010716:	2000      	movs	r0, #0
 8010718:	e7ee      	b.n	80106f8 <quorem+0xf6>
 801071a:	0000      	movs	r0, r0
 801071c:	0000      	movs	r0, r0
	...

08010720 <_dtoa_r>:
 8010720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010724:	ec57 6b10 	vmov	r6, r7, d0
 8010728:	b097      	sub	sp, #92	; 0x5c
 801072a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801072c:	9106      	str	r1, [sp, #24]
 801072e:	4604      	mov	r4, r0
 8010730:	920b      	str	r2, [sp, #44]	; 0x2c
 8010732:	9312      	str	r3, [sp, #72]	; 0x48
 8010734:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010738:	e9cd 6700 	strd	r6, r7, [sp]
 801073c:	b93d      	cbnz	r5, 801074e <_dtoa_r+0x2e>
 801073e:	2010      	movs	r0, #16
 8010740:	f7fe fa7a 	bl	800ec38 <malloc>
 8010744:	6260      	str	r0, [r4, #36]	; 0x24
 8010746:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801074a:	6005      	str	r5, [r0, #0]
 801074c:	60c5      	str	r5, [r0, #12]
 801074e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010750:	6819      	ldr	r1, [r3, #0]
 8010752:	b151      	cbz	r1, 801076a <_dtoa_r+0x4a>
 8010754:	685a      	ldr	r2, [r3, #4]
 8010756:	604a      	str	r2, [r1, #4]
 8010758:	2301      	movs	r3, #1
 801075a:	4093      	lsls	r3, r2
 801075c:	608b      	str	r3, [r1, #8]
 801075e:	4620      	mov	r0, r4
 8010760:	f001 f900 	bl	8011964 <_Bfree>
 8010764:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010766:	2200      	movs	r2, #0
 8010768:	601a      	str	r2, [r3, #0]
 801076a:	1e3b      	subs	r3, r7, #0
 801076c:	bfbb      	ittet	lt
 801076e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010772:	9301      	strlt	r3, [sp, #4]
 8010774:	2300      	movge	r3, #0
 8010776:	2201      	movlt	r2, #1
 8010778:	bfac      	ite	ge
 801077a:	f8c8 3000 	strge.w	r3, [r8]
 801077e:	f8c8 2000 	strlt.w	r2, [r8]
 8010782:	4baf      	ldr	r3, [pc, #700]	; (8010a40 <_dtoa_r+0x320>)
 8010784:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010788:	ea33 0308 	bics.w	r3, r3, r8
 801078c:	d114      	bne.n	80107b8 <_dtoa_r+0x98>
 801078e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010790:	f242 730f 	movw	r3, #9999	; 0x270f
 8010794:	6013      	str	r3, [r2, #0]
 8010796:	9b00      	ldr	r3, [sp, #0]
 8010798:	b923      	cbnz	r3, 80107a4 <_dtoa_r+0x84>
 801079a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801079e:	2800      	cmp	r0, #0
 80107a0:	f000 8542 	beq.w	8011228 <_dtoa_r+0xb08>
 80107a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8010a54 <_dtoa_r+0x334>
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	f000 8544 	beq.w	8011238 <_dtoa_r+0xb18>
 80107b0:	f10b 0303 	add.w	r3, fp, #3
 80107b4:	f000 bd3e 	b.w	8011234 <_dtoa_r+0xb14>
 80107b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80107bc:	2200      	movs	r2, #0
 80107be:	2300      	movs	r3, #0
 80107c0:	4630      	mov	r0, r6
 80107c2:	4639      	mov	r1, r7
 80107c4:	f7f0 f9b0 	bl	8000b28 <__aeabi_dcmpeq>
 80107c8:	4681      	mov	r9, r0
 80107ca:	b168      	cbz	r0, 80107e8 <_dtoa_r+0xc8>
 80107cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80107ce:	2301      	movs	r3, #1
 80107d0:	6013      	str	r3, [r2, #0]
 80107d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	f000 8524 	beq.w	8011222 <_dtoa_r+0xb02>
 80107da:	4b9a      	ldr	r3, [pc, #616]	; (8010a44 <_dtoa_r+0x324>)
 80107dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107de:	f103 3bff 	add.w	fp, r3, #4294967295
 80107e2:	6013      	str	r3, [r2, #0]
 80107e4:	f000 bd28 	b.w	8011238 <_dtoa_r+0xb18>
 80107e8:	aa14      	add	r2, sp, #80	; 0x50
 80107ea:	a915      	add	r1, sp, #84	; 0x54
 80107ec:	ec47 6b10 	vmov	d0, r6, r7
 80107f0:	4620      	mov	r0, r4
 80107f2:	f001 fbc5 	bl	8011f80 <__d2b>
 80107f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80107fa:	9004      	str	r0, [sp, #16]
 80107fc:	2d00      	cmp	r5, #0
 80107fe:	d07c      	beq.n	80108fa <_dtoa_r+0x1da>
 8010800:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010804:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010808:	46b2      	mov	sl, r6
 801080a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801080e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010812:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8010816:	2200      	movs	r2, #0
 8010818:	4b8b      	ldr	r3, [pc, #556]	; (8010a48 <_dtoa_r+0x328>)
 801081a:	4650      	mov	r0, sl
 801081c:	4659      	mov	r1, fp
 801081e:	f7ef fd63 	bl	80002e8 <__aeabi_dsub>
 8010822:	a381      	add	r3, pc, #516	; (adr r3, 8010a28 <_dtoa_r+0x308>)
 8010824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010828:	f7ef ff16 	bl	8000658 <__aeabi_dmul>
 801082c:	a380      	add	r3, pc, #512	; (adr r3, 8010a30 <_dtoa_r+0x310>)
 801082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010832:	f7ef fd5b 	bl	80002ec <__adddf3>
 8010836:	4606      	mov	r6, r0
 8010838:	4628      	mov	r0, r5
 801083a:	460f      	mov	r7, r1
 801083c:	f7ef fea2 	bl	8000584 <__aeabi_i2d>
 8010840:	a37d      	add	r3, pc, #500	; (adr r3, 8010a38 <_dtoa_r+0x318>)
 8010842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010846:	f7ef ff07 	bl	8000658 <__aeabi_dmul>
 801084a:	4602      	mov	r2, r0
 801084c:	460b      	mov	r3, r1
 801084e:	4630      	mov	r0, r6
 8010850:	4639      	mov	r1, r7
 8010852:	f7ef fd4b 	bl	80002ec <__adddf3>
 8010856:	4606      	mov	r6, r0
 8010858:	460f      	mov	r7, r1
 801085a:	f7f0 f9ad 	bl	8000bb8 <__aeabi_d2iz>
 801085e:	2200      	movs	r2, #0
 8010860:	4682      	mov	sl, r0
 8010862:	2300      	movs	r3, #0
 8010864:	4630      	mov	r0, r6
 8010866:	4639      	mov	r1, r7
 8010868:	f7f0 f968 	bl	8000b3c <__aeabi_dcmplt>
 801086c:	b148      	cbz	r0, 8010882 <_dtoa_r+0x162>
 801086e:	4650      	mov	r0, sl
 8010870:	f7ef fe88 	bl	8000584 <__aeabi_i2d>
 8010874:	4632      	mov	r2, r6
 8010876:	463b      	mov	r3, r7
 8010878:	f7f0 f956 	bl	8000b28 <__aeabi_dcmpeq>
 801087c:	b908      	cbnz	r0, 8010882 <_dtoa_r+0x162>
 801087e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010882:	f1ba 0f16 	cmp.w	sl, #22
 8010886:	d859      	bhi.n	801093c <_dtoa_r+0x21c>
 8010888:	4970      	ldr	r1, [pc, #448]	; (8010a4c <_dtoa_r+0x32c>)
 801088a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801088e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010896:	f7f0 f96f 	bl	8000b78 <__aeabi_dcmpgt>
 801089a:	2800      	cmp	r0, #0
 801089c:	d050      	beq.n	8010940 <_dtoa_r+0x220>
 801089e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80108a2:	2300      	movs	r3, #0
 80108a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80108a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108a8:	1b5d      	subs	r5, r3, r5
 80108aa:	f1b5 0801 	subs.w	r8, r5, #1
 80108ae:	bf49      	itett	mi
 80108b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80108b4:	2300      	movpl	r3, #0
 80108b6:	9305      	strmi	r3, [sp, #20]
 80108b8:	f04f 0800 	movmi.w	r8, #0
 80108bc:	bf58      	it	pl
 80108be:	9305      	strpl	r3, [sp, #20]
 80108c0:	f1ba 0f00 	cmp.w	sl, #0
 80108c4:	db3e      	blt.n	8010944 <_dtoa_r+0x224>
 80108c6:	2300      	movs	r3, #0
 80108c8:	44d0      	add	r8, sl
 80108ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80108ce:	9307      	str	r3, [sp, #28]
 80108d0:	9b06      	ldr	r3, [sp, #24]
 80108d2:	2b09      	cmp	r3, #9
 80108d4:	f200 8090 	bhi.w	80109f8 <_dtoa_r+0x2d8>
 80108d8:	2b05      	cmp	r3, #5
 80108da:	bfc4      	itt	gt
 80108dc:	3b04      	subgt	r3, #4
 80108de:	9306      	strgt	r3, [sp, #24]
 80108e0:	9b06      	ldr	r3, [sp, #24]
 80108e2:	f1a3 0302 	sub.w	r3, r3, #2
 80108e6:	bfcc      	ite	gt
 80108e8:	2500      	movgt	r5, #0
 80108ea:	2501      	movle	r5, #1
 80108ec:	2b03      	cmp	r3, #3
 80108ee:	f200 808f 	bhi.w	8010a10 <_dtoa_r+0x2f0>
 80108f2:	e8df f003 	tbb	[pc, r3]
 80108f6:	7f7d      	.short	0x7f7d
 80108f8:	7131      	.short	0x7131
 80108fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80108fe:	441d      	add	r5, r3
 8010900:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010904:	2820      	cmp	r0, #32
 8010906:	dd13      	ble.n	8010930 <_dtoa_r+0x210>
 8010908:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801090c:	9b00      	ldr	r3, [sp, #0]
 801090e:	fa08 f800 	lsl.w	r8, r8, r0
 8010912:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010916:	fa23 f000 	lsr.w	r0, r3, r0
 801091a:	ea48 0000 	orr.w	r0, r8, r0
 801091e:	f7ef fe21 	bl	8000564 <__aeabi_ui2d>
 8010922:	2301      	movs	r3, #1
 8010924:	4682      	mov	sl, r0
 8010926:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801092a:	3d01      	subs	r5, #1
 801092c:	9313      	str	r3, [sp, #76]	; 0x4c
 801092e:	e772      	b.n	8010816 <_dtoa_r+0xf6>
 8010930:	9b00      	ldr	r3, [sp, #0]
 8010932:	f1c0 0020 	rsb	r0, r0, #32
 8010936:	fa03 f000 	lsl.w	r0, r3, r0
 801093a:	e7f0      	b.n	801091e <_dtoa_r+0x1fe>
 801093c:	2301      	movs	r3, #1
 801093e:	e7b1      	b.n	80108a4 <_dtoa_r+0x184>
 8010940:	900f      	str	r0, [sp, #60]	; 0x3c
 8010942:	e7b0      	b.n	80108a6 <_dtoa_r+0x186>
 8010944:	9b05      	ldr	r3, [sp, #20]
 8010946:	eba3 030a 	sub.w	r3, r3, sl
 801094a:	9305      	str	r3, [sp, #20]
 801094c:	f1ca 0300 	rsb	r3, sl, #0
 8010950:	9307      	str	r3, [sp, #28]
 8010952:	2300      	movs	r3, #0
 8010954:	930e      	str	r3, [sp, #56]	; 0x38
 8010956:	e7bb      	b.n	80108d0 <_dtoa_r+0x1b0>
 8010958:	2301      	movs	r3, #1
 801095a:	930a      	str	r3, [sp, #40]	; 0x28
 801095c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801095e:	2b00      	cmp	r3, #0
 8010960:	dd59      	ble.n	8010a16 <_dtoa_r+0x2f6>
 8010962:	9302      	str	r3, [sp, #8]
 8010964:	4699      	mov	r9, r3
 8010966:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010968:	2200      	movs	r2, #0
 801096a:	6072      	str	r2, [r6, #4]
 801096c:	2204      	movs	r2, #4
 801096e:	f102 0014 	add.w	r0, r2, #20
 8010972:	4298      	cmp	r0, r3
 8010974:	6871      	ldr	r1, [r6, #4]
 8010976:	d953      	bls.n	8010a20 <_dtoa_r+0x300>
 8010978:	4620      	mov	r0, r4
 801097a:	f000 ffbf 	bl	80118fc <_Balloc>
 801097e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010980:	6030      	str	r0, [r6, #0]
 8010982:	f1b9 0f0e 	cmp.w	r9, #14
 8010986:	f8d3 b000 	ldr.w	fp, [r3]
 801098a:	f200 80e6 	bhi.w	8010b5a <_dtoa_r+0x43a>
 801098e:	2d00      	cmp	r5, #0
 8010990:	f000 80e3 	beq.w	8010b5a <_dtoa_r+0x43a>
 8010994:	ed9d 7b00 	vldr	d7, [sp]
 8010998:	f1ba 0f00 	cmp.w	sl, #0
 801099c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80109a0:	dd74      	ble.n	8010a8c <_dtoa_r+0x36c>
 80109a2:	4a2a      	ldr	r2, [pc, #168]	; (8010a4c <_dtoa_r+0x32c>)
 80109a4:	f00a 030f 	and.w	r3, sl, #15
 80109a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80109ac:	ed93 7b00 	vldr	d7, [r3]
 80109b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80109b4:	06f0      	lsls	r0, r6, #27
 80109b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80109ba:	d565      	bpl.n	8010a88 <_dtoa_r+0x368>
 80109bc:	4b24      	ldr	r3, [pc, #144]	; (8010a50 <_dtoa_r+0x330>)
 80109be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80109c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80109c6:	f7ef ff71 	bl	80008ac <__aeabi_ddiv>
 80109ca:	e9cd 0100 	strd	r0, r1, [sp]
 80109ce:	f006 060f 	and.w	r6, r6, #15
 80109d2:	2503      	movs	r5, #3
 80109d4:	4f1e      	ldr	r7, [pc, #120]	; (8010a50 <_dtoa_r+0x330>)
 80109d6:	e04c      	b.n	8010a72 <_dtoa_r+0x352>
 80109d8:	2301      	movs	r3, #1
 80109da:	930a      	str	r3, [sp, #40]	; 0x28
 80109dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109de:	4453      	add	r3, sl
 80109e0:	f103 0901 	add.w	r9, r3, #1
 80109e4:	9302      	str	r3, [sp, #8]
 80109e6:	464b      	mov	r3, r9
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	bfb8      	it	lt
 80109ec:	2301      	movlt	r3, #1
 80109ee:	e7ba      	b.n	8010966 <_dtoa_r+0x246>
 80109f0:	2300      	movs	r3, #0
 80109f2:	e7b2      	b.n	801095a <_dtoa_r+0x23a>
 80109f4:	2300      	movs	r3, #0
 80109f6:	e7f0      	b.n	80109da <_dtoa_r+0x2ba>
 80109f8:	2501      	movs	r5, #1
 80109fa:	2300      	movs	r3, #0
 80109fc:	9306      	str	r3, [sp, #24]
 80109fe:	950a      	str	r5, [sp, #40]	; 0x28
 8010a00:	f04f 33ff 	mov.w	r3, #4294967295
 8010a04:	9302      	str	r3, [sp, #8]
 8010a06:	4699      	mov	r9, r3
 8010a08:	2200      	movs	r2, #0
 8010a0a:	2312      	movs	r3, #18
 8010a0c:	920b      	str	r2, [sp, #44]	; 0x2c
 8010a0e:	e7aa      	b.n	8010966 <_dtoa_r+0x246>
 8010a10:	2301      	movs	r3, #1
 8010a12:	930a      	str	r3, [sp, #40]	; 0x28
 8010a14:	e7f4      	b.n	8010a00 <_dtoa_r+0x2e0>
 8010a16:	2301      	movs	r3, #1
 8010a18:	9302      	str	r3, [sp, #8]
 8010a1a:	4699      	mov	r9, r3
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	e7f5      	b.n	8010a0c <_dtoa_r+0x2ec>
 8010a20:	3101      	adds	r1, #1
 8010a22:	6071      	str	r1, [r6, #4]
 8010a24:	0052      	lsls	r2, r2, #1
 8010a26:	e7a2      	b.n	801096e <_dtoa_r+0x24e>
 8010a28:	636f4361 	.word	0x636f4361
 8010a2c:	3fd287a7 	.word	0x3fd287a7
 8010a30:	8b60c8b3 	.word	0x8b60c8b3
 8010a34:	3fc68a28 	.word	0x3fc68a28
 8010a38:	509f79fb 	.word	0x509f79fb
 8010a3c:	3fd34413 	.word	0x3fd34413
 8010a40:	7ff00000 	.word	0x7ff00000
 8010a44:	0801543c 	.word	0x0801543c
 8010a48:	3ff80000 	.word	0x3ff80000
 8010a4c:	08015340 	.word	0x08015340
 8010a50:	08015318 	.word	0x08015318
 8010a54:	08015312 	.word	0x08015312
 8010a58:	07f1      	lsls	r1, r6, #31
 8010a5a:	d508      	bpl.n	8010a6e <_dtoa_r+0x34e>
 8010a5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a64:	f7ef fdf8 	bl	8000658 <__aeabi_dmul>
 8010a68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010a6c:	3501      	adds	r5, #1
 8010a6e:	1076      	asrs	r6, r6, #1
 8010a70:	3708      	adds	r7, #8
 8010a72:	2e00      	cmp	r6, #0
 8010a74:	d1f0      	bne.n	8010a58 <_dtoa_r+0x338>
 8010a76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010a7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a7e:	f7ef ff15 	bl	80008ac <__aeabi_ddiv>
 8010a82:	e9cd 0100 	strd	r0, r1, [sp]
 8010a86:	e01a      	b.n	8010abe <_dtoa_r+0x39e>
 8010a88:	2502      	movs	r5, #2
 8010a8a:	e7a3      	b.n	80109d4 <_dtoa_r+0x2b4>
 8010a8c:	f000 80a0 	beq.w	8010bd0 <_dtoa_r+0x4b0>
 8010a90:	f1ca 0600 	rsb	r6, sl, #0
 8010a94:	4b9f      	ldr	r3, [pc, #636]	; (8010d14 <_dtoa_r+0x5f4>)
 8010a96:	4fa0      	ldr	r7, [pc, #640]	; (8010d18 <_dtoa_r+0x5f8>)
 8010a98:	f006 020f 	and.w	r2, r6, #15
 8010a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010aa8:	f7ef fdd6 	bl	8000658 <__aeabi_dmul>
 8010aac:	e9cd 0100 	strd	r0, r1, [sp]
 8010ab0:	1136      	asrs	r6, r6, #4
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	2502      	movs	r5, #2
 8010ab6:	2e00      	cmp	r6, #0
 8010ab8:	d17f      	bne.n	8010bba <_dtoa_r+0x49a>
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d1e1      	bne.n	8010a82 <_dtoa_r+0x362>
 8010abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	f000 8087 	beq.w	8010bd4 <_dtoa_r+0x4b4>
 8010ac6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010aca:	2200      	movs	r2, #0
 8010acc:	4b93      	ldr	r3, [pc, #588]	; (8010d1c <_dtoa_r+0x5fc>)
 8010ace:	4630      	mov	r0, r6
 8010ad0:	4639      	mov	r1, r7
 8010ad2:	f7f0 f833 	bl	8000b3c <__aeabi_dcmplt>
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	d07c      	beq.n	8010bd4 <_dtoa_r+0x4b4>
 8010ada:	f1b9 0f00 	cmp.w	r9, #0
 8010ade:	d079      	beq.n	8010bd4 <_dtoa_r+0x4b4>
 8010ae0:	9b02      	ldr	r3, [sp, #8]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	dd35      	ble.n	8010b52 <_dtoa_r+0x432>
 8010ae6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010aea:	9308      	str	r3, [sp, #32]
 8010aec:	4639      	mov	r1, r7
 8010aee:	2200      	movs	r2, #0
 8010af0:	4b8b      	ldr	r3, [pc, #556]	; (8010d20 <_dtoa_r+0x600>)
 8010af2:	4630      	mov	r0, r6
 8010af4:	f7ef fdb0 	bl	8000658 <__aeabi_dmul>
 8010af8:	e9cd 0100 	strd	r0, r1, [sp]
 8010afc:	9f02      	ldr	r7, [sp, #8]
 8010afe:	3501      	adds	r5, #1
 8010b00:	4628      	mov	r0, r5
 8010b02:	f7ef fd3f 	bl	8000584 <__aeabi_i2d>
 8010b06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b0a:	f7ef fda5 	bl	8000658 <__aeabi_dmul>
 8010b0e:	2200      	movs	r2, #0
 8010b10:	4b84      	ldr	r3, [pc, #528]	; (8010d24 <_dtoa_r+0x604>)
 8010b12:	f7ef fbeb 	bl	80002ec <__adddf3>
 8010b16:	4605      	mov	r5, r0
 8010b18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010b1c:	2f00      	cmp	r7, #0
 8010b1e:	d15d      	bne.n	8010bdc <_dtoa_r+0x4bc>
 8010b20:	2200      	movs	r2, #0
 8010b22:	4b81      	ldr	r3, [pc, #516]	; (8010d28 <_dtoa_r+0x608>)
 8010b24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b28:	f7ef fbde 	bl	80002e8 <__aeabi_dsub>
 8010b2c:	462a      	mov	r2, r5
 8010b2e:	4633      	mov	r3, r6
 8010b30:	e9cd 0100 	strd	r0, r1, [sp]
 8010b34:	f7f0 f820 	bl	8000b78 <__aeabi_dcmpgt>
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	f040 8288 	bne.w	801104e <_dtoa_r+0x92e>
 8010b3e:	462a      	mov	r2, r5
 8010b40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010b44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b48:	f7ef fff8 	bl	8000b3c <__aeabi_dcmplt>
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	f040 827c 	bne.w	801104a <_dtoa_r+0x92a>
 8010b52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010b56:	e9cd 2300 	strd	r2, r3, [sp]
 8010b5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	f2c0 8150 	blt.w	8010e02 <_dtoa_r+0x6e2>
 8010b62:	f1ba 0f0e 	cmp.w	sl, #14
 8010b66:	f300 814c 	bgt.w	8010e02 <_dtoa_r+0x6e2>
 8010b6a:	4b6a      	ldr	r3, [pc, #424]	; (8010d14 <_dtoa_r+0x5f4>)
 8010b6c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010b70:	ed93 7b00 	vldr	d7, [r3]
 8010b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010b7c:	f280 80d8 	bge.w	8010d30 <_dtoa_r+0x610>
 8010b80:	f1b9 0f00 	cmp.w	r9, #0
 8010b84:	f300 80d4 	bgt.w	8010d30 <_dtoa_r+0x610>
 8010b88:	f040 825e 	bne.w	8011048 <_dtoa_r+0x928>
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	4b66      	ldr	r3, [pc, #408]	; (8010d28 <_dtoa_r+0x608>)
 8010b90:	ec51 0b17 	vmov	r0, r1, d7
 8010b94:	f7ef fd60 	bl	8000658 <__aeabi_dmul>
 8010b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b9c:	f7ef ffe2 	bl	8000b64 <__aeabi_dcmpge>
 8010ba0:	464f      	mov	r7, r9
 8010ba2:	464e      	mov	r6, r9
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	f040 8234 	bne.w	8011012 <_dtoa_r+0x8f2>
 8010baa:	2331      	movs	r3, #49	; 0x31
 8010bac:	f10b 0501 	add.w	r5, fp, #1
 8010bb0:	f88b 3000 	strb.w	r3, [fp]
 8010bb4:	f10a 0a01 	add.w	sl, sl, #1
 8010bb8:	e22f      	b.n	801101a <_dtoa_r+0x8fa>
 8010bba:	07f2      	lsls	r2, r6, #31
 8010bbc:	d505      	bpl.n	8010bca <_dtoa_r+0x4aa>
 8010bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bc2:	f7ef fd49 	bl	8000658 <__aeabi_dmul>
 8010bc6:	3501      	adds	r5, #1
 8010bc8:	2301      	movs	r3, #1
 8010bca:	1076      	asrs	r6, r6, #1
 8010bcc:	3708      	adds	r7, #8
 8010bce:	e772      	b.n	8010ab6 <_dtoa_r+0x396>
 8010bd0:	2502      	movs	r5, #2
 8010bd2:	e774      	b.n	8010abe <_dtoa_r+0x39e>
 8010bd4:	f8cd a020 	str.w	sl, [sp, #32]
 8010bd8:	464f      	mov	r7, r9
 8010bda:	e791      	b.n	8010b00 <_dtoa_r+0x3e0>
 8010bdc:	4b4d      	ldr	r3, [pc, #308]	; (8010d14 <_dtoa_r+0x5f4>)
 8010bde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010be2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d047      	beq.n	8010c7c <_dtoa_r+0x55c>
 8010bec:	4602      	mov	r2, r0
 8010bee:	460b      	mov	r3, r1
 8010bf0:	2000      	movs	r0, #0
 8010bf2:	494e      	ldr	r1, [pc, #312]	; (8010d2c <_dtoa_r+0x60c>)
 8010bf4:	f7ef fe5a 	bl	80008ac <__aeabi_ddiv>
 8010bf8:	462a      	mov	r2, r5
 8010bfa:	4633      	mov	r3, r6
 8010bfc:	f7ef fb74 	bl	80002e8 <__aeabi_dsub>
 8010c00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010c04:	465d      	mov	r5, fp
 8010c06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c0a:	f7ef ffd5 	bl	8000bb8 <__aeabi_d2iz>
 8010c0e:	4606      	mov	r6, r0
 8010c10:	f7ef fcb8 	bl	8000584 <__aeabi_i2d>
 8010c14:	4602      	mov	r2, r0
 8010c16:	460b      	mov	r3, r1
 8010c18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c1c:	f7ef fb64 	bl	80002e8 <__aeabi_dsub>
 8010c20:	3630      	adds	r6, #48	; 0x30
 8010c22:	f805 6b01 	strb.w	r6, [r5], #1
 8010c26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010c2a:	e9cd 0100 	strd	r0, r1, [sp]
 8010c2e:	f7ef ff85 	bl	8000b3c <__aeabi_dcmplt>
 8010c32:	2800      	cmp	r0, #0
 8010c34:	d163      	bne.n	8010cfe <_dtoa_r+0x5de>
 8010c36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c3a:	2000      	movs	r0, #0
 8010c3c:	4937      	ldr	r1, [pc, #220]	; (8010d1c <_dtoa_r+0x5fc>)
 8010c3e:	f7ef fb53 	bl	80002e8 <__aeabi_dsub>
 8010c42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010c46:	f7ef ff79 	bl	8000b3c <__aeabi_dcmplt>
 8010c4a:	2800      	cmp	r0, #0
 8010c4c:	f040 80b7 	bne.w	8010dbe <_dtoa_r+0x69e>
 8010c50:	eba5 030b 	sub.w	r3, r5, fp
 8010c54:	429f      	cmp	r7, r3
 8010c56:	f77f af7c 	ble.w	8010b52 <_dtoa_r+0x432>
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	4b30      	ldr	r3, [pc, #192]	; (8010d20 <_dtoa_r+0x600>)
 8010c5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010c62:	f7ef fcf9 	bl	8000658 <__aeabi_dmul>
 8010c66:	2200      	movs	r2, #0
 8010c68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010c6c:	4b2c      	ldr	r3, [pc, #176]	; (8010d20 <_dtoa_r+0x600>)
 8010c6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c72:	f7ef fcf1 	bl	8000658 <__aeabi_dmul>
 8010c76:	e9cd 0100 	strd	r0, r1, [sp]
 8010c7a:	e7c4      	b.n	8010c06 <_dtoa_r+0x4e6>
 8010c7c:	462a      	mov	r2, r5
 8010c7e:	4633      	mov	r3, r6
 8010c80:	f7ef fcea 	bl	8000658 <__aeabi_dmul>
 8010c84:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010c88:	eb0b 0507 	add.w	r5, fp, r7
 8010c8c:	465e      	mov	r6, fp
 8010c8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c92:	f7ef ff91 	bl	8000bb8 <__aeabi_d2iz>
 8010c96:	4607      	mov	r7, r0
 8010c98:	f7ef fc74 	bl	8000584 <__aeabi_i2d>
 8010c9c:	3730      	adds	r7, #48	; 0x30
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	460b      	mov	r3, r1
 8010ca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ca6:	f7ef fb1f 	bl	80002e8 <__aeabi_dsub>
 8010caa:	f806 7b01 	strb.w	r7, [r6], #1
 8010cae:	42ae      	cmp	r6, r5
 8010cb0:	e9cd 0100 	strd	r0, r1, [sp]
 8010cb4:	f04f 0200 	mov.w	r2, #0
 8010cb8:	d126      	bne.n	8010d08 <_dtoa_r+0x5e8>
 8010cba:	4b1c      	ldr	r3, [pc, #112]	; (8010d2c <_dtoa_r+0x60c>)
 8010cbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010cc0:	f7ef fb14 	bl	80002ec <__adddf3>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ccc:	f7ef ff54 	bl	8000b78 <__aeabi_dcmpgt>
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	d174      	bne.n	8010dbe <_dtoa_r+0x69e>
 8010cd4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010cd8:	2000      	movs	r0, #0
 8010cda:	4914      	ldr	r1, [pc, #80]	; (8010d2c <_dtoa_r+0x60c>)
 8010cdc:	f7ef fb04 	bl	80002e8 <__aeabi_dsub>
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ce8:	f7ef ff28 	bl	8000b3c <__aeabi_dcmplt>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	f43f af30 	beq.w	8010b52 <_dtoa_r+0x432>
 8010cf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010cf6:	2b30      	cmp	r3, #48	; 0x30
 8010cf8:	f105 32ff 	add.w	r2, r5, #4294967295
 8010cfc:	d002      	beq.n	8010d04 <_dtoa_r+0x5e4>
 8010cfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010d02:	e04a      	b.n	8010d9a <_dtoa_r+0x67a>
 8010d04:	4615      	mov	r5, r2
 8010d06:	e7f4      	b.n	8010cf2 <_dtoa_r+0x5d2>
 8010d08:	4b05      	ldr	r3, [pc, #20]	; (8010d20 <_dtoa_r+0x600>)
 8010d0a:	f7ef fca5 	bl	8000658 <__aeabi_dmul>
 8010d0e:	e9cd 0100 	strd	r0, r1, [sp]
 8010d12:	e7bc      	b.n	8010c8e <_dtoa_r+0x56e>
 8010d14:	08015340 	.word	0x08015340
 8010d18:	08015318 	.word	0x08015318
 8010d1c:	3ff00000 	.word	0x3ff00000
 8010d20:	40240000 	.word	0x40240000
 8010d24:	401c0000 	.word	0x401c0000
 8010d28:	40140000 	.word	0x40140000
 8010d2c:	3fe00000 	.word	0x3fe00000
 8010d30:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010d34:	465d      	mov	r5, fp
 8010d36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d3a:	4630      	mov	r0, r6
 8010d3c:	4639      	mov	r1, r7
 8010d3e:	f7ef fdb5 	bl	80008ac <__aeabi_ddiv>
 8010d42:	f7ef ff39 	bl	8000bb8 <__aeabi_d2iz>
 8010d46:	4680      	mov	r8, r0
 8010d48:	f7ef fc1c 	bl	8000584 <__aeabi_i2d>
 8010d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d50:	f7ef fc82 	bl	8000658 <__aeabi_dmul>
 8010d54:	4602      	mov	r2, r0
 8010d56:	460b      	mov	r3, r1
 8010d58:	4630      	mov	r0, r6
 8010d5a:	4639      	mov	r1, r7
 8010d5c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010d60:	f7ef fac2 	bl	80002e8 <__aeabi_dsub>
 8010d64:	f805 6b01 	strb.w	r6, [r5], #1
 8010d68:	eba5 060b 	sub.w	r6, r5, fp
 8010d6c:	45b1      	cmp	r9, r6
 8010d6e:	4602      	mov	r2, r0
 8010d70:	460b      	mov	r3, r1
 8010d72:	d139      	bne.n	8010de8 <_dtoa_r+0x6c8>
 8010d74:	f7ef faba 	bl	80002ec <__adddf3>
 8010d78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d7c:	4606      	mov	r6, r0
 8010d7e:	460f      	mov	r7, r1
 8010d80:	f7ef fefa 	bl	8000b78 <__aeabi_dcmpgt>
 8010d84:	b9c8      	cbnz	r0, 8010dba <_dtoa_r+0x69a>
 8010d86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d8a:	4630      	mov	r0, r6
 8010d8c:	4639      	mov	r1, r7
 8010d8e:	f7ef fecb 	bl	8000b28 <__aeabi_dcmpeq>
 8010d92:	b110      	cbz	r0, 8010d9a <_dtoa_r+0x67a>
 8010d94:	f018 0f01 	tst.w	r8, #1
 8010d98:	d10f      	bne.n	8010dba <_dtoa_r+0x69a>
 8010d9a:	9904      	ldr	r1, [sp, #16]
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f000 fde1 	bl	8011964 <_Bfree>
 8010da2:	2300      	movs	r3, #0
 8010da4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010da6:	702b      	strb	r3, [r5, #0]
 8010da8:	f10a 0301 	add.w	r3, sl, #1
 8010dac:	6013      	str	r3, [r2, #0]
 8010dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	f000 8241 	beq.w	8011238 <_dtoa_r+0xb18>
 8010db6:	601d      	str	r5, [r3, #0]
 8010db8:	e23e      	b.n	8011238 <_dtoa_r+0xb18>
 8010dba:	f8cd a020 	str.w	sl, [sp, #32]
 8010dbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010dc2:	2a39      	cmp	r2, #57	; 0x39
 8010dc4:	f105 33ff 	add.w	r3, r5, #4294967295
 8010dc8:	d108      	bne.n	8010ddc <_dtoa_r+0x6bc>
 8010dca:	459b      	cmp	fp, r3
 8010dcc:	d10a      	bne.n	8010de4 <_dtoa_r+0x6c4>
 8010dce:	9b08      	ldr	r3, [sp, #32]
 8010dd0:	3301      	adds	r3, #1
 8010dd2:	9308      	str	r3, [sp, #32]
 8010dd4:	2330      	movs	r3, #48	; 0x30
 8010dd6:	f88b 3000 	strb.w	r3, [fp]
 8010dda:	465b      	mov	r3, fp
 8010ddc:	781a      	ldrb	r2, [r3, #0]
 8010dde:	3201      	adds	r2, #1
 8010de0:	701a      	strb	r2, [r3, #0]
 8010de2:	e78c      	b.n	8010cfe <_dtoa_r+0x5de>
 8010de4:	461d      	mov	r5, r3
 8010de6:	e7ea      	b.n	8010dbe <_dtoa_r+0x69e>
 8010de8:	2200      	movs	r2, #0
 8010dea:	4b9b      	ldr	r3, [pc, #620]	; (8011058 <_dtoa_r+0x938>)
 8010dec:	f7ef fc34 	bl	8000658 <__aeabi_dmul>
 8010df0:	2200      	movs	r2, #0
 8010df2:	2300      	movs	r3, #0
 8010df4:	4606      	mov	r6, r0
 8010df6:	460f      	mov	r7, r1
 8010df8:	f7ef fe96 	bl	8000b28 <__aeabi_dcmpeq>
 8010dfc:	2800      	cmp	r0, #0
 8010dfe:	d09a      	beq.n	8010d36 <_dtoa_r+0x616>
 8010e00:	e7cb      	b.n	8010d9a <_dtoa_r+0x67a>
 8010e02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e04:	2a00      	cmp	r2, #0
 8010e06:	f000 808b 	beq.w	8010f20 <_dtoa_r+0x800>
 8010e0a:	9a06      	ldr	r2, [sp, #24]
 8010e0c:	2a01      	cmp	r2, #1
 8010e0e:	dc6e      	bgt.n	8010eee <_dtoa_r+0x7ce>
 8010e10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010e12:	2a00      	cmp	r2, #0
 8010e14:	d067      	beq.n	8010ee6 <_dtoa_r+0x7c6>
 8010e16:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e1a:	9f07      	ldr	r7, [sp, #28]
 8010e1c:	9d05      	ldr	r5, [sp, #20]
 8010e1e:	9a05      	ldr	r2, [sp, #20]
 8010e20:	2101      	movs	r1, #1
 8010e22:	441a      	add	r2, r3
 8010e24:	4620      	mov	r0, r4
 8010e26:	9205      	str	r2, [sp, #20]
 8010e28:	4498      	add	r8, r3
 8010e2a:	f000 fe79 	bl	8011b20 <__i2b>
 8010e2e:	4606      	mov	r6, r0
 8010e30:	2d00      	cmp	r5, #0
 8010e32:	dd0c      	ble.n	8010e4e <_dtoa_r+0x72e>
 8010e34:	f1b8 0f00 	cmp.w	r8, #0
 8010e38:	dd09      	ble.n	8010e4e <_dtoa_r+0x72e>
 8010e3a:	4545      	cmp	r5, r8
 8010e3c:	9a05      	ldr	r2, [sp, #20]
 8010e3e:	462b      	mov	r3, r5
 8010e40:	bfa8      	it	ge
 8010e42:	4643      	movge	r3, r8
 8010e44:	1ad2      	subs	r2, r2, r3
 8010e46:	9205      	str	r2, [sp, #20]
 8010e48:	1aed      	subs	r5, r5, r3
 8010e4a:	eba8 0803 	sub.w	r8, r8, r3
 8010e4e:	9b07      	ldr	r3, [sp, #28]
 8010e50:	b1eb      	cbz	r3, 8010e8e <_dtoa_r+0x76e>
 8010e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d067      	beq.n	8010f28 <_dtoa_r+0x808>
 8010e58:	b18f      	cbz	r7, 8010e7e <_dtoa_r+0x75e>
 8010e5a:	4631      	mov	r1, r6
 8010e5c:	463a      	mov	r2, r7
 8010e5e:	4620      	mov	r0, r4
 8010e60:	f000 fefe 	bl	8011c60 <__pow5mult>
 8010e64:	9a04      	ldr	r2, [sp, #16]
 8010e66:	4601      	mov	r1, r0
 8010e68:	4606      	mov	r6, r0
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	f000 fe61 	bl	8011b32 <__multiply>
 8010e70:	9904      	ldr	r1, [sp, #16]
 8010e72:	9008      	str	r0, [sp, #32]
 8010e74:	4620      	mov	r0, r4
 8010e76:	f000 fd75 	bl	8011964 <_Bfree>
 8010e7a:	9b08      	ldr	r3, [sp, #32]
 8010e7c:	9304      	str	r3, [sp, #16]
 8010e7e:	9b07      	ldr	r3, [sp, #28]
 8010e80:	1bda      	subs	r2, r3, r7
 8010e82:	d004      	beq.n	8010e8e <_dtoa_r+0x76e>
 8010e84:	9904      	ldr	r1, [sp, #16]
 8010e86:	4620      	mov	r0, r4
 8010e88:	f000 feea 	bl	8011c60 <__pow5mult>
 8010e8c:	9004      	str	r0, [sp, #16]
 8010e8e:	2101      	movs	r1, #1
 8010e90:	4620      	mov	r0, r4
 8010e92:	f000 fe45 	bl	8011b20 <__i2b>
 8010e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e98:	4607      	mov	r7, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f000 81d0 	beq.w	8011240 <_dtoa_r+0xb20>
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	4601      	mov	r1, r0
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	f000 fedb 	bl	8011c60 <__pow5mult>
 8010eaa:	9b06      	ldr	r3, [sp, #24]
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	4607      	mov	r7, r0
 8010eb0:	dc40      	bgt.n	8010f34 <_dtoa_r+0x814>
 8010eb2:	9b00      	ldr	r3, [sp, #0]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d139      	bne.n	8010f2c <_dtoa_r+0x80c>
 8010eb8:	9b01      	ldr	r3, [sp, #4]
 8010eba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d136      	bne.n	8010f30 <_dtoa_r+0x810>
 8010ec2:	9b01      	ldr	r3, [sp, #4]
 8010ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010ec8:	0d1b      	lsrs	r3, r3, #20
 8010eca:	051b      	lsls	r3, r3, #20
 8010ecc:	b12b      	cbz	r3, 8010eda <_dtoa_r+0x7ba>
 8010ece:	9b05      	ldr	r3, [sp, #20]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	9305      	str	r3, [sp, #20]
 8010ed4:	f108 0801 	add.w	r8, r8, #1
 8010ed8:	2301      	movs	r3, #1
 8010eda:	9307      	str	r3, [sp, #28]
 8010edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d12a      	bne.n	8010f38 <_dtoa_r+0x818>
 8010ee2:	2001      	movs	r0, #1
 8010ee4:	e030      	b.n	8010f48 <_dtoa_r+0x828>
 8010ee6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ee8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010eec:	e795      	b.n	8010e1a <_dtoa_r+0x6fa>
 8010eee:	9b07      	ldr	r3, [sp, #28]
 8010ef0:	f109 37ff 	add.w	r7, r9, #4294967295
 8010ef4:	42bb      	cmp	r3, r7
 8010ef6:	bfbf      	itttt	lt
 8010ef8:	9b07      	ldrlt	r3, [sp, #28]
 8010efa:	9707      	strlt	r7, [sp, #28]
 8010efc:	1afa      	sublt	r2, r7, r3
 8010efe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010f00:	bfbb      	ittet	lt
 8010f02:	189b      	addlt	r3, r3, r2
 8010f04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010f06:	1bdf      	subge	r7, r3, r7
 8010f08:	2700      	movlt	r7, #0
 8010f0a:	f1b9 0f00 	cmp.w	r9, #0
 8010f0e:	bfb5      	itete	lt
 8010f10:	9b05      	ldrlt	r3, [sp, #20]
 8010f12:	9d05      	ldrge	r5, [sp, #20]
 8010f14:	eba3 0509 	sublt.w	r5, r3, r9
 8010f18:	464b      	movge	r3, r9
 8010f1a:	bfb8      	it	lt
 8010f1c:	2300      	movlt	r3, #0
 8010f1e:	e77e      	b.n	8010e1e <_dtoa_r+0x6fe>
 8010f20:	9f07      	ldr	r7, [sp, #28]
 8010f22:	9d05      	ldr	r5, [sp, #20]
 8010f24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010f26:	e783      	b.n	8010e30 <_dtoa_r+0x710>
 8010f28:	9a07      	ldr	r2, [sp, #28]
 8010f2a:	e7ab      	b.n	8010e84 <_dtoa_r+0x764>
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	e7d4      	b.n	8010eda <_dtoa_r+0x7ba>
 8010f30:	9b00      	ldr	r3, [sp, #0]
 8010f32:	e7d2      	b.n	8010eda <_dtoa_r+0x7ba>
 8010f34:	2300      	movs	r3, #0
 8010f36:	9307      	str	r3, [sp, #28]
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010f3e:	6918      	ldr	r0, [r3, #16]
 8010f40:	f000 fda0 	bl	8011a84 <__hi0bits>
 8010f44:	f1c0 0020 	rsb	r0, r0, #32
 8010f48:	4440      	add	r0, r8
 8010f4a:	f010 001f 	ands.w	r0, r0, #31
 8010f4e:	d047      	beq.n	8010fe0 <_dtoa_r+0x8c0>
 8010f50:	f1c0 0320 	rsb	r3, r0, #32
 8010f54:	2b04      	cmp	r3, #4
 8010f56:	dd3b      	ble.n	8010fd0 <_dtoa_r+0x8b0>
 8010f58:	9b05      	ldr	r3, [sp, #20]
 8010f5a:	f1c0 001c 	rsb	r0, r0, #28
 8010f5e:	4403      	add	r3, r0
 8010f60:	9305      	str	r3, [sp, #20]
 8010f62:	4405      	add	r5, r0
 8010f64:	4480      	add	r8, r0
 8010f66:	9b05      	ldr	r3, [sp, #20]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	dd05      	ble.n	8010f78 <_dtoa_r+0x858>
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	9904      	ldr	r1, [sp, #16]
 8010f70:	4620      	mov	r0, r4
 8010f72:	f000 fec3 	bl	8011cfc <__lshift>
 8010f76:	9004      	str	r0, [sp, #16]
 8010f78:	f1b8 0f00 	cmp.w	r8, #0
 8010f7c:	dd05      	ble.n	8010f8a <_dtoa_r+0x86a>
 8010f7e:	4639      	mov	r1, r7
 8010f80:	4642      	mov	r2, r8
 8010f82:	4620      	mov	r0, r4
 8010f84:	f000 feba 	bl	8011cfc <__lshift>
 8010f88:	4607      	mov	r7, r0
 8010f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f8c:	b353      	cbz	r3, 8010fe4 <_dtoa_r+0x8c4>
 8010f8e:	4639      	mov	r1, r7
 8010f90:	9804      	ldr	r0, [sp, #16]
 8010f92:	f000 ff07 	bl	8011da4 <__mcmp>
 8010f96:	2800      	cmp	r0, #0
 8010f98:	da24      	bge.n	8010fe4 <_dtoa_r+0x8c4>
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	220a      	movs	r2, #10
 8010f9e:	9904      	ldr	r1, [sp, #16]
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f000 fcf6 	bl	8011992 <__multadd>
 8010fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fa8:	9004      	str	r0, [sp, #16]
 8010faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	f000 814d 	beq.w	801124e <_dtoa_r+0xb2e>
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	4631      	mov	r1, r6
 8010fb8:	220a      	movs	r2, #10
 8010fba:	4620      	mov	r0, r4
 8010fbc:	f000 fce9 	bl	8011992 <__multadd>
 8010fc0:	9b02      	ldr	r3, [sp, #8]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	4606      	mov	r6, r0
 8010fc6:	dc4f      	bgt.n	8011068 <_dtoa_r+0x948>
 8010fc8:	9b06      	ldr	r3, [sp, #24]
 8010fca:	2b02      	cmp	r3, #2
 8010fcc:	dd4c      	ble.n	8011068 <_dtoa_r+0x948>
 8010fce:	e011      	b.n	8010ff4 <_dtoa_r+0x8d4>
 8010fd0:	d0c9      	beq.n	8010f66 <_dtoa_r+0x846>
 8010fd2:	9a05      	ldr	r2, [sp, #20]
 8010fd4:	331c      	adds	r3, #28
 8010fd6:	441a      	add	r2, r3
 8010fd8:	9205      	str	r2, [sp, #20]
 8010fda:	441d      	add	r5, r3
 8010fdc:	4498      	add	r8, r3
 8010fde:	e7c2      	b.n	8010f66 <_dtoa_r+0x846>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	e7f6      	b.n	8010fd2 <_dtoa_r+0x8b2>
 8010fe4:	f1b9 0f00 	cmp.w	r9, #0
 8010fe8:	dc38      	bgt.n	801105c <_dtoa_r+0x93c>
 8010fea:	9b06      	ldr	r3, [sp, #24]
 8010fec:	2b02      	cmp	r3, #2
 8010fee:	dd35      	ble.n	801105c <_dtoa_r+0x93c>
 8010ff0:	f8cd 9008 	str.w	r9, [sp, #8]
 8010ff4:	9b02      	ldr	r3, [sp, #8]
 8010ff6:	b963      	cbnz	r3, 8011012 <_dtoa_r+0x8f2>
 8010ff8:	4639      	mov	r1, r7
 8010ffa:	2205      	movs	r2, #5
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f000 fcc8 	bl	8011992 <__multadd>
 8011002:	4601      	mov	r1, r0
 8011004:	4607      	mov	r7, r0
 8011006:	9804      	ldr	r0, [sp, #16]
 8011008:	f000 fecc 	bl	8011da4 <__mcmp>
 801100c:	2800      	cmp	r0, #0
 801100e:	f73f adcc 	bgt.w	8010baa <_dtoa_r+0x48a>
 8011012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011014:	465d      	mov	r5, fp
 8011016:	ea6f 0a03 	mvn.w	sl, r3
 801101a:	f04f 0900 	mov.w	r9, #0
 801101e:	4639      	mov	r1, r7
 8011020:	4620      	mov	r0, r4
 8011022:	f000 fc9f 	bl	8011964 <_Bfree>
 8011026:	2e00      	cmp	r6, #0
 8011028:	f43f aeb7 	beq.w	8010d9a <_dtoa_r+0x67a>
 801102c:	f1b9 0f00 	cmp.w	r9, #0
 8011030:	d005      	beq.n	801103e <_dtoa_r+0x91e>
 8011032:	45b1      	cmp	r9, r6
 8011034:	d003      	beq.n	801103e <_dtoa_r+0x91e>
 8011036:	4649      	mov	r1, r9
 8011038:	4620      	mov	r0, r4
 801103a:	f000 fc93 	bl	8011964 <_Bfree>
 801103e:	4631      	mov	r1, r6
 8011040:	4620      	mov	r0, r4
 8011042:	f000 fc8f 	bl	8011964 <_Bfree>
 8011046:	e6a8      	b.n	8010d9a <_dtoa_r+0x67a>
 8011048:	2700      	movs	r7, #0
 801104a:	463e      	mov	r6, r7
 801104c:	e7e1      	b.n	8011012 <_dtoa_r+0x8f2>
 801104e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011052:	463e      	mov	r6, r7
 8011054:	e5a9      	b.n	8010baa <_dtoa_r+0x48a>
 8011056:	bf00      	nop
 8011058:	40240000 	.word	0x40240000
 801105c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801105e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011062:	2b00      	cmp	r3, #0
 8011064:	f000 80fa 	beq.w	801125c <_dtoa_r+0xb3c>
 8011068:	2d00      	cmp	r5, #0
 801106a:	dd05      	ble.n	8011078 <_dtoa_r+0x958>
 801106c:	4631      	mov	r1, r6
 801106e:	462a      	mov	r2, r5
 8011070:	4620      	mov	r0, r4
 8011072:	f000 fe43 	bl	8011cfc <__lshift>
 8011076:	4606      	mov	r6, r0
 8011078:	9b07      	ldr	r3, [sp, #28]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d04c      	beq.n	8011118 <_dtoa_r+0x9f8>
 801107e:	6871      	ldr	r1, [r6, #4]
 8011080:	4620      	mov	r0, r4
 8011082:	f000 fc3b 	bl	80118fc <_Balloc>
 8011086:	6932      	ldr	r2, [r6, #16]
 8011088:	3202      	adds	r2, #2
 801108a:	4605      	mov	r5, r0
 801108c:	0092      	lsls	r2, r2, #2
 801108e:	f106 010c 	add.w	r1, r6, #12
 8011092:	300c      	adds	r0, #12
 8011094:	f7fd fdf2 	bl	800ec7c <memcpy>
 8011098:	2201      	movs	r2, #1
 801109a:	4629      	mov	r1, r5
 801109c:	4620      	mov	r0, r4
 801109e:	f000 fe2d 	bl	8011cfc <__lshift>
 80110a2:	9b00      	ldr	r3, [sp, #0]
 80110a4:	f8cd b014 	str.w	fp, [sp, #20]
 80110a8:	f003 0301 	and.w	r3, r3, #1
 80110ac:	46b1      	mov	r9, r6
 80110ae:	9307      	str	r3, [sp, #28]
 80110b0:	4606      	mov	r6, r0
 80110b2:	4639      	mov	r1, r7
 80110b4:	9804      	ldr	r0, [sp, #16]
 80110b6:	f7ff faa4 	bl	8010602 <quorem>
 80110ba:	4649      	mov	r1, r9
 80110bc:	4605      	mov	r5, r0
 80110be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80110c2:	9804      	ldr	r0, [sp, #16]
 80110c4:	f000 fe6e 	bl	8011da4 <__mcmp>
 80110c8:	4632      	mov	r2, r6
 80110ca:	9000      	str	r0, [sp, #0]
 80110cc:	4639      	mov	r1, r7
 80110ce:	4620      	mov	r0, r4
 80110d0:	f000 fe82 	bl	8011dd8 <__mdiff>
 80110d4:	68c3      	ldr	r3, [r0, #12]
 80110d6:	4602      	mov	r2, r0
 80110d8:	bb03      	cbnz	r3, 801111c <_dtoa_r+0x9fc>
 80110da:	4601      	mov	r1, r0
 80110dc:	9008      	str	r0, [sp, #32]
 80110de:	9804      	ldr	r0, [sp, #16]
 80110e0:	f000 fe60 	bl	8011da4 <__mcmp>
 80110e4:	9a08      	ldr	r2, [sp, #32]
 80110e6:	4603      	mov	r3, r0
 80110e8:	4611      	mov	r1, r2
 80110ea:	4620      	mov	r0, r4
 80110ec:	9308      	str	r3, [sp, #32]
 80110ee:	f000 fc39 	bl	8011964 <_Bfree>
 80110f2:	9b08      	ldr	r3, [sp, #32]
 80110f4:	b9a3      	cbnz	r3, 8011120 <_dtoa_r+0xa00>
 80110f6:	9a06      	ldr	r2, [sp, #24]
 80110f8:	b992      	cbnz	r2, 8011120 <_dtoa_r+0xa00>
 80110fa:	9a07      	ldr	r2, [sp, #28]
 80110fc:	b982      	cbnz	r2, 8011120 <_dtoa_r+0xa00>
 80110fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011102:	d029      	beq.n	8011158 <_dtoa_r+0xa38>
 8011104:	9b00      	ldr	r3, [sp, #0]
 8011106:	2b00      	cmp	r3, #0
 8011108:	dd01      	ble.n	801110e <_dtoa_r+0x9ee>
 801110a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801110e:	9b05      	ldr	r3, [sp, #20]
 8011110:	1c5d      	adds	r5, r3, #1
 8011112:	f883 8000 	strb.w	r8, [r3]
 8011116:	e782      	b.n	801101e <_dtoa_r+0x8fe>
 8011118:	4630      	mov	r0, r6
 801111a:	e7c2      	b.n	80110a2 <_dtoa_r+0x982>
 801111c:	2301      	movs	r3, #1
 801111e:	e7e3      	b.n	80110e8 <_dtoa_r+0x9c8>
 8011120:	9a00      	ldr	r2, [sp, #0]
 8011122:	2a00      	cmp	r2, #0
 8011124:	db04      	blt.n	8011130 <_dtoa_r+0xa10>
 8011126:	d125      	bne.n	8011174 <_dtoa_r+0xa54>
 8011128:	9a06      	ldr	r2, [sp, #24]
 801112a:	bb1a      	cbnz	r2, 8011174 <_dtoa_r+0xa54>
 801112c:	9a07      	ldr	r2, [sp, #28]
 801112e:	bb0a      	cbnz	r2, 8011174 <_dtoa_r+0xa54>
 8011130:	2b00      	cmp	r3, #0
 8011132:	ddec      	ble.n	801110e <_dtoa_r+0x9ee>
 8011134:	2201      	movs	r2, #1
 8011136:	9904      	ldr	r1, [sp, #16]
 8011138:	4620      	mov	r0, r4
 801113a:	f000 fddf 	bl	8011cfc <__lshift>
 801113e:	4639      	mov	r1, r7
 8011140:	9004      	str	r0, [sp, #16]
 8011142:	f000 fe2f 	bl	8011da4 <__mcmp>
 8011146:	2800      	cmp	r0, #0
 8011148:	dc03      	bgt.n	8011152 <_dtoa_r+0xa32>
 801114a:	d1e0      	bne.n	801110e <_dtoa_r+0x9ee>
 801114c:	f018 0f01 	tst.w	r8, #1
 8011150:	d0dd      	beq.n	801110e <_dtoa_r+0x9ee>
 8011152:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011156:	d1d8      	bne.n	801110a <_dtoa_r+0x9ea>
 8011158:	9b05      	ldr	r3, [sp, #20]
 801115a:	9a05      	ldr	r2, [sp, #20]
 801115c:	1c5d      	adds	r5, r3, #1
 801115e:	2339      	movs	r3, #57	; 0x39
 8011160:	7013      	strb	r3, [r2, #0]
 8011162:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011166:	2b39      	cmp	r3, #57	; 0x39
 8011168:	f105 32ff 	add.w	r2, r5, #4294967295
 801116c:	d04f      	beq.n	801120e <_dtoa_r+0xaee>
 801116e:	3301      	adds	r3, #1
 8011170:	7013      	strb	r3, [r2, #0]
 8011172:	e754      	b.n	801101e <_dtoa_r+0x8fe>
 8011174:	9a05      	ldr	r2, [sp, #20]
 8011176:	2b00      	cmp	r3, #0
 8011178:	f102 0501 	add.w	r5, r2, #1
 801117c:	dd06      	ble.n	801118c <_dtoa_r+0xa6c>
 801117e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011182:	d0e9      	beq.n	8011158 <_dtoa_r+0xa38>
 8011184:	f108 0801 	add.w	r8, r8, #1
 8011188:	9b05      	ldr	r3, [sp, #20]
 801118a:	e7c2      	b.n	8011112 <_dtoa_r+0x9f2>
 801118c:	9a02      	ldr	r2, [sp, #8]
 801118e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011192:	eba5 030b 	sub.w	r3, r5, fp
 8011196:	4293      	cmp	r3, r2
 8011198:	d021      	beq.n	80111de <_dtoa_r+0xabe>
 801119a:	2300      	movs	r3, #0
 801119c:	220a      	movs	r2, #10
 801119e:	9904      	ldr	r1, [sp, #16]
 80111a0:	4620      	mov	r0, r4
 80111a2:	f000 fbf6 	bl	8011992 <__multadd>
 80111a6:	45b1      	cmp	r9, r6
 80111a8:	9004      	str	r0, [sp, #16]
 80111aa:	f04f 0300 	mov.w	r3, #0
 80111ae:	f04f 020a 	mov.w	r2, #10
 80111b2:	4649      	mov	r1, r9
 80111b4:	4620      	mov	r0, r4
 80111b6:	d105      	bne.n	80111c4 <_dtoa_r+0xaa4>
 80111b8:	f000 fbeb 	bl	8011992 <__multadd>
 80111bc:	4681      	mov	r9, r0
 80111be:	4606      	mov	r6, r0
 80111c0:	9505      	str	r5, [sp, #20]
 80111c2:	e776      	b.n	80110b2 <_dtoa_r+0x992>
 80111c4:	f000 fbe5 	bl	8011992 <__multadd>
 80111c8:	4631      	mov	r1, r6
 80111ca:	4681      	mov	r9, r0
 80111cc:	2300      	movs	r3, #0
 80111ce:	220a      	movs	r2, #10
 80111d0:	4620      	mov	r0, r4
 80111d2:	f000 fbde 	bl	8011992 <__multadd>
 80111d6:	4606      	mov	r6, r0
 80111d8:	e7f2      	b.n	80111c0 <_dtoa_r+0xaa0>
 80111da:	f04f 0900 	mov.w	r9, #0
 80111de:	2201      	movs	r2, #1
 80111e0:	9904      	ldr	r1, [sp, #16]
 80111e2:	4620      	mov	r0, r4
 80111e4:	f000 fd8a 	bl	8011cfc <__lshift>
 80111e8:	4639      	mov	r1, r7
 80111ea:	9004      	str	r0, [sp, #16]
 80111ec:	f000 fdda 	bl	8011da4 <__mcmp>
 80111f0:	2800      	cmp	r0, #0
 80111f2:	dcb6      	bgt.n	8011162 <_dtoa_r+0xa42>
 80111f4:	d102      	bne.n	80111fc <_dtoa_r+0xadc>
 80111f6:	f018 0f01 	tst.w	r8, #1
 80111fa:	d1b2      	bne.n	8011162 <_dtoa_r+0xa42>
 80111fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011200:	2b30      	cmp	r3, #48	; 0x30
 8011202:	f105 32ff 	add.w	r2, r5, #4294967295
 8011206:	f47f af0a 	bne.w	801101e <_dtoa_r+0x8fe>
 801120a:	4615      	mov	r5, r2
 801120c:	e7f6      	b.n	80111fc <_dtoa_r+0xadc>
 801120e:	4593      	cmp	fp, r2
 8011210:	d105      	bne.n	801121e <_dtoa_r+0xafe>
 8011212:	2331      	movs	r3, #49	; 0x31
 8011214:	f10a 0a01 	add.w	sl, sl, #1
 8011218:	f88b 3000 	strb.w	r3, [fp]
 801121c:	e6ff      	b.n	801101e <_dtoa_r+0x8fe>
 801121e:	4615      	mov	r5, r2
 8011220:	e79f      	b.n	8011162 <_dtoa_r+0xa42>
 8011222:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011288 <_dtoa_r+0xb68>
 8011226:	e007      	b.n	8011238 <_dtoa_r+0xb18>
 8011228:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801122a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801128c <_dtoa_r+0xb6c>
 801122e:	b11b      	cbz	r3, 8011238 <_dtoa_r+0xb18>
 8011230:	f10b 0308 	add.w	r3, fp, #8
 8011234:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011236:	6013      	str	r3, [r2, #0]
 8011238:	4658      	mov	r0, fp
 801123a:	b017      	add	sp, #92	; 0x5c
 801123c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011240:	9b06      	ldr	r3, [sp, #24]
 8011242:	2b01      	cmp	r3, #1
 8011244:	f77f ae35 	ble.w	8010eb2 <_dtoa_r+0x792>
 8011248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801124a:	9307      	str	r3, [sp, #28]
 801124c:	e649      	b.n	8010ee2 <_dtoa_r+0x7c2>
 801124e:	9b02      	ldr	r3, [sp, #8]
 8011250:	2b00      	cmp	r3, #0
 8011252:	dc03      	bgt.n	801125c <_dtoa_r+0xb3c>
 8011254:	9b06      	ldr	r3, [sp, #24]
 8011256:	2b02      	cmp	r3, #2
 8011258:	f73f aecc 	bgt.w	8010ff4 <_dtoa_r+0x8d4>
 801125c:	465d      	mov	r5, fp
 801125e:	4639      	mov	r1, r7
 8011260:	9804      	ldr	r0, [sp, #16]
 8011262:	f7ff f9ce 	bl	8010602 <quorem>
 8011266:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801126a:	f805 8b01 	strb.w	r8, [r5], #1
 801126e:	9a02      	ldr	r2, [sp, #8]
 8011270:	eba5 030b 	sub.w	r3, r5, fp
 8011274:	429a      	cmp	r2, r3
 8011276:	ddb0      	ble.n	80111da <_dtoa_r+0xaba>
 8011278:	2300      	movs	r3, #0
 801127a:	220a      	movs	r2, #10
 801127c:	9904      	ldr	r1, [sp, #16]
 801127e:	4620      	mov	r0, r4
 8011280:	f000 fb87 	bl	8011992 <__multadd>
 8011284:	9004      	str	r0, [sp, #16]
 8011286:	e7ea      	b.n	801125e <_dtoa_r+0xb3e>
 8011288:	0801543b 	.word	0x0801543b
 801128c:	08015309 	.word	0x08015309

08011290 <rshift>:
 8011290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011292:	6906      	ldr	r6, [r0, #16]
 8011294:	114b      	asrs	r3, r1, #5
 8011296:	429e      	cmp	r6, r3
 8011298:	f100 0414 	add.w	r4, r0, #20
 801129c:	dd30      	ble.n	8011300 <rshift+0x70>
 801129e:	f011 011f 	ands.w	r1, r1, #31
 80112a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80112a6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80112aa:	d108      	bne.n	80112be <rshift+0x2e>
 80112ac:	4621      	mov	r1, r4
 80112ae:	42b2      	cmp	r2, r6
 80112b0:	460b      	mov	r3, r1
 80112b2:	d211      	bcs.n	80112d8 <rshift+0x48>
 80112b4:	f852 3b04 	ldr.w	r3, [r2], #4
 80112b8:	f841 3b04 	str.w	r3, [r1], #4
 80112bc:	e7f7      	b.n	80112ae <rshift+0x1e>
 80112be:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80112c2:	f1c1 0c20 	rsb	ip, r1, #32
 80112c6:	40cd      	lsrs	r5, r1
 80112c8:	3204      	adds	r2, #4
 80112ca:	4623      	mov	r3, r4
 80112cc:	42b2      	cmp	r2, r6
 80112ce:	4617      	mov	r7, r2
 80112d0:	d30c      	bcc.n	80112ec <rshift+0x5c>
 80112d2:	601d      	str	r5, [r3, #0]
 80112d4:	b105      	cbz	r5, 80112d8 <rshift+0x48>
 80112d6:	3304      	adds	r3, #4
 80112d8:	1b1a      	subs	r2, r3, r4
 80112da:	42a3      	cmp	r3, r4
 80112dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80112e0:	bf08      	it	eq
 80112e2:	2300      	moveq	r3, #0
 80112e4:	6102      	str	r2, [r0, #16]
 80112e6:	bf08      	it	eq
 80112e8:	6143      	streq	r3, [r0, #20]
 80112ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112ec:	683f      	ldr	r7, [r7, #0]
 80112ee:	fa07 f70c 	lsl.w	r7, r7, ip
 80112f2:	433d      	orrs	r5, r7
 80112f4:	f843 5b04 	str.w	r5, [r3], #4
 80112f8:	f852 5b04 	ldr.w	r5, [r2], #4
 80112fc:	40cd      	lsrs	r5, r1
 80112fe:	e7e5      	b.n	80112cc <rshift+0x3c>
 8011300:	4623      	mov	r3, r4
 8011302:	e7e9      	b.n	80112d8 <rshift+0x48>

08011304 <__hexdig_fun>:
 8011304:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011308:	2b09      	cmp	r3, #9
 801130a:	d802      	bhi.n	8011312 <__hexdig_fun+0xe>
 801130c:	3820      	subs	r0, #32
 801130e:	b2c0      	uxtb	r0, r0
 8011310:	4770      	bx	lr
 8011312:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011316:	2b05      	cmp	r3, #5
 8011318:	d801      	bhi.n	801131e <__hexdig_fun+0x1a>
 801131a:	3847      	subs	r0, #71	; 0x47
 801131c:	e7f7      	b.n	801130e <__hexdig_fun+0xa>
 801131e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011322:	2b05      	cmp	r3, #5
 8011324:	d801      	bhi.n	801132a <__hexdig_fun+0x26>
 8011326:	3827      	subs	r0, #39	; 0x27
 8011328:	e7f1      	b.n	801130e <__hexdig_fun+0xa>
 801132a:	2000      	movs	r0, #0
 801132c:	4770      	bx	lr

0801132e <__gethex>:
 801132e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011332:	b08b      	sub	sp, #44	; 0x2c
 8011334:	468a      	mov	sl, r1
 8011336:	9002      	str	r0, [sp, #8]
 8011338:	9816      	ldr	r0, [sp, #88]	; 0x58
 801133a:	9306      	str	r3, [sp, #24]
 801133c:	4690      	mov	r8, r2
 801133e:	f000 facd 	bl	80118dc <__localeconv_l>
 8011342:	6803      	ldr	r3, [r0, #0]
 8011344:	9303      	str	r3, [sp, #12]
 8011346:	4618      	mov	r0, r3
 8011348:	f7ee ff6c 	bl	8000224 <strlen>
 801134c:	9b03      	ldr	r3, [sp, #12]
 801134e:	9001      	str	r0, [sp, #4]
 8011350:	4403      	add	r3, r0
 8011352:	f04f 0b00 	mov.w	fp, #0
 8011356:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801135a:	9307      	str	r3, [sp, #28]
 801135c:	f8da 3000 	ldr.w	r3, [sl]
 8011360:	3302      	adds	r3, #2
 8011362:	461f      	mov	r7, r3
 8011364:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011368:	2830      	cmp	r0, #48	; 0x30
 801136a:	d06c      	beq.n	8011446 <__gethex+0x118>
 801136c:	f7ff ffca 	bl	8011304 <__hexdig_fun>
 8011370:	4604      	mov	r4, r0
 8011372:	2800      	cmp	r0, #0
 8011374:	d16a      	bne.n	801144c <__gethex+0x11e>
 8011376:	9a01      	ldr	r2, [sp, #4]
 8011378:	9903      	ldr	r1, [sp, #12]
 801137a:	4638      	mov	r0, r7
 801137c:	f7fe fa70 	bl	800f860 <strncmp>
 8011380:	2800      	cmp	r0, #0
 8011382:	d166      	bne.n	8011452 <__gethex+0x124>
 8011384:	9b01      	ldr	r3, [sp, #4]
 8011386:	5cf8      	ldrb	r0, [r7, r3]
 8011388:	18fe      	adds	r6, r7, r3
 801138a:	f7ff ffbb 	bl	8011304 <__hexdig_fun>
 801138e:	2800      	cmp	r0, #0
 8011390:	d062      	beq.n	8011458 <__gethex+0x12a>
 8011392:	4633      	mov	r3, r6
 8011394:	7818      	ldrb	r0, [r3, #0]
 8011396:	2830      	cmp	r0, #48	; 0x30
 8011398:	461f      	mov	r7, r3
 801139a:	f103 0301 	add.w	r3, r3, #1
 801139e:	d0f9      	beq.n	8011394 <__gethex+0x66>
 80113a0:	f7ff ffb0 	bl	8011304 <__hexdig_fun>
 80113a4:	fab0 f580 	clz	r5, r0
 80113a8:	096d      	lsrs	r5, r5, #5
 80113aa:	4634      	mov	r4, r6
 80113ac:	f04f 0b01 	mov.w	fp, #1
 80113b0:	463a      	mov	r2, r7
 80113b2:	4616      	mov	r6, r2
 80113b4:	3201      	adds	r2, #1
 80113b6:	7830      	ldrb	r0, [r6, #0]
 80113b8:	f7ff ffa4 	bl	8011304 <__hexdig_fun>
 80113bc:	2800      	cmp	r0, #0
 80113be:	d1f8      	bne.n	80113b2 <__gethex+0x84>
 80113c0:	9a01      	ldr	r2, [sp, #4]
 80113c2:	9903      	ldr	r1, [sp, #12]
 80113c4:	4630      	mov	r0, r6
 80113c6:	f7fe fa4b 	bl	800f860 <strncmp>
 80113ca:	b950      	cbnz	r0, 80113e2 <__gethex+0xb4>
 80113cc:	b954      	cbnz	r4, 80113e4 <__gethex+0xb6>
 80113ce:	9b01      	ldr	r3, [sp, #4]
 80113d0:	18f4      	adds	r4, r6, r3
 80113d2:	4622      	mov	r2, r4
 80113d4:	4616      	mov	r6, r2
 80113d6:	3201      	adds	r2, #1
 80113d8:	7830      	ldrb	r0, [r6, #0]
 80113da:	f7ff ff93 	bl	8011304 <__hexdig_fun>
 80113de:	2800      	cmp	r0, #0
 80113e0:	d1f8      	bne.n	80113d4 <__gethex+0xa6>
 80113e2:	b10c      	cbz	r4, 80113e8 <__gethex+0xba>
 80113e4:	1ba4      	subs	r4, r4, r6
 80113e6:	00a4      	lsls	r4, r4, #2
 80113e8:	7833      	ldrb	r3, [r6, #0]
 80113ea:	2b50      	cmp	r3, #80	; 0x50
 80113ec:	d001      	beq.n	80113f2 <__gethex+0xc4>
 80113ee:	2b70      	cmp	r3, #112	; 0x70
 80113f0:	d140      	bne.n	8011474 <__gethex+0x146>
 80113f2:	7873      	ldrb	r3, [r6, #1]
 80113f4:	2b2b      	cmp	r3, #43	; 0x2b
 80113f6:	d031      	beq.n	801145c <__gethex+0x12e>
 80113f8:	2b2d      	cmp	r3, #45	; 0x2d
 80113fa:	d033      	beq.n	8011464 <__gethex+0x136>
 80113fc:	1c71      	adds	r1, r6, #1
 80113fe:	f04f 0900 	mov.w	r9, #0
 8011402:	7808      	ldrb	r0, [r1, #0]
 8011404:	f7ff ff7e 	bl	8011304 <__hexdig_fun>
 8011408:	1e43      	subs	r3, r0, #1
 801140a:	b2db      	uxtb	r3, r3
 801140c:	2b18      	cmp	r3, #24
 801140e:	d831      	bhi.n	8011474 <__gethex+0x146>
 8011410:	f1a0 0210 	sub.w	r2, r0, #16
 8011414:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011418:	f7ff ff74 	bl	8011304 <__hexdig_fun>
 801141c:	1e43      	subs	r3, r0, #1
 801141e:	b2db      	uxtb	r3, r3
 8011420:	2b18      	cmp	r3, #24
 8011422:	d922      	bls.n	801146a <__gethex+0x13c>
 8011424:	f1b9 0f00 	cmp.w	r9, #0
 8011428:	d000      	beq.n	801142c <__gethex+0xfe>
 801142a:	4252      	negs	r2, r2
 801142c:	4414      	add	r4, r2
 801142e:	f8ca 1000 	str.w	r1, [sl]
 8011432:	b30d      	cbz	r5, 8011478 <__gethex+0x14a>
 8011434:	f1bb 0f00 	cmp.w	fp, #0
 8011438:	bf0c      	ite	eq
 801143a:	2706      	moveq	r7, #6
 801143c:	2700      	movne	r7, #0
 801143e:	4638      	mov	r0, r7
 8011440:	b00b      	add	sp, #44	; 0x2c
 8011442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011446:	f10b 0b01 	add.w	fp, fp, #1
 801144a:	e78a      	b.n	8011362 <__gethex+0x34>
 801144c:	2500      	movs	r5, #0
 801144e:	462c      	mov	r4, r5
 8011450:	e7ae      	b.n	80113b0 <__gethex+0x82>
 8011452:	463e      	mov	r6, r7
 8011454:	2501      	movs	r5, #1
 8011456:	e7c7      	b.n	80113e8 <__gethex+0xba>
 8011458:	4604      	mov	r4, r0
 801145a:	e7fb      	b.n	8011454 <__gethex+0x126>
 801145c:	f04f 0900 	mov.w	r9, #0
 8011460:	1cb1      	adds	r1, r6, #2
 8011462:	e7ce      	b.n	8011402 <__gethex+0xd4>
 8011464:	f04f 0901 	mov.w	r9, #1
 8011468:	e7fa      	b.n	8011460 <__gethex+0x132>
 801146a:	230a      	movs	r3, #10
 801146c:	fb03 0202 	mla	r2, r3, r2, r0
 8011470:	3a10      	subs	r2, #16
 8011472:	e7cf      	b.n	8011414 <__gethex+0xe6>
 8011474:	4631      	mov	r1, r6
 8011476:	e7da      	b.n	801142e <__gethex+0x100>
 8011478:	1bf3      	subs	r3, r6, r7
 801147a:	3b01      	subs	r3, #1
 801147c:	4629      	mov	r1, r5
 801147e:	2b07      	cmp	r3, #7
 8011480:	dc49      	bgt.n	8011516 <__gethex+0x1e8>
 8011482:	9802      	ldr	r0, [sp, #8]
 8011484:	f000 fa3a 	bl	80118fc <_Balloc>
 8011488:	9b01      	ldr	r3, [sp, #4]
 801148a:	f100 0914 	add.w	r9, r0, #20
 801148e:	f04f 0b00 	mov.w	fp, #0
 8011492:	f1c3 0301 	rsb	r3, r3, #1
 8011496:	4605      	mov	r5, r0
 8011498:	f8cd 9010 	str.w	r9, [sp, #16]
 801149c:	46da      	mov	sl, fp
 801149e:	9308      	str	r3, [sp, #32]
 80114a0:	42b7      	cmp	r7, r6
 80114a2:	d33b      	bcc.n	801151c <__gethex+0x1ee>
 80114a4:	9804      	ldr	r0, [sp, #16]
 80114a6:	f840 ab04 	str.w	sl, [r0], #4
 80114aa:	eba0 0009 	sub.w	r0, r0, r9
 80114ae:	1080      	asrs	r0, r0, #2
 80114b0:	6128      	str	r0, [r5, #16]
 80114b2:	0147      	lsls	r7, r0, #5
 80114b4:	4650      	mov	r0, sl
 80114b6:	f000 fae5 	bl	8011a84 <__hi0bits>
 80114ba:	f8d8 6000 	ldr.w	r6, [r8]
 80114be:	1a3f      	subs	r7, r7, r0
 80114c0:	42b7      	cmp	r7, r6
 80114c2:	dd64      	ble.n	801158e <__gethex+0x260>
 80114c4:	1bbf      	subs	r7, r7, r6
 80114c6:	4639      	mov	r1, r7
 80114c8:	4628      	mov	r0, r5
 80114ca:	f000 fdf5 	bl	80120b8 <__any_on>
 80114ce:	4682      	mov	sl, r0
 80114d0:	b178      	cbz	r0, 80114f2 <__gethex+0x1c4>
 80114d2:	1e7b      	subs	r3, r7, #1
 80114d4:	1159      	asrs	r1, r3, #5
 80114d6:	f003 021f 	and.w	r2, r3, #31
 80114da:	f04f 0a01 	mov.w	sl, #1
 80114de:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80114e2:	fa0a f202 	lsl.w	r2, sl, r2
 80114e6:	420a      	tst	r2, r1
 80114e8:	d003      	beq.n	80114f2 <__gethex+0x1c4>
 80114ea:	4553      	cmp	r3, sl
 80114ec:	dc46      	bgt.n	801157c <__gethex+0x24e>
 80114ee:	f04f 0a02 	mov.w	sl, #2
 80114f2:	4639      	mov	r1, r7
 80114f4:	4628      	mov	r0, r5
 80114f6:	f7ff fecb 	bl	8011290 <rshift>
 80114fa:	443c      	add	r4, r7
 80114fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011500:	42a3      	cmp	r3, r4
 8011502:	da52      	bge.n	80115aa <__gethex+0x27c>
 8011504:	4629      	mov	r1, r5
 8011506:	9802      	ldr	r0, [sp, #8]
 8011508:	f000 fa2c 	bl	8011964 <_Bfree>
 801150c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801150e:	2300      	movs	r3, #0
 8011510:	6013      	str	r3, [r2, #0]
 8011512:	27a3      	movs	r7, #163	; 0xa3
 8011514:	e793      	b.n	801143e <__gethex+0x110>
 8011516:	3101      	adds	r1, #1
 8011518:	105b      	asrs	r3, r3, #1
 801151a:	e7b0      	b.n	801147e <__gethex+0x150>
 801151c:	1e73      	subs	r3, r6, #1
 801151e:	9305      	str	r3, [sp, #20]
 8011520:	9a07      	ldr	r2, [sp, #28]
 8011522:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011526:	4293      	cmp	r3, r2
 8011528:	d018      	beq.n	801155c <__gethex+0x22e>
 801152a:	f1bb 0f20 	cmp.w	fp, #32
 801152e:	d107      	bne.n	8011540 <__gethex+0x212>
 8011530:	9b04      	ldr	r3, [sp, #16]
 8011532:	f8c3 a000 	str.w	sl, [r3]
 8011536:	3304      	adds	r3, #4
 8011538:	f04f 0a00 	mov.w	sl, #0
 801153c:	9304      	str	r3, [sp, #16]
 801153e:	46d3      	mov	fp, sl
 8011540:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011544:	f7ff fede 	bl	8011304 <__hexdig_fun>
 8011548:	f000 000f 	and.w	r0, r0, #15
 801154c:	fa00 f00b 	lsl.w	r0, r0, fp
 8011550:	ea4a 0a00 	orr.w	sl, sl, r0
 8011554:	f10b 0b04 	add.w	fp, fp, #4
 8011558:	9b05      	ldr	r3, [sp, #20]
 801155a:	e00d      	b.n	8011578 <__gethex+0x24a>
 801155c:	9b05      	ldr	r3, [sp, #20]
 801155e:	9a08      	ldr	r2, [sp, #32]
 8011560:	4413      	add	r3, r2
 8011562:	42bb      	cmp	r3, r7
 8011564:	d3e1      	bcc.n	801152a <__gethex+0x1fc>
 8011566:	4618      	mov	r0, r3
 8011568:	9a01      	ldr	r2, [sp, #4]
 801156a:	9903      	ldr	r1, [sp, #12]
 801156c:	9309      	str	r3, [sp, #36]	; 0x24
 801156e:	f7fe f977 	bl	800f860 <strncmp>
 8011572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011574:	2800      	cmp	r0, #0
 8011576:	d1d8      	bne.n	801152a <__gethex+0x1fc>
 8011578:	461e      	mov	r6, r3
 801157a:	e791      	b.n	80114a0 <__gethex+0x172>
 801157c:	1eb9      	subs	r1, r7, #2
 801157e:	4628      	mov	r0, r5
 8011580:	f000 fd9a 	bl	80120b8 <__any_on>
 8011584:	2800      	cmp	r0, #0
 8011586:	d0b2      	beq.n	80114ee <__gethex+0x1c0>
 8011588:	f04f 0a03 	mov.w	sl, #3
 801158c:	e7b1      	b.n	80114f2 <__gethex+0x1c4>
 801158e:	da09      	bge.n	80115a4 <__gethex+0x276>
 8011590:	1bf7      	subs	r7, r6, r7
 8011592:	4629      	mov	r1, r5
 8011594:	463a      	mov	r2, r7
 8011596:	9802      	ldr	r0, [sp, #8]
 8011598:	f000 fbb0 	bl	8011cfc <__lshift>
 801159c:	1be4      	subs	r4, r4, r7
 801159e:	4605      	mov	r5, r0
 80115a0:	f100 0914 	add.w	r9, r0, #20
 80115a4:	f04f 0a00 	mov.w	sl, #0
 80115a8:	e7a8      	b.n	80114fc <__gethex+0x1ce>
 80115aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80115ae:	42a0      	cmp	r0, r4
 80115b0:	dd6a      	ble.n	8011688 <__gethex+0x35a>
 80115b2:	1b04      	subs	r4, r0, r4
 80115b4:	42a6      	cmp	r6, r4
 80115b6:	dc2e      	bgt.n	8011616 <__gethex+0x2e8>
 80115b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80115bc:	2b02      	cmp	r3, #2
 80115be:	d022      	beq.n	8011606 <__gethex+0x2d8>
 80115c0:	2b03      	cmp	r3, #3
 80115c2:	d024      	beq.n	801160e <__gethex+0x2e0>
 80115c4:	2b01      	cmp	r3, #1
 80115c6:	d115      	bne.n	80115f4 <__gethex+0x2c6>
 80115c8:	42a6      	cmp	r6, r4
 80115ca:	d113      	bne.n	80115f4 <__gethex+0x2c6>
 80115cc:	2e01      	cmp	r6, #1
 80115ce:	dc0b      	bgt.n	80115e8 <__gethex+0x2ba>
 80115d0:	9a06      	ldr	r2, [sp, #24]
 80115d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80115d6:	6013      	str	r3, [r2, #0]
 80115d8:	2301      	movs	r3, #1
 80115da:	612b      	str	r3, [r5, #16]
 80115dc:	f8c9 3000 	str.w	r3, [r9]
 80115e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80115e2:	2762      	movs	r7, #98	; 0x62
 80115e4:	601d      	str	r5, [r3, #0]
 80115e6:	e72a      	b.n	801143e <__gethex+0x110>
 80115e8:	1e71      	subs	r1, r6, #1
 80115ea:	4628      	mov	r0, r5
 80115ec:	f000 fd64 	bl	80120b8 <__any_on>
 80115f0:	2800      	cmp	r0, #0
 80115f2:	d1ed      	bne.n	80115d0 <__gethex+0x2a2>
 80115f4:	4629      	mov	r1, r5
 80115f6:	9802      	ldr	r0, [sp, #8]
 80115f8:	f000 f9b4 	bl	8011964 <_Bfree>
 80115fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80115fe:	2300      	movs	r3, #0
 8011600:	6013      	str	r3, [r2, #0]
 8011602:	2750      	movs	r7, #80	; 0x50
 8011604:	e71b      	b.n	801143e <__gethex+0x110>
 8011606:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011608:	2b00      	cmp	r3, #0
 801160a:	d0e1      	beq.n	80115d0 <__gethex+0x2a2>
 801160c:	e7f2      	b.n	80115f4 <__gethex+0x2c6>
 801160e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011610:	2b00      	cmp	r3, #0
 8011612:	d1dd      	bne.n	80115d0 <__gethex+0x2a2>
 8011614:	e7ee      	b.n	80115f4 <__gethex+0x2c6>
 8011616:	1e67      	subs	r7, r4, #1
 8011618:	f1ba 0f00 	cmp.w	sl, #0
 801161c:	d131      	bne.n	8011682 <__gethex+0x354>
 801161e:	b127      	cbz	r7, 801162a <__gethex+0x2fc>
 8011620:	4639      	mov	r1, r7
 8011622:	4628      	mov	r0, r5
 8011624:	f000 fd48 	bl	80120b8 <__any_on>
 8011628:	4682      	mov	sl, r0
 801162a:	117a      	asrs	r2, r7, #5
 801162c:	2301      	movs	r3, #1
 801162e:	f007 071f 	and.w	r7, r7, #31
 8011632:	fa03 f707 	lsl.w	r7, r3, r7
 8011636:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801163a:	4621      	mov	r1, r4
 801163c:	421f      	tst	r7, r3
 801163e:	4628      	mov	r0, r5
 8011640:	bf18      	it	ne
 8011642:	f04a 0a02 	orrne.w	sl, sl, #2
 8011646:	1b36      	subs	r6, r6, r4
 8011648:	f7ff fe22 	bl	8011290 <rshift>
 801164c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8011650:	2702      	movs	r7, #2
 8011652:	f1ba 0f00 	cmp.w	sl, #0
 8011656:	d048      	beq.n	80116ea <__gethex+0x3bc>
 8011658:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801165c:	2b02      	cmp	r3, #2
 801165e:	d015      	beq.n	801168c <__gethex+0x35e>
 8011660:	2b03      	cmp	r3, #3
 8011662:	d017      	beq.n	8011694 <__gethex+0x366>
 8011664:	2b01      	cmp	r3, #1
 8011666:	d109      	bne.n	801167c <__gethex+0x34e>
 8011668:	f01a 0f02 	tst.w	sl, #2
 801166c:	d006      	beq.n	801167c <__gethex+0x34e>
 801166e:	f8d9 3000 	ldr.w	r3, [r9]
 8011672:	ea4a 0a03 	orr.w	sl, sl, r3
 8011676:	f01a 0f01 	tst.w	sl, #1
 801167a:	d10e      	bne.n	801169a <__gethex+0x36c>
 801167c:	f047 0710 	orr.w	r7, r7, #16
 8011680:	e033      	b.n	80116ea <__gethex+0x3bc>
 8011682:	f04f 0a01 	mov.w	sl, #1
 8011686:	e7d0      	b.n	801162a <__gethex+0x2fc>
 8011688:	2701      	movs	r7, #1
 801168a:	e7e2      	b.n	8011652 <__gethex+0x324>
 801168c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801168e:	f1c3 0301 	rsb	r3, r3, #1
 8011692:	9315      	str	r3, [sp, #84]	; 0x54
 8011694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011696:	2b00      	cmp	r3, #0
 8011698:	d0f0      	beq.n	801167c <__gethex+0x34e>
 801169a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801169e:	f105 0314 	add.w	r3, r5, #20
 80116a2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80116a6:	eb03 010a 	add.w	r1, r3, sl
 80116aa:	f04f 0c00 	mov.w	ip, #0
 80116ae:	4618      	mov	r0, r3
 80116b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80116b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80116b8:	d01c      	beq.n	80116f4 <__gethex+0x3c6>
 80116ba:	3201      	adds	r2, #1
 80116bc:	6002      	str	r2, [r0, #0]
 80116be:	2f02      	cmp	r7, #2
 80116c0:	f105 0314 	add.w	r3, r5, #20
 80116c4:	d138      	bne.n	8011738 <__gethex+0x40a>
 80116c6:	f8d8 2000 	ldr.w	r2, [r8]
 80116ca:	3a01      	subs	r2, #1
 80116cc:	42b2      	cmp	r2, r6
 80116ce:	d10a      	bne.n	80116e6 <__gethex+0x3b8>
 80116d0:	1171      	asrs	r1, r6, #5
 80116d2:	2201      	movs	r2, #1
 80116d4:	f006 061f 	and.w	r6, r6, #31
 80116d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80116dc:	fa02 f606 	lsl.w	r6, r2, r6
 80116e0:	421e      	tst	r6, r3
 80116e2:	bf18      	it	ne
 80116e4:	4617      	movne	r7, r2
 80116e6:	f047 0720 	orr.w	r7, r7, #32
 80116ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80116ec:	601d      	str	r5, [r3, #0]
 80116ee:	9b06      	ldr	r3, [sp, #24]
 80116f0:	601c      	str	r4, [r3, #0]
 80116f2:	e6a4      	b.n	801143e <__gethex+0x110>
 80116f4:	4299      	cmp	r1, r3
 80116f6:	f843 cc04 	str.w	ip, [r3, #-4]
 80116fa:	d8d8      	bhi.n	80116ae <__gethex+0x380>
 80116fc:	68ab      	ldr	r3, [r5, #8]
 80116fe:	4599      	cmp	r9, r3
 8011700:	db12      	blt.n	8011728 <__gethex+0x3fa>
 8011702:	6869      	ldr	r1, [r5, #4]
 8011704:	9802      	ldr	r0, [sp, #8]
 8011706:	3101      	adds	r1, #1
 8011708:	f000 f8f8 	bl	80118fc <_Balloc>
 801170c:	692a      	ldr	r2, [r5, #16]
 801170e:	3202      	adds	r2, #2
 8011710:	f105 010c 	add.w	r1, r5, #12
 8011714:	4683      	mov	fp, r0
 8011716:	0092      	lsls	r2, r2, #2
 8011718:	300c      	adds	r0, #12
 801171a:	f7fd faaf 	bl	800ec7c <memcpy>
 801171e:	4629      	mov	r1, r5
 8011720:	9802      	ldr	r0, [sp, #8]
 8011722:	f000 f91f 	bl	8011964 <_Bfree>
 8011726:	465d      	mov	r5, fp
 8011728:	692b      	ldr	r3, [r5, #16]
 801172a:	1c5a      	adds	r2, r3, #1
 801172c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011730:	612a      	str	r2, [r5, #16]
 8011732:	2201      	movs	r2, #1
 8011734:	615a      	str	r2, [r3, #20]
 8011736:	e7c2      	b.n	80116be <__gethex+0x390>
 8011738:	692a      	ldr	r2, [r5, #16]
 801173a:	454a      	cmp	r2, r9
 801173c:	dd0b      	ble.n	8011756 <__gethex+0x428>
 801173e:	2101      	movs	r1, #1
 8011740:	4628      	mov	r0, r5
 8011742:	f7ff fda5 	bl	8011290 <rshift>
 8011746:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801174a:	3401      	adds	r4, #1
 801174c:	42a3      	cmp	r3, r4
 801174e:	f6ff aed9 	blt.w	8011504 <__gethex+0x1d6>
 8011752:	2701      	movs	r7, #1
 8011754:	e7c7      	b.n	80116e6 <__gethex+0x3b8>
 8011756:	f016 061f 	ands.w	r6, r6, #31
 801175a:	d0fa      	beq.n	8011752 <__gethex+0x424>
 801175c:	449a      	add	sl, r3
 801175e:	f1c6 0620 	rsb	r6, r6, #32
 8011762:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011766:	f000 f98d 	bl	8011a84 <__hi0bits>
 801176a:	42b0      	cmp	r0, r6
 801176c:	dbe7      	blt.n	801173e <__gethex+0x410>
 801176e:	e7f0      	b.n	8011752 <__gethex+0x424>

08011770 <L_shift>:
 8011770:	f1c2 0208 	rsb	r2, r2, #8
 8011774:	0092      	lsls	r2, r2, #2
 8011776:	b570      	push	{r4, r5, r6, lr}
 8011778:	f1c2 0620 	rsb	r6, r2, #32
 801177c:	6843      	ldr	r3, [r0, #4]
 801177e:	6804      	ldr	r4, [r0, #0]
 8011780:	fa03 f506 	lsl.w	r5, r3, r6
 8011784:	432c      	orrs	r4, r5
 8011786:	40d3      	lsrs	r3, r2
 8011788:	6004      	str	r4, [r0, #0]
 801178a:	f840 3f04 	str.w	r3, [r0, #4]!
 801178e:	4288      	cmp	r0, r1
 8011790:	d3f4      	bcc.n	801177c <L_shift+0xc>
 8011792:	bd70      	pop	{r4, r5, r6, pc}

08011794 <__match>:
 8011794:	b530      	push	{r4, r5, lr}
 8011796:	6803      	ldr	r3, [r0, #0]
 8011798:	3301      	adds	r3, #1
 801179a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801179e:	b914      	cbnz	r4, 80117a6 <__match+0x12>
 80117a0:	6003      	str	r3, [r0, #0]
 80117a2:	2001      	movs	r0, #1
 80117a4:	bd30      	pop	{r4, r5, pc}
 80117a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80117ae:	2d19      	cmp	r5, #25
 80117b0:	bf98      	it	ls
 80117b2:	3220      	addls	r2, #32
 80117b4:	42a2      	cmp	r2, r4
 80117b6:	d0f0      	beq.n	801179a <__match+0x6>
 80117b8:	2000      	movs	r0, #0
 80117ba:	e7f3      	b.n	80117a4 <__match+0x10>

080117bc <__hexnan>:
 80117bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c0:	680b      	ldr	r3, [r1, #0]
 80117c2:	6801      	ldr	r1, [r0, #0]
 80117c4:	115f      	asrs	r7, r3, #5
 80117c6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80117ca:	f013 031f 	ands.w	r3, r3, #31
 80117ce:	b087      	sub	sp, #28
 80117d0:	bf18      	it	ne
 80117d2:	3704      	addne	r7, #4
 80117d4:	2500      	movs	r5, #0
 80117d6:	1f3e      	subs	r6, r7, #4
 80117d8:	4682      	mov	sl, r0
 80117da:	4690      	mov	r8, r2
 80117dc:	9301      	str	r3, [sp, #4]
 80117de:	f847 5c04 	str.w	r5, [r7, #-4]
 80117e2:	46b1      	mov	r9, r6
 80117e4:	4634      	mov	r4, r6
 80117e6:	9502      	str	r5, [sp, #8]
 80117e8:	46ab      	mov	fp, r5
 80117ea:	784a      	ldrb	r2, [r1, #1]
 80117ec:	1c4b      	adds	r3, r1, #1
 80117ee:	9303      	str	r3, [sp, #12]
 80117f0:	b342      	cbz	r2, 8011844 <__hexnan+0x88>
 80117f2:	4610      	mov	r0, r2
 80117f4:	9105      	str	r1, [sp, #20]
 80117f6:	9204      	str	r2, [sp, #16]
 80117f8:	f7ff fd84 	bl	8011304 <__hexdig_fun>
 80117fc:	2800      	cmp	r0, #0
 80117fe:	d143      	bne.n	8011888 <__hexnan+0xcc>
 8011800:	9a04      	ldr	r2, [sp, #16]
 8011802:	9905      	ldr	r1, [sp, #20]
 8011804:	2a20      	cmp	r2, #32
 8011806:	d818      	bhi.n	801183a <__hexnan+0x7e>
 8011808:	9b02      	ldr	r3, [sp, #8]
 801180a:	459b      	cmp	fp, r3
 801180c:	dd13      	ble.n	8011836 <__hexnan+0x7a>
 801180e:	454c      	cmp	r4, r9
 8011810:	d206      	bcs.n	8011820 <__hexnan+0x64>
 8011812:	2d07      	cmp	r5, #7
 8011814:	dc04      	bgt.n	8011820 <__hexnan+0x64>
 8011816:	462a      	mov	r2, r5
 8011818:	4649      	mov	r1, r9
 801181a:	4620      	mov	r0, r4
 801181c:	f7ff ffa8 	bl	8011770 <L_shift>
 8011820:	4544      	cmp	r4, r8
 8011822:	d944      	bls.n	80118ae <__hexnan+0xf2>
 8011824:	2300      	movs	r3, #0
 8011826:	f1a4 0904 	sub.w	r9, r4, #4
 801182a:	f844 3c04 	str.w	r3, [r4, #-4]
 801182e:	f8cd b008 	str.w	fp, [sp, #8]
 8011832:	464c      	mov	r4, r9
 8011834:	461d      	mov	r5, r3
 8011836:	9903      	ldr	r1, [sp, #12]
 8011838:	e7d7      	b.n	80117ea <__hexnan+0x2e>
 801183a:	2a29      	cmp	r2, #41	; 0x29
 801183c:	d14a      	bne.n	80118d4 <__hexnan+0x118>
 801183e:	3102      	adds	r1, #2
 8011840:	f8ca 1000 	str.w	r1, [sl]
 8011844:	f1bb 0f00 	cmp.w	fp, #0
 8011848:	d044      	beq.n	80118d4 <__hexnan+0x118>
 801184a:	454c      	cmp	r4, r9
 801184c:	d206      	bcs.n	801185c <__hexnan+0xa0>
 801184e:	2d07      	cmp	r5, #7
 8011850:	dc04      	bgt.n	801185c <__hexnan+0xa0>
 8011852:	462a      	mov	r2, r5
 8011854:	4649      	mov	r1, r9
 8011856:	4620      	mov	r0, r4
 8011858:	f7ff ff8a 	bl	8011770 <L_shift>
 801185c:	4544      	cmp	r4, r8
 801185e:	d928      	bls.n	80118b2 <__hexnan+0xf6>
 8011860:	4643      	mov	r3, r8
 8011862:	f854 2b04 	ldr.w	r2, [r4], #4
 8011866:	f843 2b04 	str.w	r2, [r3], #4
 801186a:	42a6      	cmp	r6, r4
 801186c:	d2f9      	bcs.n	8011862 <__hexnan+0xa6>
 801186e:	2200      	movs	r2, #0
 8011870:	f843 2b04 	str.w	r2, [r3], #4
 8011874:	429e      	cmp	r6, r3
 8011876:	d2fb      	bcs.n	8011870 <__hexnan+0xb4>
 8011878:	6833      	ldr	r3, [r6, #0]
 801187a:	b91b      	cbnz	r3, 8011884 <__hexnan+0xc8>
 801187c:	4546      	cmp	r6, r8
 801187e:	d127      	bne.n	80118d0 <__hexnan+0x114>
 8011880:	2301      	movs	r3, #1
 8011882:	6033      	str	r3, [r6, #0]
 8011884:	2005      	movs	r0, #5
 8011886:	e026      	b.n	80118d6 <__hexnan+0x11a>
 8011888:	3501      	adds	r5, #1
 801188a:	2d08      	cmp	r5, #8
 801188c:	f10b 0b01 	add.w	fp, fp, #1
 8011890:	dd06      	ble.n	80118a0 <__hexnan+0xe4>
 8011892:	4544      	cmp	r4, r8
 8011894:	d9cf      	bls.n	8011836 <__hexnan+0x7a>
 8011896:	2300      	movs	r3, #0
 8011898:	f844 3c04 	str.w	r3, [r4, #-4]
 801189c:	2501      	movs	r5, #1
 801189e:	3c04      	subs	r4, #4
 80118a0:	6822      	ldr	r2, [r4, #0]
 80118a2:	f000 000f 	and.w	r0, r0, #15
 80118a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80118aa:	6020      	str	r0, [r4, #0]
 80118ac:	e7c3      	b.n	8011836 <__hexnan+0x7a>
 80118ae:	2508      	movs	r5, #8
 80118b0:	e7c1      	b.n	8011836 <__hexnan+0x7a>
 80118b2:	9b01      	ldr	r3, [sp, #4]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d0df      	beq.n	8011878 <__hexnan+0xbc>
 80118b8:	f04f 32ff 	mov.w	r2, #4294967295
 80118bc:	f1c3 0320 	rsb	r3, r3, #32
 80118c0:	fa22 f303 	lsr.w	r3, r2, r3
 80118c4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80118c8:	401a      	ands	r2, r3
 80118ca:	f847 2c04 	str.w	r2, [r7, #-4]
 80118ce:	e7d3      	b.n	8011878 <__hexnan+0xbc>
 80118d0:	3e04      	subs	r6, #4
 80118d2:	e7d1      	b.n	8011878 <__hexnan+0xbc>
 80118d4:	2004      	movs	r0, #4
 80118d6:	b007      	add	sp, #28
 80118d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080118dc <__localeconv_l>:
 80118dc:	30f0      	adds	r0, #240	; 0xf0
 80118de:	4770      	bx	lr

080118e0 <_localeconv_r>:
 80118e0:	4b04      	ldr	r3, [pc, #16]	; (80118f4 <_localeconv_r+0x14>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	6a18      	ldr	r0, [r3, #32]
 80118e6:	4b04      	ldr	r3, [pc, #16]	; (80118f8 <_localeconv_r+0x18>)
 80118e8:	2800      	cmp	r0, #0
 80118ea:	bf08      	it	eq
 80118ec:	4618      	moveq	r0, r3
 80118ee:	30f0      	adds	r0, #240	; 0xf0
 80118f0:	4770      	bx	lr
 80118f2:	bf00      	nop
 80118f4:	2000002c 	.word	0x2000002c
 80118f8:	20000090 	.word	0x20000090

080118fc <_Balloc>:
 80118fc:	b570      	push	{r4, r5, r6, lr}
 80118fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011900:	4604      	mov	r4, r0
 8011902:	460e      	mov	r6, r1
 8011904:	b93d      	cbnz	r5, 8011916 <_Balloc+0x1a>
 8011906:	2010      	movs	r0, #16
 8011908:	f7fd f996 	bl	800ec38 <malloc>
 801190c:	6260      	str	r0, [r4, #36]	; 0x24
 801190e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011912:	6005      	str	r5, [r0, #0]
 8011914:	60c5      	str	r5, [r0, #12]
 8011916:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8011918:	68eb      	ldr	r3, [r5, #12]
 801191a:	b183      	cbz	r3, 801193e <_Balloc+0x42>
 801191c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801191e:	68db      	ldr	r3, [r3, #12]
 8011920:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011924:	b9b8      	cbnz	r0, 8011956 <_Balloc+0x5a>
 8011926:	2101      	movs	r1, #1
 8011928:	fa01 f506 	lsl.w	r5, r1, r6
 801192c:	1d6a      	adds	r2, r5, #5
 801192e:	0092      	lsls	r2, r2, #2
 8011930:	4620      	mov	r0, r4
 8011932:	f000 fbe2 	bl	80120fa <_calloc_r>
 8011936:	b160      	cbz	r0, 8011952 <_Balloc+0x56>
 8011938:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801193c:	e00e      	b.n	801195c <_Balloc+0x60>
 801193e:	2221      	movs	r2, #33	; 0x21
 8011940:	2104      	movs	r1, #4
 8011942:	4620      	mov	r0, r4
 8011944:	f000 fbd9 	bl	80120fa <_calloc_r>
 8011948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801194a:	60e8      	str	r0, [r5, #12]
 801194c:	68db      	ldr	r3, [r3, #12]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d1e4      	bne.n	801191c <_Balloc+0x20>
 8011952:	2000      	movs	r0, #0
 8011954:	bd70      	pop	{r4, r5, r6, pc}
 8011956:	6802      	ldr	r2, [r0, #0]
 8011958:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801195c:	2300      	movs	r3, #0
 801195e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011962:	e7f7      	b.n	8011954 <_Balloc+0x58>

08011964 <_Bfree>:
 8011964:	b570      	push	{r4, r5, r6, lr}
 8011966:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011968:	4606      	mov	r6, r0
 801196a:	460d      	mov	r5, r1
 801196c:	b93c      	cbnz	r4, 801197e <_Bfree+0x1a>
 801196e:	2010      	movs	r0, #16
 8011970:	f7fd f962 	bl	800ec38 <malloc>
 8011974:	6270      	str	r0, [r6, #36]	; 0x24
 8011976:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801197a:	6004      	str	r4, [r0, #0]
 801197c:	60c4      	str	r4, [r0, #12]
 801197e:	b13d      	cbz	r5, 8011990 <_Bfree+0x2c>
 8011980:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011982:	686a      	ldr	r2, [r5, #4]
 8011984:	68db      	ldr	r3, [r3, #12]
 8011986:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801198a:	6029      	str	r1, [r5, #0]
 801198c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011990:	bd70      	pop	{r4, r5, r6, pc}

08011992 <__multadd>:
 8011992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011996:	690d      	ldr	r5, [r1, #16]
 8011998:	461f      	mov	r7, r3
 801199a:	4606      	mov	r6, r0
 801199c:	460c      	mov	r4, r1
 801199e:	f101 0c14 	add.w	ip, r1, #20
 80119a2:	2300      	movs	r3, #0
 80119a4:	f8dc 0000 	ldr.w	r0, [ip]
 80119a8:	b281      	uxth	r1, r0
 80119aa:	fb02 7101 	mla	r1, r2, r1, r7
 80119ae:	0c0f      	lsrs	r7, r1, #16
 80119b0:	0c00      	lsrs	r0, r0, #16
 80119b2:	fb02 7000 	mla	r0, r2, r0, r7
 80119b6:	b289      	uxth	r1, r1
 80119b8:	3301      	adds	r3, #1
 80119ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80119be:	429d      	cmp	r5, r3
 80119c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80119c4:	f84c 1b04 	str.w	r1, [ip], #4
 80119c8:	dcec      	bgt.n	80119a4 <__multadd+0x12>
 80119ca:	b1d7      	cbz	r7, 8011a02 <__multadd+0x70>
 80119cc:	68a3      	ldr	r3, [r4, #8]
 80119ce:	42ab      	cmp	r3, r5
 80119d0:	dc12      	bgt.n	80119f8 <__multadd+0x66>
 80119d2:	6861      	ldr	r1, [r4, #4]
 80119d4:	4630      	mov	r0, r6
 80119d6:	3101      	adds	r1, #1
 80119d8:	f7ff ff90 	bl	80118fc <_Balloc>
 80119dc:	6922      	ldr	r2, [r4, #16]
 80119de:	3202      	adds	r2, #2
 80119e0:	f104 010c 	add.w	r1, r4, #12
 80119e4:	4680      	mov	r8, r0
 80119e6:	0092      	lsls	r2, r2, #2
 80119e8:	300c      	adds	r0, #12
 80119ea:	f7fd f947 	bl	800ec7c <memcpy>
 80119ee:	4621      	mov	r1, r4
 80119f0:	4630      	mov	r0, r6
 80119f2:	f7ff ffb7 	bl	8011964 <_Bfree>
 80119f6:	4644      	mov	r4, r8
 80119f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80119fc:	3501      	adds	r5, #1
 80119fe:	615f      	str	r7, [r3, #20]
 8011a00:	6125      	str	r5, [r4, #16]
 8011a02:	4620      	mov	r0, r4
 8011a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011a08 <__s2b>:
 8011a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a0c:	460c      	mov	r4, r1
 8011a0e:	4615      	mov	r5, r2
 8011a10:	461f      	mov	r7, r3
 8011a12:	2209      	movs	r2, #9
 8011a14:	3308      	adds	r3, #8
 8011a16:	4606      	mov	r6, r0
 8011a18:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a1c:	2100      	movs	r1, #0
 8011a1e:	2201      	movs	r2, #1
 8011a20:	429a      	cmp	r2, r3
 8011a22:	db20      	blt.n	8011a66 <__s2b+0x5e>
 8011a24:	4630      	mov	r0, r6
 8011a26:	f7ff ff69 	bl	80118fc <_Balloc>
 8011a2a:	9b08      	ldr	r3, [sp, #32]
 8011a2c:	6143      	str	r3, [r0, #20]
 8011a2e:	2d09      	cmp	r5, #9
 8011a30:	f04f 0301 	mov.w	r3, #1
 8011a34:	6103      	str	r3, [r0, #16]
 8011a36:	dd19      	ble.n	8011a6c <__s2b+0x64>
 8011a38:	f104 0809 	add.w	r8, r4, #9
 8011a3c:	46c1      	mov	r9, r8
 8011a3e:	442c      	add	r4, r5
 8011a40:	f819 3b01 	ldrb.w	r3, [r9], #1
 8011a44:	4601      	mov	r1, r0
 8011a46:	3b30      	subs	r3, #48	; 0x30
 8011a48:	220a      	movs	r2, #10
 8011a4a:	4630      	mov	r0, r6
 8011a4c:	f7ff ffa1 	bl	8011992 <__multadd>
 8011a50:	45a1      	cmp	r9, r4
 8011a52:	d1f5      	bne.n	8011a40 <__s2b+0x38>
 8011a54:	eb08 0405 	add.w	r4, r8, r5
 8011a58:	3c08      	subs	r4, #8
 8011a5a:	1b2d      	subs	r5, r5, r4
 8011a5c:	1963      	adds	r3, r4, r5
 8011a5e:	42bb      	cmp	r3, r7
 8011a60:	db07      	blt.n	8011a72 <__s2b+0x6a>
 8011a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a66:	0052      	lsls	r2, r2, #1
 8011a68:	3101      	adds	r1, #1
 8011a6a:	e7d9      	b.n	8011a20 <__s2b+0x18>
 8011a6c:	340a      	adds	r4, #10
 8011a6e:	2509      	movs	r5, #9
 8011a70:	e7f3      	b.n	8011a5a <__s2b+0x52>
 8011a72:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011a76:	4601      	mov	r1, r0
 8011a78:	3b30      	subs	r3, #48	; 0x30
 8011a7a:	220a      	movs	r2, #10
 8011a7c:	4630      	mov	r0, r6
 8011a7e:	f7ff ff88 	bl	8011992 <__multadd>
 8011a82:	e7eb      	b.n	8011a5c <__s2b+0x54>

08011a84 <__hi0bits>:
 8011a84:	0c02      	lsrs	r2, r0, #16
 8011a86:	0412      	lsls	r2, r2, #16
 8011a88:	4603      	mov	r3, r0
 8011a8a:	b9b2      	cbnz	r2, 8011aba <__hi0bits+0x36>
 8011a8c:	0403      	lsls	r3, r0, #16
 8011a8e:	2010      	movs	r0, #16
 8011a90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011a94:	bf04      	itt	eq
 8011a96:	021b      	lsleq	r3, r3, #8
 8011a98:	3008      	addeq	r0, #8
 8011a9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011a9e:	bf04      	itt	eq
 8011aa0:	011b      	lsleq	r3, r3, #4
 8011aa2:	3004      	addeq	r0, #4
 8011aa4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011aa8:	bf04      	itt	eq
 8011aaa:	009b      	lsleq	r3, r3, #2
 8011aac:	3002      	addeq	r0, #2
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	db06      	blt.n	8011ac0 <__hi0bits+0x3c>
 8011ab2:	005b      	lsls	r3, r3, #1
 8011ab4:	d503      	bpl.n	8011abe <__hi0bits+0x3a>
 8011ab6:	3001      	adds	r0, #1
 8011ab8:	4770      	bx	lr
 8011aba:	2000      	movs	r0, #0
 8011abc:	e7e8      	b.n	8011a90 <__hi0bits+0xc>
 8011abe:	2020      	movs	r0, #32
 8011ac0:	4770      	bx	lr

08011ac2 <__lo0bits>:
 8011ac2:	6803      	ldr	r3, [r0, #0]
 8011ac4:	f013 0207 	ands.w	r2, r3, #7
 8011ac8:	4601      	mov	r1, r0
 8011aca:	d00b      	beq.n	8011ae4 <__lo0bits+0x22>
 8011acc:	07da      	lsls	r2, r3, #31
 8011ace:	d423      	bmi.n	8011b18 <__lo0bits+0x56>
 8011ad0:	0798      	lsls	r0, r3, #30
 8011ad2:	bf49      	itett	mi
 8011ad4:	085b      	lsrmi	r3, r3, #1
 8011ad6:	089b      	lsrpl	r3, r3, #2
 8011ad8:	2001      	movmi	r0, #1
 8011ada:	600b      	strmi	r3, [r1, #0]
 8011adc:	bf5c      	itt	pl
 8011ade:	600b      	strpl	r3, [r1, #0]
 8011ae0:	2002      	movpl	r0, #2
 8011ae2:	4770      	bx	lr
 8011ae4:	b298      	uxth	r0, r3
 8011ae6:	b9a8      	cbnz	r0, 8011b14 <__lo0bits+0x52>
 8011ae8:	0c1b      	lsrs	r3, r3, #16
 8011aea:	2010      	movs	r0, #16
 8011aec:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011af0:	bf04      	itt	eq
 8011af2:	0a1b      	lsreq	r3, r3, #8
 8011af4:	3008      	addeq	r0, #8
 8011af6:	071a      	lsls	r2, r3, #28
 8011af8:	bf04      	itt	eq
 8011afa:	091b      	lsreq	r3, r3, #4
 8011afc:	3004      	addeq	r0, #4
 8011afe:	079a      	lsls	r2, r3, #30
 8011b00:	bf04      	itt	eq
 8011b02:	089b      	lsreq	r3, r3, #2
 8011b04:	3002      	addeq	r0, #2
 8011b06:	07da      	lsls	r2, r3, #31
 8011b08:	d402      	bmi.n	8011b10 <__lo0bits+0x4e>
 8011b0a:	085b      	lsrs	r3, r3, #1
 8011b0c:	d006      	beq.n	8011b1c <__lo0bits+0x5a>
 8011b0e:	3001      	adds	r0, #1
 8011b10:	600b      	str	r3, [r1, #0]
 8011b12:	4770      	bx	lr
 8011b14:	4610      	mov	r0, r2
 8011b16:	e7e9      	b.n	8011aec <__lo0bits+0x2a>
 8011b18:	2000      	movs	r0, #0
 8011b1a:	4770      	bx	lr
 8011b1c:	2020      	movs	r0, #32
 8011b1e:	4770      	bx	lr

08011b20 <__i2b>:
 8011b20:	b510      	push	{r4, lr}
 8011b22:	460c      	mov	r4, r1
 8011b24:	2101      	movs	r1, #1
 8011b26:	f7ff fee9 	bl	80118fc <_Balloc>
 8011b2a:	2201      	movs	r2, #1
 8011b2c:	6144      	str	r4, [r0, #20]
 8011b2e:	6102      	str	r2, [r0, #16]
 8011b30:	bd10      	pop	{r4, pc}

08011b32 <__multiply>:
 8011b32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b36:	4614      	mov	r4, r2
 8011b38:	690a      	ldr	r2, [r1, #16]
 8011b3a:	6923      	ldr	r3, [r4, #16]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	bfb8      	it	lt
 8011b40:	460b      	movlt	r3, r1
 8011b42:	4688      	mov	r8, r1
 8011b44:	bfbc      	itt	lt
 8011b46:	46a0      	movlt	r8, r4
 8011b48:	461c      	movlt	r4, r3
 8011b4a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011b4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011b52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b56:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011b5a:	eb07 0609 	add.w	r6, r7, r9
 8011b5e:	42b3      	cmp	r3, r6
 8011b60:	bfb8      	it	lt
 8011b62:	3101      	addlt	r1, #1
 8011b64:	f7ff feca 	bl	80118fc <_Balloc>
 8011b68:	f100 0514 	add.w	r5, r0, #20
 8011b6c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011b70:	462b      	mov	r3, r5
 8011b72:	2200      	movs	r2, #0
 8011b74:	4573      	cmp	r3, lr
 8011b76:	d316      	bcc.n	8011ba6 <__multiply+0x74>
 8011b78:	f104 0214 	add.w	r2, r4, #20
 8011b7c:	f108 0114 	add.w	r1, r8, #20
 8011b80:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011b84:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011b88:	9300      	str	r3, [sp, #0]
 8011b8a:	9b00      	ldr	r3, [sp, #0]
 8011b8c:	9201      	str	r2, [sp, #4]
 8011b8e:	4293      	cmp	r3, r2
 8011b90:	d80c      	bhi.n	8011bac <__multiply+0x7a>
 8011b92:	2e00      	cmp	r6, #0
 8011b94:	dd03      	ble.n	8011b9e <__multiply+0x6c>
 8011b96:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d05d      	beq.n	8011c5a <__multiply+0x128>
 8011b9e:	6106      	str	r6, [r0, #16]
 8011ba0:	b003      	add	sp, #12
 8011ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba6:	f843 2b04 	str.w	r2, [r3], #4
 8011baa:	e7e3      	b.n	8011b74 <__multiply+0x42>
 8011bac:	f8b2 b000 	ldrh.w	fp, [r2]
 8011bb0:	f1bb 0f00 	cmp.w	fp, #0
 8011bb4:	d023      	beq.n	8011bfe <__multiply+0xcc>
 8011bb6:	4689      	mov	r9, r1
 8011bb8:	46ac      	mov	ip, r5
 8011bba:	f04f 0800 	mov.w	r8, #0
 8011bbe:	f859 4b04 	ldr.w	r4, [r9], #4
 8011bc2:	f8dc a000 	ldr.w	sl, [ip]
 8011bc6:	b2a3      	uxth	r3, r4
 8011bc8:	fa1f fa8a 	uxth.w	sl, sl
 8011bcc:	fb0b a303 	mla	r3, fp, r3, sl
 8011bd0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011bd4:	f8dc 4000 	ldr.w	r4, [ip]
 8011bd8:	4443      	add	r3, r8
 8011bda:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011bde:	fb0b 840a 	mla	r4, fp, sl, r8
 8011be2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011be6:	46e2      	mov	sl, ip
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011bee:	454f      	cmp	r7, r9
 8011bf0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011bf4:	f84a 3b04 	str.w	r3, [sl], #4
 8011bf8:	d82b      	bhi.n	8011c52 <__multiply+0x120>
 8011bfa:	f8cc 8004 	str.w	r8, [ip, #4]
 8011bfe:	9b01      	ldr	r3, [sp, #4]
 8011c00:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011c04:	3204      	adds	r2, #4
 8011c06:	f1ba 0f00 	cmp.w	sl, #0
 8011c0a:	d020      	beq.n	8011c4e <__multiply+0x11c>
 8011c0c:	682b      	ldr	r3, [r5, #0]
 8011c0e:	4689      	mov	r9, r1
 8011c10:	46a8      	mov	r8, r5
 8011c12:	f04f 0b00 	mov.w	fp, #0
 8011c16:	f8b9 c000 	ldrh.w	ip, [r9]
 8011c1a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011c1e:	fb0a 440c 	mla	r4, sl, ip, r4
 8011c22:	445c      	add	r4, fp
 8011c24:	46c4      	mov	ip, r8
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011c2c:	f84c 3b04 	str.w	r3, [ip], #4
 8011c30:	f859 3b04 	ldr.w	r3, [r9], #4
 8011c34:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011c38:	0c1b      	lsrs	r3, r3, #16
 8011c3a:	fb0a b303 	mla	r3, sl, r3, fp
 8011c3e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011c42:	454f      	cmp	r7, r9
 8011c44:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011c48:	d805      	bhi.n	8011c56 <__multiply+0x124>
 8011c4a:	f8c8 3004 	str.w	r3, [r8, #4]
 8011c4e:	3504      	adds	r5, #4
 8011c50:	e79b      	b.n	8011b8a <__multiply+0x58>
 8011c52:	46d4      	mov	ip, sl
 8011c54:	e7b3      	b.n	8011bbe <__multiply+0x8c>
 8011c56:	46e0      	mov	r8, ip
 8011c58:	e7dd      	b.n	8011c16 <__multiply+0xe4>
 8011c5a:	3e01      	subs	r6, #1
 8011c5c:	e799      	b.n	8011b92 <__multiply+0x60>
	...

08011c60 <__pow5mult>:
 8011c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c64:	4615      	mov	r5, r2
 8011c66:	f012 0203 	ands.w	r2, r2, #3
 8011c6a:	4606      	mov	r6, r0
 8011c6c:	460f      	mov	r7, r1
 8011c6e:	d007      	beq.n	8011c80 <__pow5mult+0x20>
 8011c70:	3a01      	subs	r2, #1
 8011c72:	4c21      	ldr	r4, [pc, #132]	; (8011cf8 <__pow5mult+0x98>)
 8011c74:	2300      	movs	r3, #0
 8011c76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011c7a:	f7ff fe8a 	bl	8011992 <__multadd>
 8011c7e:	4607      	mov	r7, r0
 8011c80:	10ad      	asrs	r5, r5, #2
 8011c82:	d035      	beq.n	8011cf0 <__pow5mult+0x90>
 8011c84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011c86:	b93c      	cbnz	r4, 8011c98 <__pow5mult+0x38>
 8011c88:	2010      	movs	r0, #16
 8011c8a:	f7fc ffd5 	bl	800ec38 <malloc>
 8011c8e:	6270      	str	r0, [r6, #36]	; 0x24
 8011c90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011c94:	6004      	str	r4, [r0, #0]
 8011c96:	60c4      	str	r4, [r0, #12]
 8011c98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011c9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ca0:	b94c      	cbnz	r4, 8011cb6 <__pow5mult+0x56>
 8011ca2:	f240 2171 	movw	r1, #625	; 0x271
 8011ca6:	4630      	mov	r0, r6
 8011ca8:	f7ff ff3a 	bl	8011b20 <__i2b>
 8011cac:	2300      	movs	r3, #0
 8011cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8011cb2:	4604      	mov	r4, r0
 8011cb4:	6003      	str	r3, [r0, #0]
 8011cb6:	f04f 0800 	mov.w	r8, #0
 8011cba:	07eb      	lsls	r3, r5, #31
 8011cbc:	d50a      	bpl.n	8011cd4 <__pow5mult+0x74>
 8011cbe:	4639      	mov	r1, r7
 8011cc0:	4622      	mov	r2, r4
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	f7ff ff35 	bl	8011b32 <__multiply>
 8011cc8:	4639      	mov	r1, r7
 8011cca:	4681      	mov	r9, r0
 8011ccc:	4630      	mov	r0, r6
 8011cce:	f7ff fe49 	bl	8011964 <_Bfree>
 8011cd2:	464f      	mov	r7, r9
 8011cd4:	106d      	asrs	r5, r5, #1
 8011cd6:	d00b      	beq.n	8011cf0 <__pow5mult+0x90>
 8011cd8:	6820      	ldr	r0, [r4, #0]
 8011cda:	b938      	cbnz	r0, 8011cec <__pow5mult+0x8c>
 8011cdc:	4622      	mov	r2, r4
 8011cde:	4621      	mov	r1, r4
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	f7ff ff26 	bl	8011b32 <__multiply>
 8011ce6:	6020      	str	r0, [r4, #0]
 8011ce8:	f8c0 8000 	str.w	r8, [r0]
 8011cec:	4604      	mov	r4, r0
 8011cee:	e7e4      	b.n	8011cba <__pow5mult+0x5a>
 8011cf0:	4638      	mov	r0, r7
 8011cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cf6:	bf00      	nop
 8011cf8:	08015408 	.word	0x08015408

08011cfc <__lshift>:
 8011cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d00:	460c      	mov	r4, r1
 8011d02:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011d06:	6923      	ldr	r3, [r4, #16]
 8011d08:	6849      	ldr	r1, [r1, #4]
 8011d0a:	eb0a 0903 	add.w	r9, sl, r3
 8011d0e:	68a3      	ldr	r3, [r4, #8]
 8011d10:	4607      	mov	r7, r0
 8011d12:	4616      	mov	r6, r2
 8011d14:	f109 0501 	add.w	r5, r9, #1
 8011d18:	42ab      	cmp	r3, r5
 8011d1a:	db32      	blt.n	8011d82 <__lshift+0x86>
 8011d1c:	4638      	mov	r0, r7
 8011d1e:	f7ff fded 	bl	80118fc <_Balloc>
 8011d22:	2300      	movs	r3, #0
 8011d24:	4680      	mov	r8, r0
 8011d26:	f100 0114 	add.w	r1, r0, #20
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	4553      	cmp	r3, sl
 8011d2e:	db2b      	blt.n	8011d88 <__lshift+0x8c>
 8011d30:	6920      	ldr	r0, [r4, #16]
 8011d32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d36:	f104 0314 	add.w	r3, r4, #20
 8011d3a:	f016 021f 	ands.w	r2, r6, #31
 8011d3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011d42:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011d46:	d025      	beq.n	8011d94 <__lshift+0x98>
 8011d48:	f1c2 0e20 	rsb	lr, r2, #32
 8011d4c:	2000      	movs	r0, #0
 8011d4e:	681e      	ldr	r6, [r3, #0]
 8011d50:	468a      	mov	sl, r1
 8011d52:	4096      	lsls	r6, r2
 8011d54:	4330      	orrs	r0, r6
 8011d56:	f84a 0b04 	str.w	r0, [sl], #4
 8011d5a:	f853 0b04 	ldr.w	r0, [r3], #4
 8011d5e:	459c      	cmp	ip, r3
 8011d60:	fa20 f00e 	lsr.w	r0, r0, lr
 8011d64:	d814      	bhi.n	8011d90 <__lshift+0x94>
 8011d66:	6048      	str	r0, [r1, #4]
 8011d68:	b108      	cbz	r0, 8011d6e <__lshift+0x72>
 8011d6a:	f109 0502 	add.w	r5, r9, #2
 8011d6e:	3d01      	subs	r5, #1
 8011d70:	4638      	mov	r0, r7
 8011d72:	f8c8 5010 	str.w	r5, [r8, #16]
 8011d76:	4621      	mov	r1, r4
 8011d78:	f7ff fdf4 	bl	8011964 <_Bfree>
 8011d7c:	4640      	mov	r0, r8
 8011d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d82:	3101      	adds	r1, #1
 8011d84:	005b      	lsls	r3, r3, #1
 8011d86:	e7c7      	b.n	8011d18 <__lshift+0x1c>
 8011d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011d8c:	3301      	adds	r3, #1
 8011d8e:	e7cd      	b.n	8011d2c <__lshift+0x30>
 8011d90:	4651      	mov	r1, sl
 8011d92:	e7dc      	b.n	8011d4e <__lshift+0x52>
 8011d94:	3904      	subs	r1, #4
 8011d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8011d9e:	459c      	cmp	ip, r3
 8011da0:	d8f9      	bhi.n	8011d96 <__lshift+0x9a>
 8011da2:	e7e4      	b.n	8011d6e <__lshift+0x72>

08011da4 <__mcmp>:
 8011da4:	6903      	ldr	r3, [r0, #16]
 8011da6:	690a      	ldr	r2, [r1, #16]
 8011da8:	1a9b      	subs	r3, r3, r2
 8011daa:	b530      	push	{r4, r5, lr}
 8011dac:	d10c      	bne.n	8011dc8 <__mcmp+0x24>
 8011dae:	0092      	lsls	r2, r2, #2
 8011db0:	3014      	adds	r0, #20
 8011db2:	3114      	adds	r1, #20
 8011db4:	1884      	adds	r4, r0, r2
 8011db6:	4411      	add	r1, r2
 8011db8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011dbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011dc0:	4295      	cmp	r5, r2
 8011dc2:	d003      	beq.n	8011dcc <__mcmp+0x28>
 8011dc4:	d305      	bcc.n	8011dd2 <__mcmp+0x2e>
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	4618      	mov	r0, r3
 8011dca:	bd30      	pop	{r4, r5, pc}
 8011dcc:	42a0      	cmp	r0, r4
 8011dce:	d3f3      	bcc.n	8011db8 <__mcmp+0x14>
 8011dd0:	e7fa      	b.n	8011dc8 <__mcmp+0x24>
 8011dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8011dd6:	e7f7      	b.n	8011dc8 <__mcmp+0x24>

08011dd8 <__mdiff>:
 8011dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ddc:	460d      	mov	r5, r1
 8011dde:	4607      	mov	r7, r0
 8011de0:	4611      	mov	r1, r2
 8011de2:	4628      	mov	r0, r5
 8011de4:	4614      	mov	r4, r2
 8011de6:	f7ff ffdd 	bl	8011da4 <__mcmp>
 8011dea:	1e06      	subs	r6, r0, #0
 8011dec:	d108      	bne.n	8011e00 <__mdiff+0x28>
 8011dee:	4631      	mov	r1, r6
 8011df0:	4638      	mov	r0, r7
 8011df2:	f7ff fd83 	bl	80118fc <_Balloc>
 8011df6:	2301      	movs	r3, #1
 8011df8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e00:	bfa4      	itt	ge
 8011e02:	4623      	movge	r3, r4
 8011e04:	462c      	movge	r4, r5
 8011e06:	4638      	mov	r0, r7
 8011e08:	6861      	ldr	r1, [r4, #4]
 8011e0a:	bfa6      	itte	ge
 8011e0c:	461d      	movge	r5, r3
 8011e0e:	2600      	movge	r6, #0
 8011e10:	2601      	movlt	r6, #1
 8011e12:	f7ff fd73 	bl	80118fc <_Balloc>
 8011e16:	692b      	ldr	r3, [r5, #16]
 8011e18:	60c6      	str	r6, [r0, #12]
 8011e1a:	6926      	ldr	r6, [r4, #16]
 8011e1c:	f105 0914 	add.w	r9, r5, #20
 8011e20:	f104 0214 	add.w	r2, r4, #20
 8011e24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011e28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011e2c:	f100 0514 	add.w	r5, r0, #20
 8011e30:	f04f 0e00 	mov.w	lr, #0
 8011e34:	f852 ab04 	ldr.w	sl, [r2], #4
 8011e38:	f859 4b04 	ldr.w	r4, [r9], #4
 8011e3c:	fa1e f18a 	uxtah	r1, lr, sl
 8011e40:	b2a3      	uxth	r3, r4
 8011e42:	1ac9      	subs	r1, r1, r3
 8011e44:	0c23      	lsrs	r3, r4, #16
 8011e46:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011e4a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011e4e:	b289      	uxth	r1, r1
 8011e50:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011e54:	45c8      	cmp	r8, r9
 8011e56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011e5a:	4694      	mov	ip, r2
 8011e5c:	f845 3b04 	str.w	r3, [r5], #4
 8011e60:	d8e8      	bhi.n	8011e34 <__mdiff+0x5c>
 8011e62:	45bc      	cmp	ip, r7
 8011e64:	d304      	bcc.n	8011e70 <__mdiff+0x98>
 8011e66:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011e6a:	b183      	cbz	r3, 8011e8e <__mdiff+0xb6>
 8011e6c:	6106      	str	r6, [r0, #16]
 8011e6e:	e7c5      	b.n	8011dfc <__mdiff+0x24>
 8011e70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011e74:	fa1e f381 	uxtah	r3, lr, r1
 8011e78:	141a      	asrs	r2, r3, #16
 8011e7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011e7e:	b29b      	uxth	r3, r3
 8011e80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e84:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011e88:	f845 3b04 	str.w	r3, [r5], #4
 8011e8c:	e7e9      	b.n	8011e62 <__mdiff+0x8a>
 8011e8e:	3e01      	subs	r6, #1
 8011e90:	e7e9      	b.n	8011e66 <__mdiff+0x8e>
	...

08011e94 <__ulp>:
 8011e94:	4b12      	ldr	r3, [pc, #72]	; (8011ee0 <__ulp+0x4c>)
 8011e96:	ee10 2a90 	vmov	r2, s1
 8011e9a:	401a      	ands	r2, r3
 8011e9c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	dd04      	ble.n	8011eae <__ulp+0x1a>
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	ec41 0b10 	vmov	d0, r0, r1
 8011eac:	4770      	bx	lr
 8011eae:	425b      	negs	r3, r3
 8011eb0:	151b      	asrs	r3, r3, #20
 8011eb2:	2b13      	cmp	r3, #19
 8011eb4:	f04f 0000 	mov.w	r0, #0
 8011eb8:	f04f 0100 	mov.w	r1, #0
 8011ebc:	dc04      	bgt.n	8011ec8 <__ulp+0x34>
 8011ebe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011ec2:	fa42 f103 	asr.w	r1, r2, r3
 8011ec6:	e7ef      	b.n	8011ea8 <__ulp+0x14>
 8011ec8:	3b14      	subs	r3, #20
 8011eca:	2b1e      	cmp	r3, #30
 8011ecc:	f04f 0201 	mov.w	r2, #1
 8011ed0:	bfda      	itte	le
 8011ed2:	f1c3 031f 	rsble	r3, r3, #31
 8011ed6:	fa02 f303 	lslle.w	r3, r2, r3
 8011eda:	4613      	movgt	r3, r2
 8011edc:	4618      	mov	r0, r3
 8011ede:	e7e3      	b.n	8011ea8 <__ulp+0x14>
 8011ee0:	7ff00000 	.word	0x7ff00000

08011ee4 <__b2d>:
 8011ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ee6:	6905      	ldr	r5, [r0, #16]
 8011ee8:	f100 0714 	add.w	r7, r0, #20
 8011eec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011ef0:	1f2e      	subs	r6, r5, #4
 8011ef2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f7ff fdc4 	bl	8011a84 <__hi0bits>
 8011efc:	f1c0 0320 	rsb	r3, r0, #32
 8011f00:	280a      	cmp	r0, #10
 8011f02:	600b      	str	r3, [r1, #0]
 8011f04:	f8df c074 	ldr.w	ip, [pc, #116]	; 8011f7c <__b2d+0x98>
 8011f08:	dc14      	bgt.n	8011f34 <__b2d+0x50>
 8011f0a:	f1c0 0e0b 	rsb	lr, r0, #11
 8011f0e:	fa24 f10e 	lsr.w	r1, r4, lr
 8011f12:	42b7      	cmp	r7, r6
 8011f14:	ea41 030c 	orr.w	r3, r1, ip
 8011f18:	bf34      	ite	cc
 8011f1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011f1e:	2100      	movcs	r1, #0
 8011f20:	3015      	adds	r0, #21
 8011f22:	fa04 f000 	lsl.w	r0, r4, r0
 8011f26:	fa21 f10e 	lsr.w	r1, r1, lr
 8011f2a:	ea40 0201 	orr.w	r2, r0, r1
 8011f2e:	ec43 2b10 	vmov	d0, r2, r3
 8011f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f34:	42b7      	cmp	r7, r6
 8011f36:	bf3a      	itte	cc
 8011f38:	f1a5 0608 	subcc.w	r6, r5, #8
 8011f3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011f40:	2100      	movcs	r1, #0
 8011f42:	380b      	subs	r0, #11
 8011f44:	d015      	beq.n	8011f72 <__b2d+0x8e>
 8011f46:	4084      	lsls	r4, r0
 8011f48:	f1c0 0520 	rsb	r5, r0, #32
 8011f4c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8011f50:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8011f54:	42be      	cmp	r6, r7
 8011f56:	fa21 fc05 	lsr.w	ip, r1, r5
 8011f5a:	ea44 030c 	orr.w	r3, r4, ip
 8011f5e:	bf8c      	ite	hi
 8011f60:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011f64:	2400      	movls	r4, #0
 8011f66:	fa01 f000 	lsl.w	r0, r1, r0
 8011f6a:	40ec      	lsrs	r4, r5
 8011f6c:	ea40 0204 	orr.w	r2, r0, r4
 8011f70:	e7dd      	b.n	8011f2e <__b2d+0x4a>
 8011f72:	ea44 030c 	orr.w	r3, r4, ip
 8011f76:	460a      	mov	r2, r1
 8011f78:	e7d9      	b.n	8011f2e <__b2d+0x4a>
 8011f7a:	bf00      	nop
 8011f7c:	3ff00000 	.word	0x3ff00000

08011f80 <__d2b>:
 8011f80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f84:	460e      	mov	r6, r1
 8011f86:	2101      	movs	r1, #1
 8011f88:	ec59 8b10 	vmov	r8, r9, d0
 8011f8c:	4615      	mov	r5, r2
 8011f8e:	f7ff fcb5 	bl	80118fc <_Balloc>
 8011f92:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011f96:	4607      	mov	r7, r0
 8011f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011f9c:	bb34      	cbnz	r4, 8011fec <__d2b+0x6c>
 8011f9e:	9301      	str	r3, [sp, #4]
 8011fa0:	f1b8 0300 	subs.w	r3, r8, #0
 8011fa4:	d027      	beq.n	8011ff6 <__d2b+0x76>
 8011fa6:	a802      	add	r0, sp, #8
 8011fa8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011fac:	f7ff fd89 	bl	8011ac2 <__lo0bits>
 8011fb0:	9900      	ldr	r1, [sp, #0]
 8011fb2:	b1f0      	cbz	r0, 8011ff2 <__d2b+0x72>
 8011fb4:	9a01      	ldr	r2, [sp, #4]
 8011fb6:	f1c0 0320 	rsb	r3, r0, #32
 8011fba:	fa02 f303 	lsl.w	r3, r2, r3
 8011fbe:	430b      	orrs	r3, r1
 8011fc0:	40c2      	lsrs	r2, r0
 8011fc2:	617b      	str	r3, [r7, #20]
 8011fc4:	9201      	str	r2, [sp, #4]
 8011fc6:	9b01      	ldr	r3, [sp, #4]
 8011fc8:	61bb      	str	r3, [r7, #24]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	bf14      	ite	ne
 8011fce:	2102      	movne	r1, #2
 8011fd0:	2101      	moveq	r1, #1
 8011fd2:	6139      	str	r1, [r7, #16]
 8011fd4:	b1c4      	cbz	r4, 8012008 <__d2b+0x88>
 8011fd6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011fda:	4404      	add	r4, r0
 8011fdc:	6034      	str	r4, [r6, #0]
 8011fde:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011fe2:	6028      	str	r0, [r5, #0]
 8011fe4:	4638      	mov	r0, r7
 8011fe6:	b003      	add	sp, #12
 8011fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ff0:	e7d5      	b.n	8011f9e <__d2b+0x1e>
 8011ff2:	6179      	str	r1, [r7, #20]
 8011ff4:	e7e7      	b.n	8011fc6 <__d2b+0x46>
 8011ff6:	a801      	add	r0, sp, #4
 8011ff8:	f7ff fd63 	bl	8011ac2 <__lo0bits>
 8011ffc:	9b01      	ldr	r3, [sp, #4]
 8011ffe:	617b      	str	r3, [r7, #20]
 8012000:	2101      	movs	r1, #1
 8012002:	6139      	str	r1, [r7, #16]
 8012004:	3020      	adds	r0, #32
 8012006:	e7e5      	b.n	8011fd4 <__d2b+0x54>
 8012008:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801200c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012010:	6030      	str	r0, [r6, #0]
 8012012:	6918      	ldr	r0, [r3, #16]
 8012014:	f7ff fd36 	bl	8011a84 <__hi0bits>
 8012018:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801201c:	e7e1      	b.n	8011fe2 <__d2b+0x62>

0801201e <__ratio>:
 801201e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012022:	4688      	mov	r8, r1
 8012024:	4669      	mov	r1, sp
 8012026:	4681      	mov	r9, r0
 8012028:	f7ff ff5c 	bl	8011ee4 <__b2d>
 801202c:	a901      	add	r1, sp, #4
 801202e:	4640      	mov	r0, r8
 8012030:	ec57 6b10 	vmov	r6, r7, d0
 8012034:	f7ff ff56 	bl	8011ee4 <__b2d>
 8012038:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801203c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012040:	eba3 0c02 	sub.w	ip, r3, r2
 8012044:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012048:	1a9b      	subs	r3, r3, r2
 801204a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801204e:	ec5b ab10 	vmov	sl, fp, d0
 8012052:	2b00      	cmp	r3, #0
 8012054:	bfce      	itee	gt
 8012056:	463a      	movgt	r2, r7
 8012058:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801205c:	465a      	movle	r2, fp
 801205e:	4659      	mov	r1, fp
 8012060:	463d      	mov	r5, r7
 8012062:	bfd4      	ite	le
 8012064:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8012068:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801206c:	4630      	mov	r0, r6
 801206e:	ee10 2a10 	vmov	r2, s0
 8012072:	460b      	mov	r3, r1
 8012074:	4629      	mov	r1, r5
 8012076:	f7ee fc19 	bl	80008ac <__aeabi_ddiv>
 801207a:	ec41 0b10 	vmov	d0, r0, r1
 801207e:	b003      	add	sp, #12
 8012080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012084 <__copybits>:
 8012084:	3901      	subs	r1, #1
 8012086:	b510      	push	{r4, lr}
 8012088:	1149      	asrs	r1, r1, #5
 801208a:	6914      	ldr	r4, [r2, #16]
 801208c:	3101      	adds	r1, #1
 801208e:	f102 0314 	add.w	r3, r2, #20
 8012092:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012096:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801209a:	42a3      	cmp	r3, r4
 801209c:	4602      	mov	r2, r0
 801209e:	d303      	bcc.n	80120a8 <__copybits+0x24>
 80120a0:	2300      	movs	r3, #0
 80120a2:	428a      	cmp	r2, r1
 80120a4:	d305      	bcc.n	80120b2 <__copybits+0x2e>
 80120a6:	bd10      	pop	{r4, pc}
 80120a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80120ac:	f840 2b04 	str.w	r2, [r0], #4
 80120b0:	e7f3      	b.n	801209a <__copybits+0x16>
 80120b2:	f842 3b04 	str.w	r3, [r2], #4
 80120b6:	e7f4      	b.n	80120a2 <__copybits+0x1e>

080120b8 <__any_on>:
 80120b8:	f100 0214 	add.w	r2, r0, #20
 80120bc:	6900      	ldr	r0, [r0, #16]
 80120be:	114b      	asrs	r3, r1, #5
 80120c0:	4298      	cmp	r0, r3
 80120c2:	b510      	push	{r4, lr}
 80120c4:	db11      	blt.n	80120ea <__any_on+0x32>
 80120c6:	dd0a      	ble.n	80120de <__any_on+0x26>
 80120c8:	f011 011f 	ands.w	r1, r1, #31
 80120cc:	d007      	beq.n	80120de <__any_on+0x26>
 80120ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80120d2:	fa24 f001 	lsr.w	r0, r4, r1
 80120d6:	fa00 f101 	lsl.w	r1, r0, r1
 80120da:	428c      	cmp	r4, r1
 80120dc:	d10b      	bne.n	80120f6 <__any_on+0x3e>
 80120de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80120e2:	4293      	cmp	r3, r2
 80120e4:	d803      	bhi.n	80120ee <__any_on+0x36>
 80120e6:	2000      	movs	r0, #0
 80120e8:	bd10      	pop	{r4, pc}
 80120ea:	4603      	mov	r3, r0
 80120ec:	e7f7      	b.n	80120de <__any_on+0x26>
 80120ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80120f2:	2900      	cmp	r1, #0
 80120f4:	d0f5      	beq.n	80120e2 <__any_on+0x2a>
 80120f6:	2001      	movs	r0, #1
 80120f8:	e7f6      	b.n	80120e8 <__any_on+0x30>

080120fa <_calloc_r>:
 80120fa:	b538      	push	{r3, r4, r5, lr}
 80120fc:	fb02 f401 	mul.w	r4, r2, r1
 8012100:	4621      	mov	r1, r4
 8012102:	f7fc fe1d 	bl	800ed40 <_malloc_r>
 8012106:	4605      	mov	r5, r0
 8012108:	b118      	cbz	r0, 8012112 <_calloc_r+0x18>
 801210a:	4622      	mov	r2, r4
 801210c:	2100      	movs	r1, #0
 801210e:	f7fc fdc0 	bl	800ec92 <memset>
 8012112:	4628      	mov	r0, r5
 8012114:	bd38      	pop	{r3, r4, r5, pc}

08012116 <_realloc_r>:
 8012116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012118:	4607      	mov	r7, r0
 801211a:	4614      	mov	r4, r2
 801211c:	460e      	mov	r6, r1
 801211e:	b921      	cbnz	r1, 801212a <_realloc_r+0x14>
 8012120:	4611      	mov	r1, r2
 8012122:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012126:	f7fc be0b 	b.w	800ed40 <_malloc_r>
 801212a:	b922      	cbnz	r2, 8012136 <_realloc_r+0x20>
 801212c:	f7fc fdba 	bl	800eca4 <_free_r>
 8012130:	4625      	mov	r5, r4
 8012132:	4628      	mov	r0, r5
 8012134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012136:	f000 fd7c 	bl	8012c32 <_malloc_usable_size_r>
 801213a:	42a0      	cmp	r0, r4
 801213c:	d20f      	bcs.n	801215e <_realloc_r+0x48>
 801213e:	4621      	mov	r1, r4
 8012140:	4638      	mov	r0, r7
 8012142:	f7fc fdfd 	bl	800ed40 <_malloc_r>
 8012146:	4605      	mov	r5, r0
 8012148:	2800      	cmp	r0, #0
 801214a:	d0f2      	beq.n	8012132 <_realloc_r+0x1c>
 801214c:	4631      	mov	r1, r6
 801214e:	4622      	mov	r2, r4
 8012150:	f7fc fd94 	bl	800ec7c <memcpy>
 8012154:	4631      	mov	r1, r6
 8012156:	4638      	mov	r0, r7
 8012158:	f7fc fda4 	bl	800eca4 <_free_r>
 801215c:	e7e9      	b.n	8012132 <_realloc_r+0x1c>
 801215e:	4635      	mov	r5, r6
 8012160:	e7e7      	b.n	8012132 <_realloc_r+0x1c>

08012162 <__ssputs_r>:
 8012162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012166:	688e      	ldr	r6, [r1, #8]
 8012168:	429e      	cmp	r6, r3
 801216a:	4682      	mov	sl, r0
 801216c:	460c      	mov	r4, r1
 801216e:	4690      	mov	r8, r2
 8012170:	4699      	mov	r9, r3
 8012172:	d837      	bhi.n	80121e4 <__ssputs_r+0x82>
 8012174:	898a      	ldrh	r2, [r1, #12]
 8012176:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801217a:	d031      	beq.n	80121e0 <__ssputs_r+0x7e>
 801217c:	6825      	ldr	r5, [r4, #0]
 801217e:	6909      	ldr	r1, [r1, #16]
 8012180:	1a6f      	subs	r7, r5, r1
 8012182:	6965      	ldr	r5, [r4, #20]
 8012184:	2302      	movs	r3, #2
 8012186:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801218a:	fb95 f5f3 	sdiv	r5, r5, r3
 801218e:	f109 0301 	add.w	r3, r9, #1
 8012192:	443b      	add	r3, r7
 8012194:	429d      	cmp	r5, r3
 8012196:	bf38      	it	cc
 8012198:	461d      	movcc	r5, r3
 801219a:	0553      	lsls	r3, r2, #21
 801219c:	d530      	bpl.n	8012200 <__ssputs_r+0x9e>
 801219e:	4629      	mov	r1, r5
 80121a0:	f7fc fdce 	bl	800ed40 <_malloc_r>
 80121a4:	4606      	mov	r6, r0
 80121a6:	b950      	cbnz	r0, 80121be <__ssputs_r+0x5c>
 80121a8:	230c      	movs	r3, #12
 80121aa:	f8ca 3000 	str.w	r3, [sl]
 80121ae:	89a3      	ldrh	r3, [r4, #12]
 80121b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121b4:	81a3      	strh	r3, [r4, #12]
 80121b6:	f04f 30ff 	mov.w	r0, #4294967295
 80121ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121be:	463a      	mov	r2, r7
 80121c0:	6921      	ldr	r1, [r4, #16]
 80121c2:	f7fc fd5b 	bl	800ec7c <memcpy>
 80121c6:	89a3      	ldrh	r3, [r4, #12]
 80121c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80121cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121d0:	81a3      	strh	r3, [r4, #12]
 80121d2:	6126      	str	r6, [r4, #16]
 80121d4:	6165      	str	r5, [r4, #20]
 80121d6:	443e      	add	r6, r7
 80121d8:	1bed      	subs	r5, r5, r7
 80121da:	6026      	str	r6, [r4, #0]
 80121dc:	60a5      	str	r5, [r4, #8]
 80121de:	464e      	mov	r6, r9
 80121e0:	454e      	cmp	r6, r9
 80121e2:	d900      	bls.n	80121e6 <__ssputs_r+0x84>
 80121e4:	464e      	mov	r6, r9
 80121e6:	4632      	mov	r2, r6
 80121e8:	4641      	mov	r1, r8
 80121ea:	6820      	ldr	r0, [r4, #0]
 80121ec:	f000 fd08 	bl	8012c00 <memmove>
 80121f0:	68a3      	ldr	r3, [r4, #8]
 80121f2:	1b9b      	subs	r3, r3, r6
 80121f4:	60a3      	str	r3, [r4, #8]
 80121f6:	6823      	ldr	r3, [r4, #0]
 80121f8:	441e      	add	r6, r3
 80121fa:	6026      	str	r6, [r4, #0]
 80121fc:	2000      	movs	r0, #0
 80121fe:	e7dc      	b.n	80121ba <__ssputs_r+0x58>
 8012200:	462a      	mov	r2, r5
 8012202:	f7ff ff88 	bl	8012116 <_realloc_r>
 8012206:	4606      	mov	r6, r0
 8012208:	2800      	cmp	r0, #0
 801220a:	d1e2      	bne.n	80121d2 <__ssputs_r+0x70>
 801220c:	6921      	ldr	r1, [r4, #16]
 801220e:	4650      	mov	r0, sl
 8012210:	f7fc fd48 	bl	800eca4 <_free_r>
 8012214:	e7c8      	b.n	80121a8 <__ssputs_r+0x46>
	...

08012218 <_svfiprintf_r>:
 8012218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801221c:	461d      	mov	r5, r3
 801221e:	898b      	ldrh	r3, [r1, #12]
 8012220:	061f      	lsls	r7, r3, #24
 8012222:	b09d      	sub	sp, #116	; 0x74
 8012224:	4680      	mov	r8, r0
 8012226:	460c      	mov	r4, r1
 8012228:	4616      	mov	r6, r2
 801222a:	d50f      	bpl.n	801224c <_svfiprintf_r+0x34>
 801222c:	690b      	ldr	r3, [r1, #16]
 801222e:	b96b      	cbnz	r3, 801224c <_svfiprintf_r+0x34>
 8012230:	2140      	movs	r1, #64	; 0x40
 8012232:	f7fc fd85 	bl	800ed40 <_malloc_r>
 8012236:	6020      	str	r0, [r4, #0]
 8012238:	6120      	str	r0, [r4, #16]
 801223a:	b928      	cbnz	r0, 8012248 <_svfiprintf_r+0x30>
 801223c:	230c      	movs	r3, #12
 801223e:	f8c8 3000 	str.w	r3, [r8]
 8012242:	f04f 30ff 	mov.w	r0, #4294967295
 8012246:	e0c8      	b.n	80123da <_svfiprintf_r+0x1c2>
 8012248:	2340      	movs	r3, #64	; 0x40
 801224a:	6163      	str	r3, [r4, #20]
 801224c:	2300      	movs	r3, #0
 801224e:	9309      	str	r3, [sp, #36]	; 0x24
 8012250:	2320      	movs	r3, #32
 8012252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012256:	2330      	movs	r3, #48	; 0x30
 8012258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801225c:	9503      	str	r5, [sp, #12]
 801225e:	f04f 0b01 	mov.w	fp, #1
 8012262:	4637      	mov	r7, r6
 8012264:	463d      	mov	r5, r7
 8012266:	f815 3b01 	ldrb.w	r3, [r5], #1
 801226a:	b10b      	cbz	r3, 8012270 <_svfiprintf_r+0x58>
 801226c:	2b25      	cmp	r3, #37	; 0x25
 801226e:	d13e      	bne.n	80122ee <_svfiprintf_r+0xd6>
 8012270:	ebb7 0a06 	subs.w	sl, r7, r6
 8012274:	d00b      	beq.n	801228e <_svfiprintf_r+0x76>
 8012276:	4653      	mov	r3, sl
 8012278:	4632      	mov	r2, r6
 801227a:	4621      	mov	r1, r4
 801227c:	4640      	mov	r0, r8
 801227e:	f7ff ff70 	bl	8012162 <__ssputs_r>
 8012282:	3001      	adds	r0, #1
 8012284:	f000 80a4 	beq.w	80123d0 <_svfiprintf_r+0x1b8>
 8012288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801228a:	4453      	add	r3, sl
 801228c:	9309      	str	r3, [sp, #36]	; 0x24
 801228e:	783b      	ldrb	r3, [r7, #0]
 8012290:	2b00      	cmp	r3, #0
 8012292:	f000 809d 	beq.w	80123d0 <_svfiprintf_r+0x1b8>
 8012296:	2300      	movs	r3, #0
 8012298:	f04f 32ff 	mov.w	r2, #4294967295
 801229c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122a0:	9304      	str	r3, [sp, #16]
 80122a2:	9307      	str	r3, [sp, #28]
 80122a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122a8:	931a      	str	r3, [sp, #104]	; 0x68
 80122aa:	462f      	mov	r7, r5
 80122ac:	2205      	movs	r2, #5
 80122ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80122b2:	4850      	ldr	r0, [pc, #320]	; (80123f4 <_svfiprintf_r+0x1dc>)
 80122b4:	f7ed ffc4 	bl	8000240 <memchr>
 80122b8:	9b04      	ldr	r3, [sp, #16]
 80122ba:	b9d0      	cbnz	r0, 80122f2 <_svfiprintf_r+0xda>
 80122bc:	06d9      	lsls	r1, r3, #27
 80122be:	bf44      	itt	mi
 80122c0:	2220      	movmi	r2, #32
 80122c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80122c6:	071a      	lsls	r2, r3, #28
 80122c8:	bf44      	itt	mi
 80122ca:	222b      	movmi	r2, #43	; 0x2b
 80122cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80122d0:	782a      	ldrb	r2, [r5, #0]
 80122d2:	2a2a      	cmp	r2, #42	; 0x2a
 80122d4:	d015      	beq.n	8012302 <_svfiprintf_r+0xea>
 80122d6:	9a07      	ldr	r2, [sp, #28]
 80122d8:	462f      	mov	r7, r5
 80122da:	2000      	movs	r0, #0
 80122dc:	250a      	movs	r5, #10
 80122de:	4639      	mov	r1, r7
 80122e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122e4:	3b30      	subs	r3, #48	; 0x30
 80122e6:	2b09      	cmp	r3, #9
 80122e8:	d94d      	bls.n	8012386 <_svfiprintf_r+0x16e>
 80122ea:	b1b8      	cbz	r0, 801231c <_svfiprintf_r+0x104>
 80122ec:	e00f      	b.n	801230e <_svfiprintf_r+0xf6>
 80122ee:	462f      	mov	r7, r5
 80122f0:	e7b8      	b.n	8012264 <_svfiprintf_r+0x4c>
 80122f2:	4a40      	ldr	r2, [pc, #256]	; (80123f4 <_svfiprintf_r+0x1dc>)
 80122f4:	1a80      	subs	r0, r0, r2
 80122f6:	fa0b f000 	lsl.w	r0, fp, r0
 80122fa:	4318      	orrs	r0, r3
 80122fc:	9004      	str	r0, [sp, #16]
 80122fe:	463d      	mov	r5, r7
 8012300:	e7d3      	b.n	80122aa <_svfiprintf_r+0x92>
 8012302:	9a03      	ldr	r2, [sp, #12]
 8012304:	1d11      	adds	r1, r2, #4
 8012306:	6812      	ldr	r2, [r2, #0]
 8012308:	9103      	str	r1, [sp, #12]
 801230a:	2a00      	cmp	r2, #0
 801230c:	db01      	blt.n	8012312 <_svfiprintf_r+0xfa>
 801230e:	9207      	str	r2, [sp, #28]
 8012310:	e004      	b.n	801231c <_svfiprintf_r+0x104>
 8012312:	4252      	negs	r2, r2
 8012314:	f043 0302 	orr.w	r3, r3, #2
 8012318:	9207      	str	r2, [sp, #28]
 801231a:	9304      	str	r3, [sp, #16]
 801231c:	783b      	ldrb	r3, [r7, #0]
 801231e:	2b2e      	cmp	r3, #46	; 0x2e
 8012320:	d10c      	bne.n	801233c <_svfiprintf_r+0x124>
 8012322:	787b      	ldrb	r3, [r7, #1]
 8012324:	2b2a      	cmp	r3, #42	; 0x2a
 8012326:	d133      	bne.n	8012390 <_svfiprintf_r+0x178>
 8012328:	9b03      	ldr	r3, [sp, #12]
 801232a:	1d1a      	adds	r2, r3, #4
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	9203      	str	r2, [sp, #12]
 8012330:	2b00      	cmp	r3, #0
 8012332:	bfb8      	it	lt
 8012334:	f04f 33ff 	movlt.w	r3, #4294967295
 8012338:	3702      	adds	r7, #2
 801233a:	9305      	str	r3, [sp, #20]
 801233c:	4d2e      	ldr	r5, [pc, #184]	; (80123f8 <_svfiprintf_r+0x1e0>)
 801233e:	7839      	ldrb	r1, [r7, #0]
 8012340:	2203      	movs	r2, #3
 8012342:	4628      	mov	r0, r5
 8012344:	f7ed ff7c 	bl	8000240 <memchr>
 8012348:	b138      	cbz	r0, 801235a <_svfiprintf_r+0x142>
 801234a:	2340      	movs	r3, #64	; 0x40
 801234c:	1b40      	subs	r0, r0, r5
 801234e:	fa03 f000 	lsl.w	r0, r3, r0
 8012352:	9b04      	ldr	r3, [sp, #16]
 8012354:	4303      	orrs	r3, r0
 8012356:	3701      	adds	r7, #1
 8012358:	9304      	str	r3, [sp, #16]
 801235a:	7839      	ldrb	r1, [r7, #0]
 801235c:	4827      	ldr	r0, [pc, #156]	; (80123fc <_svfiprintf_r+0x1e4>)
 801235e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012362:	2206      	movs	r2, #6
 8012364:	1c7e      	adds	r6, r7, #1
 8012366:	f7ed ff6b 	bl	8000240 <memchr>
 801236a:	2800      	cmp	r0, #0
 801236c:	d038      	beq.n	80123e0 <_svfiprintf_r+0x1c8>
 801236e:	4b24      	ldr	r3, [pc, #144]	; (8012400 <_svfiprintf_r+0x1e8>)
 8012370:	bb13      	cbnz	r3, 80123b8 <_svfiprintf_r+0x1a0>
 8012372:	9b03      	ldr	r3, [sp, #12]
 8012374:	3307      	adds	r3, #7
 8012376:	f023 0307 	bic.w	r3, r3, #7
 801237a:	3308      	adds	r3, #8
 801237c:	9303      	str	r3, [sp, #12]
 801237e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012380:	444b      	add	r3, r9
 8012382:	9309      	str	r3, [sp, #36]	; 0x24
 8012384:	e76d      	b.n	8012262 <_svfiprintf_r+0x4a>
 8012386:	fb05 3202 	mla	r2, r5, r2, r3
 801238a:	2001      	movs	r0, #1
 801238c:	460f      	mov	r7, r1
 801238e:	e7a6      	b.n	80122de <_svfiprintf_r+0xc6>
 8012390:	2300      	movs	r3, #0
 8012392:	3701      	adds	r7, #1
 8012394:	9305      	str	r3, [sp, #20]
 8012396:	4619      	mov	r1, r3
 8012398:	250a      	movs	r5, #10
 801239a:	4638      	mov	r0, r7
 801239c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123a0:	3a30      	subs	r2, #48	; 0x30
 80123a2:	2a09      	cmp	r2, #9
 80123a4:	d903      	bls.n	80123ae <_svfiprintf_r+0x196>
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d0c8      	beq.n	801233c <_svfiprintf_r+0x124>
 80123aa:	9105      	str	r1, [sp, #20]
 80123ac:	e7c6      	b.n	801233c <_svfiprintf_r+0x124>
 80123ae:	fb05 2101 	mla	r1, r5, r1, r2
 80123b2:	2301      	movs	r3, #1
 80123b4:	4607      	mov	r7, r0
 80123b6:	e7f0      	b.n	801239a <_svfiprintf_r+0x182>
 80123b8:	ab03      	add	r3, sp, #12
 80123ba:	9300      	str	r3, [sp, #0]
 80123bc:	4622      	mov	r2, r4
 80123be:	4b11      	ldr	r3, [pc, #68]	; (8012404 <_svfiprintf_r+0x1ec>)
 80123c0:	a904      	add	r1, sp, #16
 80123c2:	4640      	mov	r0, r8
 80123c4:	f7fc fdaa 	bl	800ef1c <_printf_float>
 80123c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80123cc:	4681      	mov	r9, r0
 80123ce:	d1d6      	bne.n	801237e <_svfiprintf_r+0x166>
 80123d0:	89a3      	ldrh	r3, [r4, #12]
 80123d2:	065b      	lsls	r3, r3, #25
 80123d4:	f53f af35 	bmi.w	8012242 <_svfiprintf_r+0x2a>
 80123d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123da:	b01d      	add	sp, #116	; 0x74
 80123dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e0:	ab03      	add	r3, sp, #12
 80123e2:	9300      	str	r3, [sp, #0]
 80123e4:	4622      	mov	r2, r4
 80123e6:	4b07      	ldr	r3, [pc, #28]	; (8012404 <_svfiprintf_r+0x1ec>)
 80123e8:	a904      	add	r1, sp, #16
 80123ea:	4640      	mov	r0, r8
 80123ec:	f7fd f84c 	bl	800f488 <_printf_i>
 80123f0:	e7ea      	b.n	80123c8 <_svfiprintf_r+0x1b0>
 80123f2:	bf00      	nop
 80123f4:	08015414 	.word	0x08015414
 80123f8:	0801541a 	.word	0x0801541a
 80123fc:	0801541e 	.word	0x0801541e
 8012400:	0800ef1d 	.word	0x0800ef1d
 8012404:	08012163 	.word	0x08012163

08012408 <_sungetc_r>:
 8012408:	b538      	push	{r3, r4, r5, lr}
 801240a:	1c4b      	adds	r3, r1, #1
 801240c:	4614      	mov	r4, r2
 801240e:	d103      	bne.n	8012418 <_sungetc_r+0x10>
 8012410:	f04f 35ff 	mov.w	r5, #4294967295
 8012414:	4628      	mov	r0, r5
 8012416:	bd38      	pop	{r3, r4, r5, pc}
 8012418:	8993      	ldrh	r3, [r2, #12]
 801241a:	f023 0320 	bic.w	r3, r3, #32
 801241e:	8193      	strh	r3, [r2, #12]
 8012420:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012422:	6852      	ldr	r2, [r2, #4]
 8012424:	b2cd      	uxtb	r5, r1
 8012426:	b18b      	cbz	r3, 801244c <_sungetc_r+0x44>
 8012428:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801242a:	4293      	cmp	r3, r2
 801242c:	dd08      	ble.n	8012440 <_sungetc_r+0x38>
 801242e:	6823      	ldr	r3, [r4, #0]
 8012430:	1e5a      	subs	r2, r3, #1
 8012432:	6022      	str	r2, [r4, #0]
 8012434:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012438:	6863      	ldr	r3, [r4, #4]
 801243a:	3301      	adds	r3, #1
 801243c:	6063      	str	r3, [r4, #4]
 801243e:	e7e9      	b.n	8012414 <_sungetc_r+0xc>
 8012440:	4621      	mov	r1, r4
 8012442:	f000 fba3 	bl	8012b8c <__submore>
 8012446:	2800      	cmp	r0, #0
 8012448:	d0f1      	beq.n	801242e <_sungetc_r+0x26>
 801244a:	e7e1      	b.n	8012410 <_sungetc_r+0x8>
 801244c:	6921      	ldr	r1, [r4, #16]
 801244e:	6823      	ldr	r3, [r4, #0]
 8012450:	b151      	cbz	r1, 8012468 <_sungetc_r+0x60>
 8012452:	4299      	cmp	r1, r3
 8012454:	d208      	bcs.n	8012468 <_sungetc_r+0x60>
 8012456:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801245a:	42a9      	cmp	r1, r5
 801245c:	d104      	bne.n	8012468 <_sungetc_r+0x60>
 801245e:	3b01      	subs	r3, #1
 8012460:	3201      	adds	r2, #1
 8012462:	6023      	str	r3, [r4, #0]
 8012464:	6062      	str	r2, [r4, #4]
 8012466:	e7d5      	b.n	8012414 <_sungetc_r+0xc>
 8012468:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801246c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012470:	6363      	str	r3, [r4, #52]	; 0x34
 8012472:	2303      	movs	r3, #3
 8012474:	63a3      	str	r3, [r4, #56]	; 0x38
 8012476:	4623      	mov	r3, r4
 8012478:	f803 5f46 	strb.w	r5, [r3, #70]!
 801247c:	6023      	str	r3, [r4, #0]
 801247e:	2301      	movs	r3, #1
 8012480:	e7dc      	b.n	801243c <_sungetc_r+0x34>

08012482 <__ssrefill_r>:
 8012482:	b510      	push	{r4, lr}
 8012484:	460c      	mov	r4, r1
 8012486:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012488:	b169      	cbz	r1, 80124a6 <__ssrefill_r+0x24>
 801248a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801248e:	4299      	cmp	r1, r3
 8012490:	d001      	beq.n	8012496 <__ssrefill_r+0x14>
 8012492:	f7fc fc07 	bl	800eca4 <_free_r>
 8012496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012498:	6063      	str	r3, [r4, #4]
 801249a:	2000      	movs	r0, #0
 801249c:	6360      	str	r0, [r4, #52]	; 0x34
 801249e:	b113      	cbz	r3, 80124a6 <__ssrefill_r+0x24>
 80124a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80124a2:	6023      	str	r3, [r4, #0]
 80124a4:	bd10      	pop	{r4, pc}
 80124a6:	6923      	ldr	r3, [r4, #16]
 80124a8:	6023      	str	r3, [r4, #0]
 80124aa:	2300      	movs	r3, #0
 80124ac:	6063      	str	r3, [r4, #4]
 80124ae:	89a3      	ldrh	r3, [r4, #12]
 80124b0:	f043 0320 	orr.w	r3, r3, #32
 80124b4:	81a3      	strh	r3, [r4, #12]
 80124b6:	f04f 30ff 	mov.w	r0, #4294967295
 80124ba:	e7f3      	b.n	80124a4 <__ssrefill_r+0x22>

080124bc <__ssvfiscanf_r>:
 80124bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80124c4:	460c      	mov	r4, r1
 80124c6:	2100      	movs	r1, #0
 80124c8:	9144      	str	r1, [sp, #272]	; 0x110
 80124ca:	9145      	str	r1, [sp, #276]	; 0x114
 80124cc:	499f      	ldr	r1, [pc, #636]	; (801274c <__ssvfiscanf_r+0x290>)
 80124ce:	91a0      	str	r1, [sp, #640]	; 0x280
 80124d0:	f10d 0804 	add.w	r8, sp, #4
 80124d4:	499e      	ldr	r1, [pc, #632]	; (8012750 <__ssvfiscanf_r+0x294>)
 80124d6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8012754 <__ssvfiscanf_r+0x298>
 80124da:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80124de:	4606      	mov	r6, r0
 80124e0:	4692      	mov	sl, r2
 80124e2:	91a1      	str	r1, [sp, #644]	; 0x284
 80124e4:	9300      	str	r3, [sp, #0]
 80124e6:	270a      	movs	r7, #10
 80124e8:	f89a 3000 	ldrb.w	r3, [sl]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	f000 812a 	beq.w	8012746 <__ssvfiscanf_r+0x28a>
 80124f2:	4655      	mov	r5, sl
 80124f4:	f7fc fb92 	bl	800ec1c <__locale_ctype_ptr>
 80124f8:	f815 bb01 	ldrb.w	fp, [r5], #1
 80124fc:	4458      	add	r0, fp
 80124fe:	7843      	ldrb	r3, [r0, #1]
 8012500:	f013 0308 	ands.w	r3, r3, #8
 8012504:	d01c      	beq.n	8012540 <__ssvfiscanf_r+0x84>
 8012506:	6863      	ldr	r3, [r4, #4]
 8012508:	2b00      	cmp	r3, #0
 801250a:	dd12      	ble.n	8012532 <__ssvfiscanf_r+0x76>
 801250c:	f7fc fb86 	bl	800ec1c <__locale_ctype_ptr>
 8012510:	6823      	ldr	r3, [r4, #0]
 8012512:	781a      	ldrb	r2, [r3, #0]
 8012514:	4410      	add	r0, r2
 8012516:	7842      	ldrb	r2, [r0, #1]
 8012518:	0712      	lsls	r2, r2, #28
 801251a:	d401      	bmi.n	8012520 <__ssvfiscanf_r+0x64>
 801251c:	46aa      	mov	sl, r5
 801251e:	e7e3      	b.n	80124e8 <__ssvfiscanf_r+0x2c>
 8012520:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012522:	3201      	adds	r2, #1
 8012524:	9245      	str	r2, [sp, #276]	; 0x114
 8012526:	6862      	ldr	r2, [r4, #4]
 8012528:	3301      	adds	r3, #1
 801252a:	3a01      	subs	r2, #1
 801252c:	6062      	str	r2, [r4, #4]
 801252e:	6023      	str	r3, [r4, #0]
 8012530:	e7e9      	b.n	8012506 <__ssvfiscanf_r+0x4a>
 8012532:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012534:	4621      	mov	r1, r4
 8012536:	4630      	mov	r0, r6
 8012538:	4798      	blx	r3
 801253a:	2800      	cmp	r0, #0
 801253c:	d0e6      	beq.n	801250c <__ssvfiscanf_r+0x50>
 801253e:	e7ed      	b.n	801251c <__ssvfiscanf_r+0x60>
 8012540:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8012544:	f040 8082 	bne.w	801264c <__ssvfiscanf_r+0x190>
 8012548:	9343      	str	r3, [sp, #268]	; 0x10c
 801254a:	9341      	str	r3, [sp, #260]	; 0x104
 801254c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8012550:	2b2a      	cmp	r3, #42	; 0x2a
 8012552:	d103      	bne.n	801255c <__ssvfiscanf_r+0xa0>
 8012554:	2310      	movs	r3, #16
 8012556:	9341      	str	r3, [sp, #260]	; 0x104
 8012558:	f10a 0502 	add.w	r5, sl, #2
 801255c:	46aa      	mov	sl, r5
 801255e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8012562:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8012566:	2a09      	cmp	r2, #9
 8012568:	d922      	bls.n	80125b0 <__ssvfiscanf_r+0xf4>
 801256a:	2203      	movs	r2, #3
 801256c:	4879      	ldr	r0, [pc, #484]	; (8012754 <__ssvfiscanf_r+0x298>)
 801256e:	f7ed fe67 	bl	8000240 <memchr>
 8012572:	b138      	cbz	r0, 8012584 <__ssvfiscanf_r+0xc8>
 8012574:	eba0 0309 	sub.w	r3, r0, r9
 8012578:	2001      	movs	r0, #1
 801257a:	4098      	lsls	r0, r3
 801257c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801257e:	4318      	orrs	r0, r3
 8012580:	9041      	str	r0, [sp, #260]	; 0x104
 8012582:	46aa      	mov	sl, r5
 8012584:	f89a 3000 	ldrb.w	r3, [sl]
 8012588:	2b67      	cmp	r3, #103	; 0x67
 801258a:	f10a 0501 	add.w	r5, sl, #1
 801258e:	d82b      	bhi.n	80125e8 <__ssvfiscanf_r+0x12c>
 8012590:	2b65      	cmp	r3, #101	; 0x65
 8012592:	f080 809f 	bcs.w	80126d4 <__ssvfiscanf_r+0x218>
 8012596:	2b47      	cmp	r3, #71	; 0x47
 8012598:	d810      	bhi.n	80125bc <__ssvfiscanf_r+0x100>
 801259a:	2b45      	cmp	r3, #69	; 0x45
 801259c:	f080 809a 	bcs.w	80126d4 <__ssvfiscanf_r+0x218>
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d06c      	beq.n	801267e <__ssvfiscanf_r+0x1c2>
 80125a4:	2b25      	cmp	r3, #37	; 0x25
 80125a6:	d051      	beq.n	801264c <__ssvfiscanf_r+0x190>
 80125a8:	2303      	movs	r3, #3
 80125aa:	9347      	str	r3, [sp, #284]	; 0x11c
 80125ac:	9742      	str	r7, [sp, #264]	; 0x108
 80125ae:	e027      	b.n	8012600 <__ssvfiscanf_r+0x144>
 80125b0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80125b2:	fb07 1303 	mla	r3, r7, r3, r1
 80125b6:	3b30      	subs	r3, #48	; 0x30
 80125b8:	9343      	str	r3, [sp, #268]	; 0x10c
 80125ba:	e7cf      	b.n	801255c <__ssvfiscanf_r+0xa0>
 80125bc:	2b5b      	cmp	r3, #91	; 0x5b
 80125be:	d06a      	beq.n	8012696 <__ssvfiscanf_r+0x1da>
 80125c0:	d80c      	bhi.n	80125dc <__ssvfiscanf_r+0x120>
 80125c2:	2b58      	cmp	r3, #88	; 0x58
 80125c4:	d1f0      	bne.n	80125a8 <__ssvfiscanf_r+0xec>
 80125c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80125c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80125cc:	9241      	str	r2, [sp, #260]	; 0x104
 80125ce:	2210      	movs	r2, #16
 80125d0:	9242      	str	r2, [sp, #264]	; 0x108
 80125d2:	2b6e      	cmp	r3, #110	; 0x6e
 80125d4:	bf8c      	ite	hi
 80125d6:	2304      	movhi	r3, #4
 80125d8:	2303      	movls	r3, #3
 80125da:	e010      	b.n	80125fe <__ssvfiscanf_r+0x142>
 80125dc:	2b63      	cmp	r3, #99	; 0x63
 80125de:	d065      	beq.n	80126ac <__ssvfiscanf_r+0x1f0>
 80125e0:	2b64      	cmp	r3, #100	; 0x64
 80125e2:	d1e1      	bne.n	80125a8 <__ssvfiscanf_r+0xec>
 80125e4:	9742      	str	r7, [sp, #264]	; 0x108
 80125e6:	e7f4      	b.n	80125d2 <__ssvfiscanf_r+0x116>
 80125e8:	2b70      	cmp	r3, #112	; 0x70
 80125ea:	d04b      	beq.n	8012684 <__ssvfiscanf_r+0x1c8>
 80125ec:	d826      	bhi.n	801263c <__ssvfiscanf_r+0x180>
 80125ee:	2b6e      	cmp	r3, #110	; 0x6e
 80125f0:	d062      	beq.n	80126b8 <__ssvfiscanf_r+0x1fc>
 80125f2:	d84c      	bhi.n	801268e <__ssvfiscanf_r+0x1d2>
 80125f4:	2b69      	cmp	r3, #105	; 0x69
 80125f6:	d1d7      	bne.n	80125a8 <__ssvfiscanf_r+0xec>
 80125f8:	2300      	movs	r3, #0
 80125fa:	9342      	str	r3, [sp, #264]	; 0x108
 80125fc:	2303      	movs	r3, #3
 80125fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8012600:	6863      	ldr	r3, [r4, #4]
 8012602:	2b00      	cmp	r3, #0
 8012604:	dd68      	ble.n	80126d8 <__ssvfiscanf_r+0x21c>
 8012606:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012608:	0659      	lsls	r1, r3, #25
 801260a:	d407      	bmi.n	801261c <__ssvfiscanf_r+0x160>
 801260c:	f7fc fb06 	bl	800ec1c <__locale_ctype_ptr>
 8012610:	6823      	ldr	r3, [r4, #0]
 8012612:	781a      	ldrb	r2, [r3, #0]
 8012614:	4410      	add	r0, r2
 8012616:	7842      	ldrb	r2, [r0, #1]
 8012618:	0712      	lsls	r2, r2, #28
 801261a:	d464      	bmi.n	80126e6 <__ssvfiscanf_r+0x22a>
 801261c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801261e:	2b02      	cmp	r3, #2
 8012620:	dc73      	bgt.n	801270a <__ssvfiscanf_r+0x24e>
 8012622:	466b      	mov	r3, sp
 8012624:	4622      	mov	r2, r4
 8012626:	a941      	add	r1, sp, #260	; 0x104
 8012628:	4630      	mov	r0, r6
 801262a:	f000 f897 	bl	801275c <_scanf_chars>
 801262e:	2801      	cmp	r0, #1
 8012630:	f000 8089 	beq.w	8012746 <__ssvfiscanf_r+0x28a>
 8012634:	2802      	cmp	r0, #2
 8012636:	f47f af71 	bne.w	801251c <__ssvfiscanf_r+0x60>
 801263a:	e01d      	b.n	8012678 <__ssvfiscanf_r+0x1bc>
 801263c:	2b75      	cmp	r3, #117	; 0x75
 801263e:	d0d1      	beq.n	80125e4 <__ssvfiscanf_r+0x128>
 8012640:	2b78      	cmp	r3, #120	; 0x78
 8012642:	d0c0      	beq.n	80125c6 <__ssvfiscanf_r+0x10a>
 8012644:	2b73      	cmp	r3, #115	; 0x73
 8012646:	d1af      	bne.n	80125a8 <__ssvfiscanf_r+0xec>
 8012648:	2302      	movs	r3, #2
 801264a:	e7d8      	b.n	80125fe <__ssvfiscanf_r+0x142>
 801264c:	6863      	ldr	r3, [r4, #4]
 801264e:	2b00      	cmp	r3, #0
 8012650:	dd0c      	ble.n	801266c <__ssvfiscanf_r+0x1b0>
 8012652:	6823      	ldr	r3, [r4, #0]
 8012654:	781a      	ldrb	r2, [r3, #0]
 8012656:	455a      	cmp	r2, fp
 8012658:	d175      	bne.n	8012746 <__ssvfiscanf_r+0x28a>
 801265a:	3301      	adds	r3, #1
 801265c:	6862      	ldr	r2, [r4, #4]
 801265e:	6023      	str	r3, [r4, #0]
 8012660:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012662:	3a01      	subs	r2, #1
 8012664:	3301      	adds	r3, #1
 8012666:	6062      	str	r2, [r4, #4]
 8012668:	9345      	str	r3, [sp, #276]	; 0x114
 801266a:	e757      	b.n	801251c <__ssvfiscanf_r+0x60>
 801266c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801266e:	4621      	mov	r1, r4
 8012670:	4630      	mov	r0, r6
 8012672:	4798      	blx	r3
 8012674:	2800      	cmp	r0, #0
 8012676:	d0ec      	beq.n	8012652 <__ssvfiscanf_r+0x196>
 8012678:	9844      	ldr	r0, [sp, #272]	; 0x110
 801267a:	2800      	cmp	r0, #0
 801267c:	d159      	bne.n	8012732 <__ssvfiscanf_r+0x276>
 801267e:	f04f 30ff 	mov.w	r0, #4294967295
 8012682:	e05c      	b.n	801273e <__ssvfiscanf_r+0x282>
 8012684:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012686:	f042 0220 	orr.w	r2, r2, #32
 801268a:	9241      	str	r2, [sp, #260]	; 0x104
 801268c:	e79b      	b.n	80125c6 <__ssvfiscanf_r+0x10a>
 801268e:	2308      	movs	r3, #8
 8012690:	9342      	str	r3, [sp, #264]	; 0x108
 8012692:	2304      	movs	r3, #4
 8012694:	e7b3      	b.n	80125fe <__ssvfiscanf_r+0x142>
 8012696:	4629      	mov	r1, r5
 8012698:	4640      	mov	r0, r8
 801269a:	f000 f9b7 	bl	8012a0c <__sccl>
 801269e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80126a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126a4:	9341      	str	r3, [sp, #260]	; 0x104
 80126a6:	4605      	mov	r5, r0
 80126a8:	2301      	movs	r3, #1
 80126aa:	e7a8      	b.n	80125fe <__ssvfiscanf_r+0x142>
 80126ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80126ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126b2:	9341      	str	r3, [sp, #260]	; 0x104
 80126b4:	2300      	movs	r3, #0
 80126b6:	e7a2      	b.n	80125fe <__ssvfiscanf_r+0x142>
 80126b8:	9841      	ldr	r0, [sp, #260]	; 0x104
 80126ba:	06c3      	lsls	r3, r0, #27
 80126bc:	f53f af2e 	bmi.w	801251c <__ssvfiscanf_r+0x60>
 80126c0:	9b00      	ldr	r3, [sp, #0]
 80126c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80126c4:	1d19      	adds	r1, r3, #4
 80126c6:	9100      	str	r1, [sp, #0]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	07c0      	lsls	r0, r0, #31
 80126cc:	bf4c      	ite	mi
 80126ce:	801a      	strhmi	r2, [r3, #0]
 80126d0:	601a      	strpl	r2, [r3, #0]
 80126d2:	e723      	b.n	801251c <__ssvfiscanf_r+0x60>
 80126d4:	2305      	movs	r3, #5
 80126d6:	e792      	b.n	80125fe <__ssvfiscanf_r+0x142>
 80126d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80126da:	4621      	mov	r1, r4
 80126dc:	4630      	mov	r0, r6
 80126de:	4798      	blx	r3
 80126e0:	2800      	cmp	r0, #0
 80126e2:	d090      	beq.n	8012606 <__ssvfiscanf_r+0x14a>
 80126e4:	e7c8      	b.n	8012678 <__ssvfiscanf_r+0x1bc>
 80126e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80126e8:	3201      	adds	r2, #1
 80126ea:	9245      	str	r2, [sp, #276]	; 0x114
 80126ec:	6862      	ldr	r2, [r4, #4]
 80126ee:	3a01      	subs	r2, #1
 80126f0:	2a00      	cmp	r2, #0
 80126f2:	6062      	str	r2, [r4, #4]
 80126f4:	dd02      	ble.n	80126fc <__ssvfiscanf_r+0x240>
 80126f6:	3301      	adds	r3, #1
 80126f8:	6023      	str	r3, [r4, #0]
 80126fa:	e787      	b.n	801260c <__ssvfiscanf_r+0x150>
 80126fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80126fe:	4621      	mov	r1, r4
 8012700:	4630      	mov	r0, r6
 8012702:	4798      	blx	r3
 8012704:	2800      	cmp	r0, #0
 8012706:	d081      	beq.n	801260c <__ssvfiscanf_r+0x150>
 8012708:	e7b6      	b.n	8012678 <__ssvfiscanf_r+0x1bc>
 801270a:	2b04      	cmp	r3, #4
 801270c:	dc06      	bgt.n	801271c <__ssvfiscanf_r+0x260>
 801270e:	466b      	mov	r3, sp
 8012710:	4622      	mov	r2, r4
 8012712:	a941      	add	r1, sp, #260	; 0x104
 8012714:	4630      	mov	r0, r6
 8012716:	f000 f885 	bl	8012824 <_scanf_i>
 801271a:	e788      	b.n	801262e <__ssvfiscanf_r+0x172>
 801271c:	4b0e      	ldr	r3, [pc, #56]	; (8012758 <__ssvfiscanf_r+0x29c>)
 801271e:	2b00      	cmp	r3, #0
 8012720:	f43f aefc 	beq.w	801251c <__ssvfiscanf_r+0x60>
 8012724:	466b      	mov	r3, sp
 8012726:	4622      	mov	r2, r4
 8012728:	a941      	add	r1, sp, #260	; 0x104
 801272a:	4630      	mov	r0, r6
 801272c:	f3af 8000 	nop.w
 8012730:	e77d      	b.n	801262e <__ssvfiscanf_r+0x172>
 8012732:	89a3      	ldrh	r3, [r4, #12]
 8012734:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012738:	bf18      	it	ne
 801273a:	f04f 30ff 	movne.w	r0, #4294967295
 801273e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8012742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012746:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012748:	e7f9      	b.n	801273e <__ssvfiscanf_r+0x282>
 801274a:	bf00      	nop
 801274c:	08012409 	.word	0x08012409
 8012750:	08012483 	.word	0x08012483
 8012754:	0801541a 	.word	0x0801541a
 8012758:	00000000 	.word	0x00000000

0801275c <_scanf_chars>:
 801275c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012760:	4615      	mov	r5, r2
 8012762:	688a      	ldr	r2, [r1, #8]
 8012764:	4680      	mov	r8, r0
 8012766:	460c      	mov	r4, r1
 8012768:	b932      	cbnz	r2, 8012778 <_scanf_chars+0x1c>
 801276a:	698a      	ldr	r2, [r1, #24]
 801276c:	2a00      	cmp	r2, #0
 801276e:	bf14      	ite	ne
 8012770:	f04f 32ff 	movne.w	r2, #4294967295
 8012774:	2201      	moveq	r2, #1
 8012776:	608a      	str	r2, [r1, #8]
 8012778:	6822      	ldr	r2, [r4, #0]
 801277a:	06d1      	lsls	r1, r2, #27
 801277c:	bf5f      	itttt	pl
 801277e:	681a      	ldrpl	r2, [r3, #0]
 8012780:	1d11      	addpl	r1, r2, #4
 8012782:	6019      	strpl	r1, [r3, #0]
 8012784:	6817      	ldrpl	r7, [r2, #0]
 8012786:	2600      	movs	r6, #0
 8012788:	69a3      	ldr	r3, [r4, #24]
 801278a:	b1db      	cbz	r3, 80127c4 <_scanf_chars+0x68>
 801278c:	2b01      	cmp	r3, #1
 801278e:	d107      	bne.n	80127a0 <_scanf_chars+0x44>
 8012790:	682b      	ldr	r3, [r5, #0]
 8012792:	6962      	ldr	r2, [r4, #20]
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	5cd3      	ldrb	r3, [r2, r3]
 8012798:	b9a3      	cbnz	r3, 80127c4 <_scanf_chars+0x68>
 801279a:	2e00      	cmp	r6, #0
 801279c:	d132      	bne.n	8012804 <_scanf_chars+0xa8>
 801279e:	e006      	b.n	80127ae <_scanf_chars+0x52>
 80127a0:	2b02      	cmp	r3, #2
 80127a2:	d007      	beq.n	80127b4 <_scanf_chars+0x58>
 80127a4:	2e00      	cmp	r6, #0
 80127a6:	d12d      	bne.n	8012804 <_scanf_chars+0xa8>
 80127a8:	69a3      	ldr	r3, [r4, #24]
 80127aa:	2b01      	cmp	r3, #1
 80127ac:	d12a      	bne.n	8012804 <_scanf_chars+0xa8>
 80127ae:	2001      	movs	r0, #1
 80127b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b4:	f7fc fa32 	bl	800ec1c <__locale_ctype_ptr>
 80127b8:	682b      	ldr	r3, [r5, #0]
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	4418      	add	r0, r3
 80127be:	7843      	ldrb	r3, [r0, #1]
 80127c0:	071b      	lsls	r3, r3, #28
 80127c2:	d4ef      	bmi.n	80127a4 <_scanf_chars+0x48>
 80127c4:	6823      	ldr	r3, [r4, #0]
 80127c6:	06da      	lsls	r2, r3, #27
 80127c8:	bf5e      	ittt	pl
 80127ca:	682b      	ldrpl	r3, [r5, #0]
 80127cc:	781b      	ldrbpl	r3, [r3, #0]
 80127ce:	703b      	strbpl	r3, [r7, #0]
 80127d0:	682a      	ldr	r2, [r5, #0]
 80127d2:	686b      	ldr	r3, [r5, #4]
 80127d4:	f102 0201 	add.w	r2, r2, #1
 80127d8:	602a      	str	r2, [r5, #0]
 80127da:	68a2      	ldr	r2, [r4, #8]
 80127dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80127e0:	f102 32ff 	add.w	r2, r2, #4294967295
 80127e4:	606b      	str	r3, [r5, #4]
 80127e6:	f106 0601 	add.w	r6, r6, #1
 80127ea:	bf58      	it	pl
 80127ec:	3701      	addpl	r7, #1
 80127ee:	60a2      	str	r2, [r4, #8]
 80127f0:	b142      	cbz	r2, 8012804 <_scanf_chars+0xa8>
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	dcc8      	bgt.n	8012788 <_scanf_chars+0x2c>
 80127f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80127fa:	4629      	mov	r1, r5
 80127fc:	4640      	mov	r0, r8
 80127fe:	4798      	blx	r3
 8012800:	2800      	cmp	r0, #0
 8012802:	d0c1      	beq.n	8012788 <_scanf_chars+0x2c>
 8012804:	6823      	ldr	r3, [r4, #0]
 8012806:	f013 0310 	ands.w	r3, r3, #16
 801280a:	d105      	bne.n	8012818 <_scanf_chars+0xbc>
 801280c:	68e2      	ldr	r2, [r4, #12]
 801280e:	3201      	adds	r2, #1
 8012810:	60e2      	str	r2, [r4, #12]
 8012812:	69a2      	ldr	r2, [r4, #24]
 8012814:	b102      	cbz	r2, 8012818 <_scanf_chars+0xbc>
 8012816:	703b      	strb	r3, [r7, #0]
 8012818:	6923      	ldr	r3, [r4, #16]
 801281a:	441e      	add	r6, r3
 801281c:	6126      	str	r6, [r4, #16]
 801281e:	2000      	movs	r0, #0
 8012820:	e7c6      	b.n	80127b0 <_scanf_chars+0x54>
	...

08012824 <_scanf_i>:
 8012824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012828:	469a      	mov	sl, r3
 801282a:	4b74      	ldr	r3, [pc, #464]	; (80129fc <_scanf_i+0x1d8>)
 801282c:	460c      	mov	r4, r1
 801282e:	4683      	mov	fp, r0
 8012830:	4616      	mov	r6, r2
 8012832:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012836:	b087      	sub	sp, #28
 8012838:	ab03      	add	r3, sp, #12
 801283a:	68a7      	ldr	r7, [r4, #8]
 801283c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012840:	4b6f      	ldr	r3, [pc, #444]	; (8012a00 <_scanf_i+0x1dc>)
 8012842:	69a1      	ldr	r1, [r4, #24]
 8012844:	4a6f      	ldr	r2, [pc, #444]	; (8012a04 <_scanf_i+0x1e0>)
 8012846:	2903      	cmp	r1, #3
 8012848:	bf08      	it	eq
 801284a:	461a      	moveq	r2, r3
 801284c:	1e7b      	subs	r3, r7, #1
 801284e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8012852:	bf84      	itt	hi
 8012854:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012858:	60a3      	strhi	r3, [r4, #8]
 801285a:	6823      	ldr	r3, [r4, #0]
 801285c:	9200      	str	r2, [sp, #0]
 801285e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012862:	bf88      	it	hi
 8012864:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012868:	f104 091c 	add.w	r9, r4, #28
 801286c:	6023      	str	r3, [r4, #0]
 801286e:	bf8c      	ite	hi
 8012870:	197f      	addhi	r7, r7, r5
 8012872:	2700      	movls	r7, #0
 8012874:	464b      	mov	r3, r9
 8012876:	f04f 0800 	mov.w	r8, #0
 801287a:	9301      	str	r3, [sp, #4]
 801287c:	6831      	ldr	r1, [r6, #0]
 801287e:	ab03      	add	r3, sp, #12
 8012880:	2202      	movs	r2, #2
 8012882:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8012886:	7809      	ldrb	r1, [r1, #0]
 8012888:	f7ed fcda 	bl	8000240 <memchr>
 801288c:	9b01      	ldr	r3, [sp, #4]
 801288e:	b330      	cbz	r0, 80128de <_scanf_i+0xba>
 8012890:	f1b8 0f01 	cmp.w	r8, #1
 8012894:	d15a      	bne.n	801294c <_scanf_i+0x128>
 8012896:	6862      	ldr	r2, [r4, #4]
 8012898:	b92a      	cbnz	r2, 80128a6 <_scanf_i+0x82>
 801289a:	6822      	ldr	r2, [r4, #0]
 801289c:	2108      	movs	r1, #8
 801289e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80128a2:	6061      	str	r1, [r4, #4]
 80128a4:	6022      	str	r2, [r4, #0]
 80128a6:	6822      	ldr	r2, [r4, #0]
 80128a8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80128ac:	6022      	str	r2, [r4, #0]
 80128ae:	68a2      	ldr	r2, [r4, #8]
 80128b0:	1e51      	subs	r1, r2, #1
 80128b2:	60a1      	str	r1, [r4, #8]
 80128b4:	b19a      	cbz	r2, 80128de <_scanf_i+0xba>
 80128b6:	6832      	ldr	r2, [r6, #0]
 80128b8:	1c51      	adds	r1, r2, #1
 80128ba:	6031      	str	r1, [r6, #0]
 80128bc:	7812      	ldrb	r2, [r2, #0]
 80128be:	701a      	strb	r2, [r3, #0]
 80128c0:	1c5d      	adds	r5, r3, #1
 80128c2:	6873      	ldr	r3, [r6, #4]
 80128c4:	3b01      	subs	r3, #1
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	6073      	str	r3, [r6, #4]
 80128ca:	dc07      	bgt.n	80128dc <_scanf_i+0xb8>
 80128cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80128d0:	4631      	mov	r1, r6
 80128d2:	4658      	mov	r0, fp
 80128d4:	4798      	blx	r3
 80128d6:	2800      	cmp	r0, #0
 80128d8:	f040 8086 	bne.w	80129e8 <_scanf_i+0x1c4>
 80128dc:	462b      	mov	r3, r5
 80128de:	f108 0801 	add.w	r8, r8, #1
 80128e2:	f1b8 0f03 	cmp.w	r8, #3
 80128e6:	d1c8      	bne.n	801287a <_scanf_i+0x56>
 80128e8:	6862      	ldr	r2, [r4, #4]
 80128ea:	b90a      	cbnz	r2, 80128f0 <_scanf_i+0xcc>
 80128ec:	220a      	movs	r2, #10
 80128ee:	6062      	str	r2, [r4, #4]
 80128f0:	6862      	ldr	r2, [r4, #4]
 80128f2:	4945      	ldr	r1, [pc, #276]	; (8012a08 <_scanf_i+0x1e4>)
 80128f4:	6960      	ldr	r0, [r4, #20]
 80128f6:	9301      	str	r3, [sp, #4]
 80128f8:	1a89      	subs	r1, r1, r2
 80128fa:	f000 f887 	bl	8012a0c <__sccl>
 80128fe:	9b01      	ldr	r3, [sp, #4]
 8012900:	f04f 0800 	mov.w	r8, #0
 8012904:	461d      	mov	r5, r3
 8012906:	68a3      	ldr	r3, [r4, #8]
 8012908:	6822      	ldr	r2, [r4, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d03a      	beq.n	8012984 <_scanf_i+0x160>
 801290e:	6831      	ldr	r1, [r6, #0]
 8012910:	6960      	ldr	r0, [r4, #20]
 8012912:	f891 c000 	ldrb.w	ip, [r1]
 8012916:	f810 000c 	ldrb.w	r0, [r0, ip]
 801291a:	2800      	cmp	r0, #0
 801291c:	d032      	beq.n	8012984 <_scanf_i+0x160>
 801291e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8012922:	d121      	bne.n	8012968 <_scanf_i+0x144>
 8012924:	0510      	lsls	r0, r2, #20
 8012926:	d51f      	bpl.n	8012968 <_scanf_i+0x144>
 8012928:	f108 0801 	add.w	r8, r8, #1
 801292c:	b117      	cbz	r7, 8012934 <_scanf_i+0x110>
 801292e:	3301      	adds	r3, #1
 8012930:	3f01      	subs	r7, #1
 8012932:	60a3      	str	r3, [r4, #8]
 8012934:	6873      	ldr	r3, [r6, #4]
 8012936:	3b01      	subs	r3, #1
 8012938:	2b00      	cmp	r3, #0
 801293a:	6073      	str	r3, [r6, #4]
 801293c:	dd1b      	ble.n	8012976 <_scanf_i+0x152>
 801293e:	6833      	ldr	r3, [r6, #0]
 8012940:	3301      	adds	r3, #1
 8012942:	6033      	str	r3, [r6, #0]
 8012944:	68a3      	ldr	r3, [r4, #8]
 8012946:	3b01      	subs	r3, #1
 8012948:	60a3      	str	r3, [r4, #8]
 801294a:	e7dc      	b.n	8012906 <_scanf_i+0xe2>
 801294c:	f1b8 0f02 	cmp.w	r8, #2
 8012950:	d1ad      	bne.n	80128ae <_scanf_i+0x8a>
 8012952:	6822      	ldr	r2, [r4, #0]
 8012954:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012958:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801295c:	d1bf      	bne.n	80128de <_scanf_i+0xba>
 801295e:	2110      	movs	r1, #16
 8012960:	6061      	str	r1, [r4, #4]
 8012962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012966:	e7a1      	b.n	80128ac <_scanf_i+0x88>
 8012968:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801296c:	6022      	str	r2, [r4, #0]
 801296e:	780b      	ldrb	r3, [r1, #0]
 8012970:	702b      	strb	r3, [r5, #0]
 8012972:	3501      	adds	r5, #1
 8012974:	e7de      	b.n	8012934 <_scanf_i+0x110>
 8012976:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801297a:	4631      	mov	r1, r6
 801297c:	4658      	mov	r0, fp
 801297e:	4798      	blx	r3
 8012980:	2800      	cmp	r0, #0
 8012982:	d0df      	beq.n	8012944 <_scanf_i+0x120>
 8012984:	6823      	ldr	r3, [r4, #0]
 8012986:	05d9      	lsls	r1, r3, #23
 8012988:	d50c      	bpl.n	80129a4 <_scanf_i+0x180>
 801298a:	454d      	cmp	r5, r9
 801298c:	d908      	bls.n	80129a0 <_scanf_i+0x17c>
 801298e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012992:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012996:	4632      	mov	r2, r6
 8012998:	4658      	mov	r0, fp
 801299a:	4798      	blx	r3
 801299c:	1e6f      	subs	r7, r5, #1
 801299e:	463d      	mov	r5, r7
 80129a0:	454d      	cmp	r5, r9
 80129a2:	d029      	beq.n	80129f8 <_scanf_i+0x1d4>
 80129a4:	6822      	ldr	r2, [r4, #0]
 80129a6:	f012 0210 	ands.w	r2, r2, #16
 80129aa:	d113      	bne.n	80129d4 <_scanf_i+0x1b0>
 80129ac:	702a      	strb	r2, [r5, #0]
 80129ae:	6863      	ldr	r3, [r4, #4]
 80129b0:	9e00      	ldr	r6, [sp, #0]
 80129b2:	4649      	mov	r1, r9
 80129b4:	4658      	mov	r0, fp
 80129b6:	47b0      	blx	r6
 80129b8:	f8da 3000 	ldr.w	r3, [sl]
 80129bc:	6821      	ldr	r1, [r4, #0]
 80129be:	1d1a      	adds	r2, r3, #4
 80129c0:	f8ca 2000 	str.w	r2, [sl]
 80129c4:	f011 0f20 	tst.w	r1, #32
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	d010      	beq.n	80129ee <_scanf_i+0x1ca>
 80129cc:	6018      	str	r0, [r3, #0]
 80129ce:	68e3      	ldr	r3, [r4, #12]
 80129d0:	3301      	adds	r3, #1
 80129d2:	60e3      	str	r3, [r4, #12]
 80129d4:	eba5 0509 	sub.w	r5, r5, r9
 80129d8:	44a8      	add	r8, r5
 80129da:	6925      	ldr	r5, [r4, #16]
 80129dc:	4445      	add	r5, r8
 80129de:	6125      	str	r5, [r4, #16]
 80129e0:	2000      	movs	r0, #0
 80129e2:	b007      	add	sp, #28
 80129e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129e8:	f04f 0800 	mov.w	r8, #0
 80129ec:	e7ca      	b.n	8012984 <_scanf_i+0x160>
 80129ee:	07ca      	lsls	r2, r1, #31
 80129f0:	bf4c      	ite	mi
 80129f2:	8018      	strhmi	r0, [r3, #0]
 80129f4:	6018      	strpl	r0, [r3, #0]
 80129f6:	e7ea      	b.n	80129ce <_scanf_i+0x1aa>
 80129f8:	2001      	movs	r0, #1
 80129fa:	e7f2      	b.n	80129e2 <_scanf_i+0x1be>
 80129fc:	080149e0 	.word	0x080149e0
 8012a00:	08012b69 	.word	0x08012b69
 8012a04:	080105c5 	.word	0x080105c5
 8012a08:	08015435 	.word	0x08015435

08012a0c <__sccl>:
 8012a0c:	b570      	push	{r4, r5, r6, lr}
 8012a0e:	780b      	ldrb	r3, [r1, #0]
 8012a10:	2b5e      	cmp	r3, #94	; 0x5e
 8012a12:	bf13      	iteet	ne
 8012a14:	1c4a      	addne	r2, r1, #1
 8012a16:	1c8a      	addeq	r2, r1, #2
 8012a18:	784b      	ldrbeq	r3, [r1, #1]
 8012a1a:	2100      	movne	r1, #0
 8012a1c:	bf08      	it	eq
 8012a1e:	2101      	moveq	r1, #1
 8012a20:	1e44      	subs	r4, r0, #1
 8012a22:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8012a26:	f804 1f01 	strb.w	r1, [r4, #1]!
 8012a2a:	42ac      	cmp	r4, r5
 8012a2c:	d1fb      	bne.n	8012a26 <__sccl+0x1a>
 8012a2e:	b913      	cbnz	r3, 8012a36 <__sccl+0x2a>
 8012a30:	3a01      	subs	r2, #1
 8012a32:	4610      	mov	r0, r2
 8012a34:	bd70      	pop	{r4, r5, r6, pc}
 8012a36:	f081 0401 	eor.w	r4, r1, #1
 8012a3a:	54c4      	strb	r4, [r0, r3]
 8012a3c:	1c51      	adds	r1, r2, #1
 8012a3e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8012a42:	2d2d      	cmp	r5, #45	; 0x2d
 8012a44:	f101 36ff 	add.w	r6, r1, #4294967295
 8012a48:	460a      	mov	r2, r1
 8012a4a:	d006      	beq.n	8012a5a <__sccl+0x4e>
 8012a4c:	2d5d      	cmp	r5, #93	; 0x5d
 8012a4e:	d0f0      	beq.n	8012a32 <__sccl+0x26>
 8012a50:	b90d      	cbnz	r5, 8012a56 <__sccl+0x4a>
 8012a52:	4632      	mov	r2, r6
 8012a54:	e7ed      	b.n	8012a32 <__sccl+0x26>
 8012a56:	462b      	mov	r3, r5
 8012a58:	e7ef      	b.n	8012a3a <__sccl+0x2e>
 8012a5a:	780e      	ldrb	r6, [r1, #0]
 8012a5c:	2e5d      	cmp	r6, #93	; 0x5d
 8012a5e:	d0fa      	beq.n	8012a56 <__sccl+0x4a>
 8012a60:	42b3      	cmp	r3, r6
 8012a62:	dcf8      	bgt.n	8012a56 <__sccl+0x4a>
 8012a64:	3301      	adds	r3, #1
 8012a66:	429e      	cmp	r6, r3
 8012a68:	54c4      	strb	r4, [r0, r3]
 8012a6a:	dcfb      	bgt.n	8012a64 <__sccl+0x58>
 8012a6c:	3102      	adds	r1, #2
 8012a6e:	e7e6      	b.n	8012a3e <__sccl+0x32>

08012a70 <_strtol_l.isra.0>:
 8012a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a74:	4680      	mov	r8, r0
 8012a76:	4689      	mov	r9, r1
 8012a78:	4692      	mov	sl, r2
 8012a7a:	461e      	mov	r6, r3
 8012a7c:	460f      	mov	r7, r1
 8012a7e:	463d      	mov	r5, r7
 8012a80:	9808      	ldr	r0, [sp, #32]
 8012a82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a86:	f7fc f8c5 	bl	800ec14 <__locale_ctype_ptr_l>
 8012a8a:	4420      	add	r0, r4
 8012a8c:	7843      	ldrb	r3, [r0, #1]
 8012a8e:	f013 0308 	ands.w	r3, r3, #8
 8012a92:	d132      	bne.n	8012afa <_strtol_l.isra.0+0x8a>
 8012a94:	2c2d      	cmp	r4, #45	; 0x2d
 8012a96:	d132      	bne.n	8012afe <_strtol_l.isra.0+0x8e>
 8012a98:	787c      	ldrb	r4, [r7, #1]
 8012a9a:	1cbd      	adds	r5, r7, #2
 8012a9c:	2201      	movs	r2, #1
 8012a9e:	2e00      	cmp	r6, #0
 8012aa0:	d05d      	beq.n	8012b5e <_strtol_l.isra.0+0xee>
 8012aa2:	2e10      	cmp	r6, #16
 8012aa4:	d109      	bne.n	8012aba <_strtol_l.isra.0+0x4a>
 8012aa6:	2c30      	cmp	r4, #48	; 0x30
 8012aa8:	d107      	bne.n	8012aba <_strtol_l.isra.0+0x4a>
 8012aaa:	782b      	ldrb	r3, [r5, #0]
 8012aac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012ab0:	2b58      	cmp	r3, #88	; 0x58
 8012ab2:	d14f      	bne.n	8012b54 <_strtol_l.isra.0+0xe4>
 8012ab4:	786c      	ldrb	r4, [r5, #1]
 8012ab6:	2610      	movs	r6, #16
 8012ab8:	3502      	adds	r5, #2
 8012aba:	2a00      	cmp	r2, #0
 8012abc:	bf14      	ite	ne
 8012abe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012ac2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012ac6:	2700      	movs	r7, #0
 8012ac8:	fbb1 fcf6 	udiv	ip, r1, r6
 8012acc:	4638      	mov	r0, r7
 8012ace:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012ad2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012ad6:	2b09      	cmp	r3, #9
 8012ad8:	d817      	bhi.n	8012b0a <_strtol_l.isra.0+0x9a>
 8012ada:	461c      	mov	r4, r3
 8012adc:	42a6      	cmp	r6, r4
 8012ade:	dd23      	ble.n	8012b28 <_strtol_l.isra.0+0xb8>
 8012ae0:	1c7b      	adds	r3, r7, #1
 8012ae2:	d007      	beq.n	8012af4 <_strtol_l.isra.0+0x84>
 8012ae4:	4584      	cmp	ip, r0
 8012ae6:	d31c      	bcc.n	8012b22 <_strtol_l.isra.0+0xb2>
 8012ae8:	d101      	bne.n	8012aee <_strtol_l.isra.0+0x7e>
 8012aea:	45a6      	cmp	lr, r4
 8012aec:	db19      	blt.n	8012b22 <_strtol_l.isra.0+0xb2>
 8012aee:	fb00 4006 	mla	r0, r0, r6, r4
 8012af2:	2701      	movs	r7, #1
 8012af4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012af8:	e7eb      	b.n	8012ad2 <_strtol_l.isra.0+0x62>
 8012afa:	462f      	mov	r7, r5
 8012afc:	e7bf      	b.n	8012a7e <_strtol_l.isra.0+0xe>
 8012afe:	2c2b      	cmp	r4, #43	; 0x2b
 8012b00:	bf04      	itt	eq
 8012b02:	1cbd      	addeq	r5, r7, #2
 8012b04:	787c      	ldrbeq	r4, [r7, #1]
 8012b06:	461a      	mov	r2, r3
 8012b08:	e7c9      	b.n	8012a9e <_strtol_l.isra.0+0x2e>
 8012b0a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8012b0e:	2b19      	cmp	r3, #25
 8012b10:	d801      	bhi.n	8012b16 <_strtol_l.isra.0+0xa6>
 8012b12:	3c37      	subs	r4, #55	; 0x37
 8012b14:	e7e2      	b.n	8012adc <_strtol_l.isra.0+0x6c>
 8012b16:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8012b1a:	2b19      	cmp	r3, #25
 8012b1c:	d804      	bhi.n	8012b28 <_strtol_l.isra.0+0xb8>
 8012b1e:	3c57      	subs	r4, #87	; 0x57
 8012b20:	e7dc      	b.n	8012adc <_strtol_l.isra.0+0x6c>
 8012b22:	f04f 37ff 	mov.w	r7, #4294967295
 8012b26:	e7e5      	b.n	8012af4 <_strtol_l.isra.0+0x84>
 8012b28:	1c7b      	adds	r3, r7, #1
 8012b2a:	d108      	bne.n	8012b3e <_strtol_l.isra.0+0xce>
 8012b2c:	2322      	movs	r3, #34	; 0x22
 8012b2e:	f8c8 3000 	str.w	r3, [r8]
 8012b32:	4608      	mov	r0, r1
 8012b34:	f1ba 0f00 	cmp.w	sl, #0
 8012b38:	d107      	bne.n	8012b4a <_strtol_l.isra.0+0xda>
 8012b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b3e:	b102      	cbz	r2, 8012b42 <_strtol_l.isra.0+0xd2>
 8012b40:	4240      	negs	r0, r0
 8012b42:	f1ba 0f00 	cmp.w	sl, #0
 8012b46:	d0f8      	beq.n	8012b3a <_strtol_l.isra.0+0xca>
 8012b48:	b10f      	cbz	r7, 8012b4e <_strtol_l.isra.0+0xde>
 8012b4a:	f105 39ff 	add.w	r9, r5, #4294967295
 8012b4e:	f8ca 9000 	str.w	r9, [sl]
 8012b52:	e7f2      	b.n	8012b3a <_strtol_l.isra.0+0xca>
 8012b54:	2430      	movs	r4, #48	; 0x30
 8012b56:	2e00      	cmp	r6, #0
 8012b58:	d1af      	bne.n	8012aba <_strtol_l.isra.0+0x4a>
 8012b5a:	2608      	movs	r6, #8
 8012b5c:	e7ad      	b.n	8012aba <_strtol_l.isra.0+0x4a>
 8012b5e:	2c30      	cmp	r4, #48	; 0x30
 8012b60:	d0a3      	beq.n	8012aaa <_strtol_l.isra.0+0x3a>
 8012b62:	260a      	movs	r6, #10
 8012b64:	e7a9      	b.n	8012aba <_strtol_l.isra.0+0x4a>
	...

08012b68 <_strtol_r>:
 8012b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b6a:	4c06      	ldr	r4, [pc, #24]	; (8012b84 <_strtol_r+0x1c>)
 8012b6c:	4d06      	ldr	r5, [pc, #24]	; (8012b88 <_strtol_r+0x20>)
 8012b6e:	6824      	ldr	r4, [r4, #0]
 8012b70:	6a24      	ldr	r4, [r4, #32]
 8012b72:	2c00      	cmp	r4, #0
 8012b74:	bf08      	it	eq
 8012b76:	462c      	moveq	r4, r5
 8012b78:	9400      	str	r4, [sp, #0]
 8012b7a:	f7ff ff79 	bl	8012a70 <_strtol_l.isra.0>
 8012b7e:	b003      	add	sp, #12
 8012b80:	bd30      	pop	{r4, r5, pc}
 8012b82:	bf00      	nop
 8012b84:	2000002c 	.word	0x2000002c
 8012b88:	20000090 	.word	0x20000090

08012b8c <__submore>:
 8012b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b90:	460c      	mov	r4, r1
 8012b92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b98:	4299      	cmp	r1, r3
 8012b9a:	d11d      	bne.n	8012bd8 <__submore+0x4c>
 8012b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012ba0:	f7fc f8ce 	bl	800ed40 <_malloc_r>
 8012ba4:	b918      	cbnz	r0, 8012bae <__submore+0x22>
 8012ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8012baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8012bb4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8012bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8012bba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8012bbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8012bc2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8012bc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012bca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8012bce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8012bd2:	6020      	str	r0, [r4, #0]
 8012bd4:	2000      	movs	r0, #0
 8012bd6:	e7e8      	b.n	8012baa <__submore+0x1e>
 8012bd8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8012bda:	0077      	lsls	r7, r6, #1
 8012bdc:	463a      	mov	r2, r7
 8012bde:	f7ff fa9a 	bl	8012116 <_realloc_r>
 8012be2:	4605      	mov	r5, r0
 8012be4:	2800      	cmp	r0, #0
 8012be6:	d0de      	beq.n	8012ba6 <__submore+0x1a>
 8012be8:	eb00 0806 	add.w	r8, r0, r6
 8012bec:	4601      	mov	r1, r0
 8012bee:	4632      	mov	r2, r6
 8012bf0:	4640      	mov	r0, r8
 8012bf2:	f7fc f843 	bl	800ec7c <memcpy>
 8012bf6:	f8c4 8000 	str.w	r8, [r4]
 8012bfa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8012bfe:	e7e9      	b.n	8012bd4 <__submore+0x48>

08012c00 <memmove>:
 8012c00:	4288      	cmp	r0, r1
 8012c02:	b510      	push	{r4, lr}
 8012c04:	eb01 0302 	add.w	r3, r1, r2
 8012c08:	d807      	bhi.n	8012c1a <memmove+0x1a>
 8012c0a:	1e42      	subs	r2, r0, #1
 8012c0c:	4299      	cmp	r1, r3
 8012c0e:	d00a      	beq.n	8012c26 <memmove+0x26>
 8012c10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c14:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012c18:	e7f8      	b.n	8012c0c <memmove+0xc>
 8012c1a:	4283      	cmp	r3, r0
 8012c1c:	d9f5      	bls.n	8012c0a <memmove+0xa>
 8012c1e:	1881      	adds	r1, r0, r2
 8012c20:	1ad2      	subs	r2, r2, r3
 8012c22:	42d3      	cmn	r3, r2
 8012c24:	d100      	bne.n	8012c28 <memmove+0x28>
 8012c26:	bd10      	pop	{r4, pc}
 8012c28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c2c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012c30:	e7f7      	b.n	8012c22 <memmove+0x22>

08012c32 <_malloc_usable_size_r>:
 8012c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c36:	1f18      	subs	r0, r3, #4
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	bfbc      	itt	lt
 8012c3c:	580b      	ldrlt	r3, [r1, r0]
 8012c3e:	18c0      	addlt	r0, r0, r3
 8012c40:	4770      	bx	lr
	...

08012c44 <pow>:
 8012c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c48:	ed2d 8b04 	vpush	{d8-d9}
 8012c4c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8012f20 <pow+0x2dc>
 8012c50:	b08d      	sub	sp, #52	; 0x34
 8012c52:	ec57 6b10 	vmov	r6, r7, d0
 8012c56:	ec55 4b11 	vmov	r4, r5, d1
 8012c5a:	f000 f965 	bl	8012f28 <__ieee754_pow>
 8012c5e:	f999 3000 	ldrsb.w	r3, [r9]
 8012c62:	9300      	str	r3, [sp, #0]
 8012c64:	3301      	adds	r3, #1
 8012c66:	eeb0 8a40 	vmov.f32	s16, s0
 8012c6a:	eef0 8a60 	vmov.f32	s17, s1
 8012c6e:	46c8      	mov	r8, r9
 8012c70:	d05f      	beq.n	8012d32 <pow+0xee>
 8012c72:	4622      	mov	r2, r4
 8012c74:	462b      	mov	r3, r5
 8012c76:	4620      	mov	r0, r4
 8012c78:	4629      	mov	r1, r5
 8012c7a:	f7ed ff87 	bl	8000b8c <__aeabi_dcmpun>
 8012c7e:	4683      	mov	fp, r0
 8012c80:	2800      	cmp	r0, #0
 8012c82:	d156      	bne.n	8012d32 <pow+0xee>
 8012c84:	4632      	mov	r2, r6
 8012c86:	463b      	mov	r3, r7
 8012c88:	4630      	mov	r0, r6
 8012c8a:	4639      	mov	r1, r7
 8012c8c:	f7ed ff7e 	bl	8000b8c <__aeabi_dcmpun>
 8012c90:	9001      	str	r0, [sp, #4]
 8012c92:	b1e8      	cbz	r0, 8012cd0 <pow+0x8c>
 8012c94:	2200      	movs	r2, #0
 8012c96:	2300      	movs	r3, #0
 8012c98:	4620      	mov	r0, r4
 8012c9a:	4629      	mov	r1, r5
 8012c9c:	f7ed ff44 	bl	8000b28 <__aeabi_dcmpeq>
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	d046      	beq.n	8012d32 <pow+0xee>
 8012ca4:	2301      	movs	r3, #1
 8012ca6:	9302      	str	r3, [sp, #8]
 8012ca8:	4b96      	ldr	r3, [pc, #600]	; (8012f04 <pow+0x2c0>)
 8012caa:	9303      	str	r3, [sp, #12]
 8012cac:	4b96      	ldr	r3, [pc, #600]	; (8012f08 <pow+0x2c4>)
 8012cae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012cb8:	9b00      	ldr	r3, [sp, #0]
 8012cba:	2b02      	cmp	r3, #2
 8012cbc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012cc0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012cc4:	d033      	beq.n	8012d2e <pow+0xea>
 8012cc6:	a802      	add	r0, sp, #8
 8012cc8:	f000 fefd 	bl	8013ac6 <matherr>
 8012ccc:	bb48      	cbnz	r0, 8012d22 <pow+0xde>
 8012cce:	e05d      	b.n	8012d8c <pow+0x148>
 8012cd0:	f04f 0a00 	mov.w	sl, #0
 8012cd4:	f04f 0b00 	mov.w	fp, #0
 8012cd8:	4652      	mov	r2, sl
 8012cda:	465b      	mov	r3, fp
 8012cdc:	4630      	mov	r0, r6
 8012cde:	4639      	mov	r1, r7
 8012ce0:	f7ed ff22 	bl	8000b28 <__aeabi_dcmpeq>
 8012ce4:	ec4b ab19 	vmov	d9, sl, fp
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	d054      	beq.n	8012d96 <pow+0x152>
 8012cec:	4652      	mov	r2, sl
 8012cee:	465b      	mov	r3, fp
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	4629      	mov	r1, r5
 8012cf4:	f7ed ff18 	bl	8000b28 <__aeabi_dcmpeq>
 8012cf8:	4680      	mov	r8, r0
 8012cfa:	b318      	cbz	r0, 8012d44 <pow+0x100>
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	9302      	str	r3, [sp, #8]
 8012d00:	4b80      	ldr	r3, [pc, #512]	; (8012f04 <pow+0x2c0>)
 8012d02:	9303      	str	r3, [sp, #12]
 8012d04:	9b01      	ldr	r3, [sp, #4]
 8012d06:	930a      	str	r3, [sp, #40]	; 0x28
 8012d08:	9b00      	ldr	r3, [sp, #0]
 8012d0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012d0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012d12:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d0d5      	beq.n	8012cc6 <pow+0x82>
 8012d1a:	4b7b      	ldr	r3, [pc, #492]	; (8012f08 <pow+0x2c4>)
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d24:	b11b      	cbz	r3, 8012d2e <pow+0xea>
 8012d26:	f7fb ff4b 	bl	800ebc0 <__errno>
 8012d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d2c:	6003      	str	r3, [r0, #0]
 8012d2e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8012d32:	eeb0 0a48 	vmov.f32	s0, s16
 8012d36:	eef0 0a68 	vmov.f32	s1, s17
 8012d3a:	b00d      	add	sp, #52	; 0x34
 8012d3c:	ecbd 8b04 	vpop	{d8-d9}
 8012d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d44:	ec45 4b10 	vmov	d0, r4, r5
 8012d48:	f000 feb5 	bl	8013ab6 <finite>
 8012d4c:	2800      	cmp	r0, #0
 8012d4e:	d0f0      	beq.n	8012d32 <pow+0xee>
 8012d50:	4652      	mov	r2, sl
 8012d52:	465b      	mov	r3, fp
 8012d54:	4620      	mov	r0, r4
 8012d56:	4629      	mov	r1, r5
 8012d58:	f7ed fef0 	bl	8000b3c <__aeabi_dcmplt>
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	d0e8      	beq.n	8012d32 <pow+0xee>
 8012d60:	2301      	movs	r3, #1
 8012d62:	9302      	str	r3, [sp, #8]
 8012d64:	4b67      	ldr	r3, [pc, #412]	; (8012f04 <pow+0x2c0>)
 8012d66:	9303      	str	r3, [sp, #12]
 8012d68:	f999 3000 	ldrsb.w	r3, [r9]
 8012d6c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8012d70:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012d74:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012d78:	b913      	cbnz	r3, 8012d80 <pow+0x13c>
 8012d7a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012d7e:	e7a2      	b.n	8012cc6 <pow+0x82>
 8012d80:	4962      	ldr	r1, [pc, #392]	; (8012f0c <pow+0x2c8>)
 8012d82:	2000      	movs	r0, #0
 8012d84:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012d88:	2b02      	cmp	r3, #2
 8012d8a:	d19c      	bne.n	8012cc6 <pow+0x82>
 8012d8c:	f7fb ff18 	bl	800ebc0 <__errno>
 8012d90:	2321      	movs	r3, #33	; 0x21
 8012d92:	6003      	str	r3, [r0, #0]
 8012d94:	e7c5      	b.n	8012d22 <pow+0xde>
 8012d96:	eeb0 0a48 	vmov.f32	s0, s16
 8012d9a:	eef0 0a68 	vmov.f32	s1, s17
 8012d9e:	f000 fe8a 	bl	8013ab6 <finite>
 8012da2:	9000      	str	r0, [sp, #0]
 8012da4:	2800      	cmp	r0, #0
 8012da6:	f040 8081 	bne.w	8012eac <pow+0x268>
 8012daa:	ec47 6b10 	vmov	d0, r6, r7
 8012dae:	f000 fe82 	bl	8013ab6 <finite>
 8012db2:	2800      	cmp	r0, #0
 8012db4:	d07a      	beq.n	8012eac <pow+0x268>
 8012db6:	ec45 4b10 	vmov	d0, r4, r5
 8012dba:	f000 fe7c 	bl	8013ab6 <finite>
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	d074      	beq.n	8012eac <pow+0x268>
 8012dc2:	ec53 2b18 	vmov	r2, r3, d8
 8012dc6:	ee18 0a10 	vmov	r0, s16
 8012dca:	4619      	mov	r1, r3
 8012dcc:	f7ed fede 	bl	8000b8c <__aeabi_dcmpun>
 8012dd0:	f999 9000 	ldrsb.w	r9, [r9]
 8012dd4:	4b4b      	ldr	r3, [pc, #300]	; (8012f04 <pow+0x2c0>)
 8012dd6:	b1b0      	cbz	r0, 8012e06 <pow+0x1c2>
 8012dd8:	2201      	movs	r2, #1
 8012dda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012dde:	9b00      	ldr	r3, [sp, #0]
 8012de0:	930a      	str	r3, [sp, #40]	; 0x28
 8012de2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012de6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012dea:	f1b9 0f00 	cmp.w	r9, #0
 8012dee:	d0c4      	beq.n	8012d7a <pow+0x136>
 8012df0:	4652      	mov	r2, sl
 8012df2:	465b      	mov	r3, fp
 8012df4:	4650      	mov	r0, sl
 8012df6:	4659      	mov	r1, fp
 8012df8:	f7ed fd58 	bl	80008ac <__aeabi_ddiv>
 8012dfc:	f1b9 0f02 	cmp.w	r9, #2
 8012e00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012e04:	e7c1      	b.n	8012d8a <pow+0x146>
 8012e06:	2203      	movs	r2, #3
 8012e08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012e0c:	900a      	str	r0, [sp, #40]	; 0x28
 8012e0e:	4629      	mov	r1, r5
 8012e10:	4620      	mov	r0, r4
 8012e12:	2200      	movs	r2, #0
 8012e14:	4b3e      	ldr	r3, [pc, #248]	; (8012f10 <pow+0x2cc>)
 8012e16:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012e1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012e1e:	f7ed fc1b 	bl	8000658 <__aeabi_dmul>
 8012e22:	4604      	mov	r4, r0
 8012e24:	460d      	mov	r5, r1
 8012e26:	f1b9 0f00 	cmp.w	r9, #0
 8012e2a:	d124      	bne.n	8012e76 <pow+0x232>
 8012e2c:	4b39      	ldr	r3, [pc, #228]	; (8012f14 <pow+0x2d0>)
 8012e2e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012e32:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012e36:	4630      	mov	r0, r6
 8012e38:	4652      	mov	r2, sl
 8012e3a:	465b      	mov	r3, fp
 8012e3c:	4639      	mov	r1, r7
 8012e3e:	f7ed fe7d 	bl	8000b3c <__aeabi_dcmplt>
 8012e42:	2800      	cmp	r0, #0
 8012e44:	d056      	beq.n	8012ef4 <pow+0x2b0>
 8012e46:	ec45 4b10 	vmov	d0, r4, r5
 8012e4a:	f000 fe49 	bl	8013ae0 <rint>
 8012e4e:	4622      	mov	r2, r4
 8012e50:	462b      	mov	r3, r5
 8012e52:	ec51 0b10 	vmov	r0, r1, d0
 8012e56:	f7ed fe67 	bl	8000b28 <__aeabi_dcmpeq>
 8012e5a:	b920      	cbnz	r0, 8012e66 <pow+0x222>
 8012e5c:	4b2e      	ldr	r3, [pc, #184]	; (8012f18 <pow+0x2d4>)
 8012e5e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012e62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012e66:	f998 3000 	ldrsb.w	r3, [r8]
 8012e6a:	2b02      	cmp	r3, #2
 8012e6c:	d142      	bne.n	8012ef4 <pow+0x2b0>
 8012e6e:	f7fb fea7 	bl	800ebc0 <__errno>
 8012e72:	2322      	movs	r3, #34	; 0x22
 8012e74:	e78d      	b.n	8012d92 <pow+0x14e>
 8012e76:	4b29      	ldr	r3, [pc, #164]	; (8012f1c <pow+0x2d8>)
 8012e78:	2200      	movs	r2, #0
 8012e7a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012e7e:	4630      	mov	r0, r6
 8012e80:	4652      	mov	r2, sl
 8012e82:	465b      	mov	r3, fp
 8012e84:	4639      	mov	r1, r7
 8012e86:	f7ed fe59 	bl	8000b3c <__aeabi_dcmplt>
 8012e8a:	2800      	cmp	r0, #0
 8012e8c:	d0eb      	beq.n	8012e66 <pow+0x222>
 8012e8e:	ec45 4b10 	vmov	d0, r4, r5
 8012e92:	f000 fe25 	bl	8013ae0 <rint>
 8012e96:	4622      	mov	r2, r4
 8012e98:	462b      	mov	r3, r5
 8012e9a:	ec51 0b10 	vmov	r0, r1, d0
 8012e9e:	f7ed fe43 	bl	8000b28 <__aeabi_dcmpeq>
 8012ea2:	2800      	cmp	r0, #0
 8012ea4:	d1df      	bne.n	8012e66 <pow+0x222>
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	4b18      	ldr	r3, [pc, #96]	; (8012f0c <pow+0x2c8>)
 8012eaa:	e7da      	b.n	8012e62 <pow+0x21e>
 8012eac:	2200      	movs	r2, #0
 8012eae:	2300      	movs	r3, #0
 8012eb0:	ec51 0b18 	vmov	r0, r1, d8
 8012eb4:	f7ed fe38 	bl	8000b28 <__aeabi_dcmpeq>
 8012eb8:	2800      	cmp	r0, #0
 8012eba:	f43f af3a 	beq.w	8012d32 <pow+0xee>
 8012ebe:	ec47 6b10 	vmov	d0, r6, r7
 8012ec2:	f000 fdf8 	bl	8013ab6 <finite>
 8012ec6:	2800      	cmp	r0, #0
 8012ec8:	f43f af33 	beq.w	8012d32 <pow+0xee>
 8012ecc:	ec45 4b10 	vmov	d0, r4, r5
 8012ed0:	f000 fdf1 	bl	8013ab6 <finite>
 8012ed4:	2800      	cmp	r0, #0
 8012ed6:	f43f af2c 	beq.w	8012d32 <pow+0xee>
 8012eda:	2304      	movs	r3, #4
 8012edc:	9302      	str	r3, [sp, #8]
 8012ede:	4b09      	ldr	r3, [pc, #36]	; (8012f04 <pow+0x2c0>)
 8012ee0:	9303      	str	r3, [sp, #12]
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	930a      	str	r3, [sp, #40]	; 0x28
 8012ee6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012eea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012eee:	ed8d 9b08 	vstr	d9, [sp, #32]
 8012ef2:	e7b8      	b.n	8012e66 <pow+0x222>
 8012ef4:	a802      	add	r0, sp, #8
 8012ef6:	f000 fde6 	bl	8013ac6 <matherr>
 8012efa:	2800      	cmp	r0, #0
 8012efc:	f47f af11 	bne.w	8012d22 <pow+0xde>
 8012f00:	e7b5      	b.n	8012e6e <pow+0x22a>
 8012f02:	bf00      	nop
 8012f04:	08015440 	.word	0x08015440
 8012f08:	3ff00000 	.word	0x3ff00000
 8012f0c:	fff00000 	.word	0xfff00000
 8012f10:	3fe00000 	.word	0x3fe00000
 8012f14:	47efffff 	.word	0x47efffff
 8012f18:	c7efffff 	.word	0xc7efffff
 8012f1c:	7ff00000 	.word	0x7ff00000
 8012f20:	200001fc 	.word	0x200001fc
 8012f24:	00000000 	.word	0x00000000

08012f28 <__ieee754_pow>:
 8012f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f2c:	b091      	sub	sp, #68	; 0x44
 8012f2e:	ed8d 1b00 	vstr	d1, [sp]
 8012f32:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012f36:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012f3a:	ea58 0302 	orrs.w	r3, r8, r2
 8012f3e:	ec57 6b10 	vmov	r6, r7, d0
 8012f42:	f000 84be 	beq.w	80138c2 <__ieee754_pow+0x99a>
 8012f46:	4b7a      	ldr	r3, [pc, #488]	; (8013130 <__ieee754_pow+0x208>)
 8012f48:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012f4c:	429c      	cmp	r4, r3
 8012f4e:	463d      	mov	r5, r7
 8012f50:	ee10 aa10 	vmov	sl, s0
 8012f54:	dc09      	bgt.n	8012f6a <__ieee754_pow+0x42>
 8012f56:	d103      	bne.n	8012f60 <__ieee754_pow+0x38>
 8012f58:	b93e      	cbnz	r6, 8012f6a <__ieee754_pow+0x42>
 8012f5a:	45a0      	cmp	r8, r4
 8012f5c:	dc0d      	bgt.n	8012f7a <__ieee754_pow+0x52>
 8012f5e:	e001      	b.n	8012f64 <__ieee754_pow+0x3c>
 8012f60:	4598      	cmp	r8, r3
 8012f62:	dc02      	bgt.n	8012f6a <__ieee754_pow+0x42>
 8012f64:	4598      	cmp	r8, r3
 8012f66:	d10e      	bne.n	8012f86 <__ieee754_pow+0x5e>
 8012f68:	b16a      	cbz	r2, 8012f86 <__ieee754_pow+0x5e>
 8012f6a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012f6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012f72:	ea54 030a 	orrs.w	r3, r4, sl
 8012f76:	f000 84a4 	beq.w	80138c2 <__ieee754_pow+0x99a>
 8012f7a:	486e      	ldr	r0, [pc, #440]	; (8013134 <__ieee754_pow+0x20c>)
 8012f7c:	b011      	add	sp, #68	; 0x44
 8012f7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f82:	f000 bda5 	b.w	8013ad0 <nan>
 8012f86:	2d00      	cmp	r5, #0
 8012f88:	da53      	bge.n	8013032 <__ieee754_pow+0x10a>
 8012f8a:	4b6b      	ldr	r3, [pc, #428]	; (8013138 <__ieee754_pow+0x210>)
 8012f8c:	4598      	cmp	r8, r3
 8012f8e:	dc4d      	bgt.n	801302c <__ieee754_pow+0x104>
 8012f90:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012f94:	4598      	cmp	r8, r3
 8012f96:	dd4c      	ble.n	8013032 <__ieee754_pow+0x10a>
 8012f98:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012f9c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012fa0:	2b14      	cmp	r3, #20
 8012fa2:	dd26      	ble.n	8012ff2 <__ieee754_pow+0xca>
 8012fa4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012fa8:	fa22 f103 	lsr.w	r1, r2, r3
 8012fac:	fa01 f303 	lsl.w	r3, r1, r3
 8012fb0:	4293      	cmp	r3, r2
 8012fb2:	d13e      	bne.n	8013032 <__ieee754_pow+0x10a>
 8012fb4:	f001 0101 	and.w	r1, r1, #1
 8012fb8:	f1c1 0b02 	rsb	fp, r1, #2
 8012fbc:	2a00      	cmp	r2, #0
 8012fbe:	d15b      	bne.n	8013078 <__ieee754_pow+0x150>
 8012fc0:	4b5b      	ldr	r3, [pc, #364]	; (8013130 <__ieee754_pow+0x208>)
 8012fc2:	4598      	cmp	r8, r3
 8012fc4:	d124      	bne.n	8013010 <__ieee754_pow+0xe8>
 8012fc6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012fca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012fce:	ea53 030a 	orrs.w	r3, r3, sl
 8012fd2:	f000 8476 	beq.w	80138c2 <__ieee754_pow+0x99a>
 8012fd6:	4b59      	ldr	r3, [pc, #356]	; (801313c <__ieee754_pow+0x214>)
 8012fd8:	429c      	cmp	r4, r3
 8012fda:	dd2d      	ble.n	8013038 <__ieee754_pow+0x110>
 8012fdc:	f1b9 0f00 	cmp.w	r9, #0
 8012fe0:	f280 8473 	bge.w	80138ca <__ieee754_pow+0x9a2>
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	2100      	movs	r1, #0
 8012fe8:	ec41 0b10 	vmov	d0, r0, r1
 8012fec:	b011      	add	sp, #68	; 0x44
 8012fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ff2:	2a00      	cmp	r2, #0
 8012ff4:	d13e      	bne.n	8013074 <__ieee754_pow+0x14c>
 8012ff6:	f1c3 0314 	rsb	r3, r3, #20
 8012ffa:	fa48 f103 	asr.w	r1, r8, r3
 8012ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8013002:	4543      	cmp	r3, r8
 8013004:	f040 8469 	bne.w	80138da <__ieee754_pow+0x9b2>
 8013008:	f001 0101 	and.w	r1, r1, #1
 801300c:	f1c1 0b02 	rsb	fp, r1, #2
 8013010:	4b4b      	ldr	r3, [pc, #300]	; (8013140 <__ieee754_pow+0x218>)
 8013012:	4598      	cmp	r8, r3
 8013014:	d118      	bne.n	8013048 <__ieee754_pow+0x120>
 8013016:	f1b9 0f00 	cmp.w	r9, #0
 801301a:	f280 845a 	bge.w	80138d2 <__ieee754_pow+0x9aa>
 801301e:	4948      	ldr	r1, [pc, #288]	; (8013140 <__ieee754_pow+0x218>)
 8013020:	4632      	mov	r2, r6
 8013022:	463b      	mov	r3, r7
 8013024:	2000      	movs	r0, #0
 8013026:	f7ed fc41 	bl	80008ac <__aeabi_ddiv>
 801302a:	e7dd      	b.n	8012fe8 <__ieee754_pow+0xc0>
 801302c:	f04f 0b02 	mov.w	fp, #2
 8013030:	e7c4      	b.n	8012fbc <__ieee754_pow+0x94>
 8013032:	f04f 0b00 	mov.w	fp, #0
 8013036:	e7c1      	b.n	8012fbc <__ieee754_pow+0x94>
 8013038:	f1b9 0f00 	cmp.w	r9, #0
 801303c:	dad2      	bge.n	8012fe4 <__ieee754_pow+0xbc>
 801303e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013042:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013046:	e7cf      	b.n	8012fe8 <__ieee754_pow+0xc0>
 8013048:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801304c:	d106      	bne.n	801305c <__ieee754_pow+0x134>
 801304e:	4632      	mov	r2, r6
 8013050:	463b      	mov	r3, r7
 8013052:	4610      	mov	r0, r2
 8013054:	4619      	mov	r1, r3
 8013056:	f7ed faff 	bl	8000658 <__aeabi_dmul>
 801305a:	e7c5      	b.n	8012fe8 <__ieee754_pow+0xc0>
 801305c:	4b39      	ldr	r3, [pc, #228]	; (8013144 <__ieee754_pow+0x21c>)
 801305e:	4599      	cmp	r9, r3
 8013060:	d10a      	bne.n	8013078 <__ieee754_pow+0x150>
 8013062:	2d00      	cmp	r5, #0
 8013064:	db08      	blt.n	8013078 <__ieee754_pow+0x150>
 8013066:	ec47 6b10 	vmov	d0, r6, r7
 801306a:	b011      	add	sp, #68	; 0x44
 801306c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013070:	f000 bc68 	b.w	8013944 <__ieee754_sqrt>
 8013074:	f04f 0b00 	mov.w	fp, #0
 8013078:	ec47 6b10 	vmov	d0, r6, r7
 801307c:	f000 fd12 	bl	8013aa4 <fabs>
 8013080:	ec51 0b10 	vmov	r0, r1, d0
 8013084:	f1ba 0f00 	cmp.w	sl, #0
 8013088:	d127      	bne.n	80130da <__ieee754_pow+0x1b2>
 801308a:	b124      	cbz	r4, 8013096 <__ieee754_pow+0x16e>
 801308c:	4b2c      	ldr	r3, [pc, #176]	; (8013140 <__ieee754_pow+0x218>)
 801308e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8013092:	429a      	cmp	r2, r3
 8013094:	d121      	bne.n	80130da <__ieee754_pow+0x1b2>
 8013096:	f1b9 0f00 	cmp.w	r9, #0
 801309a:	da05      	bge.n	80130a8 <__ieee754_pow+0x180>
 801309c:	4602      	mov	r2, r0
 801309e:	460b      	mov	r3, r1
 80130a0:	2000      	movs	r0, #0
 80130a2:	4927      	ldr	r1, [pc, #156]	; (8013140 <__ieee754_pow+0x218>)
 80130a4:	f7ed fc02 	bl	80008ac <__aeabi_ddiv>
 80130a8:	2d00      	cmp	r5, #0
 80130aa:	da9d      	bge.n	8012fe8 <__ieee754_pow+0xc0>
 80130ac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80130b0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80130b4:	ea54 030b 	orrs.w	r3, r4, fp
 80130b8:	d108      	bne.n	80130cc <__ieee754_pow+0x1a4>
 80130ba:	4602      	mov	r2, r0
 80130bc:	460b      	mov	r3, r1
 80130be:	4610      	mov	r0, r2
 80130c0:	4619      	mov	r1, r3
 80130c2:	f7ed f911 	bl	80002e8 <__aeabi_dsub>
 80130c6:	4602      	mov	r2, r0
 80130c8:	460b      	mov	r3, r1
 80130ca:	e7ac      	b.n	8013026 <__ieee754_pow+0xfe>
 80130cc:	f1bb 0f01 	cmp.w	fp, #1
 80130d0:	d18a      	bne.n	8012fe8 <__ieee754_pow+0xc0>
 80130d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80130d6:	4619      	mov	r1, r3
 80130d8:	e786      	b.n	8012fe8 <__ieee754_pow+0xc0>
 80130da:	0fed      	lsrs	r5, r5, #31
 80130dc:	1e6b      	subs	r3, r5, #1
 80130de:	930d      	str	r3, [sp, #52]	; 0x34
 80130e0:	ea5b 0303 	orrs.w	r3, fp, r3
 80130e4:	d102      	bne.n	80130ec <__ieee754_pow+0x1c4>
 80130e6:	4632      	mov	r2, r6
 80130e8:	463b      	mov	r3, r7
 80130ea:	e7e8      	b.n	80130be <__ieee754_pow+0x196>
 80130ec:	4b16      	ldr	r3, [pc, #88]	; (8013148 <__ieee754_pow+0x220>)
 80130ee:	4598      	cmp	r8, r3
 80130f0:	f340 80fe 	ble.w	80132f0 <__ieee754_pow+0x3c8>
 80130f4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80130f8:	4598      	cmp	r8, r3
 80130fa:	dd0a      	ble.n	8013112 <__ieee754_pow+0x1ea>
 80130fc:	4b0f      	ldr	r3, [pc, #60]	; (801313c <__ieee754_pow+0x214>)
 80130fe:	429c      	cmp	r4, r3
 8013100:	dc0d      	bgt.n	801311e <__ieee754_pow+0x1f6>
 8013102:	f1b9 0f00 	cmp.w	r9, #0
 8013106:	f6bf af6d 	bge.w	8012fe4 <__ieee754_pow+0xbc>
 801310a:	a307      	add	r3, pc, #28	; (adr r3, 8013128 <__ieee754_pow+0x200>)
 801310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013110:	e79f      	b.n	8013052 <__ieee754_pow+0x12a>
 8013112:	4b0e      	ldr	r3, [pc, #56]	; (801314c <__ieee754_pow+0x224>)
 8013114:	429c      	cmp	r4, r3
 8013116:	ddf4      	ble.n	8013102 <__ieee754_pow+0x1da>
 8013118:	4b09      	ldr	r3, [pc, #36]	; (8013140 <__ieee754_pow+0x218>)
 801311a:	429c      	cmp	r4, r3
 801311c:	dd18      	ble.n	8013150 <__ieee754_pow+0x228>
 801311e:	f1b9 0f00 	cmp.w	r9, #0
 8013122:	dcf2      	bgt.n	801310a <__ieee754_pow+0x1e2>
 8013124:	e75e      	b.n	8012fe4 <__ieee754_pow+0xbc>
 8013126:	bf00      	nop
 8013128:	8800759c 	.word	0x8800759c
 801312c:	7e37e43c 	.word	0x7e37e43c
 8013130:	7ff00000 	.word	0x7ff00000
 8013134:	08015419 	.word	0x08015419
 8013138:	433fffff 	.word	0x433fffff
 801313c:	3fefffff 	.word	0x3fefffff
 8013140:	3ff00000 	.word	0x3ff00000
 8013144:	3fe00000 	.word	0x3fe00000
 8013148:	41e00000 	.word	0x41e00000
 801314c:	3feffffe 	.word	0x3feffffe
 8013150:	2200      	movs	r2, #0
 8013152:	4b63      	ldr	r3, [pc, #396]	; (80132e0 <__ieee754_pow+0x3b8>)
 8013154:	f7ed f8c8 	bl	80002e8 <__aeabi_dsub>
 8013158:	a355      	add	r3, pc, #340	; (adr r3, 80132b0 <__ieee754_pow+0x388>)
 801315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315e:	4604      	mov	r4, r0
 8013160:	460d      	mov	r5, r1
 8013162:	f7ed fa79 	bl	8000658 <__aeabi_dmul>
 8013166:	a354      	add	r3, pc, #336	; (adr r3, 80132b8 <__ieee754_pow+0x390>)
 8013168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316c:	4606      	mov	r6, r0
 801316e:	460f      	mov	r7, r1
 8013170:	4620      	mov	r0, r4
 8013172:	4629      	mov	r1, r5
 8013174:	f7ed fa70 	bl	8000658 <__aeabi_dmul>
 8013178:	2200      	movs	r2, #0
 801317a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801317e:	4b59      	ldr	r3, [pc, #356]	; (80132e4 <__ieee754_pow+0x3bc>)
 8013180:	4620      	mov	r0, r4
 8013182:	4629      	mov	r1, r5
 8013184:	f7ed fa68 	bl	8000658 <__aeabi_dmul>
 8013188:	4602      	mov	r2, r0
 801318a:	460b      	mov	r3, r1
 801318c:	a14c      	add	r1, pc, #304	; (adr r1, 80132c0 <__ieee754_pow+0x398>)
 801318e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013192:	f7ed f8a9 	bl	80002e8 <__aeabi_dsub>
 8013196:	4622      	mov	r2, r4
 8013198:	462b      	mov	r3, r5
 801319a:	f7ed fa5d 	bl	8000658 <__aeabi_dmul>
 801319e:	4602      	mov	r2, r0
 80131a0:	460b      	mov	r3, r1
 80131a2:	2000      	movs	r0, #0
 80131a4:	4950      	ldr	r1, [pc, #320]	; (80132e8 <__ieee754_pow+0x3c0>)
 80131a6:	f7ed f89f 	bl	80002e8 <__aeabi_dsub>
 80131aa:	4622      	mov	r2, r4
 80131ac:	462b      	mov	r3, r5
 80131ae:	4680      	mov	r8, r0
 80131b0:	4689      	mov	r9, r1
 80131b2:	4620      	mov	r0, r4
 80131b4:	4629      	mov	r1, r5
 80131b6:	f7ed fa4f 	bl	8000658 <__aeabi_dmul>
 80131ba:	4602      	mov	r2, r0
 80131bc:	460b      	mov	r3, r1
 80131be:	4640      	mov	r0, r8
 80131c0:	4649      	mov	r1, r9
 80131c2:	f7ed fa49 	bl	8000658 <__aeabi_dmul>
 80131c6:	a340      	add	r3, pc, #256	; (adr r3, 80132c8 <__ieee754_pow+0x3a0>)
 80131c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131cc:	f7ed fa44 	bl	8000658 <__aeabi_dmul>
 80131d0:	4602      	mov	r2, r0
 80131d2:	460b      	mov	r3, r1
 80131d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131d8:	f7ed f886 	bl	80002e8 <__aeabi_dsub>
 80131dc:	4602      	mov	r2, r0
 80131de:	460b      	mov	r3, r1
 80131e0:	4604      	mov	r4, r0
 80131e2:	460d      	mov	r5, r1
 80131e4:	4630      	mov	r0, r6
 80131e6:	4639      	mov	r1, r7
 80131e8:	f7ed f880 	bl	80002ec <__adddf3>
 80131ec:	2000      	movs	r0, #0
 80131ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80131f2:	4632      	mov	r2, r6
 80131f4:	463b      	mov	r3, r7
 80131f6:	f7ed f877 	bl	80002e8 <__aeabi_dsub>
 80131fa:	4602      	mov	r2, r0
 80131fc:	460b      	mov	r3, r1
 80131fe:	4620      	mov	r0, r4
 8013200:	4629      	mov	r1, r5
 8013202:	f7ed f871 	bl	80002e8 <__aeabi_dsub>
 8013206:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013208:	f10b 33ff 	add.w	r3, fp, #4294967295
 801320c:	4313      	orrs	r3, r2
 801320e:	4606      	mov	r6, r0
 8013210:	460f      	mov	r7, r1
 8013212:	f040 81eb 	bne.w	80135ec <__ieee754_pow+0x6c4>
 8013216:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80132d0 <__ieee754_pow+0x3a8>
 801321a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801321e:	2400      	movs	r4, #0
 8013220:	4622      	mov	r2, r4
 8013222:	462b      	mov	r3, r5
 8013224:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013228:	ed8d 7b02 	vstr	d7, [sp, #8]
 801322c:	f7ed f85c 	bl	80002e8 <__aeabi_dsub>
 8013230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013234:	f7ed fa10 	bl	8000658 <__aeabi_dmul>
 8013238:	e9dd 2300 	ldrd	r2, r3, [sp]
 801323c:	4680      	mov	r8, r0
 801323e:	4689      	mov	r9, r1
 8013240:	4630      	mov	r0, r6
 8013242:	4639      	mov	r1, r7
 8013244:	f7ed fa08 	bl	8000658 <__aeabi_dmul>
 8013248:	4602      	mov	r2, r0
 801324a:	460b      	mov	r3, r1
 801324c:	4640      	mov	r0, r8
 801324e:	4649      	mov	r1, r9
 8013250:	f7ed f84c 	bl	80002ec <__adddf3>
 8013254:	4622      	mov	r2, r4
 8013256:	462b      	mov	r3, r5
 8013258:	4680      	mov	r8, r0
 801325a:	4689      	mov	r9, r1
 801325c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013260:	f7ed f9fa 	bl	8000658 <__aeabi_dmul>
 8013264:	460b      	mov	r3, r1
 8013266:	4604      	mov	r4, r0
 8013268:	460d      	mov	r5, r1
 801326a:	4602      	mov	r2, r0
 801326c:	4649      	mov	r1, r9
 801326e:	4640      	mov	r0, r8
 8013270:	e9cd 4500 	strd	r4, r5, [sp]
 8013274:	f7ed f83a 	bl	80002ec <__adddf3>
 8013278:	4b1c      	ldr	r3, [pc, #112]	; (80132ec <__ieee754_pow+0x3c4>)
 801327a:	4299      	cmp	r1, r3
 801327c:	4606      	mov	r6, r0
 801327e:	460f      	mov	r7, r1
 8013280:	468b      	mov	fp, r1
 8013282:	f340 82f7 	ble.w	8013874 <__ieee754_pow+0x94c>
 8013286:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801328a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801328e:	4303      	orrs	r3, r0
 8013290:	f000 81ea 	beq.w	8013668 <__ieee754_pow+0x740>
 8013294:	a310      	add	r3, pc, #64	; (adr r3, 80132d8 <__ieee754_pow+0x3b0>)
 8013296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801329a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801329e:	f7ed f9db 	bl	8000658 <__aeabi_dmul>
 80132a2:	a30d      	add	r3, pc, #52	; (adr r3, 80132d8 <__ieee754_pow+0x3b0>)
 80132a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a8:	e6d5      	b.n	8013056 <__ieee754_pow+0x12e>
 80132aa:	bf00      	nop
 80132ac:	f3af 8000 	nop.w
 80132b0:	60000000 	.word	0x60000000
 80132b4:	3ff71547 	.word	0x3ff71547
 80132b8:	f85ddf44 	.word	0xf85ddf44
 80132bc:	3e54ae0b 	.word	0x3e54ae0b
 80132c0:	55555555 	.word	0x55555555
 80132c4:	3fd55555 	.word	0x3fd55555
 80132c8:	652b82fe 	.word	0x652b82fe
 80132cc:	3ff71547 	.word	0x3ff71547
 80132d0:	00000000 	.word	0x00000000
 80132d4:	bff00000 	.word	0xbff00000
 80132d8:	8800759c 	.word	0x8800759c
 80132dc:	7e37e43c 	.word	0x7e37e43c
 80132e0:	3ff00000 	.word	0x3ff00000
 80132e4:	3fd00000 	.word	0x3fd00000
 80132e8:	3fe00000 	.word	0x3fe00000
 80132ec:	408fffff 	.word	0x408fffff
 80132f0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80132f4:	f04f 0200 	mov.w	r2, #0
 80132f8:	da05      	bge.n	8013306 <__ieee754_pow+0x3de>
 80132fa:	4bd3      	ldr	r3, [pc, #844]	; (8013648 <__ieee754_pow+0x720>)
 80132fc:	f7ed f9ac 	bl	8000658 <__aeabi_dmul>
 8013300:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013304:	460c      	mov	r4, r1
 8013306:	1523      	asrs	r3, r4, #20
 8013308:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801330c:	4413      	add	r3, r2
 801330e:	9309      	str	r3, [sp, #36]	; 0x24
 8013310:	4bce      	ldr	r3, [pc, #824]	; (801364c <__ieee754_pow+0x724>)
 8013312:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013316:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801331a:	429c      	cmp	r4, r3
 801331c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013320:	dd08      	ble.n	8013334 <__ieee754_pow+0x40c>
 8013322:	4bcb      	ldr	r3, [pc, #812]	; (8013650 <__ieee754_pow+0x728>)
 8013324:	429c      	cmp	r4, r3
 8013326:	f340 815e 	ble.w	80135e6 <__ieee754_pow+0x6be>
 801332a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801332c:	3301      	adds	r3, #1
 801332e:	9309      	str	r3, [sp, #36]	; 0x24
 8013330:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013334:	f04f 0a00 	mov.w	sl, #0
 8013338:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801333c:	930c      	str	r3, [sp, #48]	; 0x30
 801333e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013340:	4bc4      	ldr	r3, [pc, #784]	; (8013654 <__ieee754_pow+0x72c>)
 8013342:	4413      	add	r3, r2
 8013344:	ed93 7b00 	vldr	d7, [r3]
 8013348:	4629      	mov	r1, r5
 801334a:	ec53 2b17 	vmov	r2, r3, d7
 801334e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013352:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013356:	f7ec ffc7 	bl	80002e8 <__aeabi_dsub>
 801335a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801335e:	4606      	mov	r6, r0
 8013360:	460f      	mov	r7, r1
 8013362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013366:	f7ec ffc1 	bl	80002ec <__adddf3>
 801336a:	4602      	mov	r2, r0
 801336c:	460b      	mov	r3, r1
 801336e:	2000      	movs	r0, #0
 8013370:	49b9      	ldr	r1, [pc, #740]	; (8013658 <__ieee754_pow+0x730>)
 8013372:	f7ed fa9b 	bl	80008ac <__aeabi_ddiv>
 8013376:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801337a:	4602      	mov	r2, r0
 801337c:	460b      	mov	r3, r1
 801337e:	4630      	mov	r0, r6
 8013380:	4639      	mov	r1, r7
 8013382:	f7ed f969 	bl	8000658 <__aeabi_dmul>
 8013386:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801338a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801338e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013392:	2300      	movs	r3, #0
 8013394:	9302      	str	r3, [sp, #8]
 8013396:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801339a:	106d      	asrs	r5, r5, #1
 801339c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80133a0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80133a4:	2200      	movs	r2, #0
 80133a6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80133aa:	4640      	mov	r0, r8
 80133ac:	4649      	mov	r1, r9
 80133ae:	4614      	mov	r4, r2
 80133b0:	461d      	mov	r5, r3
 80133b2:	f7ed f951 	bl	8000658 <__aeabi_dmul>
 80133b6:	4602      	mov	r2, r0
 80133b8:	460b      	mov	r3, r1
 80133ba:	4630      	mov	r0, r6
 80133bc:	4639      	mov	r1, r7
 80133be:	f7ec ff93 	bl	80002e8 <__aeabi_dsub>
 80133c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80133c6:	4606      	mov	r6, r0
 80133c8:	460f      	mov	r7, r1
 80133ca:	4620      	mov	r0, r4
 80133cc:	4629      	mov	r1, r5
 80133ce:	f7ec ff8b 	bl	80002e8 <__aeabi_dsub>
 80133d2:	4602      	mov	r2, r0
 80133d4:	460b      	mov	r3, r1
 80133d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80133da:	f7ec ff85 	bl	80002e8 <__aeabi_dsub>
 80133de:	4642      	mov	r2, r8
 80133e0:	464b      	mov	r3, r9
 80133e2:	f7ed f939 	bl	8000658 <__aeabi_dmul>
 80133e6:	4602      	mov	r2, r0
 80133e8:	460b      	mov	r3, r1
 80133ea:	4630      	mov	r0, r6
 80133ec:	4639      	mov	r1, r7
 80133ee:	f7ec ff7b 	bl	80002e8 <__aeabi_dsub>
 80133f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80133f6:	f7ed f92f 	bl	8000658 <__aeabi_dmul>
 80133fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80133fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013402:	4610      	mov	r0, r2
 8013404:	4619      	mov	r1, r3
 8013406:	f7ed f927 	bl	8000658 <__aeabi_dmul>
 801340a:	a37b      	add	r3, pc, #492	; (adr r3, 80135f8 <__ieee754_pow+0x6d0>)
 801340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013410:	4604      	mov	r4, r0
 8013412:	460d      	mov	r5, r1
 8013414:	f7ed f920 	bl	8000658 <__aeabi_dmul>
 8013418:	a379      	add	r3, pc, #484	; (adr r3, 8013600 <__ieee754_pow+0x6d8>)
 801341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801341e:	f7ec ff65 	bl	80002ec <__adddf3>
 8013422:	4622      	mov	r2, r4
 8013424:	462b      	mov	r3, r5
 8013426:	f7ed f917 	bl	8000658 <__aeabi_dmul>
 801342a:	a377      	add	r3, pc, #476	; (adr r3, 8013608 <__ieee754_pow+0x6e0>)
 801342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013430:	f7ec ff5c 	bl	80002ec <__adddf3>
 8013434:	4622      	mov	r2, r4
 8013436:	462b      	mov	r3, r5
 8013438:	f7ed f90e 	bl	8000658 <__aeabi_dmul>
 801343c:	a374      	add	r3, pc, #464	; (adr r3, 8013610 <__ieee754_pow+0x6e8>)
 801343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013442:	f7ec ff53 	bl	80002ec <__adddf3>
 8013446:	4622      	mov	r2, r4
 8013448:	462b      	mov	r3, r5
 801344a:	f7ed f905 	bl	8000658 <__aeabi_dmul>
 801344e:	a372      	add	r3, pc, #456	; (adr r3, 8013618 <__ieee754_pow+0x6f0>)
 8013450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013454:	f7ec ff4a 	bl	80002ec <__adddf3>
 8013458:	4622      	mov	r2, r4
 801345a:	462b      	mov	r3, r5
 801345c:	f7ed f8fc 	bl	8000658 <__aeabi_dmul>
 8013460:	a36f      	add	r3, pc, #444	; (adr r3, 8013620 <__ieee754_pow+0x6f8>)
 8013462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013466:	f7ec ff41 	bl	80002ec <__adddf3>
 801346a:	4622      	mov	r2, r4
 801346c:	4606      	mov	r6, r0
 801346e:	460f      	mov	r7, r1
 8013470:	462b      	mov	r3, r5
 8013472:	4620      	mov	r0, r4
 8013474:	4629      	mov	r1, r5
 8013476:	f7ed f8ef 	bl	8000658 <__aeabi_dmul>
 801347a:	4602      	mov	r2, r0
 801347c:	460b      	mov	r3, r1
 801347e:	4630      	mov	r0, r6
 8013480:	4639      	mov	r1, r7
 8013482:	f7ed f8e9 	bl	8000658 <__aeabi_dmul>
 8013486:	4642      	mov	r2, r8
 8013488:	4604      	mov	r4, r0
 801348a:	460d      	mov	r5, r1
 801348c:	464b      	mov	r3, r9
 801348e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013492:	f7ec ff2b 	bl	80002ec <__adddf3>
 8013496:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801349a:	f7ed f8dd 	bl	8000658 <__aeabi_dmul>
 801349e:	4622      	mov	r2, r4
 80134a0:	462b      	mov	r3, r5
 80134a2:	f7ec ff23 	bl	80002ec <__adddf3>
 80134a6:	4642      	mov	r2, r8
 80134a8:	4606      	mov	r6, r0
 80134aa:	460f      	mov	r7, r1
 80134ac:	464b      	mov	r3, r9
 80134ae:	4640      	mov	r0, r8
 80134b0:	4649      	mov	r1, r9
 80134b2:	f7ed f8d1 	bl	8000658 <__aeabi_dmul>
 80134b6:	2200      	movs	r2, #0
 80134b8:	4b68      	ldr	r3, [pc, #416]	; (801365c <__ieee754_pow+0x734>)
 80134ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80134be:	f7ec ff15 	bl	80002ec <__adddf3>
 80134c2:	4632      	mov	r2, r6
 80134c4:	463b      	mov	r3, r7
 80134c6:	f7ec ff11 	bl	80002ec <__adddf3>
 80134ca:	9802      	ldr	r0, [sp, #8]
 80134cc:	460d      	mov	r5, r1
 80134ce:	4604      	mov	r4, r0
 80134d0:	4602      	mov	r2, r0
 80134d2:	460b      	mov	r3, r1
 80134d4:	4640      	mov	r0, r8
 80134d6:	4649      	mov	r1, r9
 80134d8:	f7ed f8be 	bl	8000658 <__aeabi_dmul>
 80134dc:	2200      	movs	r2, #0
 80134de:	4680      	mov	r8, r0
 80134e0:	4689      	mov	r9, r1
 80134e2:	4b5e      	ldr	r3, [pc, #376]	; (801365c <__ieee754_pow+0x734>)
 80134e4:	4620      	mov	r0, r4
 80134e6:	4629      	mov	r1, r5
 80134e8:	f7ec fefe 	bl	80002e8 <__aeabi_dsub>
 80134ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80134f0:	f7ec fefa 	bl	80002e8 <__aeabi_dsub>
 80134f4:	4602      	mov	r2, r0
 80134f6:	460b      	mov	r3, r1
 80134f8:	4630      	mov	r0, r6
 80134fa:	4639      	mov	r1, r7
 80134fc:	f7ec fef4 	bl	80002e8 <__aeabi_dsub>
 8013500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013504:	f7ed f8a8 	bl	8000658 <__aeabi_dmul>
 8013508:	4622      	mov	r2, r4
 801350a:	4606      	mov	r6, r0
 801350c:	460f      	mov	r7, r1
 801350e:	462b      	mov	r3, r5
 8013510:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013514:	f7ed f8a0 	bl	8000658 <__aeabi_dmul>
 8013518:	4602      	mov	r2, r0
 801351a:	460b      	mov	r3, r1
 801351c:	4630      	mov	r0, r6
 801351e:	4639      	mov	r1, r7
 8013520:	f7ec fee4 	bl	80002ec <__adddf3>
 8013524:	4606      	mov	r6, r0
 8013526:	460f      	mov	r7, r1
 8013528:	4602      	mov	r2, r0
 801352a:	460b      	mov	r3, r1
 801352c:	4640      	mov	r0, r8
 801352e:	4649      	mov	r1, r9
 8013530:	f7ec fedc 	bl	80002ec <__adddf3>
 8013534:	9802      	ldr	r0, [sp, #8]
 8013536:	a33c      	add	r3, pc, #240	; (adr r3, 8013628 <__ieee754_pow+0x700>)
 8013538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801353c:	4604      	mov	r4, r0
 801353e:	460d      	mov	r5, r1
 8013540:	f7ed f88a 	bl	8000658 <__aeabi_dmul>
 8013544:	4642      	mov	r2, r8
 8013546:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801354a:	464b      	mov	r3, r9
 801354c:	4620      	mov	r0, r4
 801354e:	4629      	mov	r1, r5
 8013550:	f7ec feca 	bl	80002e8 <__aeabi_dsub>
 8013554:	4602      	mov	r2, r0
 8013556:	460b      	mov	r3, r1
 8013558:	4630      	mov	r0, r6
 801355a:	4639      	mov	r1, r7
 801355c:	f7ec fec4 	bl	80002e8 <__aeabi_dsub>
 8013560:	a333      	add	r3, pc, #204	; (adr r3, 8013630 <__ieee754_pow+0x708>)
 8013562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013566:	f7ed f877 	bl	8000658 <__aeabi_dmul>
 801356a:	a333      	add	r3, pc, #204	; (adr r3, 8013638 <__ieee754_pow+0x710>)
 801356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013570:	4606      	mov	r6, r0
 8013572:	460f      	mov	r7, r1
 8013574:	4620      	mov	r0, r4
 8013576:	4629      	mov	r1, r5
 8013578:	f7ed f86e 	bl	8000658 <__aeabi_dmul>
 801357c:	4602      	mov	r2, r0
 801357e:	460b      	mov	r3, r1
 8013580:	4630      	mov	r0, r6
 8013582:	4639      	mov	r1, r7
 8013584:	f7ec feb2 	bl	80002ec <__adddf3>
 8013588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801358a:	4b35      	ldr	r3, [pc, #212]	; (8013660 <__ieee754_pow+0x738>)
 801358c:	4413      	add	r3, r2
 801358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013592:	f7ec feab 	bl	80002ec <__adddf3>
 8013596:	4604      	mov	r4, r0
 8013598:	9809      	ldr	r0, [sp, #36]	; 0x24
 801359a:	460d      	mov	r5, r1
 801359c:	f7ec fff2 	bl	8000584 <__aeabi_i2d>
 80135a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80135a2:	4b30      	ldr	r3, [pc, #192]	; (8013664 <__ieee754_pow+0x73c>)
 80135a4:	4413      	add	r3, r2
 80135a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80135aa:	4606      	mov	r6, r0
 80135ac:	460f      	mov	r7, r1
 80135ae:	4622      	mov	r2, r4
 80135b0:	462b      	mov	r3, r5
 80135b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135b6:	f7ec fe99 	bl	80002ec <__adddf3>
 80135ba:	4642      	mov	r2, r8
 80135bc:	464b      	mov	r3, r9
 80135be:	f7ec fe95 	bl	80002ec <__adddf3>
 80135c2:	4632      	mov	r2, r6
 80135c4:	463b      	mov	r3, r7
 80135c6:	f7ec fe91 	bl	80002ec <__adddf3>
 80135ca:	9802      	ldr	r0, [sp, #8]
 80135cc:	4632      	mov	r2, r6
 80135ce:	463b      	mov	r3, r7
 80135d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80135d4:	f7ec fe88 	bl	80002e8 <__aeabi_dsub>
 80135d8:	4642      	mov	r2, r8
 80135da:	464b      	mov	r3, r9
 80135dc:	f7ec fe84 	bl	80002e8 <__aeabi_dsub>
 80135e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80135e4:	e607      	b.n	80131f6 <__ieee754_pow+0x2ce>
 80135e6:	f04f 0a01 	mov.w	sl, #1
 80135ea:	e6a5      	b.n	8013338 <__ieee754_pow+0x410>
 80135ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8013640 <__ieee754_pow+0x718>
 80135f0:	e613      	b.n	801321a <__ieee754_pow+0x2f2>
 80135f2:	bf00      	nop
 80135f4:	f3af 8000 	nop.w
 80135f8:	4a454eef 	.word	0x4a454eef
 80135fc:	3fca7e28 	.word	0x3fca7e28
 8013600:	93c9db65 	.word	0x93c9db65
 8013604:	3fcd864a 	.word	0x3fcd864a
 8013608:	a91d4101 	.word	0xa91d4101
 801360c:	3fd17460 	.word	0x3fd17460
 8013610:	518f264d 	.word	0x518f264d
 8013614:	3fd55555 	.word	0x3fd55555
 8013618:	db6fabff 	.word	0xdb6fabff
 801361c:	3fdb6db6 	.word	0x3fdb6db6
 8013620:	33333303 	.word	0x33333303
 8013624:	3fe33333 	.word	0x3fe33333
 8013628:	e0000000 	.word	0xe0000000
 801362c:	3feec709 	.word	0x3feec709
 8013630:	dc3a03fd 	.word	0xdc3a03fd
 8013634:	3feec709 	.word	0x3feec709
 8013638:	145b01f5 	.word	0x145b01f5
 801363c:	be3e2fe0 	.word	0xbe3e2fe0
 8013640:	00000000 	.word	0x00000000
 8013644:	3ff00000 	.word	0x3ff00000
 8013648:	43400000 	.word	0x43400000
 801364c:	0003988e 	.word	0x0003988e
 8013650:	000bb679 	.word	0x000bb679
 8013654:	08015448 	.word	0x08015448
 8013658:	3ff00000 	.word	0x3ff00000
 801365c:	40080000 	.word	0x40080000
 8013660:	08015468 	.word	0x08015468
 8013664:	08015458 	.word	0x08015458
 8013668:	a3b4      	add	r3, pc, #720	; (adr r3, 801393c <__ieee754_pow+0xa14>)
 801366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801366e:	4640      	mov	r0, r8
 8013670:	4649      	mov	r1, r9
 8013672:	f7ec fe3b 	bl	80002ec <__adddf3>
 8013676:	4622      	mov	r2, r4
 8013678:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801367c:	462b      	mov	r3, r5
 801367e:	4630      	mov	r0, r6
 8013680:	4639      	mov	r1, r7
 8013682:	f7ec fe31 	bl	80002e8 <__aeabi_dsub>
 8013686:	4602      	mov	r2, r0
 8013688:	460b      	mov	r3, r1
 801368a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801368e:	f7ed fa73 	bl	8000b78 <__aeabi_dcmpgt>
 8013692:	2800      	cmp	r0, #0
 8013694:	f47f adfe 	bne.w	8013294 <__ieee754_pow+0x36c>
 8013698:	4aa3      	ldr	r2, [pc, #652]	; (8013928 <__ieee754_pow+0xa00>)
 801369a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801369e:	4293      	cmp	r3, r2
 80136a0:	f340 810a 	ble.w	80138b8 <__ieee754_pow+0x990>
 80136a4:	151b      	asrs	r3, r3, #20
 80136a6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80136aa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80136ae:	fa4a f303 	asr.w	r3, sl, r3
 80136b2:	445b      	add	r3, fp
 80136b4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80136b8:	4e9c      	ldr	r6, [pc, #624]	; (801392c <__ieee754_pow+0xa04>)
 80136ba:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80136be:	4116      	asrs	r6, r2
 80136c0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80136c4:	2000      	movs	r0, #0
 80136c6:	ea23 0106 	bic.w	r1, r3, r6
 80136ca:	f1c2 0214 	rsb	r2, r2, #20
 80136ce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80136d2:	fa4a fa02 	asr.w	sl, sl, r2
 80136d6:	f1bb 0f00 	cmp.w	fp, #0
 80136da:	4602      	mov	r2, r0
 80136dc:	460b      	mov	r3, r1
 80136de:	4620      	mov	r0, r4
 80136e0:	4629      	mov	r1, r5
 80136e2:	bfb8      	it	lt
 80136e4:	f1ca 0a00 	rsblt	sl, sl, #0
 80136e8:	f7ec fdfe 	bl	80002e8 <__aeabi_dsub>
 80136ec:	e9cd 0100 	strd	r0, r1, [sp]
 80136f0:	4642      	mov	r2, r8
 80136f2:	464b      	mov	r3, r9
 80136f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136f8:	f7ec fdf8 	bl	80002ec <__adddf3>
 80136fc:	2000      	movs	r0, #0
 80136fe:	a378      	add	r3, pc, #480	; (adr r3, 80138e0 <__ieee754_pow+0x9b8>)
 8013700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013704:	4604      	mov	r4, r0
 8013706:	460d      	mov	r5, r1
 8013708:	f7ec ffa6 	bl	8000658 <__aeabi_dmul>
 801370c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013710:	4606      	mov	r6, r0
 8013712:	460f      	mov	r7, r1
 8013714:	4620      	mov	r0, r4
 8013716:	4629      	mov	r1, r5
 8013718:	f7ec fde6 	bl	80002e8 <__aeabi_dsub>
 801371c:	4602      	mov	r2, r0
 801371e:	460b      	mov	r3, r1
 8013720:	4640      	mov	r0, r8
 8013722:	4649      	mov	r1, r9
 8013724:	f7ec fde0 	bl	80002e8 <__aeabi_dsub>
 8013728:	a36f      	add	r3, pc, #444	; (adr r3, 80138e8 <__ieee754_pow+0x9c0>)
 801372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801372e:	f7ec ff93 	bl	8000658 <__aeabi_dmul>
 8013732:	a36f      	add	r3, pc, #444	; (adr r3, 80138f0 <__ieee754_pow+0x9c8>)
 8013734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013738:	4680      	mov	r8, r0
 801373a:	4689      	mov	r9, r1
 801373c:	4620      	mov	r0, r4
 801373e:	4629      	mov	r1, r5
 8013740:	f7ec ff8a 	bl	8000658 <__aeabi_dmul>
 8013744:	4602      	mov	r2, r0
 8013746:	460b      	mov	r3, r1
 8013748:	4640      	mov	r0, r8
 801374a:	4649      	mov	r1, r9
 801374c:	f7ec fdce 	bl	80002ec <__adddf3>
 8013750:	4604      	mov	r4, r0
 8013752:	460d      	mov	r5, r1
 8013754:	4602      	mov	r2, r0
 8013756:	460b      	mov	r3, r1
 8013758:	4630      	mov	r0, r6
 801375a:	4639      	mov	r1, r7
 801375c:	f7ec fdc6 	bl	80002ec <__adddf3>
 8013760:	4632      	mov	r2, r6
 8013762:	463b      	mov	r3, r7
 8013764:	4680      	mov	r8, r0
 8013766:	4689      	mov	r9, r1
 8013768:	f7ec fdbe 	bl	80002e8 <__aeabi_dsub>
 801376c:	4602      	mov	r2, r0
 801376e:	460b      	mov	r3, r1
 8013770:	4620      	mov	r0, r4
 8013772:	4629      	mov	r1, r5
 8013774:	f7ec fdb8 	bl	80002e8 <__aeabi_dsub>
 8013778:	4642      	mov	r2, r8
 801377a:	4606      	mov	r6, r0
 801377c:	460f      	mov	r7, r1
 801377e:	464b      	mov	r3, r9
 8013780:	4640      	mov	r0, r8
 8013782:	4649      	mov	r1, r9
 8013784:	f7ec ff68 	bl	8000658 <__aeabi_dmul>
 8013788:	a35b      	add	r3, pc, #364	; (adr r3, 80138f8 <__ieee754_pow+0x9d0>)
 801378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801378e:	4604      	mov	r4, r0
 8013790:	460d      	mov	r5, r1
 8013792:	f7ec ff61 	bl	8000658 <__aeabi_dmul>
 8013796:	a35a      	add	r3, pc, #360	; (adr r3, 8013900 <__ieee754_pow+0x9d8>)
 8013798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801379c:	f7ec fda4 	bl	80002e8 <__aeabi_dsub>
 80137a0:	4622      	mov	r2, r4
 80137a2:	462b      	mov	r3, r5
 80137a4:	f7ec ff58 	bl	8000658 <__aeabi_dmul>
 80137a8:	a357      	add	r3, pc, #348	; (adr r3, 8013908 <__ieee754_pow+0x9e0>)
 80137aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ae:	f7ec fd9d 	bl	80002ec <__adddf3>
 80137b2:	4622      	mov	r2, r4
 80137b4:	462b      	mov	r3, r5
 80137b6:	f7ec ff4f 	bl	8000658 <__aeabi_dmul>
 80137ba:	a355      	add	r3, pc, #340	; (adr r3, 8013910 <__ieee754_pow+0x9e8>)
 80137bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c0:	f7ec fd92 	bl	80002e8 <__aeabi_dsub>
 80137c4:	4622      	mov	r2, r4
 80137c6:	462b      	mov	r3, r5
 80137c8:	f7ec ff46 	bl	8000658 <__aeabi_dmul>
 80137cc:	a352      	add	r3, pc, #328	; (adr r3, 8013918 <__ieee754_pow+0x9f0>)
 80137ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137d2:	f7ec fd8b 	bl	80002ec <__adddf3>
 80137d6:	4622      	mov	r2, r4
 80137d8:	462b      	mov	r3, r5
 80137da:	f7ec ff3d 	bl	8000658 <__aeabi_dmul>
 80137de:	4602      	mov	r2, r0
 80137e0:	460b      	mov	r3, r1
 80137e2:	4640      	mov	r0, r8
 80137e4:	4649      	mov	r1, r9
 80137e6:	f7ec fd7f 	bl	80002e8 <__aeabi_dsub>
 80137ea:	4604      	mov	r4, r0
 80137ec:	460d      	mov	r5, r1
 80137ee:	4602      	mov	r2, r0
 80137f0:	460b      	mov	r3, r1
 80137f2:	4640      	mov	r0, r8
 80137f4:	4649      	mov	r1, r9
 80137f6:	f7ec ff2f 	bl	8000658 <__aeabi_dmul>
 80137fa:	2200      	movs	r2, #0
 80137fc:	e9cd 0100 	strd	r0, r1, [sp]
 8013800:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013804:	4620      	mov	r0, r4
 8013806:	4629      	mov	r1, r5
 8013808:	f7ec fd6e 	bl	80002e8 <__aeabi_dsub>
 801380c:	4602      	mov	r2, r0
 801380e:	460b      	mov	r3, r1
 8013810:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013814:	f7ed f84a 	bl	80008ac <__aeabi_ddiv>
 8013818:	4632      	mov	r2, r6
 801381a:	4604      	mov	r4, r0
 801381c:	460d      	mov	r5, r1
 801381e:	463b      	mov	r3, r7
 8013820:	4640      	mov	r0, r8
 8013822:	4649      	mov	r1, r9
 8013824:	f7ec ff18 	bl	8000658 <__aeabi_dmul>
 8013828:	4632      	mov	r2, r6
 801382a:	463b      	mov	r3, r7
 801382c:	f7ec fd5e 	bl	80002ec <__adddf3>
 8013830:	4602      	mov	r2, r0
 8013832:	460b      	mov	r3, r1
 8013834:	4620      	mov	r0, r4
 8013836:	4629      	mov	r1, r5
 8013838:	f7ec fd56 	bl	80002e8 <__aeabi_dsub>
 801383c:	4642      	mov	r2, r8
 801383e:	464b      	mov	r3, r9
 8013840:	f7ec fd52 	bl	80002e8 <__aeabi_dsub>
 8013844:	4602      	mov	r2, r0
 8013846:	460b      	mov	r3, r1
 8013848:	2000      	movs	r0, #0
 801384a:	4939      	ldr	r1, [pc, #228]	; (8013930 <__ieee754_pow+0xa08>)
 801384c:	f7ec fd4c 	bl	80002e8 <__aeabi_dsub>
 8013850:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8013854:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013858:	4602      	mov	r2, r0
 801385a:	460b      	mov	r3, r1
 801385c:	da2f      	bge.n	80138be <__ieee754_pow+0x996>
 801385e:	4650      	mov	r0, sl
 8013860:	ec43 2b10 	vmov	d0, r2, r3
 8013864:	f000 f9c0 	bl	8013be8 <scalbn>
 8013868:	ec51 0b10 	vmov	r0, r1, d0
 801386c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013870:	f7ff bbf1 	b.w	8013056 <__ieee754_pow+0x12e>
 8013874:	4b2f      	ldr	r3, [pc, #188]	; (8013934 <__ieee754_pow+0xa0c>)
 8013876:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801387a:	429e      	cmp	r6, r3
 801387c:	f77f af0c 	ble.w	8013698 <__ieee754_pow+0x770>
 8013880:	4b2d      	ldr	r3, [pc, #180]	; (8013938 <__ieee754_pow+0xa10>)
 8013882:	440b      	add	r3, r1
 8013884:	4303      	orrs	r3, r0
 8013886:	d00b      	beq.n	80138a0 <__ieee754_pow+0x978>
 8013888:	a325      	add	r3, pc, #148	; (adr r3, 8013920 <__ieee754_pow+0x9f8>)
 801388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801388e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013892:	f7ec fee1 	bl	8000658 <__aeabi_dmul>
 8013896:	a322      	add	r3, pc, #136	; (adr r3, 8013920 <__ieee754_pow+0x9f8>)
 8013898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801389c:	f7ff bbdb 	b.w	8013056 <__ieee754_pow+0x12e>
 80138a0:	4622      	mov	r2, r4
 80138a2:	462b      	mov	r3, r5
 80138a4:	f7ec fd20 	bl	80002e8 <__aeabi_dsub>
 80138a8:	4642      	mov	r2, r8
 80138aa:	464b      	mov	r3, r9
 80138ac:	f7ed f95a 	bl	8000b64 <__aeabi_dcmpge>
 80138b0:	2800      	cmp	r0, #0
 80138b2:	f43f aef1 	beq.w	8013698 <__ieee754_pow+0x770>
 80138b6:	e7e7      	b.n	8013888 <__ieee754_pow+0x960>
 80138b8:	f04f 0a00 	mov.w	sl, #0
 80138bc:	e718      	b.n	80136f0 <__ieee754_pow+0x7c8>
 80138be:	4621      	mov	r1, r4
 80138c0:	e7d4      	b.n	801386c <__ieee754_pow+0x944>
 80138c2:	2000      	movs	r0, #0
 80138c4:	491a      	ldr	r1, [pc, #104]	; (8013930 <__ieee754_pow+0xa08>)
 80138c6:	f7ff bb8f 	b.w	8012fe8 <__ieee754_pow+0xc0>
 80138ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138ce:	f7ff bb8b 	b.w	8012fe8 <__ieee754_pow+0xc0>
 80138d2:	4630      	mov	r0, r6
 80138d4:	4639      	mov	r1, r7
 80138d6:	f7ff bb87 	b.w	8012fe8 <__ieee754_pow+0xc0>
 80138da:	4693      	mov	fp, r2
 80138dc:	f7ff bb98 	b.w	8013010 <__ieee754_pow+0xe8>
 80138e0:	00000000 	.word	0x00000000
 80138e4:	3fe62e43 	.word	0x3fe62e43
 80138e8:	fefa39ef 	.word	0xfefa39ef
 80138ec:	3fe62e42 	.word	0x3fe62e42
 80138f0:	0ca86c39 	.word	0x0ca86c39
 80138f4:	be205c61 	.word	0xbe205c61
 80138f8:	72bea4d0 	.word	0x72bea4d0
 80138fc:	3e663769 	.word	0x3e663769
 8013900:	c5d26bf1 	.word	0xc5d26bf1
 8013904:	3ebbbd41 	.word	0x3ebbbd41
 8013908:	af25de2c 	.word	0xaf25de2c
 801390c:	3f11566a 	.word	0x3f11566a
 8013910:	16bebd93 	.word	0x16bebd93
 8013914:	3f66c16c 	.word	0x3f66c16c
 8013918:	5555553e 	.word	0x5555553e
 801391c:	3fc55555 	.word	0x3fc55555
 8013920:	c2f8f359 	.word	0xc2f8f359
 8013924:	01a56e1f 	.word	0x01a56e1f
 8013928:	3fe00000 	.word	0x3fe00000
 801392c:	000fffff 	.word	0x000fffff
 8013930:	3ff00000 	.word	0x3ff00000
 8013934:	4090cbff 	.word	0x4090cbff
 8013938:	3f6f3400 	.word	0x3f6f3400
 801393c:	652b82fe 	.word	0x652b82fe
 8013940:	3c971547 	.word	0x3c971547

08013944 <__ieee754_sqrt>:
 8013944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013948:	4955      	ldr	r1, [pc, #340]	; (8013aa0 <__ieee754_sqrt+0x15c>)
 801394a:	ec55 4b10 	vmov	r4, r5, d0
 801394e:	43a9      	bics	r1, r5
 8013950:	462b      	mov	r3, r5
 8013952:	462a      	mov	r2, r5
 8013954:	d112      	bne.n	801397c <__ieee754_sqrt+0x38>
 8013956:	ee10 2a10 	vmov	r2, s0
 801395a:	ee10 0a10 	vmov	r0, s0
 801395e:	4629      	mov	r1, r5
 8013960:	f7ec fe7a 	bl	8000658 <__aeabi_dmul>
 8013964:	4602      	mov	r2, r0
 8013966:	460b      	mov	r3, r1
 8013968:	4620      	mov	r0, r4
 801396a:	4629      	mov	r1, r5
 801396c:	f7ec fcbe 	bl	80002ec <__adddf3>
 8013970:	4604      	mov	r4, r0
 8013972:	460d      	mov	r5, r1
 8013974:	ec45 4b10 	vmov	d0, r4, r5
 8013978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801397c:	2d00      	cmp	r5, #0
 801397e:	ee10 0a10 	vmov	r0, s0
 8013982:	4621      	mov	r1, r4
 8013984:	dc0f      	bgt.n	80139a6 <__ieee754_sqrt+0x62>
 8013986:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801398a:	4330      	orrs	r0, r6
 801398c:	d0f2      	beq.n	8013974 <__ieee754_sqrt+0x30>
 801398e:	b155      	cbz	r5, 80139a6 <__ieee754_sqrt+0x62>
 8013990:	ee10 2a10 	vmov	r2, s0
 8013994:	4620      	mov	r0, r4
 8013996:	4629      	mov	r1, r5
 8013998:	f7ec fca6 	bl	80002e8 <__aeabi_dsub>
 801399c:	4602      	mov	r2, r0
 801399e:	460b      	mov	r3, r1
 80139a0:	f7ec ff84 	bl	80008ac <__aeabi_ddiv>
 80139a4:	e7e4      	b.n	8013970 <__ieee754_sqrt+0x2c>
 80139a6:	151b      	asrs	r3, r3, #20
 80139a8:	d073      	beq.n	8013a92 <__ieee754_sqrt+0x14e>
 80139aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80139ae:	07dd      	lsls	r5, r3, #31
 80139b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80139b4:	bf48      	it	mi
 80139b6:	0fc8      	lsrmi	r0, r1, #31
 80139b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80139bc:	bf44      	itt	mi
 80139be:	0049      	lslmi	r1, r1, #1
 80139c0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80139c4:	2500      	movs	r5, #0
 80139c6:	1058      	asrs	r0, r3, #1
 80139c8:	0fcb      	lsrs	r3, r1, #31
 80139ca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80139ce:	0049      	lsls	r1, r1, #1
 80139d0:	2316      	movs	r3, #22
 80139d2:	462c      	mov	r4, r5
 80139d4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80139d8:	19a7      	adds	r7, r4, r6
 80139da:	4297      	cmp	r7, r2
 80139dc:	bfde      	ittt	le
 80139de:	19bc      	addle	r4, r7, r6
 80139e0:	1bd2      	suble	r2, r2, r7
 80139e2:	19ad      	addle	r5, r5, r6
 80139e4:	0fcf      	lsrs	r7, r1, #31
 80139e6:	3b01      	subs	r3, #1
 80139e8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80139ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80139f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80139f4:	d1f0      	bne.n	80139d8 <__ieee754_sqrt+0x94>
 80139f6:	f04f 0c20 	mov.w	ip, #32
 80139fa:	469e      	mov	lr, r3
 80139fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013a00:	42a2      	cmp	r2, r4
 8013a02:	eb06 070e 	add.w	r7, r6, lr
 8013a06:	dc02      	bgt.n	8013a0e <__ieee754_sqrt+0xca>
 8013a08:	d112      	bne.n	8013a30 <__ieee754_sqrt+0xec>
 8013a0a:	428f      	cmp	r7, r1
 8013a0c:	d810      	bhi.n	8013a30 <__ieee754_sqrt+0xec>
 8013a0e:	2f00      	cmp	r7, #0
 8013a10:	eb07 0e06 	add.w	lr, r7, r6
 8013a14:	da42      	bge.n	8013a9c <__ieee754_sqrt+0x158>
 8013a16:	f1be 0f00 	cmp.w	lr, #0
 8013a1a:	db3f      	blt.n	8013a9c <__ieee754_sqrt+0x158>
 8013a1c:	f104 0801 	add.w	r8, r4, #1
 8013a20:	1b12      	subs	r2, r2, r4
 8013a22:	428f      	cmp	r7, r1
 8013a24:	bf88      	it	hi
 8013a26:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013a2a:	1bc9      	subs	r1, r1, r7
 8013a2c:	4433      	add	r3, r6
 8013a2e:	4644      	mov	r4, r8
 8013a30:	0052      	lsls	r2, r2, #1
 8013a32:	f1bc 0c01 	subs.w	ip, ip, #1
 8013a36:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8013a3a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013a3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013a42:	d1dd      	bne.n	8013a00 <__ieee754_sqrt+0xbc>
 8013a44:	430a      	orrs	r2, r1
 8013a46:	d006      	beq.n	8013a56 <__ieee754_sqrt+0x112>
 8013a48:	1c5c      	adds	r4, r3, #1
 8013a4a:	bf13      	iteet	ne
 8013a4c:	3301      	addne	r3, #1
 8013a4e:	3501      	addeq	r5, #1
 8013a50:	4663      	moveq	r3, ip
 8013a52:	f023 0301 	bicne.w	r3, r3, #1
 8013a56:	106a      	asrs	r2, r5, #1
 8013a58:	085b      	lsrs	r3, r3, #1
 8013a5a:	07e9      	lsls	r1, r5, #31
 8013a5c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013a60:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013a64:	bf48      	it	mi
 8013a66:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8013a6a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8013a6e:	461c      	mov	r4, r3
 8013a70:	e780      	b.n	8013974 <__ieee754_sqrt+0x30>
 8013a72:	0aca      	lsrs	r2, r1, #11
 8013a74:	3815      	subs	r0, #21
 8013a76:	0549      	lsls	r1, r1, #21
 8013a78:	2a00      	cmp	r2, #0
 8013a7a:	d0fa      	beq.n	8013a72 <__ieee754_sqrt+0x12e>
 8013a7c:	02d6      	lsls	r6, r2, #11
 8013a7e:	d50a      	bpl.n	8013a96 <__ieee754_sqrt+0x152>
 8013a80:	f1c3 0420 	rsb	r4, r3, #32
 8013a84:	fa21 f404 	lsr.w	r4, r1, r4
 8013a88:	1e5d      	subs	r5, r3, #1
 8013a8a:	4099      	lsls	r1, r3
 8013a8c:	4322      	orrs	r2, r4
 8013a8e:	1b43      	subs	r3, r0, r5
 8013a90:	e78b      	b.n	80139aa <__ieee754_sqrt+0x66>
 8013a92:	4618      	mov	r0, r3
 8013a94:	e7f0      	b.n	8013a78 <__ieee754_sqrt+0x134>
 8013a96:	0052      	lsls	r2, r2, #1
 8013a98:	3301      	adds	r3, #1
 8013a9a:	e7ef      	b.n	8013a7c <__ieee754_sqrt+0x138>
 8013a9c:	46a0      	mov	r8, r4
 8013a9e:	e7bf      	b.n	8013a20 <__ieee754_sqrt+0xdc>
 8013aa0:	7ff00000 	.word	0x7ff00000

08013aa4 <fabs>:
 8013aa4:	ec51 0b10 	vmov	r0, r1, d0
 8013aa8:	ee10 2a10 	vmov	r2, s0
 8013aac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013ab0:	ec43 2b10 	vmov	d0, r2, r3
 8013ab4:	4770      	bx	lr

08013ab6 <finite>:
 8013ab6:	ee10 3a90 	vmov	r3, s1
 8013aba:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8013abe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8013ac2:	0fc0      	lsrs	r0, r0, #31
 8013ac4:	4770      	bx	lr

08013ac6 <matherr>:
 8013ac6:	2000      	movs	r0, #0
 8013ac8:	4770      	bx	lr
 8013aca:	0000      	movs	r0, r0
 8013acc:	0000      	movs	r0, r0
	...

08013ad0 <nan>:
 8013ad0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013ad8 <nan+0x8>
 8013ad4:	4770      	bx	lr
 8013ad6:	bf00      	nop
 8013ad8:	00000000 	.word	0x00000000
 8013adc:	7ff80000 	.word	0x7ff80000

08013ae0 <rint>:
 8013ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ae2:	ec51 0b10 	vmov	r0, r1, d0
 8013ae6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013aea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8013aee:	2e13      	cmp	r6, #19
 8013af0:	460b      	mov	r3, r1
 8013af2:	ee10 4a10 	vmov	r4, s0
 8013af6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8013afa:	dc56      	bgt.n	8013baa <rint+0xca>
 8013afc:	2e00      	cmp	r6, #0
 8013afe:	da2b      	bge.n	8013b58 <rint+0x78>
 8013b00:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8013b04:	4302      	orrs	r2, r0
 8013b06:	d023      	beq.n	8013b50 <rint+0x70>
 8013b08:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8013b0c:	4302      	orrs	r2, r0
 8013b0e:	4254      	negs	r4, r2
 8013b10:	4314      	orrs	r4, r2
 8013b12:	0c4b      	lsrs	r3, r1, #17
 8013b14:	0b24      	lsrs	r4, r4, #12
 8013b16:	045b      	lsls	r3, r3, #17
 8013b18:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8013b1c:	ea44 0103 	orr.w	r1, r4, r3
 8013b20:	460b      	mov	r3, r1
 8013b22:	492f      	ldr	r1, [pc, #188]	; (8013be0 <rint+0x100>)
 8013b24:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8013b28:	e9d1 6700 	ldrd	r6, r7, [r1]
 8013b2c:	4602      	mov	r2, r0
 8013b2e:	4639      	mov	r1, r7
 8013b30:	4630      	mov	r0, r6
 8013b32:	f7ec fbdb 	bl	80002ec <__adddf3>
 8013b36:	e9cd 0100 	strd	r0, r1, [sp]
 8013b3a:	463b      	mov	r3, r7
 8013b3c:	4632      	mov	r2, r6
 8013b3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b42:	f7ec fbd1 	bl	80002e8 <__aeabi_dsub>
 8013b46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013b4a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8013b4e:	4639      	mov	r1, r7
 8013b50:	ec41 0b10 	vmov	d0, r0, r1
 8013b54:	b003      	add	sp, #12
 8013b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b58:	4a22      	ldr	r2, [pc, #136]	; (8013be4 <rint+0x104>)
 8013b5a:	4132      	asrs	r2, r6
 8013b5c:	ea01 0702 	and.w	r7, r1, r2
 8013b60:	4307      	orrs	r7, r0
 8013b62:	d0f5      	beq.n	8013b50 <rint+0x70>
 8013b64:	0852      	lsrs	r2, r2, #1
 8013b66:	4011      	ands	r1, r2
 8013b68:	430c      	orrs	r4, r1
 8013b6a:	d00b      	beq.n	8013b84 <rint+0xa4>
 8013b6c:	ea23 0202 	bic.w	r2, r3, r2
 8013b70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013b74:	2e13      	cmp	r6, #19
 8013b76:	fa43 f306 	asr.w	r3, r3, r6
 8013b7a:	bf0c      	ite	eq
 8013b7c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8013b80:	2400      	movne	r4, #0
 8013b82:	4313      	orrs	r3, r2
 8013b84:	4916      	ldr	r1, [pc, #88]	; (8013be0 <rint+0x100>)
 8013b86:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8013b8a:	4622      	mov	r2, r4
 8013b8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013b90:	4620      	mov	r0, r4
 8013b92:	4629      	mov	r1, r5
 8013b94:	f7ec fbaa 	bl	80002ec <__adddf3>
 8013b98:	e9cd 0100 	strd	r0, r1, [sp]
 8013b9c:	4622      	mov	r2, r4
 8013b9e:	462b      	mov	r3, r5
 8013ba0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ba4:	f7ec fba0 	bl	80002e8 <__aeabi_dsub>
 8013ba8:	e7d2      	b.n	8013b50 <rint+0x70>
 8013baa:	2e33      	cmp	r6, #51	; 0x33
 8013bac:	dd07      	ble.n	8013bbe <rint+0xde>
 8013bae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013bb2:	d1cd      	bne.n	8013b50 <rint+0x70>
 8013bb4:	ee10 2a10 	vmov	r2, s0
 8013bb8:	f7ec fb98 	bl	80002ec <__adddf3>
 8013bbc:	e7c8      	b.n	8013b50 <rint+0x70>
 8013bbe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8013bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8013bc6:	40f2      	lsrs	r2, r6
 8013bc8:	4210      	tst	r0, r2
 8013bca:	d0c1      	beq.n	8013b50 <rint+0x70>
 8013bcc:	0852      	lsrs	r2, r2, #1
 8013bce:	4210      	tst	r0, r2
 8013bd0:	bf1f      	itttt	ne
 8013bd2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8013bd6:	ea20 0202 	bicne.w	r2, r0, r2
 8013bda:	4134      	asrne	r4, r6
 8013bdc:	4314      	orrne	r4, r2
 8013bde:	e7d1      	b.n	8013b84 <rint+0xa4>
 8013be0:	08015478 	.word	0x08015478
 8013be4:	000fffff 	.word	0x000fffff

08013be8 <scalbn>:
 8013be8:	b570      	push	{r4, r5, r6, lr}
 8013bea:	ec55 4b10 	vmov	r4, r5, d0
 8013bee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013bf2:	4606      	mov	r6, r0
 8013bf4:	462b      	mov	r3, r5
 8013bf6:	b9aa      	cbnz	r2, 8013c24 <scalbn+0x3c>
 8013bf8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013bfc:	4323      	orrs	r3, r4
 8013bfe:	d03b      	beq.n	8013c78 <scalbn+0x90>
 8013c00:	4b31      	ldr	r3, [pc, #196]	; (8013cc8 <scalbn+0xe0>)
 8013c02:	4629      	mov	r1, r5
 8013c04:	2200      	movs	r2, #0
 8013c06:	ee10 0a10 	vmov	r0, s0
 8013c0a:	f7ec fd25 	bl	8000658 <__aeabi_dmul>
 8013c0e:	4b2f      	ldr	r3, [pc, #188]	; (8013ccc <scalbn+0xe4>)
 8013c10:	429e      	cmp	r6, r3
 8013c12:	4604      	mov	r4, r0
 8013c14:	460d      	mov	r5, r1
 8013c16:	da12      	bge.n	8013c3e <scalbn+0x56>
 8013c18:	a327      	add	r3, pc, #156	; (adr r3, 8013cb8 <scalbn+0xd0>)
 8013c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1e:	f7ec fd1b 	bl	8000658 <__aeabi_dmul>
 8013c22:	e009      	b.n	8013c38 <scalbn+0x50>
 8013c24:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013c28:	428a      	cmp	r2, r1
 8013c2a:	d10c      	bne.n	8013c46 <scalbn+0x5e>
 8013c2c:	ee10 2a10 	vmov	r2, s0
 8013c30:	4620      	mov	r0, r4
 8013c32:	4629      	mov	r1, r5
 8013c34:	f7ec fb5a 	bl	80002ec <__adddf3>
 8013c38:	4604      	mov	r4, r0
 8013c3a:	460d      	mov	r5, r1
 8013c3c:	e01c      	b.n	8013c78 <scalbn+0x90>
 8013c3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013c42:	460b      	mov	r3, r1
 8013c44:	3a36      	subs	r2, #54	; 0x36
 8013c46:	4432      	add	r2, r6
 8013c48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013c4c:	428a      	cmp	r2, r1
 8013c4e:	dd0b      	ble.n	8013c68 <scalbn+0x80>
 8013c50:	ec45 4b11 	vmov	d1, r4, r5
 8013c54:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013cc0 <scalbn+0xd8>
 8013c58:	f000 f83c 	bl	8013cd4 <copysign>
 8013c5c:	a318      	add	r3, pc, #96	; (adr r3, 8013cc0 <scalbn+0xd8>)
 8013c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c62:	ec51 0b10 	vmov	r0, r1, d0
 8013c66:	e7da      	b.n	8013c1e <scalbn+0x36>
 8013c68:	2a00      	cmp	r2, #0
 8013c6a:	dd08      	ble.n	8013c7e <scalbn+0x96>
 8013c6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013c70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013c74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013c78:	ec45 4b10 	vmov	d0, r4, r5
 8013c7c:	bd70      	pop	{r4, r5, r6, pc}
 8013c7e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013c82:	da0d      	bge.n	8013ca0 <scalbn+0xb8>
 8013c84:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013c88:	429e      	cmp	r6, r3
 8013c8a:	ec45 4b11 	vmov	d1, r4, r5
 8013c8e:	dce1      	bgt.n	8013c54 <scalbn+0x6c>
 8013c90:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013cb8 <scalbn+0xd0>
 8013c94:	f000 f81e 	bl	8013cd4 <copysign>
 8013c98:	a307      	add	r3, pc, #28	; (adr r3, 8013cb8 <scalbn+0xd0>)
 8013c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c9e:	e7e0      	b.n	8013c62 <scalbn+0x7a>
 8013ca0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013ca4:	3236      	adds	r2, #54	; 0x36
 8013ca6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013caa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013cae:	4620      	mov	r0, r4
 8013cb0:	4629      	mov	r1, r5
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	4b06      	ldr	r3, [pc, #24]	; (8013cd0 <scalbn+0xe8>)
 8013cb6:	e7b2      	b.n	8013c1e <scalbn+0x36>
 8013cb8:	c2f8f359 	.word	0xc2f8f359
 8013cbc:	01a56e1f 	.word	0x01a56e1f
 8013cc0:	8800759c 	.word	0x8800759c
 8013cc4:	7e37e43c 	.word	0x7e37e43c
 8013cc8:	43500000 	.word	0x43500000
 8013ccc:	ffff3cb0 	.word	0xffff3cb0
 8013cd0:	3c900000 	.word	0x3c900000

08013cd4 <copysign>:
 8013cd4:	ec51 0b10 	vmov	r0, r1, d0
 8013cd8:	ee11 0a90 	vmov	r0, s3
 8013cdc:	ee10 2a10 	vmov	r2, s0
 8013ce0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013ce4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013ce8:	ea41 0300 	orr.w	r3, r1, r0
 8013cec:	ec43 2b10 	vmov	d0, r2, r3
 8013cf0:	4770      	bx	lr
	...

08013cf4 <_init>:
 8013cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cf6:	bf00      	nop
 8013cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cfa:	bc08      	pop	{r3}
 8013cfc:	469e      	mov	lr, r3
 8013cfe:	4770      	bx	lr

08013d00 <_fini>:
 8013d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d02:	bf00      	nop
 8013d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d06:	bc08      	pop	{r3}
 8013d08:	469e      	mov	lr, r3
 8013d0a:	4770      	bx	lr
